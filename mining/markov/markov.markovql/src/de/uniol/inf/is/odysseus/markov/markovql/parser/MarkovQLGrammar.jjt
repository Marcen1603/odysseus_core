options{  JDK_VERSION = "1.5";  IGNORE_CASE = true;  MULTI = true;  VISITOR = true;  NODE_PACKAGE = "de.uniol.inf.is.odysseus.markov.markovql.parser";  STATIC = false;}PARSER_BEGIN(MarkovQLParser)package de.uniol.inf.is.odysseus.markov.markovql.parser;import java.util.List;import de.uniol.inf.is.odysseus.planmanagement.query.IQuery;@SuppressWarnings("all")public class MarkovQLParser{ }PARSER_END(MarkovQLParser)SKIP :{  " "| "\t"| "\n"| "\r"| < "//" (~[ "\n", "\r" ])*    (      "\n"    | "\r"    | "\r\n"    ) >| < "/*" (~[ "*" ])* "*"    (      ~[ "/" ] (~[ "*" ])* "*"    )*    "/" >}TOKEN : /* CONSTANTS */{    < K_APPLY : "APPLY" >| < K_AS : "AS" >| < K_CQL : "CQL" >| < K_EMISSIONS : "EMISSIONS" >| < K_FOR : "FOR" >| < K_HIDDEN : "HIDDEN" >| < K_MARKOV : "MARKOV" >| < K_MODEL : "MODEL" >| < K_OBSERVATIONS : "OBSERVATIONS" >| < K_PQL : "PQL" >| < K_START_PROBABILITY : "START" >| < K_STATES : "STATES" >| < K_STREAM_SQL : "STREAMSQL" >| < K_TO : "TO" >| < K_TRANSITIONS : "TRANSITIONS" >}TOKEN : /* IDENTIFIERS */{  < CQLSTRING : "[" (~[ "[", "]" ])+ "]">| < IDENTIFIER :    < LETTER >    (      < LETTER >    | < DIGIT >    )* >| < #LETTER : [ "a"-"z", "A"-"Z" ] >| < #DIGIT : [ "0"-"9" ] >| < FLOAT : (< DIGIT >)+ ("." (< DIGIT >)+ )? > }  ASTQuery Query() :{}{  	( HiddenMarkovModel() [";"] )+  {    return jjtThis;  }}void HiddenMarkovModel() :{}{  < K_HIDDEN > <K_MARKOV > <K_MODEL > Identifier() "{" States() [","] Observations() [","] Transitions() [","] Emissions() [","] StartProbability()"}"    }void Identifier() :{	Token t;}{   t = < IDENTIFIER >  {    jjtThis.jjtSetValue(t.image);  }}
void QuotedIdentifier():{}{  "\'" Identifier() "\'"| "\"" Identifier() "\""}  void States():{}{ < K_STATES > "=" "(" StateList() ")"}void Observations():{}{	< K_OBSERVATIONS > "=" "(" StateList() ")"}void Transitions():{}{  < K_TRANSITIONS > "=" "(" ProbabilityTransitionList() ")"}void Emissions():{}{  < K_EMISSIONS > "=" "(" ProbabilityTransitionList() ")"}void StartProbability():{}{  < K_START_PROBABILITY > "=" "(" ProbabiltyList() ")"}void ProbabiltyList():{}{  Probability() ("," Probability() )*}void Probability():{  Token t;}{	QuotedIdentifier() ":" t= < FLOAT >	{		jjtThis.jjtSetValue(t.image);	}}void ProbabilityTransitionList():{}{  ProbabilityTransition() ("," ProbabilityTransition())*}void ProbabilityTransition():{}{  QuotedIdentifier() "->" Probability()}void StateList():{}{  QuotedIdentifier() ("," QuotedIdentifier())*}  