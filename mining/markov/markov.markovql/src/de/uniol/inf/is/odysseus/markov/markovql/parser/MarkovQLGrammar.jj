/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. MarkovQLGrammar.jj */
/*@egen*/options{  JDK_VERSION = "1.5";  IGNORE_CASE = true;                                                                                                     STATIC = false;}PARSER_BEGIN(MarkovQLParser)package de.uniol.inf.is.odysseus.markov.markovql.parser;import java.util.List;import de.uniol.inf.is.odysseus.core.planmanagement.query.ILogicalQuery;public class MarkovQLParser/*@bgen(jjtree)*/implements MarkovQLParserTreeConstants/*@egen*/{/*@bgen(jjtree)*/
  protected JJTMarkovQLParserState jjtree = new JJTMarkovQLParserState();

/*@egen*/ }PARSER_END(MarkovQLParser)SKIP :{  " "| "\t"| "\n"| "\r"| < "//" (~[ "\n", "\r" ])*    (      "\n"    | "\r"    | "\r\n"    ) >| < "/*" (~[ "*" ])* "*"    (      ~[ "/" ] (~[ "*" ])* "*"    )*    "/" >}TOKEN : /* CONSTANTS */{    < K_APPLY : "APPLY" >| < K_AS : "AS" >| < K_CQL : "CQL" >| < K_EMISSIONS : "EMISSIONS" >| < K_FOR : "FOR" >| < K_HIDDEN : "HIDDEN" >| < K_MARKOV : "MARKOV" >| < K_MODEL : "MODEL" >| < K_OBSERVATIONS : "OBSERVATIONS" >| < K_PQL : "PQL" >| < K_START_PROBABILITY : "START" >| < K_STATES : "STATES" >| < K_STREAM_SQL : "STREAMSQL" >| < K_TO : "TO" >| < K_TRANSITIONS : "TRANSITIONS" >}TOKEN : /* IDENTIFIERS */{  < CQLSTRING : "[" (~[ "[", "]" ])+ "]">| < IDENTIFIER :    < LETTER >    (      < LETTER >    | < DIGIT >    )* >| < #LETTER : [ "a"-"z", "A"-"Z" ] >| < #DIGIT : [ "0"-"9" ] >| < FLOAT : (< DIGIT >)+ ("." (< DIGIT >)+ )? > }  ASTQuery Query() :{/*@bgen(jjtree) Query */
  ASTQuery jjtn000 = new ASTQuery(JJTQUERY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Query */
        try {
/*@egen*/  	( HiddenMarkovModel() [";"] )+/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    return jjtn000;  }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/}void HiddenMarkovModel() :{/*@bgen(jjtree) HiddenMarkovModel */
  ASTHiddenMarkovModel jjtn000 = new ASTHiddenMarkovModel(JJTHIDDENMARKOVMODEL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) HiddenMarkovModel */
  try {
/*@egen*/  < K_HIDDEN > <K_MARKOV > <K_MODEL > Identifier() "{" States() [","] Observations() [","] Transitions() [","] Emissions() [","] StartProbability()"}"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/    }void Identifier() :{/*@bgen(jjtree) Identifier */
        ASTIdentifier jjtn000 = new ASTIdentifier(JJTIDENTIFIER);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/	Token t;}{/*@bgen(jjtree) Identifier */
   try {
/*@egen*/   t = < IDENTIFIER >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    jjtn000.jjtSetValue(t.image);  }/*@bgen(jjtree)*/
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/}
void QuotedIdentifier():{/*@bgen(jjtree) QuotedIdentifier */
  ASTQuotedIdentifier jjtn000 = new ASTQuotedIdentifier(JJTQUOTEDIDENTIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) QuotedIdentifier */
  try {
/*@egen*/  "\'" Identifier() "\'"| "\"" Identifier() "\""/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}  void States():{/*@bgen(jjtree) States */
  ASTStates jjtn000 = new ASTStates(JJTSTATES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) States */
 try {
/*@egen*/ < K_STATES > "=" "(" StateList() ")"/*@bgen(jjtree)*/
 } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     throw (RuntimeException)jjte000;
   }
   if (jjte000 instanceof ParseException) {
     throw (ParseException)jjte000;
   }
   throw (Error)jjte000;
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/}void Observations():{/*@bgen(jjtree) Observations */
  ASTObservations jjtn000 = new ASTObservations(JJTOBSERVATIONS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Observations */
        try {
/*@egen*/	< K_OBSERVATIONS > "=" "(" StateList() ")"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/}void Transitions():{/*@bgen(jjtree) Transitions */
  ASTTransitions jjtn000 = new ASTTransitions(JJTTRANSITIONS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Transitions */
  try {
/*@egen*/  < K_TRANSITIONS > "=" "(" ProbabilityTransitionList() ")"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void Emissions():{/*@bgen(jjtree) Emissions */
  ASTEmissions jjtn000 = new ASTEmissions(JJTEMISSIONS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Emissions */
  try {
/*@egen*/  < K_EMISSIONS > "=" "(" ProbabilityTransitionList() ")"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void StartProbability():{/*@bgen(jjtree) StartProbability */
  ASTStartProbability jjtn000 = new ASTStartProbability(JJTSTARTPROBABILITY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) StartProbability */
  try {
/*@egen*/  < K_START_PROBABILITY > "=" "(" ProbabiltyList() ")"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void ProbabiltyList():{/*@bgen(jjtree) ProbabiltyList */
  ASTProbabiltyList jjtn000 = new ASTProbabiltyList(JJTPROBABILTYLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) ProbabiltyList */
  try {
/*@egen*/  Probability() ("," Probability() )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void Probability():{/*@bgen(jjtree) Probability */
  ASTProbability jjtn000 = new ASTProbability(JJTPROBABILITY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Token t;}{/*@bgen(jjtree) Probability */
        try {
/*@egen*/	QuotedIdentifier() ":" t= < FLOAT >/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/	{		jjtn000.jjtSetValue(t.image);	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/}void ProbabilityTransitionList():{/*@bgen(jjtree) ProbabilityTransitionList */
  ASTProbabilityTransitionList jjtn000 = new ASTProbabilityTransitionList(JJTPROBABILITYTRANSITIONLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) ProbabilityTransitionList */
  try {
/*@egen*/  ProbabilityTransition() ("," ProbabilityTransition())*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void ProbabilityTransition():{/*@bgen(jjtree) ProbabilityTransition */
  ASTProbabilityTransition jjtn000 = new ASTProbabilityTransition(JJTPROBABILITYTRANSITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) ProbabilityTransition */
  try {
/*@egen*/  QuotedIdentifier() "->" Probability()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void StateList():{/*@bgen(jjtree) StateList */
  ASTStateList jjtn000 = new ASTStateList(JJTSTATELIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) StateList */
  try {
/*@egen*/  QuotedIdentifier() ("," QuotedIdentifier())*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}  