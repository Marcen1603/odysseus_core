/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. SMQLGrammar.jj */
/*@egen*/options{  IGNORE_CASE = true;
               
                 
                             
                                   
                                                               
  DEBUG_PARSER = false;
  //DEBUG_TOKEN_MANAGER = false;}PARSER_BEGIN(SMQLParser)package de.uniol.inf.is.odysseus.mining.smql.parser;

@ SuppressWarnings("all") public class SMQLParser/*@bgen(jjtree)*/implements SMQLParserTreeConstants/*@egen*/{/*@bgen(jjtree)*/
  protected static JJTSMQLParserState jjtree = new JJTSMQLParserState();

/*@egen*/}PARSER_END(SMQLParser)SKIP :{  " "| "\r"| "\n"| "\t"}TOKEN :{  < K_AND : "AND" > | < K_AVG : "AVG" >| < K_BY : "BY" >| < K_CLEAN : "CLEAN" >| < K_CORRECT : "CORRECT" >| < K_COUNT : "COUNT" >| < K_CREATE : "CREATE" >| < K_DETECT : "DETECT" >| < K_DISCARD : "DISCARD" >| < K_DISCOVERY : "DISCOVERY" >| < K_DOMAIN : "DOMAIN" >| < K_FUNCTION : "FUNCTION" >| < K_IN : "IN" >| < K_KNOWLEDGE : "KNOWLEDGE" >| < K_LAST : "LAST" >| < K_MAX : "MAX" >| < K_MIN : "MIN" >| < K_NOT : "NOT" >| < K_OF : "OF" >| < K_OUT : "OUT" >| < K_OUTLIER : "OUTLIER" >| < K_OR : "OR" >| < K_PROCESS : "PROCESS" >| < K_RANGE : "RANGE" >| < K_ROUND : "ROUND" >| < K_SIGMA : "SIGMA" >| < K_SUM : "SUM" >| < K_TIME : "TIME" >| < K_TO : "TO" >| < K_TUPLE : "TUPLE" >| < K_VALUE : "VALUE" >}TOKEN : /* Numeric Constants */{  //  <NUMBER:<FLOAT>  //  | <FLOAT>(["e", "E"](["-", "+"])?<FLOAT>)?>  //  | <#FLOAT:<INTEGER>  //  | <INTEGER>("."<INTEGER>)?  //  | "."<INTEGER>>  < FLOAT :    ("-")?    (      < INTEGER > "." < INTEGER >    | "." < INTEGER >    ) >| < INTEGER : (< DIGIT >)+ >| < #DIGIT : [ "0"-"9" ] >| < IPADDRESS : < DIGIT > (< DIGIT >)? (< DIGIT >)? "." < DIGIT > (< DIGIT >)? (< DIGIT >)? "." < DIGIT > (< DIGIT >)? (< DIGIT >)? "." < DIGIT > (< DIGIT >)? (< DIGIT >)? >}SPECIAL_TOKEN :{  < LINE_COMMENT : "--" (~[ "\r", "\n" ])* >| < MULTI_LINE_COMMENT :    "/*" (~[ "*" ])* "*"    (      "*"    |      (        ~[ "*", "/" ] (~[ "*" ])* "*"      )    )*    "/" >}TOKEN :{  < IDENTIFIER :    (< LETTER >)+    (      < DIGIT >    | < LETTER >    | < SPECIAL_CHARS >    )* >| < #LETTER : [ "a"-"z", "A"-"Z" ] >| < #SPECIAL_CHARS :    ":"  | "_"  | "."  | "*" >| < CHAR_LITERAL :    "'" (~[ "'" ])* "'"    (      "'" (~[ "'" ])* "'"    )* >| < SQL_STRING :    "[[" (~[ "[", "]" ])* "]]"    (      "[[" (~[ "[", "]" ])* "]]"    )* >| < QUOTED_IDENTIFIER : "\"" (~[ "\n", "\r", "\"" ])* "\"" >| < COMPARE_OPERATOR :    "="  | "<>"  | ">"  | "<"  | "<="  | ">=" >| < REGEXP :    "/" ("^")?    (      < LETTER >    | < DIGIT >    | "\\"    | "+"    | "."    | "*"    | "?"    | "$"    )+    "/" >| < JDBC_STRING :    "jdbc:"    (      (        < DIGIT >      | < LETTER >      | < SPECIAL_CHARS >      | "?"      | ";"      | "/"      | "="      )*    )* >}SimpleNode Start() :{/*@bgen(jjtree) Start */
  ASTStart jjtn000 = new ASTStart(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Start */
  try {
/*@egen*/  CreateKnowledgeDiscoveryProcess()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}String Identifier():{/*@bgen(jjtree) Identifier */
  ASTIdentifier jjtn000 = new ASTIdentifier(JJTIDENTIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Token t;}{/*@bgen(jjtree) Identifier */
  try {
/*@egen*/  t = < IDENTIFIER >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {        {jjtn000.jjtSetValue(getToken(0).image);}    return t.image;  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}Long Integer() :{/*@bgen(jjtree) Integer */
  ASTInteger jjtn000 = new ASTInteger(JJTINTEGER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Token t;}{/*@bgen(jjtree) Integer */
  try {
/*@egen*/  t = < INTEGER >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    Long value = Long.parseLong(t.image);    return value;  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}Float Float() :{/*@bgen(jjtree) Float */
  ASTFloat jjtn000 = new ASTFloat(JJTFLOAT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Token t;}{/*@bgen(jjtree) Float */
  try {
/*@egen*/  t = < FLOAT >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    Float value = Float.parseFloat(t.image);    return value;  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void Number():{/*@bgen(jjtree) Number */
  ASTNumber jjtn000 = new ASTNumber(JJTNUMBER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Number */
        try {
/*@egen*/	Integer()|Float()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/}void CreateKnowledgeDiscoveryProcess() :{/*@bgen(jjtree) CreateKnowledgeDiscoveryProcess */
  ASTCreateKnowledgeDiscoveryProcess jjtn000 = new ASTCreateKnowledgeDiscoveryProcess(JJTCREATEKNOWLEDGEDISCOVERYPROCESS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) CreateKnowledgeDiscoveryProcess */
        try {
/*@egen*/	< K_CREATE > <K_KNOWLEDGE > < K_DISCOVERY > <K_PROCESS > Identifier() "{" ProcessPhases() "}"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/	  }void ProcessPhases() :{/*@bgen(jjtree) ProcessPhases */
  ASTProcessPhases jjtn000 = new ASTProcessPhases(JJTPROCESSPHASES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) ProcessPhases */
        try {
/*@egen*/	(CleanPhase())*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/	  }
void CleanPhase() :{/*@bgen(jjtree) CleanPhase */
  ASTCleanPhase jjtn000 = new ASTCleanPhase(JJTCLEANPHASE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) CleanPhase */
        try {
/*@egen*/ 	< K_CLEAN > Identifier() "{" OutlierDetections() "}"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ }void OutlierDetections() :{/*@bgen(jjtree) OutlierDetections */
  ASTOutlierDetections jjtn000 = new ASTOutlierDetections(JJTOUTLIERDETECTIONS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) OutlierDetections */
        try {
/*@egen*/ 	(OutlierDetection())+/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ }void OutlierDetection():{/*@bgen(jjtree) OutlierDetection */
  ASTOutlierDetection jjtn000 = new ASTOutlierDetection(JJTOUTLIERDETECTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) OutlierDetection */
  try {
/*@egen*/  < K_DETECT > < K_OUTLIER > DetectionMethod() < K_IN > Identifier() < K_AND > CorrectionMethod()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void DetectionMethod():{/*@bgen(jjtree) DetectionMethod */
  ASTDetectionMethod jjtn000 = new ASTDetectionMethod(JJTDETECTIONMETHOD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) DetectionMethod */
        try {
/*@egen*/ 	(	   LOOKAHEAD(3)< K_OUT > < K_OF > <K_RANGE > Integer() (< K_TUPLE > | < K_TIME >)	| < K_VALUE > Integer()	| < K_SIGMA > Integer()	| < K_FUNCTION > Identifier()	|  LOOKAHEAD(3)< K_OUT > < K_OF > <K_DOMAIN > Number() < K_TO > Number()	)  (     ParameterList()  )?/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/}void ParameterList() :{/*@bgen(jjtree) ParameterList */
  ASTParameterList jjtn000 = new ASTParameterList(JJTPARAMETERLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) ParameterList */
        try {
/*@egen*/	"(" Parameter() ("," Parameter())* ")"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/}void Parameter() :{/*@bgen(jjtree) Parameter */
  ASTParameter jjtn000 = new ASTParameter(JJTPARAMETER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Parameter */
        try {
/*@egen*/	Identifier() ":=" ( Number() | Identifier() )/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/}void CorrectionMethod():{/*@bgen(jjtree) CorrectionMethod */
  ASTCorrectionMethod jjtn000 = new ASTCorrectionMethod(JJTCORRECTIONMETHOD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) CorrectionMethod */
  try {
/*@egen*/  CorrectionMethodDiscard() | CorrectionMethodFunction()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void CorrectionMethodDiscard():{/*@bgen(jjtree) CorrectionMethodDiscard */
  ASTCorrectionMethodDiscard jjtn000 = new ASTCorrectionMethodDiscard(JJTCORRECTIONMETHODDISCARD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) CorrectionMethodDiscard */
  try {
/*@egen*/  < K_DISCARD >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void CorrectionMethodFunction():{/*@bgen(jjtree) CorrectionMethodFunction */
  ASTCorrectionMethodFunction jjtn000 = new ASTCorrectionMethodFunction(JJTCORRECTIONMETHODFUNCTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) CorrectionMethodFunction */
  try {
/*@egen*/  < K_CORRECT > < K_BY >  "["	(	  < K_FUNCTION > Identifier()	| < K_VALUE > Number()	| < K_LAST > < K_VALUE >		)  "]"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/  }