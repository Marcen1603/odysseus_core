 /**
* JJTree file
*/options{  JDK_VERSION = "1.5";  NODE_PACKAGE = "de.uniol.inf.is.odysseus.mep.impl";  VISITOR = true;  MULTI = true;  STATIC = false;  DEBUG_PARSER = false;}PARSER_BEGIN(MEPImpl)package de.uniol.inf.is.odysseus.mep.impl;
@SuppressWarnings("all")public class MEPImpl{  public static void main(String args [])  {    System.out.println("Reading from standard input...");    System.out.print("Enter an expression like \"1+(2+3)*var;\" :");    MEPImpl mep = new MEPImpl(System.in);    try    {      SimpleNode n = mep.Expression();      n.dump("");      System.out.println("Thank you.");    }    catch (Exception e)    {      System.out.println("Oops.");      System.out.println(e.getMessage());    }  }}PARSER_END(MEPImpl)SKIP :{  " "| "\r"| "\t"| "\n"}TOKEN :{
< K_AND : "AND">
| < K_OR : "OR">| < INTEGER : (< DIGIT >)+ >| < FLOAT :    (      < INTEGER > "." < INTEGER >    | "." < INTEGER >    ) >| < BOOLEAN :    "false"  | "true" >| < #DIGIT : [ "0"-"9" ] >| < CHAR_LITERAL :    (      "'" (~[ "'" ])* "'"    (      "'" (~[ "'" ])* "'"    )*)
  |  ("\"" (~[ "\"" ])* "\""
    (
      "\"" (~[ "\"" ])* "\""
    )*)>| < IDENTIFIER :    (< LETTER > | < SPECIAL_CHARS >)    (      < DIGIT >    | < LETTER >    | < SPECIAL_CHARS >    )* >| < #LETTER : [ "a"-"z", "A"-"Z" ] >| < #SPECIAL_CHARS :    "_"  | "."  | ":"  | "$"  | "#" >| < RRND : ")" >| < LRND : "(" >}SimpleNode Expression() :{}{  OrExpression()  {    return jjtThis;  }}void UnaryExpression() #void :{}{  LOOKAHEAD(< IDENTIFIER > < LRND >)  Function()| Variable()| Constant()| Negation()| < LRND > OrExpression() < RRND >| UnaryMinus()
| Matrix()}void UnaryMinus() #void :{}{  "-" UnaryExpression()  {    jjtThis.setSymbol("UnaryMinus");  }  #Function(1)}void Negation() #void :{}{  "!" UnaryExpression()  {    jjtThis.setSymbol("!");  }  #Function(1)}void PowExpression() #void :{}{  UnaryExpression()  (    "^" UnaryExpression()    {      jjtThis.setSymbol("^");    }    #Function(2))*}void MultiplicativeExpression() #void :{  Token t;}{  PowExpression()  (    (      t = "*"    | t = "/"    | t = "%"    )    PowExpression()    {      jjtThis.setSymbol(t.image);    }    #Function(2))*}void AdditiveExpression() #void :{}{  MultiplicativeExpression()  (    "+" MultiplicativeExpression()    {      jjtThis.setSymbol("+");    }    #Function(2)| "-" MultiplicativeExpression()  {    jjtThis.setSymbol("-");  }  #Function(2))*}void ComparisonExpression() #void :{  Token t;}{  AdditiveExpression()  (    (      t = ">="    | t = "<="    | t = ">"    | t = "<"    )    AdditiveExpression()    {      jjtThis.setSymbol(t.image);    }    #Function(2))*}void EqualityComparison() #void :{Token t = null;}{  ComparisonExpression()  (   LOOKAHEAD(2)( t = "==" | t = "=" | t = "!=" | t = "<>") ComparisonExpression()    {      jjtThis.setSymbol(t.image);    }    #Function(2))*}void AndExpression() #void :{}{  EqualityComparison()  (    ("&&" | "AND") EqualityComparison()    {      jjtThis.setSymbol("&&");    }    #Function(2))*}void OrExpression() #void :{}{  AndExpression()  (    ("||" | "OR") AndExpression()    {      jjtThis.setSymbol("||");    }    #Function(2))*}void Constant() :{  Token t;}{  t = < CHAR_LITERAL >  {    jjtThis.setValue(t.image.substring(1, t.image.length() - 1));  }| t = < INTEGER >
  {
    jjtThis.setValue(Integer.parseInt(t.image));
  }
| t = < FLOAT >  {    jjtThis.setValue(Double.parseDouble(t.image));  }| t = < BOOLEAN >  {    jjtThis.setValue(Boolean.parseBoolean(t.image));  }}void Function() :{  Token t;}{  t = < IDENTIFIER >  {    jjtThis.setSymbol(t.image);  }  (< LRND > ArgumentList() < RRND >) | (< LRND > < RRND >)}void Variable() :{  Token t;}{  t = < IDENTIFIER >  {    jjtThis.setIdentifier(t.image);  }}void ArgumentList() #void :{}{  [    
    OrExpression()    (      "," OrExpression()    )*  ]}

void Matrix() :
{}
{
	"[" MatrixLine() (";" MatrixLine())* "]"
}
void MatrixLine() :
{}
{
	OrExpression() ("," OrExpression()) *
}