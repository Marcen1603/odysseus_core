/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. OMEP.jj */
/*@egen*/ /**
* JJTree file
*/
options
{
  JDK_VERSION = "1.5";
                                                     
                 
               
  STATIC = false;
  DEBUG_PARSER = false;
}

PARSER_BEGIN(MEPImpl)
package de.uniol.inf.is.odysseus.mep.impl;

@SuppressWarnings("all")
public class MEPImpl/*@bgen(jjtree)*/implements MEPImplTreeConstants/*@egen*/
{/*@bgen(jjtree)*/
  protected JJTMEPImplState jjtree = new JJTMEPImplState();

/*@egen*/
  public static void main(String args [])
  {
    System.out.println("Reading from standard input...");
    System.out.print("Enter an expression like \"1+(2+3)*var;\" :");
    MEPImpl mep = new MEPImpl(System.in);
    try
    {
      SimpleNode n = mep.Expression();
      n.dump("");
      System.out.println("Thank you.");
    }
    catch (Exception e)
    {
      System.out.println("Oops.");
      System.out.println(e.getMessage());
    }
  }
}

PARSER_END(MEPImpl)

SKIP :
{
  " "
| "\r"
| "\t"
| "\n"
}

TOKEN :
{
< K_AND : "AND">
| < K_OR : "OR">
| < DIGITS : (< DIGIT >)+ >
| < INTEGER : ("-")? <DIGITS> >
| < FLOAT :
    (
      < INTEGER > "." < DIGITS >
    | "." < DIGITS >
    ) >
| < BOOLEAN :
    "false"
  | "true" >
| < NULL :
    "null" >
| < #DIGIT : [ "0"-"9" ] >
| < CHAR_LITERAL :
    (
      "'" (~[ "'" ])* "'"
    (
      "'" (~[ "'" ])* "'"
    )*)
  |  ("\"" (~[ "\"" ])* "\""
    (
      "\"" (~[ "\"" ])* "\""
    )*)>
| < IDENTIFIER :
    (< LETTER > | < SPECIAL_CHARS >)
    (
      < DIGIT >
    | < LETTER >
    | < SPECIAL_CHARS >
    )* >
| < #LETTER : [ "a"-"z", "A"-"Z" ] >
| < #SPECIAL_CHARS :
    "_"
  | "."
  | ":"
  | "$"
  | "#" >
| < RRND : ")" >
| < LRND : "(" >
| < OPEN_ARRAY: "[">
| < CLOSE_ARRAY: "]">
}

SimpleNode Expression() :
{/*@bgen(jjtree) Expression */
  ASTExpression jjtn000 = new ASTExpression(JJTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Expression */
  try {
/*@egen*/
  OrExpression()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return jjtn000;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void UnaryExpression()       :
{}
{
  LOOKAHEAD(< IDENTIFIER > < LRND >)
  Function()
| LOOKAHEAD(< IDENTIFIER > < OPEN_ARRAY >)
  ArrayExpression()  
| Variable()
| Constant()
| Negation()
| < LRND > OrExpression() < RRND >
| UnaryMinus()
| Matrix()
}

void UnaryExpressionList()       :
{}
{
  [    
    UnaryExpression()
    (
      "," UnaryExpression()
    )*
  ]
}

void UnaryMinus()       :
{}
{
  "-" UnaryExpression()/*@bgen(jjtree) #Function( 1) */
  {
    ASTFunction jjtn001 = new ASTFunction(JJTFUNCTION);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*//*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn001,  1);
    jjtc001 = false;
  }
/*@egen*/
  {
    jjtn001.setSymbol("UnaryMinus");
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001,  1);
    }
  }
/*@egen*/
              
}

void Negation()       :
{
 Token t;
}
{
  ( t = "!" |
    t = "~" )
    UnaryExpression()/*@bgen(jjtree) #Function( 1) */
  {
    ASTFunction jjtn001 = new ASTFunction(JJTFUNCTION);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*//*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn001,  1);
    jjtc001 = false;
  }
/*@egen*/
  {
    jjtn001.setSymbol(t.image);
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001,  1);
    }
  }
/*@egen*/
              
}

void PowExpression()       :
{
 Token t;
}
{
  UnaryExpression()
  (
    (
      t = "^"
      | t = "<<"
      | t = ">>"
      | t = "|"
      | t = "&"
    )
    UnaryExpression()/*@bgen(jjtree) #Function( 2) */
    {
      ASTFunction jjtn001 = new ASTFunction(JJTFUNCTION);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
    }
    try {
/*@egen*//*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn001,  2);
      jjtc001 = false;
    }
/*@egen*/
    {
      jjtn001.setSymbol(t.image);
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  2);
      }
    }
/*@egen*/
                
)*
}

void MultiplicativeExpression()       :
{
  Token t;
}
{
  PowExpression()
  (
    (
      t = "*"
    | t = "/"
    | t = "%"
    )
    PowExpression()/*@bgen(jjtree) #Function( 2) */
    {
      ASTFunction jjtn001 = new ASTFunction(JJTFUNCTION);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
    }
    try {
/*@egen*//*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn001,  2);
      jjtc001 = false;
    }
/*@egen*/
    {
      jjtn001.setSymbol(t.image);
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  2);
      }
    }
/*@egen*/
                
)*
}

void AdditiveExpression()       :
{}
{
  MultiplicativeExpression()
  (
    "+" MultiplicativeExpression()/*@bgen(jjtree) #Function( 2) */
    {
      ASTFunction jjtn001 = new ASTFunction(JJTFUNCTION);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
    }
    try {
/*@egen*//*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn001,  2);
      jjtc001 = false;
    }
/*@egen*/
    {
      jjtn001.setSymbol("+");
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  2);
      }
    }
/*@egen*/
                
| "-" MultiplicativeExpression()/*@bgen(jjtree) #Function( 2) */
  {
    ASTFunction jjtn002 = new ASTFunction(JJTFUNCTION);
    boolean jjtc002 = true;
    jjtree.openNodeScope(jjtn002);
  }
  try {
/*@egen*//*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn002,  2);
    jjtc002 = false;
  }
/*@egen*/
  {
    jjtn002.setSymbol("-");
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc002) {
      jjtree.closeNodeScope(jjtn002,  2);
    }
  }
/*@egen*/
              
)*
}

void ComparisonExpression()       :
{
  Token t;
}
{
  AdditiveExpression()
  (
    (
      t = ">="
    | t = "<="
    | t = ">"
    | t = "<"
    )
    AdditiveExpression()/*@bgen(jjtree) #Function( 2) */
    {
      ASTFunction jjtn001 = new ASTFunction(JJTFUNCTION);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
    }
    try {
/*@egen*//*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn001,  2);
      jjtc001 = false;
    }
/*@egen*/
    {
      jjtn001.setSymbol(t.image);
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  2);
      }
    }
/*@egen*/
                
)*
}

void EqualityComparison()       :
{Token t = null;}
{
  ComparisonExpression()
  (
   LOOKAHEAD(2)( t = "==" | t = "=" | t = "!=" | t = "<>") ComparisonExpression()/*@bgen(jjtree) #Function( 2) */
    {
      ASTFunction jjtn001 = new ASTFunction(JJTFUNCTION);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
    }
    try {
/*@egen*//*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn001,  2);
      jjtc001 = false;
    }
/*@egen*/
    {
      jjtn001.setSymbol(t.image);
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  2);
      }
    }
/*@egen*/
                
)*
}

void AndExpression()       :
{}
{
  EqualityComparison()
  (
    ("&&" | "AND") EqualityComparison()/*@bgen(jjtree) #Function( 2) */
    {
      ASTFunction jjtn001 = new ASTFunction(JJTFUNCTION);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
    }
    try {
/*@egen*//*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn001,  2);
      jjtc001 = false;
    }
/*@egen*/
    {
      jjtn001.setSymbol("&&");
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  2);
      }
    }
/*@egen*/
                
)*
}

void OrExpression()       :
{}
{
  AndExpression()
  (
    ("||" | "OR") AndExpression()/*@bgen(jjtree) #Function( 2) */
    {
      ASTFunction jjtn001 = new ASTFunction(JJTFUNCTION);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
    }
    try {
/*@egen*//*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn001,  2);
      jjtc001 = false;
    }
/*@egen*/
    {
      jjtn001.setSymbol("||");
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  2);
      }
    }
/*@egen*/
                
)*
}

void ArrayExpression()      :
{}
{
  Variable()
  (
    < OPEN_ARRAY > UnaryExpressionList() < CLOSE_ARRAY >/*@bgen(jjtree) #Function( 2) */
    {
      ASTFunction jjtn001 = new ASTFunction(JJTFUNCTION);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
    }
    try {
/*@egen*//*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn001,  2);
      jjtc001 = false;
    }
/*@egen*/
    {
      jjtn001.setSymbol("[]");
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  2);
      }
    }
/*@egen*/
                
) 
}


void Constant() :
{/*@bgen(jjtree) Constant */
  ASTConstant jjtn000 = new ASTConstant(JJTCONSTANT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) Constant */
  try {
/*@egen*/
  t = < CHAR_LITERAL >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    jjtn000.setValue(t.image.substring(1, t.image.length() - 1));
  }
| t = < INTEGER >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    jjtn000.setValue(Long.parseLong(t.image)); 
  }
| t = < FLOAT >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    jjtn000.setValue(Double.parseDouble(t.image));
  }

| t = < BOOLEAN >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    jjtn000.setValue(Boolean.parseBoolean(t.image));
  }
| t = < NULL >/*@bgen(jjtree)*/
{
  jjtree.closeNodeScope(jjtn000, true);
  jjtc000 = false;
}
/*@egen*/
{
  	jjtn000.setValue(null);}/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Function() :
{/*@bgen(jjtree) Function */
  ASTFunction jjtn000 = new ASTFunction(JJTFUNCTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) Function */
  try {
/*@egen*/
  t = < IDENTIFIER >
  {
    jjtn000.setSymbol(t.image);
  }
  (< LRND > ArgumentList() < RRND >) | (< LRND > < RRND >)/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Variable() :
{/*@bgen(jjtree) Variable */
  ASTVariable jjtn000 = new ASTVariable(JJTVARIABLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) Variable */
  try {
/*@egen*/
  t = < IDENTIFIER >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    jjtn000.setIdentifier(t.image);
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void ArgumentList()       :
{}
{
  [    
    OrExpression()
    (
      "," OrExpression()
    )*
  ]
}

void Matrix() :
{/*@bgen(jjtree) Matrix */
  ASTMatrix jjtn000 = new ASTMatrix(JJTMATRIX);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Matrix */
        try {
/*@egen*/
	"[" MatrixLine() (";" MatrixLine())* "]"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void MatrixLine() :
{/*@bgen(jjtree) MatrixLine */
  ASTMatrixLine jjtn000 = new ASTMatrixLine(JJTMATRIXLINE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) MatrixLine */
        try {
/*@egen*/
	OrExpression() ("," OrExpression()) */*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}