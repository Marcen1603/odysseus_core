/* Generated By:JJTree: Do not edit this line. ASTOldWindow.java */

package de.uniol.inf.is.odysseus.parser.cql.parser;

import de.uniol.inf.is.odysseus.logicaloperator.base.WindowType;

public class ASTOldWindow extends ASTWindow {

	private Long slide;

	public ASTOldWindow(int id) {
		super(id);
	}

	public ASTOldWindow(NewSQLParser p, int id) {
		super(p, id);
	}

	/** Accept the visitor. * */
	public Object jjtAccept(NewSQLParserVisitor visitor, Object data) {
		return visitor.visit(this, data);
	}

	public Long getSlide() {
		return this.slide;
	}

	@Override
	public ASTPartition getPartition() {
		return (ASTPartition) (isPartitioned() ? jjtGetChild(0) : null);
	}



	@Override
	public void setAdvance(Long advance) {
		if (this.slide != null && advance != null) {
			throw new IllegalArgumentException(
					"cannot both of advance and slide parameters");
		}
		super.setAdvance(advance);
	}

	public void setSlide(Long slide) {
		if (slide != null && getAdvance() != null) {
			throw new IllegalArgumentException(
					"cannot both of advance and slide parameters");
		}
		this.slide = slide == 1 ? null : slide;
	}

	@Override
	public WindowType getType() {
		if (this.type == Type.TUPLE) {
			if (this.slide != null) {
				return WindowType.PERIODIC_TUPLE_WINDOW;
			}
			if (getAdvance() != null) {
				return WindowType.JUMPING_TUPLE_WINDOW;
			}
			return WindowType.SLIDING_TUPLE_WINDOW;
		} else {
			if (this.slide != null) {
				return WindowType.PERIODIC_TIME_WINDOW;
			}
			if (getAdvance() != null) {
				return WindowType.JUMPING_TIME_WINDOW;
			}
			return WindowType.SLIDING_TIME_WINDOW;
		}
	}

	@Override
	public boolean isPartitioned() {
		return jjtGetChild(0) instanceof ASTPartition;
	}

	@Override
	public boolean isUnbounded() {
		return getSize() == null;
	}
}
