/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. NewSQLParser.jj */
/*@egen*/options{  IGNORE_CASE = true;                                                                                                                                                              }PARSER_BEGIN(NewSQLParser)package de.uniol.inf.is.odysseus.parser.cql.parser;import java.util.ArrayList;import de.uniol.inf.is.odysseus.base.PointInTime;import de.uniol.inf.is.odysseus.intervalapproach.TimeInterval;import de.uniol.inf.is.odysseus.base.AggregateFunction;@ SuppressWarnings("all") public class NewSQLParser/*@bgen(jjtree)*/implements NewSQLParserTreeConstants/*@egen*/{/*@bgen(jjtree)*/
  protected static JJTNewSQLParserState jjtree = new JJTNewSQLParserState();

/*@egen*/}PARSER_END(NewSQLParser)SKIP :{  " "| "\r"| "\n"| "\t"}TOKEN :{  < K_ALL : "ALL" >| < K_ADVANCE : "ADVANCE" >| < K_ALWAYS : "ALWAYS" >| < K_AND : "AND" >| < K_ANY : "ANY" >| < K_AS : "AS" >| < K_AVG : "AVG" >| < K_BROKER : "BROKER" >| < K_BY : "BY" >| < K_CHANNEL : "CHANNEL" >| < K_COMMENT : "COMMENT" >| < K_COUNT : "COUNT" >| < K_CREATE : "CREATE" >| < K_CSV : "CSV" >| < K_DATE : "DATE" >| < K_DAY : "DAY" ("S")? >| < K_DB_EXECUTE : "DB_EXECUTE" >| < K_DB_SELECT : "DATABASE" >| < K_DB_SCHEMA : "SCHEMA" >| < K_DEFAULT : "DEFAULT" >| < K_DISTINCT : "DISTINCT" >| < K_DOUBLE : "DOUBLE" >| < K_EXISTS : "EXISTS" >| < K_FROM : "FROM" >| < K_GROUP : "GROUP" >| < K_HAVING : "HAVING" >| < K_HOUR : "HOUR" ("S")? >| < K_IN : "IN" >| < K_INFTY : "INFTY" >| < K_INTEGER : "INTEGER" >| < K_INTERSECTION : "INTERSECT" >| < K_INTO : "INTO" >| < K_IS : "IS" >| < K_JOIN : "JOIN" >| < K_LIKE : "LIKE" >| < K_LONG : "LONG" >| < K_MATRIX : "MATRIX" >| < K_MAX : "MAX" >| < K_MIN : "MIN" >| < K_MINUS : "MINUS" >| < K_MINUTE : "MINUTE" ("S")? >| < K_MV : "MV" >| < K_NATURAL : "NATURAL" >| < K_NOT : "NOT" >| < K_NULL : "NULL" >| < K_OF : "OF" >| < K_OFFSET : "OFFSET" >| < K_ON : "ON" >| < K_OR : "OR" >| < K_OSGI : "OSGI" >| < K_OUTPUT : "OUTPUT" >| < K_PARTITION : "PARTITION" >| < K_PRIORITY : "PRIORITY" >| < K_PROB : "PROB" >| < K_RANGE : "RANGE" >| < K_REAL : "REAL" >| < K_RELATION : "RELATION" >| < K_ROWS : "ROWS" >| < K_SECOND : "SECOND" ("S")? >| < K_SELECT : "SELECT" >| < K_SET : "SET" >| < K_SILAB : "SILAB" >| < K_SIZE : "SIZE" >| < K_SLIDE : "SLIDE" >| < K_SOCKET : "SOCKET" >| < K_STREAM : "STREAM" >| < K_STRING : "STRING" >| < K_SUM : "SUM" >| < K_TIME : "TIME" >| < K_TIMEOUT : "TIMEOUT" >| < K_TUPLE : "TUPLE" >| < K_UNBOUNDED : "UNBOUNDED" >| < K_UNION : "UNION" >| < K_VALID : "VALID" >| < K_WEEK : "WEEK" ("S")? >| < K_WHERE : "WHERE" >| < K_WITH : "WITH" >}TOKEN : /* spatial token */{  < S_DISTANCE : "SPATIAL_DISTANCE" >| < S_COMPARE :    "SPATIAL_INSIDE"  | "SPATIAL_INTERSECTS"  | "SPATIAL_MEETS"  | "SPATIAL_ON"  | "SPATIAL_OVERLAPS"  | "SPATIAL_IN"  | "SPATIAL_OUT" >| < S_POINT : "POINT3D" >| < S_SEGMENT : "SEGMENT3D" >| < S_LINE : "LINE3D" >| < S_FACET : "FACET3D" >| < S_SOLID : "SOLID3D" >}TOKEN : /* Numeric Constants */{  //  <NUMBER:<FLOAT>  //  | <FLOAT>(["e", "E"](["-", "+"])?<FLOAT>)?>  //  | <#FLOAT:<INTEGER>  //  | <INTEGER>("."<INTEGER>)?  //  | "."<INTEGER>>  < FLOAT :    ("-")?    (      < INTEGER > "." < INTEGER >    | "." < INTEGER >    ) >| < INTEGER : (< DIGIT >)+ >| < #DIGIT : [ "0"-"9" ] >| < IPADDRESS : < DIGIT > (< DIGIT >)? (< DIGIT >)? "." < DIGIT > (< DIGIT >)? (< DIGIT >)? "." < DIGIT > (< DIGIT >)? (< DIGIT >)? "." < DIGIT > (< DIGIT >)? (< DIGIT >)? >}SPECIAL_TOKEN :{  < LINE_COMMENT : "--" (~[ "\r", "\n" ])* >| < MULTI_LINE_COMMENT :    "/*" (~[ "*" ])* "*"    (      "*"    |      (        ~[ "*", "/" ] (~[ "*" ])* "*"      )    )*    "/" >}TOKEN :{  < IDENTIFIER :    (< LETTER >)+    (      < DIGIT >    | < LETTER >    | < SPECIAL_CHARS >    )* >| < #LETTER : [ "a"-"z", "A"-"Z" ] >| < #SPECIAL_CHARS :    ":"  | "_"  | "." >| < CHAR_LITERAL :    "'" (~[ "'" ])* "'"    (      "'" (~[ "'" ])* "'"    )* >| < SQL_STRING :    "[[" (~[ "[", "]" ])* "]]"    (      "[[" (~[ "[", "]" ])* "]]"    )* >| < QUOTED_IDENTIFIER : "\"" (~[ "\n", "\r", "\"" ])* "\"" >| < COMPARE_OPERATOR :    "="  | "<>"  | ">"  | "<"  | "<="  | ">=" >| < REGEXP :    "/" ("^")?    (      < LETTER >    | < DIGIT >    | "\\"    | "+"    | "."    | "*"    | "?"    | "$"    )+    "/" >}ASTStatement Statement() :{/*@bgen(jjtree) Statement */
  ASTStatement jjtn000 = new ASTStatement(JJTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Statement */
  try {
/*@egen*/  (    (      PriorizedStatement()    | LOOKAHEAD(2)CreateStatement()    | CreateBroker()    )    [ ";" ]  )+  < EOF >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void DBExecuteStatement() :{/*@bgen(jjtree) DBExecuteStatement */
  ASTDBExecuteStatement jjtn000 = new ASTDBExecuteStatement(JJTDBEXECUTESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) DBExecuteStatement */
  try {
/*@egen*/  < K_DB_EXECUTE > "("/*@bgen(jjtree) Database */
                       {
                         ASTDatabase jjtn001 = new ASTDatabase(JJTDATABASE);
                         boolean jjtc001 = true;
                         jjtree.openNodeScope(jjtn001);
                       }
                       try {
/*@egen*/ Identifier()/*@bgen(jjtree)*/
                       } catch (Throwable jjte001) {
                         if (jjtc001) {
                           jjtree.clearNodeScope(jjtn001);
                           jjtc001 = false;
                         } else {
                           jjtree.popNode();
                         }
                         if (jjte001 instanceof RuntimeException) {
                           throw (RuntimeException)jjte001;
                         }
                         if (jjte001 instanceof ParseException) {
                           throw (ParseException)jjte001;
                         }
                         throw (Error)jjte001;
                       } finally {
                         if (jjtc001) {
                           jjtree.closeNodeScope(jjtn001, true);
                         }
                       }
/*@egen*/           "," SQL() ")"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void DBSelectStatement() :{/*@bgen(jjtree) DBSelectStatement */
  ASTDBSelectStatement jjtn000 = new ASTDBSelectStatement(JJTDBSELECTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) DBSelectStatement */
  try {
/*@egen*/  < K_DB_SELECT > "("/*@bgen(jjtree) Database */
                      {
                        ASTDatabase jjtn001 = new ASTDatabase(JJTDATABASE);
                        boolean jjtc001 = true;
                        jjtree.openNodeScope(jjtn001);
                      }
                      try {
/*@egen*/ Identifier()/*@bgen(jjtree)*/
                      } catch (Throwable jjte001) {
                        if (jjtc001) {
                          jjtree.clearNodeScope(jjtn001);
                          jjtc001 = false;
                        } else {
                          jjtree.popNode();
                        }
                        if (jjte001 instanceof RuntimeException) {
                          throw (RuntimeException)jjte001;
                        }
                        if (jjte001 instanceof ParseException) {
                          throw (ParseException)jjte001;
                        }
                        throw (Error)jjte001;
                      } finally {
                        if (jjtc001) {
                          jjtree.closeNodeScope(jjtn001, true);
                        }
                      }
/*@egen*/           ","  (/*@bgen(jjtree) DatabaseOptions */
    {
      ASTDatabaseOptions jjtn002 = new ASTDatabaseOptions(JJTDATABASEOPTIONS);
      boolean jjtc002 = true;
      jjtree.openNodeScope(jjtn002);
    }
    try {
/*@egen*/    String()/*@bgen(jjtree)*/
    } catch (Throwable jjte002) {
      if (jjtc002) {
        jjtree.clearNodeScope(jjtn002);
        jjtc002 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte002 instanceof RuntimeException) {
        throw (RuntimeException)jjte002;
      }
      if (jjte002 instanceof ParseException) {
        throw (ParseException)jjte002;
      }
      throw (Error)jjte002;
    } finally {
      if (jjtc002) {
        jjtree.closeNodeScope(jjtn002, true);
      }
    }
/*@egen*/                  ","  )*  SQL() ")" < K_AS >/*@bgen(jjtree) AS */
                     {
                       ASTAS jjtn003 = new ASTAS(JJTAS);
                       boolean jjtc003 = true;
                       jjtree.openNodeScope(jjtn003);
                     }
                     try {
/*@egen*/ Identifier()/*@bgen(jjtree)*/
                     } catch (Throwable jjte003) {
                       if (jjtc003) {
                         jjtree.clearNodeScope(jjtn003);
                         jjtc003 = false;
                       } else {
                         jjtree.popNode();
                       }
                       if (jjte003 instanceof RuntimeException) {
                         throw (RuntimeException)jjte003;
                       }
                       if (jjte003 instanceof ParseException) {
                         throw (ParseException)jjte003;
                       }
                       throw (Error)jjte003;
                     } finally {
                       if (jjtc003) {
                         jjtree.closeNodeScope(jjtn003, true);
                       }
                     }
/*@egen*/    /*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void SQL() :{/*@bgen(jjtree) SQL */
  ASTSQL jjtn000 = new ASTSQL(JJTSQL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Token t;}{/*@bgen(jjtree) SQL */
  try {
/*@egen*/  t = < SQL_STRING >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    jjtn000.setValue(t.image);  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void PriorizedStatement() :{/*@bgen(jjtree) PriorizedStatement */
  ASTPriorizedStatement jjtn000 = new ASTPriorizedStatement(JJTPRIORIZEDSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) PriorizedStatement */
  try {
/*@egen*/  [ DBExecuteStatement() ] ComplexSelectStatement() [ Priority() ]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void ComplexSelectStatement() :{/*@bgen(jjtree) ComplexSelectStatement */
  ASTComplexSelectStatement jjtn000 = new ASTComplexSelectStatement(JJTCOMPLEXSELECTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) ComplexSelectStatement */
  try {
/*@egen*/  SelectStatement() [ SetOperator() ComplexSelectStatement() ]| "(" ComplexSelectStatement() ")"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void SelectStatement() :{/*@bgen(jjtree) SelectStatement */
  ASTSelectStatement jjtn000 = new ASTSelectStatement(JJTSELECTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) SelectStatement */
  try {
/*@egen*/  SelectClause() FromClause() [ WhereClause() ] [ GroupByClause() ] [ HavingClause() ] [ ElementPriorities() ]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void CreateStatement() :{/*@bgen(jjtree) CreateStatement */
  ASTCreateStatement jjtn000 = new ASTCreateStatement(JJTCREATESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) CreateStatement */
  try {
/*@egen*/  < K_CREATE > < K_STREAM > Identifier() "(" AttributeDefinitions() ")"  [    (      < K_FROM >    | < K_WITH >    )    "("    (      LOOKAHEAD(2)      TimedTuples()    | PriorizedStatement()    )    ")"  | Socket()  | Channel()  | CSVSource()  | Silab()  ]| OSGI()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void AttributeDefinitions() :{/*@bgen(jjtree) AttributeDefinitions */
  ASTAttributeDefinitions jjtn000 = new ASTAttributeDefinitions(JJTATTRIBUTEDEFINITIONS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) AttributeDefinitions */
  try {
/*@egen*/  AttributeDefinition()  (    "," AttributeDefinition()  )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void AttributeDefinition() :{/*@bgen(jjtree) AttributeDefinition */
  ASTAttributeDefinition jjtn000 = new ASTAttributeDefinition(JJTATTRIBUTEDEFINITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) AttributeDefinition */
  try {
/*@egen*/  Identifier() AttributeType()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void TimedTuples() :{/*@bgen(jjtree) TimedTuples */
  ASTTimedTuples jjtn000 = new ASTTimedTuples(JJTTIMEDTUPLES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) TimedTuples */
  try {
/*@egen*/  TimedTuple()  (    "," TimedTuple()  )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void TimedTuple() :{/*@bgen(jjtree) TimedTuple */
  ASTTimedTuple jjtn000 = new ASTTimedTuple(JJTTIMEDTUPLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) TimedTuple */
  try {
/*@egen*/  "(" TimeInterval() "," SimpleTuple() ")"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void TimeInterval() :{/*@bgen(jjtree) TimeInterval */
  ASTTimeInterval jjtn000 = new ASTTimeInterval(JJTTIMEINTERVAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Token t;  Token t2 = null;}{/*@bgen(jjtree) TimeInterval */
  try {
/*@egen*/  "[" t = < INTEGER >  [    ","    (      t2 = < INTEGER >    | "-"    )  ]  ")"/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    if (t2 == null)    {      jjtn000.setInterval(new TimeInterval(new PointInTime(Long.parseLong(t.image), 0), PointInTime.getInfinityTime()));    }    else    {      jjtn000.setInterval(new TimeInterval(new PointInTime(Long.parseLong(t.image), 0), new PointInTime(Long.parseLong(t2.image), 0)));    }  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void Socket() :{/*@bgen(jjtree) Socket */
  ASTSocket jjtn000 = new ASTSocket(JJTSOCKET);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Socket */
  try {
/*@egen*/  < K_SOCKET >  [    (      < K_TUPLE >      {        jjtn000.setTupleMode();      }    | < K_MV >      {        jjtn000.setMVMode();      }    )  ]  Host() ":" Integer()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void Silab() :{/*@bgen(jjtree) Silab */
  ASTSilab jjtn000 = new ASTSilab(JJTSILAB);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Silab */
  try {
/*@egen*/  < K_SILAB >  [    (      < K_TUPLE >      {        jjtn000.setTupleMode();      }    | < K_MV >      {        jjtn000.setMVMode();      }    )  ]  Host() ":" Integer()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void Channel() :{/*@bgen(jjtree) Channel */
  ASTChannel jjtn000 = new ASTChannel(JJTCHANNEL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Channel */
  try {
/*@egen*/  < K_CHANNEL > Host() ":" Integer()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void Host() :{/*@bgen(jjtree) Host */
  ASTHost jjtn000 = new ASTHost(JJTHOST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Token value;}{/*@bgen(jjtree) Host */
  try {
/*@egen*/  value = < IPADDRESS >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    jjtn000.setValue(value.image);  }| Identifier()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void CSVSource() :{/*@bgen(jjtree) CSVSource */
  ASTCSVSource jjtn000 = new ASTCSVSource(JJTCSVSOURCE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Token t;}{/*@bgen(jjtree) CSVSource */
  try {
/*@egen*/  < K_CSV > t = < CHAR_LITERAL >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    jjtn000.setURL(t.image.substring(1, t.image.length() - 1));  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void SimpleTuple() :{/*@bgen(jjtree) SimpleTuple */
  ASTSimpleTuple jjtn000 = new ASTSimpleTuple(JJTSIMPLETUPLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) SimpleTuple */
  try {
/*@egen*/  Value()  (    "," Value()  )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void Value()       :{}{  Number()| String()}void AttributeType() :{/*@bgen(jjtree) AttributeType */
  ASTAttributeType jjtn000 = new ASTAttributeType(JJTATTRIBUTETYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  ArrayList covList;  String format;}{/*@bgen(jjtree) AttributeType */
  try {
/*@egen*/  < K_INTEGER >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    jjtn000.setType("Integer");  }| < K_DOUBLE >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    jjtn000.setType("Double");  }| < K_LONG >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    jjtn000.setType("Long");  }| < K_STRING >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    jjtn000.setType("String");  }| < K_MV > covList = CovarianceRow()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    jjtn000.setType("MV");    jjtn000.setRow(covList);  }| < K_DATE > format = DateFormat()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    jjtn000.setType("Date");    jjtn000.setDateFormat(format);  }| < S_POINT >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    jjtn000.setType("Point3D");  }| < S_SEGMENT >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    jjtn000.setType("Segment3D");  }| < S_LINE >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    jjtn000.setType("Line3D");  }| < S_FACET >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    jjtn000.setType("Facet3D");  }| < S_SOLID >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    jjtn000.setType("Solid3D");  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}ArrayList CovarianceRow() :{/*@bgen(jjtree) CovarianceRow */
  ASTCovarianceRow jjtn000 = new ASTCovarianceRow(JJTCOVARIANCEROW);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  ArrayList covList = new ArrayList();  Token t;}{/*@bgen(jjtree) CovarianceRow */
  try {
/*@egen*/  (    t = < FLOAT >    {      covList.add(Double.parseDouble(t.image));    }  )+/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    return covList;  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}String DateFormat() :{/*@bgen(jjtree) DateFormat */
  ASTDateFormat jjtn000 = new ASTDateFormat(JJTDATEFORMAT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  String ret;  Token t;}{/*@bgen(jjtree) DateFormat */
  try {
/*@egen*/  // permitted: <Year Expression> <Time Expression>  // or <Year Expression>  // or <Time Expression>  t = < IDENTIFIER >  {    ret = t.image;  }  // evtl. noch ein Identifier f\u00ef\u00bf\u00bdr die Zeit  (t = < IDENTIFIER >  {    ret += " "+ t.image;  }  )?/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    return ret;  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void SetOperator() :{/*@bgen(jjtree) SetOperator */
  ASTSetOperator jjtn000 = new ASTSetOperator(JJTSETOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Token t;}{/*@bgen(jjtree) SetOperator */
  try {
/*@egen*/  (    t = < K_UNION >  | t = < K_INTERSECTION >  | t = < K_MINUS >  )/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    jjtn000.setOperation(ASTSetOperator.SetOperation.valueOf(t.image));  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void SelectClause() :{/*@bgen(jjtree) SelectClause */
  ASTSelectClause jjtn000 = new ASTSelectClause(JJTSELECTCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) SelectClause */
  try {
/*@egen*/  < K_SELECT >  (    SelectAll()  |    (      RenamedExpression()      (        "," RenamedExpression()      )*    )    (      (/*@bgen(jjtree) ProjectionMatrix */
        {
          ASTProjectionMatrix jjtn001 = new ASTProjectionMatrix(JJTPROJECTIONMATRIX);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        }
        try {
/*@egen*/        MatrixExpression()/*@bgen(jjtree)*/
        } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            throw (RuntimeException)jjte001;
          }
          if (jjte001 instanceof ParseException) {
            throw (ParseException)jjte001;
          }
          throw (Error)jjte001;
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
          }
        }
/*@egen*/                        )      (/*@bgen(jjtree) ProjectionVector */
        {
          ASTProjectionVector jjtn002 = new ASTProjectionVector(JJTPROJECTIONVECTOR);
          boolean jjtc002 = true;
          jjtree.openNodeScope(jjtn002);
        }
        try {
/*@egen*/        MatrixExpression()/*@bgen(jjtree)*/
        } catch (Throwable jjte002) {
          if (jjtc002) {
            jjtree.clearNodeScope(jjtn002);
            jjtc002 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte002 instanceof RuntimeException) {
            throw (RuntimeException)jjte002;
          }
          if (jjte002 instanceof ParseException) {
            throw (ParseException)jjte002;
          }
          throw (Error)jjte002;
        } finally {
          if (jjtc002) {
            jjtree.closeNodeScope(jjtn002, true);
          }
        }
/*@egen*/                        )?    )?  )/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void FromClause() :{/*@bgen(jjtree) FromClause */
  ASTFromClause jjtn000 = new ASTFromClause(JJTFROMCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) FromClause */
  try {
/*@egen*/  < K_FROM > Source()  (    "," Source()  )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void WhereClause() :{/*@bgen(jjtree) WhereClause */
  ASTWhereClause jjtn000 = new ASTWhereClause(JJTWHERECLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) WhereClause */
  try {
/*@egen*/  < K_WHERE > Predicate()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void GroupByClause() :{/*@bgen(jjtree) GroupByClause */
  ASTGroupByClause jjtn000 = new ASTGroupByClause(JJTGROUPBYCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) GroupByClause */
  try {
/*@egen*/  < K_GROUP > < K_BY > Identifier()  (    "," Identifier()  )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void HavingClause() :{/*@bgen(jjtree) HavingClause */
  ASTHavingClause jjtn000 = new ASTHavingClause(JJTHAVINGCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) HavingClause */
  try {
/*@egen*/  < K_HAVING > Predicate()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void SelectAll() :{/*@bgen(jjtree) SelectAll */
  ASTSelectAll jjtn000 = new ASTSelectAll(JJTSELECTALL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) SelectAll */
  try {
/*@egen*/  "*"/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void RenamedExpression() :{/*@bgen(jjtree) RenamedExpression */
  ASTRenamedExpression jjtn000 = new ASTRenamedExpression(JJTRENAMEDEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) RenamedExpression */
  try {
/*@egen*/  Expression() [ < K_AS >/*@bgen(jjtree) AS */
                          {
                            ASTAS jjtn001 = new ASTAS(JJTAS);
                            boolean jjtc001 = true;
                            jjtree.openNodeScope(jjtn001);
                          }
                          try {
/*@egen*/ Identifier()/*@bgen(jjtree)*/
                          } catch (Throwable jjte001) {
                            if (jjtc001) {
                              jjtree.clearNodeScope(jjtn001);
                              jjtc001 = false;
                            } else {
                              jjtree.popNode();
                            }
                            if (jjte001 instanceof RuntimeException) {
                              throw (RuntimeException)jjte001;
                            }
                            if (jjte001 instanceof ParseException) {
                              throw (ParseException)jjte001;
                            }
                            throw (Error)jjte001;
                          } finally {
                            if (jjtc001) {
                              jjtree.closeNodeScope(jjtn001, true);
                            }
                          }
/*@egen*/     ]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void MatrixExpression() :{/*@bgen(jjtree) MatrixExpression */
  ASTMatrixExpression jjtn000 = new ASTMatrixExpression(JJTMATRIXEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  ArrayList rows = new ArrayList();  ArrayList curRow;}{/*@bgen(jjtree) MatrixExpression */
  try {
/*@egen*/  < K_MATRIX > "[" curRow = CovarianceRow()  {    rows.add(curRow);  }  (    ";" curRow = CovarianceRow()    {      rows.add(curRow);    }  )*  "]"/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    jjtn000.setMatrix(rows);  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void Predicate() :{/*@bgen(jjtree) Predicate */
  ASTPredicate jjtn000 = new ASTPredicate(JJTPREDICATE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Predicate */
  try {
/*@egen*/  LOOKAHEAD(OrPredicate())  OrPredicate()| LOOKAHEAD(AndPredicate())  AndPredicate()| NotPredicate()| SimplePredicate()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void SimplePredicate() :{/*@bgen(jjtree) SimplePredicate */
  ASTSimplePredicate jjtn000 = new ASTSimplePredicate(JJTSIMPLEPREDICATE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) SimplePredicate */
  try {
/*@egen*/  LOOKAHEAD("(" Predicate())  "(" Predicate() ")"| LOOKAHEAD(QuantificationPredicate())  QuantificationPredicate()| LOOKAHEAD(BasicPredicate())  BasicPredicate()| LOOKAHEAD(SpatialPredicate())  SpatialPredicate()| ProbabilityPredicate()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void BasicPredicate() :{/*@bgen(jjtree) BasicPredicate */
  ASTBasicPredicate jjtn000 = new ASTBasicPredicate(JJTBASICPREDICATE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) BasicPredicate */
  try {
/*@egen*/  Expression() CompareOperator() Expression()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void SpatialPredicate() :{/*@bgen(jjtree) SpatialPredicate */
  ASTSpatialPredicate jjtn000 = new ASTSpatialPredicate(JJTSPATIALPREDICATE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) SpatialPredicate */
  try {
/*@egen*/  Identifier() SpatialCompareOperator() Identifier()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void ProbabilityPredicate() :{/*@bgen(jjtree) ProbabilityPredicate */
  ASTProbabilityPredicate jjtn000 = new ASTProbabilityPredicate(JJTPROBABILITYPREDICATE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  ArrayList xLow = new ArrayList();  ArrayList xUp = new ArrayList();  Token intervalStart;  Token intervalEnd;  Token prob;  Token compOp;}{/*@bgen(jjtree) ProbabilityPredicate */
  try {
/*@egen*/  /* Expression of the form PROB((H*source1+b) - (A*source1+c), [x,y],....,[v,w], prob)*/  < K_PROB > "("  (    (      "(" MatrixExpression() "*" Identifier() "+" MatrixExpression() ")"      (        "-"        {          jjtn000.setCovOperandType(ASTProbabilityPredicate.OperandTypes.MINUS);        }      | "+"        {          jjtn000.setCovOperandType(ASTProbabilityPredicate.OperandTypes.PLUS);        }      )      "(" MatrixExpression() "*" Identifier() "+" MatrixExpression() ")"      {        jjtn000.setJoinPredicate(true);      }    )  |    (      MatrixExpression() "*" Identifier() "+" MatrixExpression()    )    {      jjtn000.setJoinPredicate(false);    }  )  "," "["  (    intervalStart = < FLOAT >    {      xLow.add(Double.parseDouble(intervalStart.image));    }  | intervalStart = "-" < K_INFTY >    {      xLow.add(Double.MIN_VALUE);    }  )  ","  (    intervalEnd = < FLOAT >    {      xUp.add(Double.parseDouble(intervalEnd.image));    }  | intervalEnd = < K_INFTY >    {      xUp.add(Double.MAX_VALUE);    }  )  "]"  (    "," "["    (      intervalStart = < FLOAT >      {        xLow.add(Double.parseDouble(intervalStart.image));      }    | intervalStart = "-" < K_INFTY >      {        xLow.add(Double.MIN_VALUE);      }    )    ","    (      intervalEnd = < FLOAT >      {        xUp.add(Double.parseDouble(intervalEnd.image));      }    | intervalEnd = < K_INFTY >      {        xUp.add(Double.MAX_VALUE);      }    )    "]"  )*  ";" compOp = < COMPARE_OPERATOR > prob = < FLOAT > ")"/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    jjtn000.setXLow(xLow);    jjtn000.setXUp(xUp);    jjtn000.setProb(Double.parseDouble(prob.image));    jjtn000.setCompareOperator(compOp.image);  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void Priority() :{/*@bgen(jjtree) Priority */
  ASTPriority jjtn000 = new ASTPriority(JJTPRIORITY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Token t;}{/*@bgen(jjtree) Priority */
  try {
/*@egen*/  < K_PRIORITY > t = < INTEGER >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    jjtn000.setPriority(Integer.parseInt(t.image));  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void OrPredicate() :{/*@bgen(jjtree) OrPredicate */
  ASTOrPredicate jjtn000 = new ASTOrPredicate(JJTORPREDICATE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) OrPredicate */
  try {
/*@egen*/  SimplePredicate() < K_OR > Predicate()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void AndPredicate() :{/*@bgen(jjtree) AndPredicate */
  ASTAndPredicate jjtn000 = new ASTAndPredicate(JJTANDPREDICATE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) AndPredicate */
  try {
/*@egen*/  SimplePredicate() < K_AND > Predicate()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void NotPredicate() :{/*@bgen(jjtree) NotPredicate */
  ASTNotPredicate jjtn000 = new ASTNotPredicate(JJTNOTPREDICATE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) NotPredicate */
  try {
/*@egen*/  < K_NOT > Predicate()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void QuantificationPredicate() :{/*@bgen(jjtree) QuantificationPredicate */
  ASTQuantificationPredicate jjtn000 = new ASTQuantificationPredicate(JJTQUANTIFICATIONPREDICATE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) QuantificationPredicate */
  try {
/*@egen*/  Exists()| LOOKAHEAD(AnyPredicate())  AnyPredicate()| LOOKAHEAD(AllPredicate())  AllPredicate()| InPredicate()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void AnyPredicate() :{/*@bgen(jjtree) AnyPredicate */
  ASTAnyPredicate jjtn000 = new ASTAnyPredicate(JJTANYPREDICATE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) AnyPredicate */
  try {
/*@egen*/  Tuple() CompareOperator() < K_ANY >  (    LOOKAHEAD(TupleSet())    TupleSet()  | "(" ComplexSelectStatement() ")"  )/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void AllPredicate() :{/*@bgen(jjtree) AllPredicate */
  ASTAllPredicate jjtn000 = new ASTAllPredicate(JJTALLPREDICATE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) AllPredicate */
  try {
/*@egen*/  Tuple() CompareOperator() < K_ALL >  (    LOOKAHEAD(TupleSet())    TupleSet()  | "(" ComplexSelectStatement() ")"  )/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void InPredicate() :{/*@bgen(jjtree) InPredicate */
  ASTInPredicate jjtn000 = new ASTInPredicate(JJTINPREDICATE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) InPredicate */
  try {
/*@egen*/  Tuple() < K_IN >  (    LOOKAHEAD(TupleSet())    TupleSet()  | "(" ComplexSelectStatement() ")"  )/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void Exists() :{/*@bgen(jjtree) Exists */
  ASTExists jjtn000 = new ASTExists(JJTEXISTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Exists */
  try {
/*@egen*/  < K_EXISTS > "(" ComplexSelectStatement() ")"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void ElementPriorities() :{/*@bgen(jjtree) ElementPriorities */
  ASTElementPriorities jjtn000 = new ASTElementPriorities(JJTELEMENTPRIORITIES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) ElementPriorities */
  try {
/*@egen*/  < K_SET > < K_PRIORITY > ElementPriority()  (    LOOKAHEAD("," ElementPriority())    "," ElementPriority()  )*  [ "," DefaultPriority() ]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void ElementPriority() :{/*@bgen(jjtree) ElementPriority */
  ASTElementPriority jjtn000 = new ASTElementPriority(JJTELEMENTPRIORITY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) ElementPriority */
  try {
/*@egen*/  Integer() < K_WHERE > Predicate()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void DefaultPriority() :{/*@bgen(jjtree) DefaultPriority */
  ASTDefaultPriority jjtn000 = new ASTDefaultPriority(JJTDEFAULTPRIORITY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) DefaultPriority */
  try {
/*@egen*/  Integer() < K_DEFAULT >/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void Tuple() :{/*@bgen(jjtree) Tuple */
  ASTTuple jjtn000 = new ASTTuple(JJTTUPLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Tuple */
  try {
/*@egen*/  Value()| Identifier()| "["  (    Value()  | Identifier()  )  (    ","    (      Value()    | Identifier()    )  )*  "]"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}Long Time()       :{  Long value;}{  value = Integer()  [    < K_SECOND >    {      value *= 1000;    }  | < K_MINUTE >    {      value *= (60* 1000);    }  | < K_HOUR >    {      value *= (60* 60* 1000);    }  | < K_DAY >    {      value *= (24* 60* 60* 1000);    }  | < K_WEEK >    {      value *= (7* 24* 60* 60* 1000);    }  ]  {    return value;  }}void TupleSet() :{/*@bgen(jjtree) TupleSet */
  ASTTupleSet jjtn000 = new ASTTupleSet(JJTTUPLESET);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) TupleSet */
  try {
/*@egen*/  "(" Tuple()  (    "," Tuple()  )*  ")"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void QuantificationOperator() :{/*@bgen(jjtree) QuantificationOperator */
  ASTQuantificationOperator jjtn000 = new ASTQuantificationOperator(JJTQUANTIFICATIONOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) QuantificationOperator */
  try {
/*@egen*/  < K_IN >| < K_ALL >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void Expression() :{/*@bgen(jjtree) Expression */
  ASTExpression jjtn000 = new ASTExpression(JJTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  String tOp;}{/*@bgen(jjtree) Expression */
  try {
/*@egen*/  LOOKAHEAD(SimpleToken() MathOperator())  SimpleToken() tOp = MathOperator()  {    jjtn000.setOperator(tOp);  }  Expression()| SimpleToken()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void SimpleToken() :{/*@bgen(jjtree) SimpleToken */
  ASTSimpleToken jjtn000 = new ASTSimpleToken(JJTSIMPLETOKEN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) SimpleToken */
  try {
/*@egen*/  Number()| String()| LOOKAHEAD(AggregateExpression())  AggregateExpression()| LOOKAHEAD(FunctionExpression())  FunctionExpression()| "(" Expression() ")"|  (    "-"    {      jjtn000.setMinus(true);    }  )?  Identifier()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/  //TODO DISTINCE Expression}void FunctionExpression() :{/*@bgen(jjtree) FunctionExpression */
  ASTFunctionExpression jjtn000 = new ASTFunctionExpression(JJTFUNCTIONEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) FunctionExpression */
  try {
/*@egen*//*@bgen(jjtree) FunctionName */
  {
    ASTFunctionName jjtn001 = new ASTFunctionName(JJTFUNCTIONNAME);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/  Identifier()/*@bgen(jjtree)*/
  } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      throw (RuntimeException)jjte001;
    }
    if (jjte001 instanceof ParseException) {
      throw (ParseException)jjte001;
    }
    throw (Error)jjte001;
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
  }
/*@egen*/               "("  [    (      LOOKAHEAD(Predicate())      Predicate()    | Expression()    )    (      ","      (        LOOKAHEAD(Predicate())        Predicate()      | Expression()      )    )*  ]  ")"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void AggregateExpression() :{/*@bgen(jjtree) AggregateExpression */
  ASTAggregateExpression jjtn000 = new ASTAggregateExpression(JJTAGGREGATEEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) AggregateExpression */
  try {
/*@egen*/  AggregateFunction() "(" Identifier() ")"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void AggregateFunction() :{/*@bgen(jjtree) AggregateFunction */
  ASTAggregateFunction jjtn000 = new ASTAggregateFunction(JJTAGGREGATEFUNCTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Token t;}{/*@bgen(jjtree) AggregateFunction */
  try {
/*@egen*/  (    t = < K_AVG >  | t = < K_COUNT >  | t = < K_MAX >  | t = < K_MIN >  | t = < K_SUM >  )/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    jjtn000.setFunction(AggregateFunction.valueOf(AggregateFunction.class, t.image.toUpperCase()));  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}String MathOperator()       :{}{  "*"  {    return "*";  }| "+"  {    return "+";  }| "-"  {    return "-";  }| "/"  {    return "/";  }| "^"  {    return "^";  }}void DistinctExpression() :{/*@bgen(jjtree) DistinctExpression */
  ASTDistinctExpression jjtn000 = new ASTDistinctExpression(JJTDISTINCTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) DistinctExpression */
  try {
/*@egen*/  < K_DISTINCT > "(" Identifier() ")"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void Source()       :{}{  SimpleSource()| Subselect()| DBSelectStatement()| BrokerSource()}void SimpleSource() :{/*@bgen(jjtree) SimpleSource */
  ASTSimpleSource jjtn000 = new ASTSimpleSource(JJTSIMPLESOURCE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) SimpleSource */
  try {
/*@egen*/  Identifier() [ Window() ] [ < K_AS >/*@bgen(jjtree) AS */
                                       {
                                         ASTAS jjtn001 = new ASTAS(JJTAS);
                                         boolean jjtc001 = true;
                                         jjtree.openNodeScope(jjtn001);
                                       }
                                       try {
/*@egen*/ Identifier()/*@bgen(jjtree)*/
                                       } catch (Throwable jjte001) {
                                         if (jjtc001) {
                                           jjtree.clearNodeScope(jjtn001);
                                           jjtc001 = false;
                                         } else {
                                           jjtree.popNode();
                                         }
                                         if (jjte001 instanceof RuntimeException) {
                                           throw (RuntimeException)jjte001;
                                         }
                                         if (jjte001 instanceof ParseException) {
                                           throw (ParseException)jjte001;
                                         }
                                         throw (Error)jjte001;
                                       } finally {
                                         if (jjtc001) {
                                           jjtree.closeNodeScope(jjtn001, true);
                                         }
                                       }
/*@egen*/     ]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void Subselect() :{/*@bgen(jjtree) Subselect */
  ASTSubselect jjtn000 = new ASTSubselect(JJTSUBSELECT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Subselect */
  try {
/*@egen*/  "(" ComplexSelectStatement() ")" [ Window() ] < K_AS >/*@bgen(jjtree) AS */
                                                         {
                                                           ASTAS jjtn001 = new ASTAS(JJTAS);
                                                           boolean jjtc001 = true;
                                                           jjtree.openNodeScope(jjtn001);
                                                         }
                                                         try {
/*@egen*/ Identifier()/*@bgen(jjtree)*/
                                                         } catch (Throwable jjte001) {
                                                           if (jjtc001) {
                                                             jjtree.clearNodeScope(jjtn001);
                                                             jjtc001 = false;
                                                           } else {
                                                             jjtree.popNode();
                                                           }
                                                           if (jjte001 instanceof RuntimeException) {
                                                             throw (RuntimeException)jjte001;
                                                           }
                                                           if (jjte001 instanceof ParseException) {
                                                             throw (ParseException)jjte001;
                                                           }
                                                           throw (Error)jjte001;
                                                         } finally {
                                                           if (jjtc001) {
                                                             jjtree.closeNodeScope(jjtn001, true);
                                                           }
                                                         }
/*@egen*/    /*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void Window()       :{}{  OldWindow()| "[" StreamSQLWindow() "]"}void OldWindow() :{/*@bgen(jjtree) OldWindow */
  ASTOldWindow jjtn000 = new ASTOldWindow(JJTOLDWINDOW);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Long value;}{/*@bgen(jjtree) OldWindow */
  try {
/*@egen*/  [ < K_PARTITION > < K_BY > Partition() ]  (    < K_ROWS > value = Integer()/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/    {      jjtn000.setType(ASTOldWindow.Type.TUPLE);      jjtn000.setSize(value);    }  | < K_RANGE > value = Time()    {      jjtn000.setSize(value);      jjtn000.setType(ASTOldWindow.Type.TIME);    }    [      value = Advance()      {        jjtn000.setAdvance(value);      }    | value = Slide()      {        jjtn000.setSlide(value);      }    ]  | < K_UNBOUNDED >  )/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void StreamSQLWindow() :{/*@bgen(jjtree) StreamSQLWindow */
  ASTStreamSQLWindow jjtn000 = new ASTStreamSQLWindow(JJTSTREAMSQLWINDOW);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Long size;  Long advance;  Long value;}{/*@bgen(jjtree) StreamSQLWindow */
  try {
/*@egen*/  < K_SIZE > size = Time() < K_ADVANCE > advance = Time()  {    jjtn000.setType(ASTOldWindow.Type.TIME);    jjtn000.setSize(size);    jjtn000.setAdvance(advance);  }  (    < K_TIME >  | < K_TUPLE >    {      jjtn000.setType(ASTOldWindow.Type.TUPLE);    }  | < K_ON > Identifier()    {      jjtn000.setType(ASTOldWindow.Type.ON);    }  )  [    value = Slide()    {      jjtn000.setSlide(value);    }  ]  [ < K_PARTITION > < K_BY > Partition() ] [ < K_VALID > < K_ALWAYS > ]  [    < K_OFFSET > value = Integer()    {      jjtn000.setOffset(value);    }  ]  [    < K_TIMEOUT > value = Integer()    {      jjtn000.setOffset(value);    }  ]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void Partition() :{/*@bgen(jjtree) Partition */
  ASTPartition jjtn000 = new ASTPartition(JJTPARTITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Partition */
  try {
/*@egen*/  Identifier()  (    "," Identifier()  )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}Long Advance() :{/*@bgen(jjtree) Advance */
  ASTAdvance jjtn000 = new ASTAdvance(JJTADVANCE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Long value;}{/*@bgen(jjtree) Advance */
  try {
/*@egen*/  < K_ADVANCE > value = Time()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    return value;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}Long Slide() :{/*@bgen(jjtree) Slide */
  ASTSlide jjtn000 = new ASTSlide(JJTSLIDE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Long value;}{/*@bgen(jjtree) Slide */
  try {
/*@egen*/  < K_SLIDE > value = Time()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    return value;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void Identifier() :{/*@bgen(jjtree) Identifier */
  ASTIdentifier jjtn000 = new ASTIdentifier(JJTIDENTIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Token t;}{/*@bgen(jjtree) Identifier */
  try {
/*@egen*/  t = < IDENTIFIER >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    jjtn000.setName(t.image);  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}Long Integer() :{/*@bgen(jjtree) Integer */
  ASTInteger jjtn000 = new ASTInteger(JJTINTEGER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Token t;}{/*@bgen(jjtree) Integer */
  try {
/*@egen*/  t = < INTEGER >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    jjtn000.setValue(t.image);    return jjtn000.getValue();  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void Number() :{/*@bgen(jjtree) Number */
  ASTNumber jjtn000 = new ASTNumber(JJTNUMBER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Token t;}{/*@bgen(jjtree) Number */
  try {
/*@egen*/  (    t = < FLOAT >  | t = < INTEGER >  )/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    jjtn000.setValue(t.image);  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void String() :{/*@bgen(jjtree) String */
  ASTString jjtn000 = new ASTString(JJTSTRING);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Token t;}{/*@bgen(jjtree) String */
  try {
/*@egen*/  t = < CHAR_LITERAL >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    jjtn000.setValue(t.image);  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void CompareOperator() :{/*@bgen(jjtree) CompareOperator */
  ASTCompareOperator jjtn000 = new ASTCompareOperator(JJTCOMPAREOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Token t;}{/*@bgen(jjtree) CompareOperator */
  try {
/*@egen*/  t = < COMPARE_OPERATOR >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    jjtn000.setOperator(t.image);  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void SpatialCompareOperator() :{/*@bgen(jjtree) SpatialCompareOperator */
  ASTSpatialCompareOperator jjtn000 = new ASTSpatialCompareOperator(JJTSPATIALCOMPAREOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Token t;}{/*@bgen(jjtree) SpatialCompareOperator */
  try {
/*@egen*/  t = < S_COMPARE >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    jjtn000.setOperator(t.image);  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void OSGI() :{/*@bgen(jjtree) OSGI */
  ASTOSGI jjtn000 = new ASTOSGI(JJTOSGI);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Token t;}{/*@bgen(jjtree) OSGI */
  try {
/*@egen*/  < K_OSGI > t = < REGEXP >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    jjtn000.setRegexp(t.image);  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void CreateBroker():{/*@bgen(jjtree) CreateBroker */
  ASTCreateBroker jjtn000 = new ASTCreateBroker(JJTCREATEBROKER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) CreateBroker */
  try {
/*@egen*/  < K_CREATE ><K_BROKER > Identifier()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ }void BrokerSource() : {/*@bgen(jjtree) BrokerSource */
  ASTBrokerSource jjtn000 = new ASTBrokerSource(JJTBROKERSOURCE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) BrokerSource */
        try {
/*@egen*/	< K_BROKER > Identifier() < K_AS > "(" ComplexSelectStatement() ")"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/	  }