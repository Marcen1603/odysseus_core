/* Generated By:JJTree&JavaCC: Do not edit this line. NewSQLParser.java */
package de.uniol.inf.is.odysseus.parser.cql.parser;
import java.util.ArrayList;
import de.uniol.inf.is.odysseus.base.PointInTime;
import de.uniol.inf.is.odysseus.intervalapproach.TimeInterval;
import de.uniol.inf.is.odysseus.base.AggregateFunction;
@ SuppressWarnings("all") public class NewSQLParser/*@bgen(jjtree)*/implements NewSQLParserTreeConstants, NewSQLParserConstants {/*@bgen(jjtree)*/
  protected static JJTNewSQLParserState jjtree = new JJTNewSQLParserState();

  static final public ASTStatement Statement() throws ParseException {
 /*@bgen(jjtree) Statement */
  ASTStatement jjtn000 = new ASTStatement(JJTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_1:
      while (true) {
        if (jj_2_1(2147483647)) {
          PriorizedStatement();
        } else if (jj_2_2(2)) {
          CreateStatement();
        } else if (jj_2_3(2)) {
          CreateViewStatement();
        } else if (jj_2_4(2)) {
          CreateSensor();
        } else if (jj_2_5(2)) {
          CreateBroker();
        } else if (jj_2_6(2147483647)) {
          BrokerSelectInto();
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 115:
          jj_consume_token(115);
          break;
        default:
          jj_la1[0] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_CREATE:
        case K_DB_EXECUTE:
        case K_OSGI:
        case K_SELECT:
        case 116:
          ;
          break;
        default:
          jj_la1[1] = jj_gen;
          break label_1;
        }
      }
      jj_consume_token(0);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  static final public void DBExecuteStatement() throws ParseException {
 /*@bgen(jjtree) DBExecuteStatement */
  ASTDBExecuteStatement jjtn000 = new ASTDBExecuteStatement(JJTDBEXECUTESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_DB_EXECUTE);
      jj_consume_token(116);
                         ASTDatabase jjtn001 = new ASTDatabase(JJTDATABASE);
                         boolean jjtc001 = true;
                         jjtree.openNodeScope(jjtn001);
      try {
        Identifier();
      } catch (Throwable jjte001) {
                         if (jjtc001) {
                           jjtree.clearNodeScope(jjtn001);
                           jjtc001 = false;
                         } else {
                           jjtree.popNode();
                         }
                         if (jjte001 instanceof RuntimeException) {
                           {if (true) throw (RuntimeException)jjte001;}
                         }
                         if (jjte001 instanceof ParseException) {
                           {if (true) throw (ParseException)jjte001;}
                         }
                         {if (true) throw (Error)jjte001;}
      } finally {
                         if (jjtc001) {
                           jjtree.closeNodeScope(jjtn001, true);
                         }
      }
      jj_consume_token(117);
      SQL();
      jj_consume_token(118);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void DBSelectStatement() throws ParseException {
 /*@bgen(jjtree) DBSelectStatement */
  ASTDBSelectStatement jjtn000 = new ASTDBSelectStatement(JJTDBSELECTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_DB_SELECT);
      jj_consume_token(116);
                        ASTDatabase jjtn001 = new ASTDatabase(JJTDATABASE);
                        boolean jjtc001 = true;
                        jjtree.openNodeScope(jjtn001);
      try {
        Identifier();
      } catch (Throwable jjte001) {
                        if (jjtc001) {
                          jjtree.clearNodeScope(jjtn001);
                          jjtc001 = false;
                        } else {
                          jjtree.popNode();
                        }
                        if (jjte001 instanceof RuntimeException) {
                          {if (true) throw (RuntimeException)jjte001;}
                        }
                        if (jjte001 instanceof ParseException) {
                          {if (true) throw (ParseException)jjte001;}
                        }
                        {if (true) throw (Error)jjte001;}
      } finally {
                        if (jjtc001) {
                          jjtree.closeNodeScope(jjtn001, true);
                        }
      }
      jj_consume_token(117);
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CHAR_LITERAL:
          ;
          break;
        default:
          jj_la1[2] = jj_gen;
          break label_2;
        }
      ASTDatabaseOptions jjtn002 = new ASTDatabaseOptions(JJTDATABASEOPTIONS);
      boolean jjtc002 = true;
      jjtree.openNodeScope(jjtn002);
        try {
          String();
        } catch (Throwable jjte002) {
      if (jjtc002) {
        jjtree.clearNodeScope(jjtn002);
        jjtc002 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte002 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte002;}
      }
      if (jjte002 instanceof ParseException) {
        {if (true) throw (ParseException)jjte002;}
      }
      {if (true) throw (Error)jjte002;}
        } finally {
      if (jjtc002) {
        jjtree.closeNodeScope(jjtn002, true);
      }
        }
        jj_consume_token(117);
      }
      SQL();
      jj_consume_token(118);
      jj_consume_token(K_AS);
                       ASTAS jjtn003 = new ASTAS(JJTAS);
                       boolean jjtc003 = true;
                       jjtree.openNodeScope(jjtn003);
      try {
        Identifier();
      } catch (Throwable jjte003) {
                       if (jjtc003) {
                         jjtree.clearNodeScope(jjtn003);
                         jjtc003 = false;
                       } else {
                         jjtree.popNode();
                       }
                       if (jjte003 instanceof RuntimeException) {
                         {if (true) throw (RuntimeException)jjte003;}
                       }
                       if (jjte003 instanceof ParseException) {
                         {if (true) throw (ParseException)jjte003;}
                       }
                       {if (true) throw (Error)jjte003;}
      } finally {
                       if (jjtc003) {
                         jjtree.closeNodeScope(jjtn003, true);
                       }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void SQL() throws ParseException {
 /*@bgen(jjtree) SQL */
  ASTSQL jjtn000 = new ASTSQL(JJTSQL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(SQL_STRING);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.setValue(t.image);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void PriorizedStatement() throws ParseException {
 /*@bgen(jjtree) PriorizedStatement */
  ASTPriorizedStatement jjtn000 = new ASTPriorizedStatement(JJTPRIORIZEDSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_DB_EXECUTE:
        DBExecuteStatement();
        break;
      default:
        jj_la1[3] = jj_gen;
        ;
      }
      ComplexSelectStatement();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_PRIORITY:
        Priority();
        break;
      default:
        jj_la1[4] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_METRIC:
        Metric();
        break;
      default:
        jj_la1[5] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void ComplexSelectStatement() throws ParseException {
 /*@bgen(jjtree) ComplexSelectStatement */
  ASTComplexSelectStatement jjtn000 = new ASTComplexSelectStatement(JJTCOMPLEXSELECTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_SELECT:
        SelectStatement();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_INTERSECTION:
        case K_MINUS:
        case K_UNION:
          SetOperator();
          ComplexSelectStatement();
          break;
        default:
          jj_la1[6] = jj_gen;
          ;
        }
        break;
      case 116:
        jj_consume_token(116);
        ComplexSelectStatement();
        jj_consume_token(118);
        break;
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void SelectStatement() throws ParseException {
 /*@bgen(jjtree) SelectStatement */
  ASTSelectStatement jjtn000 = new ASTSelectStatement(JJTSELECTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      SelectClause();
      FromClause();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_WHERE:
        WhereClause();
        break;
      default:
        jj_la1[8] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_GROUP:
        GroupByClause();
        break;
      default:
        jj_la1[9] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_HAVING:
        HavingClause();
        break;
      default:
        jj_la1[10] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_SET:
        ElementPriorities();
        break;
      default:
        jj_la1[11] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void CreateStatement() throws ParseException {
 /*@bgen(jjtree) CreateStatement */
  ASTCreateStatement jjtn000 = new ASTCreateStatement(JJTCREATESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_CREATE:
        jj_consume_token(K_CREATE);
        jj_consume_token(K_STREAM);
        Identifier();
        jj_consume_token(116);
        AttributeDefinitions();
        jj_consume_token(118);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_CHANNEL:
        case K_CSV:
        case K_FROM:
        case K_SILAB:
        case K_SOCKET:
        case K_WITH:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case K_FROM:
          case K_WITH:
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case K_FROM:
              jj_consume_token(K_FROM);
              break;
            case K_WITH:
              jj_consume_token(K_WITH);
              break;
            default:
              jj_la1[12] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            jj_consume_token(116);
            if (jj_2_7(2)) {
              TimedTuples();
            } else {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case K_DB_EXECUTE:
              case K_SELECT:
              case 116:
                PriorizedStatement();
                break;
              default:
                jj_la1[13] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
              }
            }
            jj_consume_token(118);
            break;
          case K_SOCKET:
            Socket();
            break;
          case K_CHANNEL:
            Channel();
            break;
          case K_CSV:
            CSVSource();
            break;
          case K_SILAB:
            Silab();
            break;
          default:
            jj_la1[14] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        default:
          jj_la1[15] = jj_gen;
          ;
        }
        break;
      case K_OSGI:
        OSGI();
        break;
      default:
        jj_la1[16] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void CreateViewStatement() throws ParseException {
 /*@bgen(jjtree) CreateViewStatement */
  ASTCreateViewStatement jjtn000 = new ASTCreateViewStatement(JJTCREATEVIEWSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_CREATE);
      jj_consume_token(K_VIEW);
      Identifier();
      jj_consume_token(K_FROM);
      jj_consume_token(116);
      PriorizedStatement();
      jj_consume_token(118);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void CreateSensor() throws ParseException {
 /*@bgen(jjtree) CreateSensor */
  ASTCreateSensor jjtn000 = new ASTCreateSensor(JJTCREATESENSOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_CREATE);
      jj_consume_token(K_SENSOR);
      Identifier();
      jj_consume_token(116);
      ORSchemaDefinition();
      jj_consume_token(118);
      jj_consume_token(K_FROM);
      Channel();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void ORSchemaDefinition() throws ParseException {
 /*@bgen(jjtree) ORSchemaDefinition */
  ASTORSchemaDefinition jjtn000 = new ASTORSchemaDefinition(JJTORSCHEMADEFINITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_ATTRIBUTE:
        AttrDefinition();
        break;
      case K_RECORD:
        RecordDefinition();
        break;
      case K_LIST:
        ListDefinition();
        break;
      default:
        jj_la1[17] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
           if (jjtc000) {
             jjtree.clearNodeScope(jjtn000);
             jjtc000 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte000 instanceof RuntimeException) {
             {if (true) throw (RuntimeException)jjte000;}
           }
           if (jjte000 instanceof ParseException) {
             {if (true) throw (ParseException)jjte000;}
           }
           {if (true) throw (Error)jjte000;}
    } finally {
           if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
           }
    }
  }

  static final public void RecordDefinition() throws ParseException {
 /*@bgen(jjtree) RecordDefinition */
  ASTRecordDefinition jjtn000 = new ASTRecordDefinition(JJTRECORDDEFINITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_RECORD);
      jj_consume_token(116);
      Identifier();
      jj_consume_token(117);
      label_3:
      while (true) {
        RecordEntryDefinition();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_ATTRIBUTE:
        case K_RECORD:
        case K_LIST:
          ;
          break;
        default:
          jj_la1[18] = jj_gen;
          break label_3;
        }
      }
      jj_consume_token(118);
    } catch (Throwable jjte000) {
           if (jjtc000) {
             jjtree.clearNodeScope(jjtn000);
             jjtc000 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte000 instanceof RuntimeException) {
             {if (true) throw (RuntimeException)jjte000;}
           }
           if (jjte000 instanceof ParseException) {
             {if (true) throw (ParseException)jjte000;}
           }
           {if (true) throw (Error)jjte000;}
    } finally {
           if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
           }
    }
  }

  static final public void RecordEntryDefinition() throws ParseException {
 /*@bgen(jjtree) RecordEntryDefinition */
  ASTRecordEntryDefinition jjtn000 = new ASTRecordEntryDefinition(JJTRECORDENTRYDEFINITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_ATTRIBUTE:
        AttrDefinition();
        break;
      case K_RECORD:
        RecordDefinition();
        break;
      case K_LIST:
        ListDefinition();
        break;
      default:
        jj_la1[19] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
           if (jjtc000) {
             jjtree.clearNodeScope(jjtn000);
             jjtc000 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte000 instanceof RuntimeException) {
             {if (true) throw (RuntimeException)jjte000;}
           }
           if (jjte000 instanceof ParseException) {
             {if (true) throw (ParseException)jjte000;}
           }
           {if (true) throw (Error)jjte000;}
    } finally {
           if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
           }
    }
  }

  static final public void ListDefinition() throws ParseException {
 /*@bgen(jjtree) ListDefinition */
  ASTListDefinition jjtn000 = new ASTListDefinition(JJTLISTDEFINITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_LIST);
      jj_consume_token(116);
      Identifier();
      jj_consume_token(117);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_ATTRIBUTE:
        label_4:
        while (true) {
          AttrDefinition();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case K_ATTRIBUTE:
            ;
            break;
          default:
            jj_la1[20] = jj_gen;
            break label_4;
          }
        }
        break;
      case K_RECORD:
        label_5:
        while (true) {
          RecordDefinition();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case K_RECORD:
            ;
            break;
          default:
            jj_la1[21] = jj_gen;
            break label_5;
          }
        }
        break;
      case K_LIST:
        label_6:
        while (true) {
          ListDefinition();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case K_LIST:
            ;
            break;
          default:
            jj_la1[22] = jj_gen;
            break label_6;
          }
        }
        break;
      default:
        jj_la1[23] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(118);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void AttrDefinition() throws ParseException {
 /*@bgen(jjtree) AttrDefinition */
  ASTAttrDefinition jjtn000 = new ASTAttrDefinition(JJTATTRDEFINITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_ATTRIBUTE);
      jj_consume_token(116);
      Identifier();
      jj_consume_token(117);
      AttributeType();
      jj_consume_token(118);
    } catch (Throwable jjte000) {
           if (jjtc000) {
             jjtree.clearNodeScope(jjtn000);
             jjtc000 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte000 instanceof RuntimeException) {
             {if (true) throw (RuntimeException)jjte000;}
           }
           if (jjte000 instanceof ParseException) {
             {if (true) throw (ParseException)jjte000;}
           }
           {if (true) throw (Error)jjte000;}
    } finally {
           if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
           }
    }
  }

  static final public void AttributeDefinitions() throws ParseException {
 /*@bgen(jjtree) AttributeDefinitions */
  ASTAttributeDefinitions jjtn000 = new ASTAttributeDefinitions(JJTATTRIBUTEDEFINITIONS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      AttributeDefinition();
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 117:
          ;
          break;
        default:
          jj_la1[24] = jj_gen;
          break label_7;
        }
        jj_consume_token(117);
        AttributeDefinition();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void AttributeDefinition() throws ParseException {
 /*@bgen(jjtree) AttributeDefinition */
  ASTAttributeDefinition jjtn000 = new ASTAttributeDefinition(JJTATTRIBUTEDEFINITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Identifier();
      AttributeType();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void TimedTuples() throws ParseException {
 /*@bgen(jjtree) TimedTuples */
  ASTTimedTuples jjtn000 = new ASTTimedTuples(JJTTIMEDTUPLES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      TimedTuple();
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 117:
          ;
          break;
        default:
          jj_la1[25] = jj_gen;
          break label_8;
        }
        jj_consume_token(117);
        TimedTuple();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void TimedTuple() throws ParseException {
 /*@bgen(jjtree) TimedTuple */
  ASTTimedTuple jjtn000 = new ASTTimedTuple(JJTTIMEDTUPLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(116);
      TimeInterval();
      jj_consume_token(117);
      SimpleTuple();
      jj_consume_token(118);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void TimeInterval() throws ParseException {
 /*@bgen(jjtree) TimeInterval */
  ASTTimeInterval jjtn000 = new ASTTimeInterval(JJTTIMEINTERVAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
  Token t2 = null;
    try {
      jj_consume_token(119);
      t = jj_consume_token(INTEGER);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 117:
        jj_consume_token(117);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEGER:
          t2 = jj_consume_token(INTEGER);
          break;
        case 120:
          jj_consume_token(120);
          break;
        default:
          jj_la1[26] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[27] = jj_gen;
        ;
      }
      jj_consume_token(118);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    if (t2 == null)
    {
      jjtn000.setInterval(new TimeInterval(new PointInTime(Long.parseLong(t.image)), PointInTime.getInfinityTime()));
    }
    else
    {
      jjtn000.setInterval(new TimeInterval(new PointInTime(Long.parseLong(t.image)), new PointInTime(Long.parseLong(t2.image))));
    }
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void Socket() throws ParseException {
 /*@bgen(jjtree) Socket */
  ASTSocket jjtn000 = new ASTSocket(JJTSOCKET);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_SOCKET);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_MV:
      case K_TUPLE:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_TUPLE:
          jj_consume_token(K_TUPLE);
        jjtn000.setTupleMode();
          break;
        case K_MV:
          jj_consume_token(K_MV);
        jjtn000.setMVMode();
          break;
        default:
          jj_la1[28] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[29] = jj_gen;
        ;
      }
      Host();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 121:
        jj_consume_token(121);
        break;
      default:
        jj_la1[30] = jj_gen;
        ;
      }
      Integer();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void Silab() throws ParseException {
 /*@bgen(jjtree) Silab */
  ASTSilab jjtn000 = new ASTSilab(JJTSILAB);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_SILAB);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_MV:
      case K_TUPLE:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_TUPLE:
          jj_consume_token(K_TUPLE);
        jjtn000.setTupleMode();
          break;
        case K_MV:
          jj_consume_token(K_MV);
        jjtn000.setMVMode();
          break;
        default:
          jj_la1[31] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[32] = jj_gen;
        ;
      }
      Host();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 121:
        jj_consume_token(121);
        break;
      default:
        jj_la1[33] = jj_gen;
        ;
      }
      Integer();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void Channel() throws ParseException {
 /*@bgen(jjtree) Channel */
  ASTChannel jjtn000 = new ASTChannel(JJTCHANNEL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_CHANNEL);
      Host();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 121:
        jj_consume_token(121);
        break;
      default:
        jj_la1[34] = jj_gen;
        ;
      }
      Integer();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void Host() throws ParseException {
 /*@bgen(jjtree) Host */
  ASTHost jjtn000 = new ASTHost(JJTHOST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token value;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IPADDRESS:
        value = jj_consume_token(IPADDRESS);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.setValue(value.image);
        break;
      case IDENTIFIER:
        Identifier();
        break;
      default:
        jj_la1[35] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void CSVSource() throws ParseException {
 /*@bgen(jjtree) CSVSource */
  ASTCSVSource jjtn000 = new ASTCSVSource(JJTCSVSOURCE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      jj_consume_token(K_CSV);
      t = jj_consume_token(CHAR_LITERAL);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.setURL(t.image.substring(1, t.image.length() - 1));
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void SimpleTuple() throws ParseException {
 /*@bgen(jjtree) SimpleTuple */
  ASTSimpleTuple jjtn000 = new ASTSimpleTuple(JJTSIMPLETUPLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Value();
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 117:
          ;
          break;
        default:
          jj_la1[36] = jj_gen;
          break label_9;
        }
        jj_consume_token(117);
        Value();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void Value() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FLOAT:
    case INTEGER:
      Number();
      break;
    case CHAR_LITERAL:
      String();
      break;
    default:
      jj_la1[37] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void AttributeType() throws ParseException {
 /*@bgen(jjtree) AttributeType */
  ASTAttributeType jjtn000 = new ASTAttributeType(JJTATTRIBUTETYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);ArrayList covList;
  String format;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_INTEGER:
        jj_consume_token(K_INTEGER);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.setType("Integer");
        break;
      case K_FLOAT:
        jj_consume_token(K_FLOAT);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
        jjtn000.setType("Float");
        break;
      case K_DOUBLE:
        jj_consume_token(K_DOUBLE);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.setType("Double");
        break;
      case K_LONG:
        jj_consume_token(K_LONG);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.setType("Long");
        break;
      case K_STRING:
        jj_consume_token(K_STRING);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.setType("String");
        break;
      case K_MV:
        jj_consume_token(K_MV);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_INTEGER:
          jj_consume_token(K_INTEGER);
                          jjtn000.setType("MV Integer");
          break;
        case K_FLOAT:
          jj_consume_token(K_FLOAT);
                      jjtn000.setType("MV Float");
          break;
        case K_DOUBLE:
          jj_consume_token(K_DOUBLE);
                       jjtn000.setType("MV");
          break;
        case K_LONG:
          jj_consume_token(K_LONG);
                     jjtn000.setType("MV Long");
          break;
        default:
          jj_la1[38] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        covList = CovarianceRow();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.setRow(covList);
        break;
      case K_DATE:
        jj_consume_token(K_DATE);
        format = DateFormat();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.setType("Date");
    jjtn000.setDateFormat(format);
        break;
      case K_START_TIMESTAMP:
        jj_consume_token(K_START_TIMESTAMP);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
        jjtn000.setType("StartTimestamp");
        break;
      case K_END_TIMESTAMP:
        jj_consume_token(K_END_TIMESTAMP);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
        jjtn000.setType("EndTimestamp");
        break;
      default:
        jj_la1[39] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public ArrayList CovarianceRow() throws ParseException {
 /*@bgen(jjtree) CovarianceRow */
  ASTCovarianceRow jjtn000 = new ASTCovarianceRow(JJTCOVARIANCEROW);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);ArrayList covList = new ArrayList();
  Token t;
    try {
      label_10:
      while (true) {
        t = jj_consume_token(FLOAT);
      covList.add(Double.parseDouble(t.image));
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case FLOAT:
          ;
          break;
        default:
          jj_la1[40] = jj_gen;
          break label_10;
        }
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return covList;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  static final public String DateFormat() throws ParseException {
 /*@bgen(jjtree) DateFormat */
  ASTDateFormat jjtn000 = new ASTDateFormat(JJTDATEFORMAT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);String ret;
  Token t;
    try {
      // permitted: <Year Expression> <Time Expression>
        // or <Year Expression>
        // or <Time Expression>
        t = jj_consume_token(IDENTIFIER);
    ret = t.image;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        t = jj_consume_token(IDENTIFIER);
    ret += " "+ t.image;
        break;
      default:
        jj_la1[41] = jj_gen;
        ;
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return ret;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  static final public void SetOperator() throws ParseException {
 /*@bgen(jjtree) SetOperator */
  ASTSetOperator jjtn000 = new ASTSetOperator(JJTSETOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_UNION:
        t = jj_consume_token(K_UNION);
        break;
      case K_INTERSECTION:
        t = jj_consume_token(K_INTERSECTION);
        break;
      case K_MINUS:
        t = jj_consume_token(K_MINUS);
        break;
      default:
        jj_la1[42] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.setOperation(ASTSetOperator.SetOperation.valueOf(t.image));
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void SelectClause() throws ParseException {
 /*@bgen(jjtree) SelectClause */
  ASTSelectClause jjtn000 = new ASTSelectClause(JJTSELECTCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_SELECT);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 122:
        SelectAll();
        break;
      case K_AVG:
      case K_COUNT:
      case K_MAX:
      case K_MIN:
      case K_SUM:
      case FLOAT:
      case INTEGER:
      case IDENTIFIER:
      case CHAR_LITERAL:
      case 116:
      case 120:
        RenamedExpression();
        label_11:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 117:
            ;
            break;
          default:
            jj_la1[43] = jj_gen;
            break label_11;
          }
          jj_consume_token(117);
          RenamedExpression();
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_MATRIX:
          ASTProjectionMatrix jjtn001 = new ASTProjectionMatrix(JJTPROJECTIONMATRIX);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
          try {
            MatrixExpression();
          } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte001;}
          }
          if (jjte001 instanceof ParseException) {
            {if (true) throw (ParseException)jjte001;}
          }
          {if (true) throw (Error)jjte001;}
          } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
          }
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case K_MATRIX:
          ASTProjectionVector jjtn002 = new ASTProjectionVector(JJTPROJECTIONVECTOR);
          boolean jjtc002 = true;
          jjtree.openNodeScope(jjtn002);
            try {
              MatrixExpression();
            } catch (Throwable jjte002) {
          if (jjtc002) {
            jjtree.clearNodeScope(jjtn002);
            jjtc002 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte002 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte002;}
          }
          if (jjte002 instanceof ParseException) {
            {if (true) throw (ParseException)jjte002;}
          }
          {if (true) throw (Error)jjte002;}
            } finally {
          if (jjtc002) {
            jjtree.closeNodeScope(jjtn002, true);
          }
            }
            break;
          default:
            jj_la1[44] = jj_gen;
            ;
          }
          break;
        default:
          jj_la1[45] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[46] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void FromClause() throws ParseException {
 /*@bgen(jjtree) FromClause */
  ASTFromClause jjtn000 = new ASTFromClause(JJTFROMCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_FROM);
      Source();
      label_12:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 117:
          ;
          break;
        default:
          jj_la1[47] = jj_gen;
          break label_12;
        }
        jj_consume_token(117);
        Source();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void WhereClause() throws ParseException {
 /*@bgen(jjtree) WhereClause */
  ASTWhereClause jjtn000 = new ASTWhereClause(JJTWHERECLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_WHERE);
      Predicate();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void GroupByClause() throws ParseException {
 /*@bgen(jjtree) GroupByClause */
  ASTGroupByClause jjtn000 = new ASTGroupByClause(JJTGROUPBYCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_GROUP);
      jj_consume_token(K_BY);
      Identifier();
      label_13:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 117:
          ;
          break;
        default:
          jj_la1[48] = jj_gen;
          break label_13;
        }
        jj_consume_token(117);
        Identifier();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void HavingClause() throws ParseException {
 /*@bgen(jjtree) HavingClause */
  ASTHavingClause jjtn000 = new ASTHavingClause(JJTHAVINGCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_HAVING);
      Predicate();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void SelectAll() throws ParseException {
 /*@bgen(jjtree) SelectAll */
  ASTSelectAll jjtn000 = new ASTSelectAll(JJTSELECTALL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(122);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void RenamedExpression() throws ParseException {
 /*@bgen(jjtree) RenamedExpression */
  ASTRenamedExpression jjtn000 = new ASTRenamedExpression(JJTRENAMEDEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Expression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_AS:
        jj_consume_token(K_AS);
                            ASTAS jjtn001 = new ASTAS(JJTAS);
                            boolean jjtc001 = true;
                            jjtree.openNodeScope(jjtn001);
        try {
          Identifier();
        } catch (Throwable jjte001) {
                            if (jjtc001) {
                              jjtree.clearNodeScope(jjtn001);
                              jjtc001 = false;
                            } else {
                              jjtree.popNode();
                            }
                            if (jjte001 instanceof RuntimeException) {
                              {if (true) throw (RuntimeException)jjte001;}
                            }
                            if (jjte001 instanceof ParseException) {
                              {if (true) throw (ParseException)jjte001;}
                            }
                            {if (true) throw (Error)jjte001;}
        } finally {
                            if (jjtc001) {
                              jjtree.closeNodeScope(jjtn001, true);
                            }
        }
        break;
      default:
        jj_la1[49] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void MatrixExpression() throws ParseException {
 /*@bgen(jjtree) MatrixExpression */
  ASTMatrixExpression jjtn000 = new ASTMatrixExpression(JJTMATRIXEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);ArrayList rows = new ArrayList();
  ArrayList curRow;
    try {
      jj_consume_token(K_MATRIX);
      jj_consume_token(119);
      curRow = CovarianceRow();
    rows.add(curRow);
      label_14:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 115:
          ;
          break;
        default:
          jj_la1[50] = jj_gen;
          break label_14;
        }
        jj_consume_token(115);
        curRow = CovarianceRow();
      rows.add(curRow);
      }
      jj_consume_token(123);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.setMatrix(rows);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void Predicate() throws ParseException {
 /*@bgen(jjtree) Predicate */
  ASTPredicate jjtn000 = new ASTPredicate(JJTPREDICATE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_8(2147483647)) {
        OrPredicate();
      } else if (jj_2_9(2147483647)) {
        AndPredicate();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_NOT:
          NotPredicate();
          break;
        case K_AVG:
        case K_COUNT:
        case K_EXISTS:
        case K_MAX:
        case K_MIN:
        case K_PROB:
        case K_SUM:
        case FLOAT:
        case INTEGER:
        case IDENTIFIER:
        case CHAR_LITERAL:
        case 116:
        case 119:
        case 120:
          SimplePredicate();
          break;
        default:
          jj_la1[51] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void SimplePredicate() throws ParseException {
 /*@bgen(jjtree) SimplePredicate */
  ASTSimplePredicate jjtn000 = new ASTSimplePredicate(JJTSIMPLEPREDICATE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_10(2147483647)) {
        jj_consume_token(116);
        Predicate();
        jj_consume_token(118);
      } else if (jj_2_11(2147483647)) {
        QuantificationPredicate();
      } else if (jj_2_12(2147483647)) {
        BasicPredicate();
      } else if (jj_2_13(2147483647)) {
        SpatialPredicate();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_PROB:
          ProbabilityPredicate();
          break;
        default:
          jj_la1[52] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void BasicPredicate() throws ParseException {
 /*@bgen(jjtree) BasicPredicate */
  ASTBasicPredicate jjtn000 = new ASTBasicPredicate(JJTBASICPREDICATE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Expression();
      CompareOperator();
      Expression();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void SpatialPredicate() throws ParseException {
 /*@bgen(jjtree) SpatialPredicate */
  ASTSpatialPredicate jjtn000 = new ASTSpatialPredicate(JJTSPATIALPREDICATE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Identifier();
      SpatialCompareOperator();
      Identifier();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void ProbabilityPredicate() throws ParseException {
 /*@bgen(jjtree) ProbabilityPredicate */
  ASTProbabilityPredicate jjtn000 = new ASTProbabilityPredicate(JJTPROBABILITYPREDICATE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);ArrayList xLow = new ArrayList();
  ArrayList xUp = new ArrayList();
  Token intervalStart;
  Token intervalEnd;
  Token prob;
  Token compOp;
    try {
      jj_consume_token(K_PROB);
      jj_consume_token(116);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 116:
        jj_consume_token(116);
        MatrixExpression();
        jj_consume_token(122);
        Identifier();
        jj_consume_token(124);
        MatrixExpression();
        jj_consume_token(118);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 120:
          jj_consume_token(120);
          jjtn000.setCovOperandType(ASTProbabilityPredicate.OperandTypes.MINUS);
          break;
        case 124:
          jj_consume_token(124);
          jjtn000.setCovOperandType(ASTProbabilityPredicate.OperandTypes.PLUS);
          break;
        default:
          jj_la1[53] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(116);
        MatrixExpression();
        jj_consume_token(122);
        Identifier();
        jj_consume_token(124);
        MatrixExpression();
        jj_consume_token(118);
        jjtn000.setJoinPredicate(true);
        break;
      case K_MATRIX:
        MatrixExpression();
        jj_consume_token(122);
        Identifier();
        jj_consume_token(124);
        MatrixExpression();
      jjtn000.setJoinPredicate(false);
        break;
      default:
        jj_la1[54] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(117);
      jj_consume_token(119);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FLOAT:
        intervalStart = jj_consume_token(FLOAT);
      xLow.add(Double.parseDouble(intervalStart.image));
        break;
      case 120:
        intervalStart = jj_consume_token(120);
        jj_consume_token(K_INFTY);
      xLow.add(Double.MIN_VALUE);
        break;
      default:
        jj_la1[55] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(117);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FLOAT:
        intervalEnd = jj_consume_token(FLOAT);
      xUp.add(Double.parseDouble(intervalEnd.image));
        break;
      case K_INFTY:
        intervalEnd = jj_consume_token(K_INFTY);
      xUp.add(Double.MAX_VALUE);
        break;
      default:
        jj_la1[56] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(123);
      label_15:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 117:
          ;
          break;
        default:
          jj_la1[57] = jj_gen;
          break label_15;
        }
        jj_consume_token(117);
        jj_consume_token(119);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case FLOAT:
          intervalStart = jj_consume_token(FLOAT);
        xLow.add(Double.parseDouble(intervalStart.image));
          break;
        case 120:
          intervalStart = jj_consume_token(120);
          jj_consume_token(K_INFTY);
        xLow.add(Double.MIN_VALUE);
          break;
        default:
          jj_la1[58] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(117);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case FLOAT:
          intervalEnd = jj_consume_token(FLOAT);
        xUp.add(Double.parseDouble(intervalEnd.image));
          break;
        case K_INFTY:
          intervalEnd = jj_consume_token(K_INFTY);
        xUp.add(Double.MAX_VALUE);
          break;
        default:
          jj_la1[59] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(123);
      }
      jj_consume_token(115);
      compOp = jj_consume_token(COMPARE_OPERATOR);
      prob = jj_consume_token(FLOAT);
      jj_consume_token(118);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.setXLow(xLow);
    jjtn000.setXUp(xUp);
    jjtn000.setProb(Double.parseDouble(prob.image));
    jjtn000.setCompareOperator(compOp.image);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void Priority() throws ParseException {
 /*@bgen(jjtree) Priority */
  ASTPriority jjtn000 = new ASTPriority(JJTPRIORITY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      jj_consume_token(K_PRIORITY);
      t = jj_consume_token(INTEGER);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.setPriority(Integer.parseInt(t.image));
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void OrPredicate() throws ParseException {
 /*@bgen(jjtree) OrPredicate */
  ASTOrPredicate jjtn000 = new ASTOrPredicate(JJTORPREDICATE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      SimplePredicate();
      jj_consume_token(K_OR);
      Predicate();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void AndPredicate() throws ParseException {
 /*@bgen(jjtree) AndPredicate */
  ASTAndPredicate jjtn000 = new ASTAndPredicate(JJTANDPREDICATE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      SimplePredicate();
      jj_consume_token(K_AND);
      Predicate();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void NotPredicate() throws ParseException {
 /*@bgen(jjtree) NotPredicate */
  ASTNotPredicate jjtn000 = new ASTNotPredicate(JJTNOTPREDICATE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_NOT);
      Predicate();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void QuantificationPredicate() throws ParseException {
 /*@bgen(jjtree) QuantificationPredicate */
  ASTQuantificationPredicate jjtn000 = new ASTQuantificationPredicate(JJTQUANTIFICATIONPREDICATE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_EXISTS:
        Exists();
        break;
      default:
        jj_la1[60] = jj_gen;
        if (jj_2_14(2147483647)) {
          AnyPredicate();
        } else if (jj_2_15(2147483647)) {
          AllPredicate();
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case FLOAT:
          case INTEGER:
          case IDENTIFIER:
          case CHAR_LITERAL:
          case 119:
            InPredicate();
            break;
          default:
            jj_la1[61] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void AnyPredicate() throws ParseException {
 /*@bgen(jjtree) AnyPredicate */
  ASTAnyPredicate jjtn000 = new ASTAnyPredicate(JJTANYPREDICATE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Tuple();
      CompareOperator();
      jj_consume_token(K_ANY);
      if (jj_2_16(2147483647)) {
        TupleSet();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 116:
          jj_consume_token(116);
          ComplexSelectStatement();
          jj_consume_token(118);
          break;
        default:
          jj_la1[62] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void AllPredicate() throws ParseException {
 /*@bgen(jjtree) AllPredicate */
  ASTAllPredicate jjtn000 = new ASTAllPredicate(JJTALLPREDICATE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Tuple();
      CompareOperator();
      jj_consume_token(K_ALL);
      if (jj_2_17(2147483647)) {
        TupleSet();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 116:
          jj_consume_token(116);
          ComplexSelectStatement();
          jj_consume_token(118);
          break;
        default:
          jj_la1[63] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void InPredicate() throws ParseException {
 /*@bgen(jjtree) InPredicate */
  ASTInPredicate jjtn000 = new ASTInPredicate(JJTINPREDICATE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Tuple();
      jj_consume_token(K_IN);
      if (jj_2_18(2147483647)) {
        TupleSet();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 116:
          jj_consume_token(116);
          ComplexSelectStatement();
          jj_consume_token(118);
          break;
        default:
          jj_la1[64] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void Exists() throws ParseException {
 /*@bgen(jjtree) Exists */
  ASTExists jjtn000 = new ASTExists(JJTEXISTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_EXISTS);
      jj_consume_token(116);
      ComplexSelectStatement();
      jj_consume_token(118);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void ElementPriorities() throws ParseException {
 /*@bgen(jjtree) ElementPriorities */
  ASTElementPriorities jjtn000 = new ASTElementPriorities(JJTELEMENTPRIORITIES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_SET);
      jj_consume_token(K_PRIORITY);
      ElementPriority();
      label_16:
      while (true) {
        if (jj_2_19(2147483647)) {
          ;
        } else {
          break label_16;
        }
        jj_consume_token(117);
        ElementPriority();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 117:
        jj_consume_token(117);
        DefaultPriority();
        break;
      default:
        jj_la1[65] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void ElementPriority() throws ParseException {
 /*@bgen(jjtree) ElementPriority */
  ASTElementPriority jjtn000 = new ASTElementPriority(JJTELEMENTPRIORITY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Integer();
      jj_consume_token(K_WHERE);
      Predicate();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void DefaultPriority() throws ParseException {
 /*@bgen(jjtree) DefaultPriority */
  ASTDefaultPriority jjtn000 = new ASTDefaultPriority(JJTDEFAULTPRIORITY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Integer();
      jj_consume_token(K_DEFAULT);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void Tuple() throws ParseException {
 /*@bgen(jjtree) Tuple */
  ASTTuple jjtn000 = new ASTTuple(JJTTUPLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FLOAT:
      case INTEGER:
      case CHAR_LITERAL:
        Value();
        break;
      case IDENTIFIER:
        Identifier();
        break;
      case 119:
        jj_consume_token(119);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case FLOAT:
        case INTEGER:
        case CHAR_LITERAL:
          Value();
          break;
        case IDENTIFIER:
          Identifier();
          break;
        default:
          jj_la1[66] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        label_17:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 117:
            ;
            break;
          default:
            jj_la1[67] = jj_gen;
            break label_17;
          }
          jj_consume_token(117);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case FLOAT:
          case INTEGER:
          case CHAR_LITERAL:
            Value();
            break;
          case IDENTIFIER:
            Identifier();
            break;
          default:
            jj_la1[68] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        jj_consume_token(123);
        break;
      default:
        jj_la1[69] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public Long Time() throws ParseException {
  Long value;
    value = Integer();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_DAY:
    case K_HOUR:
    case K_MINUTE:
    case K_SECOND:
    case K_WEEK:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_SECOND:
        jj_consume_token(K_SECOND);
      value *= 1000;
        break;
      case K_MINUTE:
        jj_consume_token(K_MINUTE);
      value *= (60* 1000);
        break;
      case K_HOUR:
        jj_consume_token(K_HOUR);
      value *= (60* 60* 1000);
        break;
      case K_DAY:
        jj_consume_token(K_DAY);
      value *= (24* 60* 60* 1000);
        break;
      case K_WEEK:
        jj_consume_token(K_WEEK);
      value *= (7* 24* 60* 60* 1000);
        break;
      default:
        jj_la1[70] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[71] = jj_gen;
      ;
    }
    {if (true) return value;}
    throw new Error("Missing return statement in function");
  }

  static final public void TupleSet() throws ParseException {
 /*@bgen(jjtree) TupleSet */
  ASTTupleSet jjtn000 = new ASTTupleSet(JJTTUPLESET);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(116);
      Tuple();
      label_18:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 117:
          ;
          break;
        default:
          jj_la1[72] = jj_gen;
          break label_18;
        }
        jj_consume_token(117);
        Tuple();
      }
      jj_consume_token(118);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void QuantificationOperator() throws ParseException {
 /*@bgen(jjtree) QuantificationOperator */
  ASTQuantificationOperator jjtn000 = new ASTQuantificationOperator(JJTQUANTIFICATIONOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_IN:
        jj_consume_token(K_IN);
        break;
      case K_ALL:
        jj_consume_token(K_ALL);
        break;
      default:
        jj_la1[73] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void Expression() throws ParseException {
 /*@bgen(jjtree) Expression */
  ASTExpression jjtn000 = new ASTExpression(JJTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);String tOp;
    try {
      if (jj_2_20(2147483647)) {
        SimpleToken();
        tOp = MathOperator();
    jjtn000.setOperator(tOp);
        Expression();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_AVG:
        case K_COUNT:
        case K_MAX:
        case K_MIN:
        case K_SUM:
        case FLOAT:
        case INTEGER:
        case IDENTIFIER:
        case CHAR_LITERAL:
        case 116:
        case 120:
          SimpleToken();
          break;
        default:
          jj_la1[74] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void SimpleToken() throws ParseException {
 /*@bgen(jjtree) SimpleToken */
  ASTSimpleToken jjtn000 = new ASTSimpleToken(JJTSIMPLETOKEN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FLOAT:
      case INTEGER:
        Number();
        break;
      case CHAR_LITERAL:
        String();
        break;
      default:
        jj_la1[76] = jj_gen;
        if (jj_2_21(2147483647)) {
          AggregateExpression();
        } else if (jj_2_22(2147483647)) {
          FunctionExpression();
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 116:
            jj_consume_token(116);
            Expression();
            jj_consume_token(118);
            break;
          case IDENTIFIER:
          case 120:
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case 120:
              jj_consume_token(120);
      jjtn000.setMinus(true);
              break;
            default:
              jj_la1[75] = jj_gen;
              ;
            }
            Identifier();
            break;
          default:
            jj_la1[77] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void FunctionExpression() throws ParseException {
 /*@bgen(jjtree) FunctionExpression */
  ASTFunctionExpression jjtn000 = new ASTFunctionExpression(JJTFUNCTIONEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
    ASTFunctionName jjtn001 = new ASTFunctionName(JJTFUNCTIONNAME);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
      try {
        Identifier();
      } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte001;}
    }
    if (jjte001 instanceof ParseException) {
      {if (true) throw (ParseException)jjte001;}
    }
    {if (true) throw (Error)jjte001;}
      } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
      }
      jj_consume_token(116);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_AVG:
      case K_COUNT:
      case K_EXISTS:
      case K_MAX:
      case K_MIN:
      case K_NOT:
      case K_PROB:
      case K_SUM:
      case FLOAT:
      case INTEGER:
      case IDENTIFIER:
      case CHAR_LITERAL:
      case 116:
      case 119:
      case 120:
        if (jj_2_23(2147483647)) {
          Predicate();
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case K_AVG:
          case K_COUNT:
          case K_MAX:
          case K_MIN:
          case K_SUM:
          case FLOAT:
          case INTEGER:
          case IDENTIFIER:
          case CHAR_LITERAL:
          case 116:
          case 120:
            Expression();
            break;
          default:
            jj_la1[78] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        label_19:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 117:
            ;
            break;
          default:
            jj_la1[79] = jj_gen;
            break label_19;
          }
          jj_consume_token(117);
          if (jj_2_24(2147483647)) {
            Predicate();
          } else {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case K_AVG:
            case K_COUNT:
            case K_MAX:
            case K_MIN:
            case K_SUM:
            case FLOAT:
            case INTEGER:
            case IDENTIFIER:
            case CHAR_LITERAL:
            case 116:
            case 120:
              Expression();
              break;
            default:
              jj_la1[80] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
        }
        break;
      default:
        jj_la1[81] = jj_gen;
        ;
      }
      jj_consume_token(118);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void AggregateExpression() throws ParseException {
 /*@bgen(jjtree) AggregateExpression */
  ASTAggregateExpression jjtn000 = new ASTAggregateExpression(JJTAGGREGATEEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      AggregateFunction();
      jj_consume_token(116);
      Identifier();
      jj_consume_token(118);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void AggregateFunction() throws ParseException {
 /*@bgen(jjtree) AggregateFunction */
  ASTAggregateFunction jjtn000 = new ASTAggregateFunction(JJTAGGREGATEFUNCTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_AVG:
        t = jj_consume_token(K_AVG);
        break;
      case K_COUNT:
        t = jj_consume_token(K_COUNT);
        break;
      case K_MAX:
        t = jj_consume_token(K_MAX);
        break;
      case K_MIN:
        t = jj_consume_token(K_MIN);
        break;
      case K_SUM:
        t = jj_consume_token(K_SUM);
        break;
      default:
        jj_la1[82] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.setFunction(new AggregateFunction(t.image.toUpperCase()));
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public String MathOperator() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 122:
      jj_consume_token(122);
    {if (true) return "*";}
      break;
    case 124:
      jj_consume_token(124);
    {if (true) return "+";}
      break;
    case 120:
      jj_consume_token(120);
    {if (true) return "-";}
      break;
    case 125:
      jj_consume_token(125);
    {if (true) return "/";}
      break;
    case 126:
      jj_consume_token(126);
    {if (true) return "^";}
      break;
    default:
      jj_la1[83] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public void DistinctExpression() throws ParseException {
 /*@bgen(jjtree) DistinctExpression */
  ASTDistinctExpression jjtn000 = new ASTDistinctExpression(JJTDISTINCTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_DISTINCT);
      jj_consume_token(116);
      Identifier();
      jj_consume_token(118);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void Source() throws ParseException {
    if (jj_2_25(2147483647)) {
      SimpleSource();
    } else if (jj_2_26(2147483647)) {
      Subselect();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_DB_SELECT:
        DBSelectStatement();
        break;
      default:
        jj_la1[84] = jj_gen;
        if (jj_2_27(2147483647)) {
          BrokerSource();
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
  }

  static final public void SimpleSource() throws ParseException {
 /*@bgen(jjtree) SimpleSource */
  ASTSimpleSource jjtn000 = new ASTSimpleSource(JJTSIMPLESOURCE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Identifier();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 119:
        Window();
        break;
      default:
        jj_la1[85] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_AS:
        jj_consume_token(K_AS);
                                         ASTAS jjtn001 = new ASTAS(JJTAS);
                                         boolean jjtc001 = true;
                                         jjtree.openNodeScope(jjtn001);
        try {
          Identifier();
        } catch (Throwable jjte001) {
                                         if (jjtc001) {
                                           jjtree.clearNodeScope(jjtn001);
                                           jjtc001 = false;
                                         } else {
                                           jjtree.popNode();
                                         }
                                         if (jjte001 instanceof RuntimeException) {
                                           {if (true) throw (RuntimeException)jjte001;}
                                         }
                                         if (jjte001 instanceof ParseException) {
                                           {if (true) throw (ParseException)jjte001;}
                                         }
                                         {if (true) throw (Error)jjte001;}
        } finally {
                                         if (jjtc001) {
                                           jjtree.closeNodeScope(jjtn001, true);
                                         }
        }
        break;
      default:
        jj_la1[86] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void Subselect() throws ParseException {
 /*@bgen(jjtree) Subselect */
  ASTSubselect jjtn000 = new ASTSubselect(JJTSUBSELECT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(116);
      ComplexSelectStatement();
      jj_consume_token(118);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 119:
        Window();
        break;
      default:
        jj_la1[87] = jj_gen;
        ;
      }
      jj_consume_token(K_AS);
                                                           ASTAS jjtn001 = new ASTAS(JJTAS);
                                                           boolean jjtc001 = true;
                                                           jjtree.openNodeScope(jjtn001);
      try {
        Identifier();
      } catch (Throwable jjte001) {
                                                           if (jjtc001) {
                                                             jjtree.clearNodeScope(jjtn001);
                                                             jjtc001 = false;
                                                           } else {
                                                             jjtree.popNode();
                                                           }
                                                           if (jjte001 instanceof RuntimeException) {
                                                             {if (true) throw (RuntimeException)jjte001;}
                                                           }
                                                           if (jjte001 instanceof ParseException) {
                                                             {if (true) throw (ParseException)jjte001;}
                                                           }
                                                           {if (true) throw (Error)jjte001;}
      } finally {
                                                           if (jjtc001) {
                                                             jjtree.closeNodeScope(jjtn001, true);
                                                           }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void Window() throws ParseException {
    jj_consume_token(119);
    StreamSQLWindow();
    jj_consume_token(123);
  }

  static final public void StreamSQLWindow() throws ParseException {
 /*@bgen(jjtree) StreamSQLWindow */
  ASTStreamSQLWindow jjtn000 = new ASTStreamSQLWindow(JJTSTREAMSQLWINDOW);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Long size;
  Long advance;
  Long value;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_SIZE:
        jj_consume_token(K_SIZE);
        size = Time();
        jj_consume_token(K_ADVANCE);
        advance = Time();
      jjtn000.setType(ASTWindow.Type.TIME);
      jjtn000.setSize(size);
      jjtn000.setAdvance(advance);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_TIME:
          jj_consume_token(K_TIME);
          break;
        case K_TUPLE:
          jj_consume_token(K_TUPLE);
        jjtn000.setType(ASTWindow.Type.TUPLE);
          break;
        default:
          jj_la1[88] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_SLIDE:
          value = Slide();
        jjtn000.setSlide(value);
          break;
        default:
          jj_la1[89] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_PARTITION:
          jj_consume_token(K_PARTITION);
          jj_consume_token(K_BY);
          Partition();
          break;
        default:
          jj_la1[90] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_VALID:
          jj_consume_token(K_VALID);
          jj_consume_token(K_ALWAYS);
          break;
        default:
          jj_la1[91] = jj_gen;
          ;
        }
        break;
      case K_UNBOUNDED:
        jj_consume_token(K_UNBOUNDED);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.setUnbounded(true);
        break;
      default:
        jj_la1[92] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void Partition() throws ParseException {
 /*@bgen(jjtree) Partition */
  ASTPartition jjtn000 = new ASTPartition(JJTPARTITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Identifier();
      label_20:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 117:
          ;
          break;
        default:
          jj_la1[93] = jj_gen;
          break label_20;
        }
        jj_consume_token(117);
        Identifier();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public Long Advance() throws ParseException {
 /*@bgen(jjtree) Advance */
  ASTAdvance jjtn000 = new ASTAdvance(JJTADVANCE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Long value;
    try {
      jj_consume_token(K_ADVANCE);
      value = Time();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return value;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  static final public Long Slide() throws ParseException {
 /*@bgen(jjtree) Slide */
  ASTSlide jjtn000 = new ASTSlide(JJTSLIDE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Long value;
    try {
      jj_consume_token(K_SLIDE);
      value = Time();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return value;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  static final public void Identifier() throws ParseException {
 /*@bgen(jjtree) Identifier */
  ASTIdentifier jjtn000 = new ASTIdentifier(JJTIDENTIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(IDENTIFIER);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.setName(t.image);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public Long Integer() throws ParseException {
 /*@bgen(jjtree) Integer */
  ASTInteger jjtn000 = new ASTInteger(JJTINTEGER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(INTEGER);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.setValue(t.image);
    {if (true) return jjtn000.getValue();}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  static final public void Number() throws ParseException {
 /*@bgen(jjtree) Number */
  ASTNumber jjtn000 = new ASTNumber(JJTNUMBER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FLOAT:
        t = jj_consume_token(FLOAT);
        break;
      case INTEGER:
        t = jj_consume_token(INTEGER);
        break;
      default:
        jj_la1[94] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.setValue(t.image);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void String() throws ParseException {
 /*@bgen(jjtree) String */
  ASTString jjtn000 = new ASTString(JJTSTRING);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(CHAR_LITERAL);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.setValue(t.image);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void CompareOperator() throws ParseException {
 /*@bgen(jjtree) CompareOperator */
  ASTCompareOperator jjtn000 = new ASTCompareOperator(JJTCOMPAREOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(COMPARE_OPERATOR);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.setOperator(t.image);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void SpatialCompareOperator() throws ParseException {
 /*@bgen(jjtree) SpatialCompareOperator */
  ASTSpatialCompareOperator jjtn000 = new ASTSpatialCompareOperator(JJTSPATIALCOMPAREOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(S_COMPARE);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.setOperator(t.image);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void OSGI() throws ParseException {
 /*@bgen(jjtree) OSGI */
  ASTOSGI jjtn000 = new ASTOSGI(JJTOSGI);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      jj_consume_token(K_OSGI);
      t = jj_consume_token(REGEXP);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.setRegexp(t.image);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void CreateBroker() throws ParseException {
                     /*@bgen(jjtree) CreateBroker */
  ASTCreateBroker jjtn000 = new ASTCreateBroker(JJTCREATEBROKER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_CREATE);
      jj_consume_token(K_BROKER);
      Identifier();
      jj_consume_token(116);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        AttributeDefinitions();
        break;
      case K_ATTRIBUTE:
      case K_RECORD:
      case K_LIST:
        ORSchemaDefinition();
        break;
      default:
        jj_la1[95] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(118);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_QUEUE:
        jj_consume_token(K_QUEUE);
        jj_consume_token(116);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
          AttributeDefinitions();
          break;
        case K_ATTRIBUTE:
        case K_RECORD:
        case K_LIST:
          ORSchemaDefinition();
          break;
        default:
          jj_la1[96] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(118);
        break;
      default:
        jj_la1[97] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void BrokerSource() throws ParseException {
                       /*@bgen(jjtree) BrokerSource */
  ASTBrokerSource jjtn000 = new ASTBrokerSource(JJTBROKERSOURCE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_BROKER);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 116:
        BrokerAsSource();
        break;
      case IDENTIFIER:
        BrokerSimpleSource();
        break;
      default:
        jj_la1[98] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_QUEUE:
        BrokerQueue();
        break;
      default:
        jj_la1[99] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  static final public void BrokerAsSource() throws ParseException {
                         /*@bgen(jjtree) BrokerAsSource */
  ASTBrokerAsSource jjtn000 = new ASTBrokerAsSource(JJTBROKERASSOURCE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(116);
      ComplexSelectStatement();
      jj_consume_token(118);
      jj_consume_token(K_AS);
      Identifier();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void BrokerSelectInto() throws ParseException {
                           /*@bgen(jjtree) BrokerSelectInto */
  ASTBrokerSelectInto jjtn000 = new ASTBrokerSelectInto(JJTBROKERSELECTINTO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      SelectClause();
      jj_consume_token(K_INTO);
      Identifier();
      FromClause();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_WHERE:
        WhereClause();
        break;
      default:
        jj_la1[100] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_GROUP:
        GroupByClause();
        break;
      default:
        jj_la1[101] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_HAVING:
        HavingClause();
        break;
      default:
        jj_la1[102] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_SET:
        ElementPriorities();
        break;
      default:
        jj_la1[103] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void BrokerSimpleSource() throws ParseException {
                             /*@bgen(jjtree) BrokerSimpleSource */
  ASTBrokerSimpleSource jjtn000 = new ASTBrokerSimpleSource(JJTBROKERSIMPLESOURCE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Identifier();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void BrokerQueue() throws ParseException {
                      /*@bgen(jjtree) BrokerQueue */
  ASTBrokerQueue jjtn000 = new ASTBrokerQueue(JJTBROKERQUEUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_QUEUE);
      jj_consume_token(K_BY);
      jj_consume_token(116);
      ComplexSelectStatement();
      jj_consume_token(118);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void Metric() throws ParseException {
                 /*@bgen(jjtree) Metric */
  ASTMetric jjtn000 = new ASTMetric(JJTMETRIC);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_METRIC);
      jj_consume_token(K_ON);
      Identifier();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  static private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  static private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  static private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  static private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  static private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  static private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  static private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  static private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  static private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  static private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  static private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  static private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  static private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  static private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  static private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  static private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  static private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  static private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  static private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  static private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  static private boolean jj_3R_43() {
    if (jj_scan_token(116)) return true;
    if (jj_3R_46()) return true;
    if (jj_scan_token(118)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_93()) jj_scanpos = xsp;
    if (jj_scan_token(K_AS)) return true;
    if (jj_3R_52()) return true;
    return false;
  }

  static private boolean jj_3_27() {
    if (jj_3R_44()) return true;
    return false;
  }

  static private boolean jj_3R_149() {
    if (jj_scan_token(K_PROB)) return true;
    if (jj_scan_token(116)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_169()) {
    jj_scanpos = xsp;
    if (jj_3R_170()) return true;
    }
    if (jj_scan_token(117)) return true;
    if (jj_scan_token(119)) return true;
    xsp = jj_scanpos;
    if (jj_3R_171()) {
    jj_scanpos = xsp;
    if (jj_3R_172()) return true;
    }
    if (jj_scan_token(117)) return true;
    xsp = jj_scanpos;
    if (jj_3R_173()) {
    jj_scanpos = xsp;
    if (jj_3R_174()) return true;
    }
    if (jj_scan_token(123)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_175()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(115)) return true;
    if (jj_scan_token(COMPARE_OPERATOR)) return true;
    if (jj_scan_token(FLOAT)) return true;
    if (jj_scan_token(118)) return true;
    return false;
  }

  static private boolean jj_3R_27() {
    if (jj_3R_58()) return true;
    return false;
  }

  static private boolean jj_3_26() {
    if (jj_3R_43()) return true;
    return false;
  }

  static private boolean jj_3_25() {
    if (jj_3R_42()) return true;
    return false;
  }

  static private boolean jj_3R_162() {
    if (jj_3R_110()) return true;
    return false;
  }

  static private boolean jj_3R_42() {
    if (jj_3R_52()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_91()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_92()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_145() {
    if (jj_3R_44()) return true;
    return false;
  }

  static private boolean jj_3R_144() {
    if (jj_3R_167()) return true;
    return false;
  }

  static private boolean jj_3R_143() {
    if (jj_3R_43()) return true;
    return false;
  }

  static private boolean jj_3R_142() {
    if (jj_3R_42()) return true;
    return false;
  }

  static private boolean jj_3R_105() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_142()) {
    jj_scanpos = xsp;
    if (jj_3R_143()) {
    jj_scanpos = xsp;
    if (jj_3R_144()) {
    jj_scanpos = xsp;
    if (jj_3R_145()) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_33() {
    if (jj_3R_52()) return true;
    if (jj_3R_70()) return true;
    if (jj_3R_52()) return true;
    return false;
  }

  static private boolean jj_3_13() {
    if (jj_3R_33()) return true;
    return false;
  }

  static private boolean jj_3R_32() {
    if (jj_3R_68()) return true;
    if (jj_3R_69()) return true;
    if (jj_3R_68()) return true;
    return false;
  }

  static private boolean jj_3_12() {
    if (jj_3R_32()) return true;
    return false;
  }

  static private boolean jj_3_11() {
    if (jj_3R_31()) return true;
    return false;
  }

  static private boolean jj_3R_161() {
    if (jj_3R_109()) return true;
    return false;
  }

  static private boolean jj_3_10() {
    if (jj_scan_token(116)) return true;
    if (jj_3R_30()) return true;
    return false;
  }

  static private boolean jj_3R_116() {
    if (jj_3R_149()) return true;
    return false;
  }

  static private boolean jj_3R_115() {
    if (jj_3R_33()) return true;
    return false;
  }

  static private boolean jj_3R_88() {
    if (jj_scan_token(126)) return true;
    return false;
  }

  static private boolean jj_3R_114() {
    if (jj_3R_32()) return true;
    return false;
  }

  static private boolean jj_3R_113() {
    if (jj_3R_31()) return true;
    return false;
  }

  static private boolean jj_3R_87() {
    if (jj_scan_token(125)) return true;
    return false;
  }

  static private boolean jj_3_9() {
    if (jj_3R_29()) return true;
    return false;
  }

  static private boolean jj_3R_59() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_112()) {
    jj_scanpos = xsp;
    if (jj_3R_113()) {
    jj_scanpos = xsp;
    if (jj_3R_114()) {
    jj_scanpos = xsp;
    if (jj_3R_115()) {
    jj_scanpos = xsp;
    if (jj_3R_116()) return true;
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_112() {
    if (jj_scan_token(116)) return true;
    if (jj_3R_30()) return true;
    if (jj_scan_token(118)) return true;
    return false;
  }

  static private boolean jj_3_8() {
    if (jj_3R_28()) return true;
    return false;
  }

  static private boolean jj_3R_86() {
    if (jj_scan_token(120)) return true;
    return false;
  }

  static private boolean jj_3R_48() {
    if (jj_3R_101()) return true;
    return false;
  }

  static private boolean jj_3R_63() {
    if (jj_3R_59()) return true;
    return false;
  }

  static private boolean jj_3R_85() {
    if (jj_scan_token(124)) return true;
    return false;
  }

  static private boolean jj_3R_62() {
    if (jj_3R_117()) return true;
    return false;
  }

  static private boolean jj_3R_160() {
    if (jj_3R_108()) return true;
    return false;
  }

  static private boolean jj_3R_61() {
    if (jj_3R_29()) return true;
    return false;
  }

  static private boolean jj_3R_39() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_84()) {
    jj_scanpos = xsp;
    if (jj_3R_85()) {
    jj_scanpos = xsp;
    if (jj_3R_86()) {
    jj_scanpos = xsp;
    if (jj_3R_87()) {
    jj_scanpos = xsp;
    if (jj_3R_88()) return true;
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_84() {
    if (jj_scan_token(122)) return true;
    return false;
  }

  static private boolean jj_3R_60() {
    if (jj_3R_28()) return true;
    return false;
  }

  static private boolean jj_3R_30() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_60()) {
    jj_scanpos = xsp;
    if (jj_3R_61()) {
    jj_scanpos = xsp;
    if (jj_3R_62()) {
    jj_scanpos = xsp;
    if (jj_3R_63()) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_47() {
    if (jj_3R_100()) return true;
    return false;
  }

  static private boolean jj_3R_24() {
    if (jj_scan_token(K_CREATE)) return true;
    if (jj_scan_token(K_SENSOR)) return true;
    return false;
  }

  static private boolean jj_3R_183() {
    if (jj_scan_token(115)) return true;
    if (jj_3R_182()) return true;
    return false;
  }

  static private boolean jj_3R_164() {
    if (jj_scan_token(K_AS)) return true;
    if (jj_3R_52()) return true;
    return false;
  }

  static private boolean jj_3R_89() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(11)) {
    jj_scanpos = xsp;
    if (jj_scan_token(16)) {
    jj_scanpos = xsp;
    if (jj_scan_token(44)) {
    jj_scanpos = xsp;
    if (jj_scan_token(46)) {
    jj_scanpos = xsp;
    if (jj_scan_token(78)) return true;
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_23() {
    if (jj_scan_token(K_CREATE)) return true;
    if (jj_scan_token(K_VIEW)) return true;
    return false;
  }

  static private boolean jj_3R_159() {
    if (jj_3R_107()) return true;
    return false;
  }

  static private boolean jj_3_24() {
    if (jj_3R_30()) return true;
    return false;
  }

  static private boolean jj_3R_165() {
    if (jj_scan_token(K_MATRIX)) return true;
    if (jj_scan_token(119)) return true;
    if (jj_3R_182()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_183()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(123)) return true;
    return false;
  }

  static private boolean jj_3R_50() {
    if (jj_3R_102()) return true;
    return false;
  }

  static private boolean jj_3R_40() {
    if (jj_3R_89()) return true;
    if (jj_scan_token(116)) return true;
    if (jj_3R_52()) return true;
    if (jj_scan_token(118)) return true;
    return false;
  }

  static private boolean jj_3R_57() {
    if (jj_3R_110()) return true;
    return false;
  }

  static private boolean jj_3R_157() {
    if (jj_3R_68()) return true;
    return false;
  }

  static private boolean jj_3_23() {
    if (jj_3R_30()) return true;
    return false;
  }

  static private boolean jj_3R_156() {
    if (jj_3R_30()) return true;
    return false;
  }

  static private boolean jj_3R_139() {
    if (jj_3R_68()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_164()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3_7() {
    if (jj_3R_27()) return true;
    return false;
  }

  static private boolean jj_3R_130() {
    if (jj_scan_token(117)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_156()) {
    jj_scanpos = xsp;
    if (jj_3R_157()) return true;
    }
    return false;
  }

  static private boolean jj_3R_137() {
    if (jj_3R_163()) return true;
    if (jj_3R_46()) return true;
    return false;
  }

  static private boolean jj_3R_138() {
    if (jj_scan_token(122)) return true;
    return false;
  }

  static private boolean jj_3R_129() {
    if (jj_3R_68()) return true;
    return false;
  }

  static private boolean jj_3R_128() {
    if (jj_3R_30()) return true;
    return false;
  }

  static private boolean jj_3R_49() {
    if (jj_scan_token(K_CREATE)) return true;
    if (jj_scan_token(K_STREAM)) return true;
    return false;
  }

  static private boolean jj_3R_22() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_49()) {
    jj_scanpos = xsp;
    if (jj_3R_50()) return true;
    }
    return false;
  }

  static private boolean jj_3R_109() {
    if (jj_scan_token(K_HAVING)) return true;
    if (jj_3R_30()) return true;
    return false;
  }

  static private boolean jj_3R_90() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_128()) {
    jj_scanpos = xsp;
    if (jj_3R_129()) return true;
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_130()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_56() {
    if (jj_3R_109()) return true;
    return false;
  }

  static private boolean jj_3R_41() {
    if (jj_3R_52()) return true;
    if (jj_scan_token(116)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_90()) jj_scanpos = xsp;
    if (jj_scan_token(118)) return true;
    return false;
  }

  static private boolean jj_3R_146() {
    if (jj_scan_token(117)) return true;
    if (jj_3R_52()) return true;
    return false;
  }

  static private boolean jj_3R_136() {
    if (jj_3R_51()) return true;
    if (jj_3R_53()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_159()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_160()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_161()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_162()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_108() {
    if (jj_scan_token(K_GROUP)) return true;
    if (jj_scan_token(K_BY)) return true;
    if (jj_3R_52()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_146()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3_22() {
    if (jj_3R_41()) return true;
    return false;
  }

  static private boolean jj_3R_99() {
    if (jj_scan_token(116)) return true;
    if (jj_3R_46()) return true;
    if (jj_scan_token(118)) return true;
    return false;
  }

  static private boolean jj_3R_46() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_98()) {
    jj_scanpos = xsp;
    if (jj_3R_99()) return true;
    }
    return false;
  }

  static private boolean jj_3R_98() {
    if (jj_3R_136()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_137()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3_21() {
    if (jj_3R_40()) return true;
    return false;
  }

  static private boolean jj_3R_127() {
    if (jj_scan_token(120)) return true;
    return false;
  }

  static private boolean jj_3R_107() {
    if (jj_scan_token(K_WHERE)) return true;
    if (jj_3R_30()) return true;
    return false;
  }

  static private boolean jj_3R_45() {
    if (jj_3R_97()) return true;
    return false;
  }

  static private boolean jj_3R_83() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_127()) jj_scanpos = xsp;
    if (jj_3R_52()) return true;
    return false;
  }

  static private boolean jj_3R_21() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_45()) jj_scanpos = xsp;
    if (jj_3R_46()) return true;
    xsp = jj_scanpos;
    if (jj_3R_47()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_48()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_82() {
    if (jj_scan_token(116)) return true;
    if (jj_3R_68()) return true;
    if (jj_scan_token(118)) return true;
    return false;
  }

  static private boolean jj_3R_106() {
    if (jj_scan_token(117)) return true;
    if (jj_3R_105()) return true;
    return false;
  }

  static private boolean jj_3R_81() {
    if (jj_3R_41()) return true;
    return false;
  }

  static private boolean jj_3R_80() {
    if (jj_3R_40()) return true;
    return false;
  }

  static private boolean jj_3R_55() {
    if (jj_3R_108()) return true;
    return false;
  }

  static private boolean jj_3R_53() {
    if (jj_scan_token(K_FROM)) return true;
    if (jj_3R_105()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_106()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_79() {
    if (jj_3R_126()) return true;
    return false;
  }

  static private boolean jj_3R_38() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_78()) {
    jj_scanpos = xsp;
    if (jj_3R_79()) {
    jj_scanpos = xsp;
    if (jj_3R_80()) {
    jj_scanpos = xsp;
    if (jj_3R_81()) {
    jj_scanpos = xsp;
    if (jj_3R_82()) {
    jj_scanpos = xsp;
    if (jj_3R_83()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_78() {
    if (jj_3R_125()) return true;
    return false;
  }

  static private boolean jj_3R_166() {
    if (jj_3R_165()) return true;
    return false;
  }

  static private boolean jj_3_20() {
    if (jj_3R_38()) return true;
    if (jj_3R_39()) return true;
    return false;
  }

  static private boolean jj_3R_135() {
    if (jj_scan_token(SQL_STRING)) return true;
    return false;
  }

  static private boolean jj_3R_121() {
    if (jj_3R_38()) return true;
    return false;
  }

  static private boolean jj_3R_141() {
    if (jj_3R_165()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_166()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_140() {
    if (jj_scan_token(117)) return true;
    if (jj_3R_139()) return true;
    return false;
  }

  static private boolean jj_3R_184() {
    if (jj_3R_126()) return true;
    if (jj_scan_token(117)) return true;
    return false;
  }

  static private boolean jj_3R_68() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_120()) {
    jj_scanpos = xsp;
    if (jj_3R_121()) return true;
    }
    return false;
  }

  static private boolean jj_3R_120() {
    if (jj_3R_38()) return true;
    if (jj_3R_39()) return true;
    if (jj_3R_68()) return true;
    return false;
  }

  static private boolean jj_3R_167() {
    if (jj_scan_token(K_DB_SELECT)) return true;
    if (jj_scan_token(116)) return true;
    if (jj_3R_52()) return true;
    if (jj_scan_token(117)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_184()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_135()) return true;
    if (jj_scan_token(118)) return true;
    if (jj_scan_token(K_AS)) return true;
    if (jj_3R_52()) return true;
    return false;
  }

  static private boolean jj_3R_54() {
    if (jj_3R_107()) return true;
    return false;
  }

  static private boolean jj_3R_104() {
    if (jj_3R_139()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_140()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_141()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_103() {
    if (jj_3R_138()) return true;
    return false;
  }

  static private boolean jj_3_6() {
    if (jj_3R_26()) return true;
    return false;
  }

  static private boolean jj_3R_97() {
    if (jj_scan_token(K_DB_EXECUTE)) return true;
    if (jj_scan_token(116)) return true;
    if (jj_3R_52()) return true;
    if (jj_scan_token(117)) return true;
    if (jj_3R_135()) return true;
    if (jj_scan_token(118)) return true;
    return false;
  }

  static private boolean jj_3R_51() {
    if (jj_scan_token(K_SELECT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_103()) {
    jj_scanpos = xsp;
    if (jj_3R_104()) return true;
    }
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_3R_21()) return true;
    return false;
  }

  static private boolean jj_3R_76() {
    if (jj_scan_token(117)) return true;
    if (jj_3R_71()) return true;
    return false;
  }

  static private boolean jj_3_5() {
    if (jj_3R_25()) return true;
    return false;
  }

  static private boolean jj_3R_36() {
    if (jj_scan_token(116)) return true;
    if (jj_3R_71()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_76()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(118)) return true;
    return false;
  }

  static private boolean jj_3_4() {
    if (jj_3R_24()) return true;
    return false;
  }

  static private boolean jj_3_3() {
    if (jj_3R_23()) return true;
    return false;
  }

  static private boolean jj_3_2() {
    if (jj_3R_22()) return true;
    return false;
  }

  static private boolean jj_3R_163() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(84)) {
    jj_scanpos = xsp;
    if (jj_scan_token(37)) {
    jj_scanpos = xsp;
    if (jj_scan_token(47)) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_204() {
    if (jj_scan_token(K_WEEK)) return true;
    return false;
  }

  static private boolean jj_3R_203() {
    if (jj_scan_token(K_DAY)) return true;
    return false;
  }

  static private boolean jj_3R_202() {
    if (jj_scan_token(K_HOUR)) return true;
    return false;
  }

  static private boolean jj_3R_201() {
    if (jj_scan_token(K_MINUTE)) return true;
    return false;
  }

  static private boolean jj_3R_200() {
    if (jj_scan_token(K_SECOND)) return true;
    return false;
  }

  static private boolean jj_3R_197() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_200()) {
    jj_scanpos = xsp;
    if (jj_3R_201()) {
    jj_scanpos = xsp;
    if (jj_3R_202()) {
    jj_scanpos = xsp;
    if (jj_3R_203()) {
    jj_scanpos = xsp;
    if (jj_3R_204()) return true;
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_134() {
    if (jj_scan_token(K_QUEUE)) return true;
    if (jj_scan_token(K_BY)) return true;
    if (jj_scan_token(116)) return true;
    if (jj_3R_46()) return true;
    if (jj_scan_token(118)) return true;
    return false;
  }

  static private boolean jj_3R_101() {
    if (jj_scan_token(K_METRIC)) return true;
    if (jj_scan_token(K_ON)) return true;
    if (jj_3R_52()) return true;
    return false;
  }

  static private boolean jj_3R_191() {
    if (jj_3R_77()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_197()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_133() {
    if (jj_3R_52()) return true;
    return false;
  }

  static private boolean jj_3R_179() {
    if (jj_3R_52()) return true;
    return false;
  }

  static private boolean jj_3R_178() {
    if (jj_3R_152()) return true;
    return false;
  }

  static private boolean jj_3R_26() {
    if (jj_3R_51()) return true;
    if (jj_scan_token(K_INTO)) return true;
    if (jj_3R_52()) return true;
    if (jj_3R_53()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_54()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_55()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_56()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_57()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_196() {
    if (jj_scan_token(FLOAT)) return true;
    return false;
  }

  static private boolean jj_3R_155() {
    if (jj_scan_token(117)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_178()) {
    jj_scanpos = xsp;
    if (jj_3R_179()) return true;
    }
    return false;
  }

  static private boolean jj_3R_182() {
    Token xsp;
    if (jj_3R_196()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_196()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_132() {
    if (jj_scan_token(116)) return true;
    if (jj_3R_46()) return true;
    if (jj_scan_token(118)) return true;
    if (jj_scan_token(K_AS)) return true;
    if (jj_3R_52()) return true;
    return false;
  }

  static private boolean jj_3R_154() {
    if (jj_3R_52()) return true;
    return false;
  }

  static private boolean jj_3R_153() {
    if (jj_3R_152()) return true;
    return false;
  }

  static private boolean jj_3R_96() {
    if (jj_3R_134()) return true;
    return false;
  }

  static private boolean jj_3R_95() {
    if (jj_3R_133()) return true;
    return false;
  }

  static private boolean jj_3R_124() {
    if (jj_scan_token(119)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_153()) {
    jj_scanpos = xsp;
    if (jj_3R_154()) return true;
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_155()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(123)) return true;
    return false;
  }

  static private boolean jj_3R_123() {
    if (jj_3R_52()) return true;
    return false;
  }

  static private boolean jj_3R_71() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_122()) {
    jj_scanpos = xsp;
    if (jj_3R_123()) {
    jj_scanpos = xsp;
    if (jj_3R_124()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_122() {
    if (jj_3R_152()) return true;
    return false;
  }

  static private boolean jj_3R_94() {
    if (jj_3R_132()) return true;
    return false;
  }

  static private boolean jj_3R_168() {
    if (jj_3R_77()) return true;
    if (jj_scan_token(K_DEFAULT)) return true;
    return false;
  }

  static private boolean jj_3R_44() {
    if (jj_scan_token(K_BROKER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_94()) {
    jj_scanpos = xsp;
    if (jj_3R_95()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3R_96()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3_19() {
    if (jj_scan_token(117)) return true;
    if (jj_3R_37()) return true;
    return false;
  }

  static private boolean jj_3R_37() {
    if (jj_3R_77()) return true;
    if (jj_scan_token(K_WHERE)) return true;
    if (jj_3R_30()) return true;
    return false;
  }

  static private boolean jj_3R_148() {
    if (jj_scan_token(117)) return true;
    if (jj_3R_168()) return true;
    return false;
  }

  static private boolean jj_3R_25() {
    if (jj_scan_token(K_CREATE)) return true;
    if (jj_scan_token(K_BROKER)) return true;
    return false;
  }

  static private boolean jj_3R_147() {
    if (jj_scan_token(117)) return true;
    if (jj_3R_37()) return true;
    return false;
  }

  static private boolean jj_3R_110() {
    if (jj_scan_token(K_SET)) return true;
    if (jj_scan_token(K_PRIORITY)) return true;
    if (jj_3R_37()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_147()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_148()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_102() {
    if (jj_scan_token(K_OSGI)) return true;
    if (jj_scan_token(REGEXP)) return true;
    return false;
  }

  static private boolean jj_3_18() {
    if (jj_3R_36()) return true;
    return false;
  }

  static private boolean jj_3R_118() {
    if (jj_scan_token(K_EXISTS)) return true;
    if (jj_scan_token(116)) return true;
    if (jj_3R_46()) return true;
    if (jj_scan_token(118)) return true;
    return false;
  }

  static private boolean jj_3R_151() {
    if (jj_scan_token(116)) return true;
    if (jj_3R_46()) return true;
    if (jj_scan_token(118)) return true;
    return false;
  }

  static private boolean jj_3R_150() {
    if (jj_3R_36()) return true;
    return false;
  }

  static private boolean jj_3R_70() {
    if (jj_scan_token(S_COMPARE)) return true;
    return false;
  }

  static private boolean jj_3_17() {
    if (jj_3R_36()) return true;
    return false;
  }

  static private boolean jj_3R_119() {
    if (jj_3R_71()) return true;
    if (jj_scan_token(K_IN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_150()) {
    jj_scanpos = xsp;
    if (jj_3R_151()) return true;
    }
    return false;
  }

  static private boolean jj_3R_75() {
    if (jj_scan_token(116)) return true;
    if (jj_3R_46()) return true;
    if (jj_scan_token(118)) return true;
    return false;
  }

  static private boolean jj_3R_74() {
    if (jj_3R_36()) return true;
    return false;
  }

  static private boolean jj_3R_69() {
    if (jj_scan_token(COMPARE_OPERATOR)) return true;
    return false;
  }

  static private boolean jj_3_16() {
    if (jj_3R_36()) return true;
    return false;
  }

  static private boolean jj_3R_35() {
    if (jj_3R_71()) return true;
    if (jj_3R_69()) return true;
    if (jj_scan_token(K_ALL)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_74()) {
    jj_scanpos = xsp;
    if (jj_3R_75()) return true;
    }
    return false;
  }

  static private boolean jj_3R_73() {
    if (jj_scan_token(116)) return true;
    if (jj_3R_46()) return true;
    if (jj_scan_token(118)) return true;
    return false;
  }

  static private boolean jj_3R_72() {
    if (jj_3R_36()) return true;
    return false;
  }

  static private boolean jj_3R_126() {
    if (jj_scan_token(CHAR_LITERAL)) return true;
    return false;
  }

  static private boolean jj_3_15() {
    if (jj_3R_35()) return true;
    return false;
  }

  static private boolean jj_3R_34() {
    if (jj_3R_71()) return true;
    if (jj_3R_69()) return true;
    if (jj_scan_token(K_ANY)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_72()) {
    jj_scanpos = xsp;
    if (jj_3R_73()) return true;
    }
    return false;
  }

  static private boolean jj_3_14() {
    if (jj_3R_34()) return true;
    return false;
  }

  static private boolean jj_3R_67() {
    if (jj_3R_119()) return true;
    return false;
  }

  static private boolean jj_3R_66() {
    if (jj_3R_35()) return true;
    return false;
  }

  static private boolean jj_3R_177() {
    if (jj_3R_126()) return true;
    return false;
  }

  static private boolean jj_3R_65() {
    if (jj_3R_34()) return true;
    return false;
  }

  static private boolean jj_3R_125() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(101)) {
    jj_scanpos = xsp;
    if (jj_scan_token(102)) return true;
    }
    return false;
  }

  static private boolean jj_3R_176() {
    if (jj_3R_125()) return true;
    return false;
  }

  static private boolean jj_3R_152() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_176()) {
    jj_scanpos = xsp;
    if (jj_3R_177()) return true;
    }
    return false;
  }

  static private boolean jj_3R_64() {
    if (jj_3R_118()) return true;
    return false;
  }

  static private boolean jj_3R_31() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_64()) {
    jj_scanpos = xsp;
    if (jj_3R_65()) {
    jj_scanpos = xsp;
    if (jj_3R_66()) {
    jj_scanpos = xsp;
    if (jj_3R_67()) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_117() {
    if (jj_scan_token(K_NOT)) return true;
    if (jj_3R_30()) return true;
    return false;
  }

  static private boolean jj_3R_77() {
    if (jj_scan_token(INTEGER)) return true;
    return false;
  }

  static private boolean jj_3R_29() {
    if (jj_3R_59()) return true;
    if (jj_scan_token(K_AND)) return true;
    if (jj_3R_30()) return true;
    return false;
  }

  static private boolean jj_3R_28() {
    if (jj_3R_59()) return true;
    if (jj_scan_token(K_OR)) return true;
    if (jj_3R_30()) return true;
    return false;
  }

  static private boolean jj_3R_52() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3R_100() {
    if (jj_scan_token(K_PRIORITY)) return true;
    if (jj_scan_token(INTEGER)) return true;
    return false;
  }

  static private boolean jj_3R_198() {
    if (jj_scan_token(K_SLIDE)) return true;
    if (jj_3R_191()) return true;
    return false;
  }

  static private boolean jj_3R_195() {
    if (jj_scan_token(K_VALID)) return true;
    if (jj_scan_token(K_ALWAYS)) return true;
    return false;
  }

  static private boolean jj_3R_190() {
    if (jj_scan_token(K_INFTY)) return true;
    return false;
  }

  static private boolean jj_3R_189() {
    if (jj_scan_token(FLOAT)) return true;
    return false;
  }

  static private boolean jj_3R_205() {
    if (jj_scan_token(117)) return true;
    if (jj_3R_52()) return true;
    return false;
  }

  static private boolean jj_3R_199() {
    if (jj_3R_52()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_205()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_188() {
    if (jj_scan_token(120)) return true;
    if (jj_scan_token(K_INFTY)) return true;
    return false;
  }

  static private boolean jj_3R_187() {
    if (jj_scan_token(FLOAT)) return true;
    return false;
  }

  static private boolean jj_3R_175() {
    if (jj_scan_token(117)) return true;
    if (jj_scan_token(119)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_187()) {
    jj_scanpos = xsp;
    if (jj_3R_188()) return true;
    }
    if (jj_scan_token(117)) return true;
    xsp = jj_scanpos;
    if (jj_3R_189()) {
    jj_scanpos = xsp;
    if (jj_3R_190()) return true;
    }
    if (jj_scan_token(123)) return true;
    return false;
  }

  static private boolean jj_3R_181() {
    if (jj_scan_token(K_UNBOUNDED)) return true;
    return false;
  }

  static private boolean jj_3R_174() {
    if (jj_scan_token(K_INFTY)) return true;
    return false;
  }

  static private boolean jj_3R_194() {
    if (jj_scan_token(K_PARTITION)) return true;
    if (jj_scan_token(K_BY)) return true;
    if (jj_3R_199()) return true;
    return false;
  }

  static private boolean jj_3R_173() {
    if (jj_scan_token(FLOAT)) return true;
    return false;
  }

  static private boolean jj_3R_193() {
    if (jj_3R_198()) return true;
    return false;
  }

  static private boolean jj_3R_93() {
    if (jj_3R_131()) return true;
    return false;
  }

  static private boolean jj_3R_172() {
    if (jj_scan_token(120)) return true;
    if (jj_scan_token(K_INFTY)) return true;
    return false;
  }

  static private boolean jj_3R_192() {
    if (jj_scan_token(K_TUPLE)) return true;
    return false;
  }

  static private boolean jj_3R_171() {
    if (jj_scan_token(FLOAT)) return true;
    return false;
  }

  static private boolean jj_3R_92() {
    if (jj_scan_token(K_AS)) return true;
    if (jj_3R_52()) return true;
    return false;
  }

  static private boolean jj_3R_170() {
    if (jj_3R_165()) return true;
    if (jj_scan_token(122)) return true;
    if (jj_3R_52()) return true;
    if (jj_scan_token(124)) return true;
    if (jj_3R_165()) return true;
    return false;
  }

  static private boolean jj_3R_180() {
    if (jj_scan_token(K_SIZE)) return true;
    if (jj_3R_191()) return true;
    if (jj_scan_token(K_ADVANCE)) return true;
    if (jj_3R_191()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(79)) {
    jj_scanpos = xsp;
    if (jj_3R_192()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3R_193()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_194()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_195()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_158() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_180()) {
    jj_scanpos = xsp;
    if (jj_3R_181()) return true;
    }
    return false;
  }

  static private boolean jj_3R_111() {
    if (jj_scan_token(119)) return true;
    return false;
  }

  static private boolean jj_3R_186() {
    if (jj_scan_token(124)) return true;
    return false;
  }

  static private boolean jj_3R_185() {
    if (jj_scan_token(120)) return true;
    return false;
  }

  static private boolean jj_3R_91() {
    if (jj_3R_131()) return true;
    return false;
  }

  static private boolean jj_3R_131() {
    if (jj_scan_token(119)) return true;
    if (jj_3R_158()) return true;
    if (jj_scan_token(123)) return true;
    return false;
  }

  static private boolean jj_3R_58() {
    if (jj_scan_token(116)) return true;
    if (jj_3R_111()) return true;
    return false;
  }

  static private boolean jj_3R_169() {
    if (jj_scan_token(116)) return true;
    if (jj_3R_165()) return true;
    if (jj_scan_token(122)) return true;
    if (jj_3R_52()) return true;
    if (jj_scan_token(124)) return true;
    if (jj_3R_165()) return true;
    if (jj_scan_token(118)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_185()) {
    jj_scanpos = xsp;
    if (jj_3R_186()) return true;
    }
    if (jj_scan_token(116)) return true;
    if (jj_3R_165()) return true;
    if (jj_scan_token(122)) return true;
    if (jj_3R_52()) return true;
    if (jj_scan_token(124)) return true;
    if (jj_3R_165()) return true;
    if (jj_scan_token(118)) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public NewSQLParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[104];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
      jj_la1_init_3();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x220000,0x0,0x200000,0x0,0x0,0x0,0x0,0x0,0x80000000,0x0,0x0,0x40000000,0x200000,0x40044000,0x40044000,0x20000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x24000000,0x2c080000,0x0,0x0,0x0,0x0,0x0,0x0,0x10800,0x0,0x0,0x400,0x0,0x10010800,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x100000,0x100000,0x0,0x20,0x10800,0x0,0x0,0x0,0x10800,0x0,0x10800,0x10010800,0x10800,0x0,0x400000,0x0,0x400,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80000000,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x2000000,0x0,0x0,0x10000000,0x2000,0x8020,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x2000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20000,0x20000,0x0,0x20000,0x20000,0x0,0x0,0x0,0x0,0x0,0x410,0x20410,0x0,0x0,0x8020,0x0,0x800,0x800,0x5000,0x0,0x0,0x0,0x0,0x20085000,0x20000000,0x0,0x800,0x0,0x8,0x0,0x0,0x8,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10002,0x10002,0x0,0x4,0x5000,0x0,0x0,0x0,0x5000,0x0,0x5000,0x20085000,0x5000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8000000,0x0,0x0,0x0,0x0,0x0,0x0,0x40000000,0x0,0x40000000,0x0,0x0,0x1,0x0,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x20,0x0,0x0,0x0,0x0,0x100000,0x20,0x1000000,0x0,0x0,0x40,0x2000000,0x20,0x2000480,0x2000480,0x0,0x38000000,0x38000000,0x38000000,0x8000000,0x10000000,0x20000000,0x38000000,0x0,0x0,0x0,0x0,0x40000,0x40000,0x0,0x40000,0x40000,0x0,0x0,0x0,0x0,0x0,0x0,0x2800,0x0,0x0,0x100000,0x0,0x0,0x0,0x4000,0x0,0x0,0x0,0x0,0x4000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x800010,0x800010,0x0,0x0,0x4000,0x0,0x0,0x0,0x4000,0x0,0x4000,0x4000,0x4000,0x0,0x0,0x0,0x0,0x0,0x48000,0x200,0x0,0x200000,0x80100,0x0,0x0,0x38000000,0x38000000,0x0,0x0,0x0,0x1000000,0x0,0x0,0x40,};
   }
   private static void jj_la1_init_3() {
      jj_la1_3 = new int[] {0x80000,0x100000,0x4000,0x0,0x0,0x0,0x0,0x100000,0x0,0x0,0x0,0x0,0x0,0x100000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x200000,0x200000,0x1000040,0x200000,0x0,0x0,0x2000000,0x0,0x0,0x2000000,0x2000000,0x900,0x200000,0x4060,0x0,0x0,0x20,0x800,0x0,0x200000,0x0,0x0,0x5104860,0x200000,0x200000,0x0,0x80000,0x1904860,0x0,0x11000000,0x100000,0x1000020,0x20,0x200000,0x1000020,0x20,0x0,0x804860,0x100000,0x100000,0x100000,0x200000,0x4860,0x200000,0x4860,0x804860,0x0,0x0,0x200000,0x0,0x1104860,0x1000000,0x4060,0x1100800,0x1104860,0x200000,0x1104860,0x1904860,0x0,0x75000000,0x0,0x800000,0x0,0x800000,0x0,0x0,0x0,0x0,0x0,0x200000,0x60,0x800,0x800,0x0,0x100800,0x0,0x0,0x0,0x0,0x0,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[27];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public NewSQLParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public NewSQLParser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new NewSQLParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 104; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 104; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public NewSQLParser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new NewSQLParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 104; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 104; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public NewSQLParser(NewSQLParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 104; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(NewSQLParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 104; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[127];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 104; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 127; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 27; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

 }
