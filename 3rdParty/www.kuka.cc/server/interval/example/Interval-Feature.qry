#PARSER PQL
#ADDQUERY
///Your first pql-query here

input = ACCESS({source='Source',
wrapper='GenericPush',
transport='Timer',
protocol='None',
dataHandler='Tuple',
options=[['period', '1000']],
schema=[['time', 'Timestamp']]
})

intervalMap = map({expressions = [
'toInterval(1.0,5.0)',
'toInterval(1.0,5.0)+toInterval(-2.0,3.0)',
'toInterval(1.0,5.0)-toInterval(-2.0,3.0)',
'toInterval(1.0,5.0)*toInterval(-2.0,3.0)',
'toInterval(1.0,5.0)/toInterval(-2.0,3.0)',
'union(toInterval(1.0,5.0), toInterval(-2.0,3.0))',
'difference(toInterval(1.0,5.0), toInterval(-2.0,3.0))',
'intersection(toInterval(1.0,5.0), toInterval(-2.0,3.0))',
'toInterval(toInteger(1),toInteger(5))',
'toInterval(toInteger(1),toInteger(5))+toInterval(toInteger(-2),toInteger(3))',
'toInterval(toInteger(1),toInteger(5))-toInterval(toInteger(-2),toInteger(3))',
'toInterval(toInteger(1),toInteger(5))*toInterval(toInteger(-2),toInteger(3))',
'toInterval(toInteger(1),toInteger(5))/toInterval(toInteger(-2),toInteger(3))',
'union(toInterval(toInteger(1),toInteger(5)), toInterval(toInteger(-2),toInteger(3)))',
'difference(toInterval(toInteger(1),toInteger(5)), toInterval(toInteger(-2),toInteger(3)))',
'intersection(toInterval(toInteger(1),toInteger(5)), toInterval(toInteger(-2),toInteger(3)))',
'after(toInterval(4.0,5.0),toInterval(-2.0,3.0))',
'before(toInterval(1.0,5.0),toInterval(6.0,7.0))',
'contains(toInterval(1.0,5.0),toInterval(2.0,3.0))',
'during(toInterval(1.0,5.0),toInterval(0.0,6.0))',
'equals(toInterval(1.0,5.0),toInterval(1.0,5.0))',
'finishes(toInterval(3.0,5.0),toInterval(-2.0,5.0))',
'meets(toInterval(1.0,2.0),toInterval(2.0,3.0))',
'overlaps(toInterval(1.0,5.0),toInterval(-2.0,3.0))',
'starts(toInterval(1.0,5.0),toInterval(1.0,3.0))'
]}, input)