/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. ProceduralExpressionParser.jj */
/*@egen*//**
* JJTree file
*/

options {
  JDK_VERSION = "1.5";
  IGNORE_CASE = true;
               
                 
  DEBUG_PARSER = true;
  DEBUG_TOKEN_MANAGER = false;
                             
                                     
                                                           
  //LOOKAHEAD = 2;
  //FORCE_LA_CHECK = true;
}
 
PARSER_BEGIN(ProceduralExpressionParser) 
package de.uniol.inf.is.odysseus.pqlhack.parser;

public class ProceduralExpressionParser/*@bgen(jjtree)*/implements ProceduralExpressionParserTreeConstants/*@egen*/{/*@bgen(jjtree)*/
  protected static JJTProceduralExpressionParserState jjtree = new JJTProceduralExpressionParserState();

/*@egen*/} PARSER_END(ProceduralExpressionParser)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
/*| <"//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
| <"/*" (~["*"])* "*" (~["/"] (~["*"])* "*")* "/">*/
}


TOKEN : /* Keywords */ {
	<K_ACCESS: "ACCESS">
|	<K_AS: "AS">
|	<K_AND: "AND">
|	<K_AVG: "AVG">
|   <K_BENCHMARK: "BENCHMARK">
|	<K_BENCHMARK_EXT: "BENCHMARK-EXT">
|   <K_BROKER: "BROKER">
|	<K_BUFFER: "BUFFER">
|	<K_EXIST: "EXIST">
|	<K_NOT_EXIST : "NOT_EXIST">
|	<K_COUNT: "COUNT">
|	<K_DEFAULT: "DEFAULT">
|	<K_IN: "IN">
|	<K_JOIN: "JOIN">
|	<K_LOGICAL: "LOGICAL">
|	<K_MAX: "MAX">
|	<K_MIN: "MIN">
|	<K_NOT: "NOT">
|	<K_OR: "OR">
|	<K_ON: "ON">
|	<K_PLAN: "PLAN">
|   <K_PREDICTION: "PREDICTION">
|	<K_PROJECTION: "PROJECTION">
|	<K_PUNCTUATION: "PUNCTUATION">
|   <K_QUEUE: "QUEUE">
|   <K_RELATIONAL_PROJECTION: "RPROJECTION">
|   <K_RELATIONAL_SELECTION: "RSELECTION">
|   <K_RELATIONAL_JOIN: "RJOIN">
|   <K_RELATIONAL_NEST: "RNEST">
|   <K_RELATIONAL_UNNEST: "RUNNEST">
|	<K_SCHEMA_CONVERT: "SCHEMACONVERT">
|	<K_SELECTION: "SELECTION">
|	<K_SET_PREDICTION: "SET-PREDICTION">
|   <K_SET_PREDICTION_OR : "SET-PREDICTION-OR" >
|	<K_SIZE: "SIZE">
|	<K_SLIDE: "SLIDE">
|	<K_SLDING_TIME_WINDOW: "SLIDING-TIME-WINDOW">
|	<K_SUM: "SUM">
|	<K_TUMBLING_TIME_WINDOW: "TUMBLING-TIME-WINDOW">
|	<K_WHERE: "WHERE">
|   <K_TEST: "TESTOP">
|   <K_ASSOCIATION_GEN: "ASSOCIATION-GEN">
|   <K_ASSOCIATION_EVAL: "ASSOCIATION-EVAL">
|   <K_ASSOCIATION_SEL: "ASSOCIATION-SEL">
|   <K_ASSOCIATION_SRC: "ASSOCIATION-SRC">
|   <K_EVALUATE: "EVALUATE">
|   <K_FILTER_GAIN: "FILTER-GAIN">
|   <K_FILTER_ESTIMATE: "FILTER-ESTIMATE">
|   <K_FILTER_COVARIANCE: "FILTER-COVARIANCE">
|   <K_BROKER_INIT: "BROKER-INIT">
}

TOKEN:{
  <IDENTIFIER:(<LETTER>)+(<DIGIT>
  | <LETTER>
  | <SPECIAL_CHARS>)*>
  | <#LETTER:["a"-"z", "A"-"Z"]>
  | <#SPECIAL_CHARS:":"
  | "_"
  | ".">
  | <CHAR_LITERAL:"'"(~["'"])*"'"("'"(~["'"])*"'")*>
  | <QUOTED_IDENTIFIER:"\""(~["\n", "\r", "\""])*"\"">
  | <COMPARE_OPERATOR:"="
  | "<>"
  | ">"
  | "<"
  | "<="
  | ">=">
  | <REGEXP: "/" ("^")?(<LETTER> | <DIGIT> | "\\" | "+" | "." | "*" | "?" | "$")+ "/" >
}

TOKEN:/* Numeric Constants */
{
  //  <NUMBER:<FLOAT>
//  | <FLOAT>(["e", "E"](["-", "+"])?<FLOAT>)?>
//  | <#FLOAT:<INTEGER>
//  | <INTEGER>("."<INTEGER>)?
//  | "."<INTEGER>>
<FLOAT:("-")?(<INTEGER>"."<INTEGER>
  | "."<INTEGER>)>
  | <INTEGER:(<DIGIT>)+>
  | <#DIGIT:["0"-"9"]>
 | <IPADDRESS:<DIGIT>(<DIGIT>)?(<DIGIT>)?"."<DIGIT>(<DIGIT>)?(<DIGIT>)?"."<DIGIT>(<DIGIT>)?(<DIGIT>)?"."<DIGIT>(<DIGIT>)?(<DIGIT>)?>
}

ASTLogicalPlan LogicalPlan():{/*@bgen(jjtree) LogicalPlan */
  ASTLogicalPlan jjtn000 = new ASTLogicalPlan(JJTLOGICALPLAN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) LogicalPlan */
        try {
/*@egen*/
	
	<K_LOGICAL><K_PLAN>":" (AlgebraOp() [";"])+ < EOF >/*@bgen(jjtree)*/
                                                            {
                                                              jjtree.closeNodeScope(jjtn000, true);
                                                              jjtc000 = false;
                                                            }
/*@egen*/ {return jjtn000;}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void AlgebraOp():{/*@bgen(jjtree) AlgebraOp */
  ASTAlgebraOp jjtn000 = new ASTAlgebraOp(JJTALGEBRAOP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) AlgebraOp */
        try {
/*@egen*/
	ProjectionOp() | RelationalProjectionOp() |
	SelectionOp() | RelationalSelectionOp() |
	JoinOp() | RelationalJoinOp() |
	RelationalNestOp() |
	RelationalUnnestOp() |
	WindowOp() |
	AccessOp() |
	BrokerOp() |
	PredictionAssignOp() |
	PredictionAssignOrOp() |
	PredictionOp() |
	TestOp() |
	AssociationGenOp() |
	AssociationEvalOp() |
	AssociationSelOp() |
	AssociationSrcOp() |
	EvaluateOp() |
	SchemaConvertOp() |
	BenchmarkOp() |
	BenchmarkOpExt()|
	BufferOp() |
	ExistOp() |
	FilterGainOp() |
	FilterEstimateOp() |
	FilterCovarianceOp() |
	PunctuationOp()|
	BrokerInitOp()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}

void TestOp(): {/*@bgen(jjtree) TestOp */
  ASTTestOp jjtn000 = new ASTTestOp(JJTTESTOP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) TestOp */
    try {
/*@egen*/
    <K_TEST>"(" AlgebraOp() "," Identifier() ")"/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void ExistOp() : {/*@bgen(jjtree) ExistOp */
  ASTExistOp jjtn000 = new ASTExistOp(JJTEXISTOP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) ExistOp */
        try {
/*@egen*/

	(<K_EXIST> {jjtn000.setType("exist");} | <K_NOT_EXIST> {jjtn000.setType("not exist");})
			"(" AlgebraOp() "," AlgebraOp() "," Predicate() ")"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void BenchmarkOp() : {/*@bgen(jjtree) BenchmarkOp */
  ASTBenchmarkOp jjtn000 = new ASTBenchmarkOp(JJTBENCHMARKOP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) BenchmarkOp */
        try {
/*@egen*/
	<K_BENCHMARK>"(" AlgebraOp() "," Number() "," Number() ")"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void BenchmarkOpExt() : {/*@bgen(jjtree) BenchmarkOpExt */
  ASTBenchmarkOpExt jjtn000 = new ASTBenchmarkOpExt(JJTBENCHMARKOPEXT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) BenchmarkOpExt */
        try {
/*@egen*/
	<K_BENCHMARK_EXT>"(" AlgebraOp() "," Number() "," Number() ")"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void BufferOp(): {/*@bgen(jjtree) BufferOp */
  ASTBufferOp jjtn000 = new ASTBufferOp(JJTBUFFEROP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) BufferOp */
        try {
/*@egen*/
	<K_BUFFER>"(" AlgebraOp() "," Identifier() ")"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void PunctuationOp(): {/*@bgen(jjtree) PunctuationOp */
  ASTPunctuationOp jjtn000 = new ASTPunctuationOp(JJTPUNCTUATIONOP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) PunctuationOp */
        try {
/*@egen*/
	<K_PUNCTUATION>"(" AlgebraOp() "," Number() ")"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void ProjectionOp(): {/*@bgen(jjtree) ProjectionOp */
  ASTProjectionOp jjtn000 = new ASTProjectionOp(JJTPROJECTIONOP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) ProjectionOp */
        try {
/*@egen*/
	<K_PROJECTION>"(" AlgebraOp() ","  (/*@bgen(jjtree) ProjectionIdentifier */
                                            {
                                              ASTProjectionIdentifier jjtn001 = new ASTProjectionIdentifier(JJTPROJECTIONIDENTIFIER);
                                              boolean jjtc001 = true;
                                              jjtree.openNodeScope(jjtn001);
                                            }
                                            try {
/*@egen*/Identifier()/*@bgen(jjtree)*/
                                            } catch (Throwable jjte001) {
                                              if (jjtc001) {
                                                jjtree.clearNodeScope(jjtn001);
                                                jjtc001 = false;
                                              } else {
                                                jjtree.popNode();
                                              }
                                              if (jjte001 instanceof RuntimeException) {
                                                throw (RuntimeException)jjte001;
                                              }
                                              if (jjte001 instanceof ParseException) {
                                                throw (ParseException)jjte001;
                                              }
                                              throw (Error)jjte001;
                                            } finally {
                                              if (jjtc001) {
                                                jjtree.closeNodeScope(jjtn001, true);
                                              }
                                            }
/*@egen*/                     )*")"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void RelationalProjectionOp(): {/*@bgen(jjtree) RelationalProjectionOp */
  ASTRelationalProjectionOp jjtn000 = new ASTRelationalProjectionOp(JJTRELATIONALPROJECTIONOP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) RelationalProjectionOp */
        try {
/*@egen*/
	<K_RELATIONAL_PROJECTION>"(" AlgebraOp() ","  (/*@bgen(jjtree) ProjectionIdentifier */
                                                       {
                                                         ASTProjectionIdentifier jjtn001 = new ASTProjectionIdentifier(JJTPROJECTIONIDENTIFIER);
                                                         boolean jjtc001 = true;
                                                         jjtree.openNodeScope(jjtn001);
                                                       }
                                                       try {
/*@egen*/Identifier()/*@bgen(jjtree)*/
                                                       } catch (Throwable jjte001) {
                                                         if (jjtc001) {
                                                           jjtree.clearNodeScope(jjtn001);
                                                           jjtc001 = false;
                                                         } else {
                                                           jjtree.popNode();
                                                         }
                                                         if (jjte001 instanceof RuntimeException) {
                                                           throw (RuntimeException)jjte001;
                                                         }
                                                         if (jjte001 instanceof ParseException) {
                                                           throw (ParseException)jjte001;
                                                         }
                                                         throw (Error)jjte001;
                                                       } finally {
                                                         if (jjtc001) {
                                                           jjtree.closeNodeScope(jjtn001, true);
                                                         }
                                                       }
/*@egen*/                     )*")"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/*void TumblingWindow(): {}{
	<K_TUMBLING_TIME_WINDOW>"(" AlgebraOp() "," Number()#WindowSize "," Number()#WindowAdvance ")"
}*/

void SelectionOp(): {/*@bgen(jjtree) SelectionOp */
        ASTSelectionOp jjtn000 = new ASTSelectionOp(JJTSELECTIONOP);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Token windowSize;
}{/*@bgen(jjtree) SelectionOp */
        try {
/*@egen*/
    // window size is a hack for evaluation of range predicates
	<K_SELECTION>"(" AlgebraOp() "," Predicate() ("," windowSize = <INTEGER> {jjtn000.setWindowSize(windowSize.image);})? ")"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void BrokerInitOp():{/*@bgen(jjtree) BrokerInitOp */
  ASTBrokerInitOp jjtn000 = new ASTBrokerInitOp(JJTBROKERINITOP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) BrokerInitOp */
  try {
/*@egen*/
  < K_BROKER_INIT >"(" AlgebraOp() "," Number() ")"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}

void RelationalSelectionOp():{/*@bgen(jjtree) RelationalSelectionOp */
        ASTRelationalSelectionOp jjtn000 = new ASTRelationalSelectionOp(JJTRELATIONALSELECTIONOP);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Token windowSize;
}{/*@bgen(jjtree) RelationalSelectionOp */
        try {
/*@egen*/
	<K_RELATIONAL_SELECTION>"(" AlgebraOp() "," Predicate() ")"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void RelationalJoinOp(): {/*@bgen(jjtree) RelationalJoinOp */
        ASTRelationalJoinOp jjtn000 = new ASTRelationalJoinOp(JJTRELATIONALJOINOP);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Token windowSize;

}{/*@bgen(jjtree) RelationalJoinOp */
        try {
/*@egen*/
	// Here no join predicate will be set
	// this will be done by the restructuring component
	<K_RELATIONAL_JOIN>"(" AlgebraOp() "," AlgebraOp() "," Predicate()")"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void RelationalNestOp(): {/*@bgen(jjtree) RelationalNestOp */
  ASTRelationalNestOp jjtn000 = new ASTRelationalNestOp(JJTRELATIONALNESTOP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
}{/*@bgen(jjtree) RelationalNestOp */
        try {
/*@egen*/
	// NEST stream, a, b AS z, z is the attribute name of the nesting. 
	<K_RELATIONAL_NEST>"(" AlgebraOp() "," Identifier() "," (Identifier())* ")"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void RelationalUnnestOp(): {/*@bgen(jjtree) RelationalUnnestOp */
  ASTRelationalUnnestOp jjtn000 = new ASTRelationalUnnestOp(JJTRELATIONALUNNESTOP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
}{/*@bgen(jjtree) RelationalUnnestOp */
        try {
/*@egen*/
	// NEST stream, a, b AS z, z is the attribute name of the nesting. 
	<K_RELATIONAL_UNNEST>"(" AlgebraOp() "," Identifier() ")"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void JoinOp(): {/*@bgen(jjtree) JoinOp */
        ASTJoinOp jjtn000 = new ASTJoinOp(JJTJOINOP);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Token windowSize;

}{/*@bgen(jjtree) JoinOp */
        try {
/*@egen*/
	// Here no join predicate will be set
	// this will be done by the restructuring component
	// window size is a hack for evaluation of window size
	<K_JOIN>"(" AlgebraOp() "," AlgebraOp() "," Predicate() ("," windowSize = <INTEGER> {jjtn000.setWindowSize(windowSize.image);})? ")"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void SchemaConvertOp(): {/*@bgen(jjtree) SchemaConvertOp */
  ASTSchemaConvertOp jjtn000 = new ASTSchemaConvertOp(JJTSCHEMACONVERTOP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) SchemaConvertOp */
        try {
/*@egen*/
	<K_SCHEMA_CONVERT>"(" AlgebraOp() ")"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void WindowOp():{/*@bgen(jjtree) WindowOp */
  ASTWindowOp jjtn000 = new ASTWindowOp(JJTWINDOWOP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) WindowOp */
        try {
/*@egen*/
	// at the moment only sliding time windows are supported
	SlidingTimeWindow()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void SlidingTimeWindow(): {/*@bgen(jjtree) SlidingTimeWindow */
  ASTSlidingTimeWindow jjtn000 = new ASTSlidingTimeWindow(JJTSLIDINGTIMEWINDOW);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) SlidingTimeWindow */
        try {
/*@egen*/
	<K_SLDING_TIME_WINDOW>"(" AlgebraOp()"," Number()"," Number() ")"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void AccessOp(): {/*@bgen(jjtree) AccessOp */
  ASTAccessOp jjtn000 = new ASTAccessOp(JJTACCESSOP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) AccessOp */
        try {
/*@egen*/
	<K_ACCESS>"(" Identifier() [<K_AS> Identifier()] ")"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void BrokerOp(): {/*@bgen(jjtree) BrokerOp */
  ASTBrokerOp jjtn000 = new ASTBrokerOp(JJTBROKEROP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) BrokerOp */
        try {
/*@egen*/
	<K_BROKER>"(" Identifier() [LOOKAHEAD(2) "," <K_QUEUE>"(" AlgebraOp() ")" {jjtn000.setQueue(true);}] ("," AlgebraOp() {jjtn000.increaseNoOfChildOps();})* ")"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void PredictionAssignOp() : {/*@bgen(jjtree) PredictionAssignOp */
  ASTPredictionAssignOp jjtn000 = new ASTPredictionAssignOp(JJTPREDICTIONASSIGNOP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) PredictionAssignOp */
        try {
/*@egen*/
	<K_SET_PREDICTION>"(" AlgebraOp() "," (PredictionDefinition())+ [<K_DEFAULT> DefaultPredictionDefinition()] ")"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void PredictionAssignOrOp() : {/*@bgen(jjtree) PredictionAssignOrOp */
  ASTPredictionAssignOrOp jjtn000 = new ASTPredictionAssignOrOp(JJTPREDICTIONASSIGNOROP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) PredictionAssignOrOp */
        try {
/*@egen*/
	<K_SET_PREDICTION_OR>"(" AlgebraOp() "," (Identifier()) "," (PredictionDefinition())+ [<K_DEFAULT> DefaultPredictionDefinition()] ")"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void PredictionOp() : {/*@bgen(jjtree) PredictionOp */
  ASTPredictionOp jjtn000 = new ASTPredictionOp(JJTPREDICTIONOP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) PredictionOp */
        try {
/*@egen*/
  	< K_PREDICTION >"(" AlgebraOp() "," AlgebraOp() "," (Identifier()) ")"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/}

void Predicate():{/*@bgen(jjtree) Predicate */
  ASTPredicate jjtn000 = new ASTPredicate(JJTPREDICATE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Predicate */
  try {
/*@egen*/
  LOOKAHEAD(OrPredicate())OrPredicate()
  | LOOKAHEAD(AndPredicate())AndPredicate()
  | NotPredicate()
  | SimplePredicate()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void SimplePredicate():{/*@bgen(jjtree) SimplePredicate */
  ASTSimplePredicate jjtn000 = new ASTSimplePredicate(JJTSIMPLEPREDICATE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) SimplePredicate */
  try {
/*@egen*/
  LOOKAHEAD("("Predicate())"("Predicate()")"
  | LOOKAHEAD(BasicPredicate()) BasicPredicate()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
  /*| LOOKAHEAD(SpatialPredicate()) SpatialPredicate()
  | ProbabilityPredicate()*/
}

void BasicPredicate():{/*@bgen(jjtree) BasicPredicate */
  ASTBasicPredicate jjtn000 = new ASTBasicPredicate(JJTBASICPREDICATE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) BasicPredicate */
        try {
/*@egen*/
	Expression()CompareOperator()Expression()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void OrPredicate():{/*@bgen(jjtree) OrPredicate */
  ASTOrPredicate jjtn000 = new ASTOrPredicate(JJTORPREDICATE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) OrPredicate */
  try {
/*@egen*/
  SimplePredicate()<K_OR>Predicate()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void AndPredicate():{/*@bgen(jjtree) AndPredicate */
  ASTAndPredicate jjtn000 = new ASTAndPredicate(JJTANDPREDICATE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) AndPredicate */
  try {
/*@egen*/
  SimplePredicate()<K_AND>Predicate()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void NotPredicate():{/*@bgen(jjtree) NotPredicate */
  ASTNotPredicate jjtn000 = new ASTNotPredicate(JJTNOTPREDICATE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) NotPredicate */
  try {
/*@egen*/
  <K_NOT>Predicate()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Expression():{/*@bgen(jjtree) Expression */
  ASTExpression jjtn000 = new ASTExpression(JJTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  String tOp;
}
{/*@bgen(jjtree) Expression */
  try {
/*@egen*/
  LOOKAHEAD(SimpleToken()MathOperator())SimpleToken()tOp = MathOperator(){
    jjtn000.setOperator(tOp);
  }
  Expression()
  | SimpleToken()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void SimpleToken():{/*@bgen(jjtree) SimpleToken */
  ASTSimpleToken jjtn000 = new ASTSimpleToken(JJTSIMPLETOKEN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) SimpleToken */
  try {
/*@egen*/
  Number()
  | String()
  /*| LOOKAHEAD(AggregateExpression())AggregateExpression()*/
  | LOOKAHEAD(FunctionExpression())FunctionExpression()
  | "("Expression()")"
  | Identifier()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
//TODO DISTINCE Expression
}

void FunctionExpression():{/*@bgen(jjtree) FunctionExpression */
  ASTFunctionExpression jjtn000 = new ASTFunctionExpression(JJTFUNCTIONEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) FunctionExpression */
  try {
/*@egen*//*@bgen(jjtree) FunctionName */
  {
    ASTFunctionName jjtn001 = new ASTFunctionName(JJTFUNCTIONNAME);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/
  Identifier()/*@bgen(jjtree)*/
  } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      throw (RuntimeException)jjte001;
    }
    if (jjte001 instanceof ParseException) {
      throw (ParseException)jjte001;
    }
    throw (Error)jjte001;
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
  }
/*@egen*/              "("Expression()")"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
/*void AggregateExpression():{}{
  AggregateFunction()"("Identifier()")"
}*/
/*void AggregateFunction():{
  Token t;
}
{
  (t = <K_AVG>
  | t = <K_COUNT>
  | t = <K_MAX>
  | t = <K_MIN>
  | t = <K_SUM>){
    jjtThis.setFunction(AggregateFunction.valueOf(AggregateFunction.class , t.image.toUpperCase()));
  }
}*/

void Number():{/*@bgen(jjtree) Number */
  ASTNumber jjtn000 = new ASTNumber(JJTNUMBER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) Number */
  try {
/*@egen*/
  (t = <FLOAT>
  | t = <INTEGER>)/*@bgen(jjtree)*/
                  {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                  }
/*@egen*/{
    jjtn000.setValue(t.image);
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void String():{/*@bgen(jjtree) String */
  ASTString jjtn000 = new ASTString(JJTSTRING);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) String */
  try {
/*@egen*/
  t = <CHAR_LITERAL>/*@bgen(jjtree)*/
                    {
                      jjtree.closeNodeScope(jjtn000, true);
                      jjtc000 = false;
                    }
/*@egen*/{
    jjtn000.setValue(t.image);
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

String MathOperator()      :{}{
  "*"{
    return "*";
  }
  | "+"{
    return "+";
  }
  | "-"{
    return "-";
  }
  | "/"{
    return "/";
  }
  | "^"{
    return "^";
  }
}

void Identifier():{/*@bgen(jjtree) Identifier */
  ASTIdentifier jjtn000 = new ASTIdentifier(JJTIDENTIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token sign = null;
  Token t;
}
{/*@bgen(jjtree) Identifier */
 try {
/*@egen*/
 (sign = "-")?
  t = <IDENTIFIER>/*@bgen(jjtree)*/
                  {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                  }
/*@egen*/{
    jjtn000.setName((sign != null && sign.image != null ? sign.image : "") + t.image);
  }/*@bgen(jjtree)*/
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/
}

void CompareOperator():{/*@bgen(jjtree) CompareOperator */
  ASTCompareOperator jjtn000 = new ASTCompareOperator(JJTCOMPAREOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) CompareOperator */
  try {
/*@egen*/
  t = <COMPARE_OPERATOR>/*@bgen(jjtree)*/
                         {
                           jjtree.closeNodeScope(jjtn000, true);
                           jjtc000 = false;
                         }
/*@egen*/ {
    jjtn000.setOperator(t.image);
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void PredictionDefinition(): {/*@bgen(jjtree) PredictionDefinition */
  ASTPredictionDefinition jjtn000 = new ASTPredictionDefinition(JJTPREDICTIONDEFINITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) PredictionDefinition */
        try {
/*@egen*/
	(PredictionFunctionDefinition())+ <K_WHERE> Predicate() ";"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void DefaultPredictionDefinition(): {/*@bgen(jjtree) DefaultPredictionDefinition */
  ASTDefaultPredictionDefinition jjtn000 = new ASTDefaultPredictionDefinition(JJTDEFAULTPREDICTIONDEFINITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) DefaultPredictionDefinition */
        try {
/*@egen*/
	(PredictionFunctionDefinition())+/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void PredictionFunctionDefinition(): {/*@bgen(jjtree) PredictionFunctionDefinition */
  ASTPredictionFunctionDefinition jjtn000 = new ASTPredictionFunctionDefinition(JJTPREDICTIONFUNCTIONDEFINITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) PredictionFunctionDefinition */
        try {
/*@egen*/
	Identifier() ":=" Expression()";"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/	
}

void KeyValueList(): {/*@bgen(jjtree) KeyValueList */
  ASTKeyValueList jjtn000 = new ASTKeyValueList(JJTKEYVALUELIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) KeyValueList */
        try {
/*@egen*/
	( KeyValuePair() ";" )*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void KeyValuePair(): {/*@bgen(jjtree) KeyValuePair */
  ASTKeyValuePair jjtn000 = new ASTKeyValuePair(JJTKEYVALUEPAIR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) KeyValuePair */
        try {
/*@egen*/
	Identifier() ":=" ( Identifier() | Number() )/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void AssociationGenOp(): {/*@bgen(jjtree) AssociationGenOp */
  ASTAssociationGenOp jjtn000 = new ASTAssociationGenOp(JJTASSOCIATIONGENOP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) AssociationGenOp */
  try {
/*@egen*/
  <K_ASSOCIATION_GEN> "(" AlgebraOp() "," AlgebraOp() "," Identifier() "," Identifier() ")"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}

void AssociationEvalOp(): {/*@bgen(jjtree) AssociationEvalOp */
  ASTAssociationEvalOp jjtn000 = new ASTAssociationEvalOp(JJTASSOCIATIONEVALOP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) AssociationEvalOp */
  try {
/*@egen*/
  <K_ASSOCIATION_EVAL> "(" AlgebraOp() "," Identifier() "," KeyValueList() "," Identifier() "," Identifier() ( "," KeyValueList() )? ")"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ 
}

void AssociationSelOp(): {/*@bgen(jjtree) AssociationSelOp */
  ASTAssociationSelOp jjtn000 = new ASTAssociationSelOp(JJTASSOCIATIONSELOP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) AssociationSelOp */
  try {
/*@egen*/
  < K_ASSOCIATION_SEL > "(" AlgebraOp() "," Identifier() "," Identifier() "," Identifier() ")"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void AssociationSrcOp(): {/*@bgen(jjtree) AssociationSrcOp */
  ASTAssociationSrcOp jjtn000 = new ASTAssociationSrcOp(JJTASSOCIATIONSRCOP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) AssociationSrcOp */
  try {
/*@egen*/
  < K_ASSOCIATION_SRC > "(" Identifier() "," Number() ")"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void EvaluateOp(): {/*@bgen(jjtree) EvaluateOp */
  ASTEvaluateOp jjtn000 = new ASTEvaluateOp(JJTEVALUATEOP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) EvaluateOp */
  try {
/*@egen*/
  < K_EVALUATE > "(" AlgebraOp() "," Identifier() "," AlgebraOp() "," Identifier() "," AlgebraOp() "," Identifier() "," Number() ")"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}

void FilterGainOp(): {/*@bgen(jjtree) FilterGainOp */
  ASTFilterGainOp jjtn000 = new ASTFilterGainOp(JJTFILTERGAINOP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) FilterGainOp */
  try {
/*@egen*/
  < K_FILTER_GAIN > "(" AlgebraOp() "," Identifier() ")"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void FilterEstimateOp(): {/*@bgen(jjtree) FilterEstimateOp */
  ASTFilterEstimateOp jjtn000 = new ASTFilterEstimateOp(JJTFILTERESTIMATEOP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) FilterEstimateOp */
  try {
/*@egen*/
  < K_FILTER_ESTIMATE > "(" AlgebraOp() "," Identifier() "," Identifier() "," Identifier() ")"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void FilterCovarianceOp(): {/*@bgen(jjtree) FilterCovarianceOp */
  ASTFilterCovarianceOp jjtn000 = new ASTFilterCovarianceOp(JJTFILTERCOVARIANCEOP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) FilterCovarianceOp */
  try {
/*@egen*/
  < K_FILTER_COVARIANCE > "(" AlgebraOp() "," Identifier() ")"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
