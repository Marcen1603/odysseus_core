/* Generated By:JJTree&JavaCC: Do not edit this line. ProceduralExpressionParser.java */
package de.uniol.inf.is.odysseus.pqlhack.parser;

public class ProceduralExpressionParser/*@bgen(jjtree)*/implements ProceduralExpressionParserTreeConstants, ProceduralExpressionParserConstants {/*@bgen(jjtree)*/
  protected static JJTProceduralExpressionParserState jjtree = new JJTProceduralExpressionParserState();

  static final public ASTLogicalPlan LogicalPlan() throws ParseException {
    trace_call("LogicalPlan");
    try {
                              /*@bgen(jjtree) LogicalPlan */
  ASTLogicalPlan jjtn000 = new ASTLogicalPlan(JJTLOGICALPLAN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(K_LOGICAL);
        jj_consume_token(K_PLAN);
        jj_consume_token(55);
        label_1:
        while (true) {
          AlgebraOp();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 56:
            jj_consume_token(56);
            break;
          default:
            jj_la1[0] = jj_gen;
            ;
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case K_ACCESS:
          case K_BROKER:
          case K_JOIN:
          case K_PREDICTION:
          case K_PROJECTION:
          case K_RELATIONAL_PROJECTION:
          case K_RELATIONAL_SELECTION:
          case K_RELATIONAL_JOIN:
          case K_RELATIONAL_NEST:
          case K_RELATIONAL_UNNEST:
          case K_SCHEMA_CONVERT:
          case K_SELECTION:
          case K_SET_PREDICTION:
          case K_SET_PREDICTION_OR:
          case K_SLDING_TIME_WINDOW:
          case K_TEST:
          case K_ASSOCIATION_GEN:
          case K_ASSOCIATION_EVAL:
          case K_ASSOCIATION_SEL:
          case K_ASSOCIATION_SRC:
          case K_EVALUATE:
            ;
            break;
          default:
            jj_la1[1] = jj_gen;
            break label_1;
          }
        }
        jj_consume_token(0);
                                                              jjtree.closeNodeScope(jjtn000, true);
                                                              jjtc000 = false;
                                                             {if (true) return jjtn000;}
      } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("LogicalPlan");
    }
  }

  static final public void AlgebraOp() throws ParseException {
    trace_call("AlgebraOp");
    try {
                  /*@bgen(jjtree) AlgebraOp */
  ASTAlgebraOp jjtn000 = new ASTAlgebraOp(JJTALGEBRAOP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_PROJECTION:
          ProjectionOp();
          break;
        case K_RELATIONAL_PROJECTION:
          RelationalProjectionOp();
          break;
        case K_SELECTION:
          SelectionOp();
          break;
        case K_RELATIONAL_SELECTION:
          RelationalSelectionOp();
          break;
        case K_JOIN:
          JoinOp();
          break;
        case K_RELATIONAL_JOIN:
          RelationalJoinOp();
          break;
        case K_RELATIONAL_NEST:
          RelationalNestOp();
          break;
        case K_RELATIONAL_UNNEST:
          RelationalUnnestOp();
          break;
        case K_SLDING_TIME_WINDOW:
          WindowOp();
          break;
        case K_ACCESS:
          AccessOp();
          break;
        case K_BROKER:
          BrokerOp();
          break;
        case K_SET_PREDICTION:
          PredictionAssignOp();
          break;
        case K_SET_PREDICTION_OR:
          PredictionAssignOrOp();
          break;
        case K_PREDICTION:
          PredictionOp();
          break;
        case K_TEST:
          TestOp();
          break;
        case K_ASSOCIATION_GEN:
          AssociationGenOp();
          break;
        case K_ASSOCIATION_EVAL:
          AssociationEvalOp();
          break;
        case K_ASSOCIATION_SEL:
          AssociationSelOp();
          break;
        case K_ASSOCIATION_SRC:
          AssociationSrcOp();
          break;
        case K_SCHEMA_CONVERT:
          SchemaConvertOp();
          break;
        case K_EVALUATE:
          EvaluateOp();
          break;
        default:
          jj_la1[2] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("AlgebraOp");
    }
  }

  static final public void TestOp() throws ParseException {
    trace_call("TestOp");
    try {
                /*@bgen(jjtree) TestOp */
  ASTTestOp jjtn000 = new ASTTestOp(JJTTESTOP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(K_TEST);
        jj_consume_token(57);
        AlgebraOp();
        jj_consume_token(58);
      } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
      } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
      }
    } finally {
      trace_return("TestOp");
    }
  }

  static final public void ProjectionOp() throws ParseException {
    trace_call("ProjectionOp");
    try {
                      /*@bgen(jjtree) ProjectionOp */
  ASTProjectionOp jjtn000 = new ASTProjectionOp(JJTPROJECTIONOP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(K_PROJECTION);
        jj_consume_token(57);
        AlgebraOp();
        jj_consume_token(59);
        label_2:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case IDENTIFIER:
          case 62:
            ;
            break;
          default:
            jj_la1[3] = jj_gen;
            break label_2;
          }
                                              ASTProjectionIdentifier jjtn001 = new ASTProjectionIdentifier(JJTPROJECTIONIDENTIFIER);
                                              boolean jjtc001 = true;
                                              jjtree.openNodeScope(jjtn001);
          try {
            Identifier();
          } catch (Throwable jjte001) {
                                              if (jjtc001) {
                                                jjtree.clearNodeScope(jjtn001);
                                                jjtc001 = false;
                                              } else {
                                                jjtree.popNode();
                                              }
                                              if (jjte001 instanceof RuntimeException) {
                                                {if (true) throw (RuntimeException)jjte001;}
                                              }
                                              if (jjte001 instanceof ParseException) {
                                                {if (true) throw (ParseException)jjte001;}
                                              }
                                              {if (true) throw (Error)jjte001;}
          } finally {
                                              if (jjtc001) {
                                                jjtree.closeNodeScope(jjtn001, true);
                                              }
          }
        }
        jj_consume_token(58);
      } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("ProjectionOp");
    }
  }

  static final public void RelationalProjectionOp() throws ParseException {
    trace_call("RelationalProjectionOp");
    try {
                                /*@bgen(jjtree) RelationalProjectionOp */
  ASTRelationalProjectionOp jjtn000 = new ASTRelationalProjectionOp(JJTRELATIONALPROJECTIONOP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(K_RELATIONAL_PROJECTION);
        jj_consume_token(57);
        AlgebraOp();
        jj_consume_token(59);
        label_3:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case IDENTIFIER:
          case 62:
            ;
            break;
          default:
            jj_la1[4] = jj_gen;
            break label_3;
          }
                                                         ASTProjectionIdentifier jjtn001 = new ASTProjectionIdentifier(JJTPROJECTIONIDENTIFIER);
                                                         boolean jjtc001 = true;
                                                         jjtree.openNodeScope(jjtn001);
          try {
            Identifier();
          } catch (Throwable jjte001) {
                                                         if (jjtc001) {
                                                           jjtree.clearNodeScope(jjtn001);
                                                           jjtc001 = false;
                                                         } else {
                                                           jjtree.popNode();
                                                         }
                                                         if (jjte001 instanceof RuntimeException) {
                                                           {if (true) throw (RuntimeException)jjte001;}
                                                         }
                                                         if (jjte001 instanceof ParseException) {
                                                           {if (true) throw (ParseException)jjte001;}
                                                         }
                                                         {if (true) throw (Error)jjte001;}
          } finally {
                                                         if (jjtc001) {
                                                           jjtree.closeNodeScope(jjtn001, true);
                                                         }
          }
        }
        jj_consume_token(58);
      } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("RelationalProjectionOp");
    }
  }

/*void TumblingWindow(): {}{
	<K_TUMBLING_TIME_WINDOW>"(" AlgebraOp() "," Number()#WindowSize "," Number()#WindowAdvance ")"
}*/
  static final public void SelectionOp() throws ParseException {
    trace_call("SelectionOp");
    try {
                     /*@bgen(jjtree) SelectionOp */
        ASTSelectionOp jjtn000 = new ASTSelectionOp(JJTSELECTIONOP);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token windowSize;
      try {
        jj_consume_token(K_SELECTION);
        jj_consume_token(57);
        AlgebraOp();
        jj_consume_token(59);
        Predicate();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 59:
          jj_consume_token(59);
          windowSize = jj_consume_token(INTEGER);
                                                                                  jjtn000.setWindowSize(windowSize.image);
          break;
        default:
          jj_la1[5] = jj_gen;
          ;
        }
        jj_consume_token(58);
      } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("SelectionOp");
    }
  }

  static final public void RelationalSelectionOp() throws ParseException {
    trace_call("RelationalSelectionOp");
    try {
                              /*@bgen(jjtree) RelationalSelectionOp */
        ASTRelationalSelectionOp jjtn000 = new ASTRelationalSelectionOp(JJTRELATIONALSELECTIONOP);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token windowSize;
      try {
        jj_consume_token(K_RELATIONAL_SELECTION);
        jj_consume_token(57);
        AlgebraOp();
        jj_consume_token(59);
        Predicate();
        jj_consume_token(58);
      } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("RelationalSelectionOp");
    }
  }

  static final public void RelationalJoinOp() throws ParseException {
    trace_call("RelationalJoinOp");
    try {
                          /*@bgen(jjtree) RelationalJoinOp */
        ASTRelationalJoinOp jjtn000 = new ASTRelationalJoinOp(JJTRELATIONALJOINOP);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token windowSize;
      try {
        jj_consume_token(K_RELATIONAL_JOIN);
        jj_consume_token(57);
        AlgebraOp();
        jj_consume_token(59);
        AlgebraOp();
        jj_consume_token(59);
        Predicate();
        jj_consume_token(58);
      } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("RelationalJoinOp");
    }
  }

  static final public void RelationalNestOp() throws ParseException {
    trace_call("RelationalNestOp");
    try {
                          /*@bgen(jjtree) RelationalNestOp */
  ASTRelationalNestOp jjtn000 = new ASTRelationalNestOp(JJTRELATIONALNESTOP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(K_RELATIONAL_NEST);
        jj_consume_token(57);
        AlgebraOp();
        jj_consume_token(59);
        Identifier();
        jj_consume_token(59);
        label_4:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case IDENTIFIER:
          case 62:
            ;
            break;
          default:
            jj_la1[6] = jj_gen;
            break label_4;
          }
          Identifier();
        }
        jj_consume_token(58);
      } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("RelationalNestOp");
    }
  }

  static final public void RelationalUnnestOp() throws ParseException {
    trace_call("RelationalUnnestOp");
    try {
                            /*@bgen(jjtree) RelationalUnnestOp */
  ASTRelationalUnnestOp jjtn000 = new ASTRelationalUnnestOp(JJTRELATIONALUNNESTOP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(K_RELATIONAL_UNNEST);
        jj_consume_token(57);
        AlgebraOp();
        jj_consume_token(59);
        Identifier();
        jj_consume_token(58);
      } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("RelationalUnnestOp");
    }
  }

  static final public void JoinOp() throws ParseException {
    trace_call("JoinOp");
    try {
                /*@bgen(jjtree) JoinOp */
        ASTJoinOp jjtn000 = new ASTJoinOp(JJTJOINOP);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token windowSize;
      try {
        jj_consume_token(K_JOIN);
        jj_consume_token(57);
        AlgebraOp();
        jj_consume_token(59);
        AlgebraOp();
        jj_consume_token(59);
        Predicate();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 59:
          jj_consume_token(59);
          windowSize = jj_consume_token(INTEGER);
                                                                                             jjtn000.setWindowSize(windowSize.image);
          break;
        default:
          jj_la1[7] = jj_gen;
          ;
        }
        jj_consume_token(58);
      } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("JoinOp");
    }
  }

  static final public void SchemaConvertOp() throws ParseException {
    trace_call("SchemaConvertOp");
    try {
                         /*@bgen(jjtree) SchemaConvertOp */
  ASTSchemaConvertOp jjtn000 = new ASTSchemaConvertOp(JJTSCHEMACONVERTOP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(K_SCHEMA_CONVERT);
        jj_consume_token(57);
        AlgebraOp();
        jj_consume_token(58);
      } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("SchemaConvertOp");
    }
  }

  static final public void WindowOp() throws ParseException {
    trace_call("WindowOp");
    try {
                 /*@bgen(jjtree) WindowOp */
  ASTWindowOp jjtn000 = new ASTWindowOp(JJTWINDOWOP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        SlidingTimeWindow();
      } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("WindowOp");
    }
  }

  static final public void SlidingTimeWindow() throws ParseException {
    trace_call("SlidingTimeWindow");
    try {
                           /*@bgen(jjtree) SlidingTimeWindow */
  ASTSlidingTimeWindow jjtn000 = new ASTSlidingTimeWindow(JJTSLIDINGTIMEWINDOW);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(K_SLDING_TIME_WINDOW);
        jj_consume_token(57);
        AlgebraOp();
        jj_consume_token(59);
        Number();
        jj_consume_token(59);
        Number();
        jj_consume_token(58);
      } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("SlidingTimeWindow");
    }
  }

  static final public void AccessOp() throws ParseException {
    trace_call("AccessOp");
    try {
                  /*@bgen(jjtree) AccessOp */
  ASTAccessOp jjtn000 = new ASTAccessOp(JJTACCESSOP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(K_ACCESS);
        jj_consume_token(57);
        Identifier();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_AS:
          jj_consume_token(K_AS);
          Identifier();
          break;
        default:
          jj_la1[8] = jj_gen;
          ;
        }
        jj_consume_token(58);
      } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("AccessOp");
    }
  }

  static final public void BrokerOp() throws ParseException {
    trace_call("BrokerOp");
    try {
                  /*@bgen(jjtree) BrokerOp */
  ASTBrokerOp jjtn000 = new ASTBrokerOp(JJTBROKEROP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(K_BROKER);
        jj_consume_token(57);
        Identifier();
        if (jj_2_1(2)) {
          jj_consume_token(59);
          jj_consume_token(K_QUEUE);
          jj_consume_token(57);
          AlgebraOp();
          jj_consume_token(58);
                                                                                   jjtn000.setQueue(true);
        } else {
          ;
        }
        label_5:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 59:
            ;
            break;
          default:
            jj_la1[9] = jj_gen;
            break label_5;
          }
          jj_consume_token(59);
          AlgebraOp();
                                                                                                                               jjtn000.increaseNoOfChildOps();
        }
        jj_consume_token(58);
      } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("BrokerOp");
    }
  }

  static final public void PredictionAssignOp() throws ParseException {
    trace_call("PredictionAssignOp");
    try {
                             /*@bgen(jjtree) PredictionAssignOp */
  ASTPredictionAssignOp jjtn000 = new ASTPredictionAssignOp(JJTPREDICTIONASSIGNOP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(K_SET_PREDICTION);
        jj_consume_token(57);
        AlgebraOp();
        jj_consume_token(59);
        label_6:
        while (true) {
          PredictionDefinition();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case IDENTIFIER:
          case 62:
            ;
            break;
          default:
            jj_la1[10] = jj_gen;
            break label_6;
          }
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_DEFAULT:
          jj_consume_token(K_DEFAULT);
          DefaultPredictionDefinition();
          break;
        default:
          jj_la1[11] = jj_gen;
          ;
        }
        jj_consume_token(58);
      } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("PredictionAssignOp");
    }
  }

  static final public void PredictionAssignOrOp() throws ParseException {
    trace_call("PredictionAssignOrOp");
    try {
                               /*@bgen(jjtree) PredictionAssignOrOp */
  ASTPredictionAssignOrOp jjtn000 = new ASTPredictionAssignOrOp(JJTPREDICTIONASSIGNOROP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(K_SET_PREDICTION_OR);
        jj_consume_token(57);
        AlgebraOp();
        jj_consume_token(59);
        Identifier();
        jj_consume_token(59);
        label_7:
        while (true) {
          PredictionDefinition();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case IDENTIFIER:
          case 62:
            ;
            break;
          default:
            jj_la1[12] = jj_gen;
            break label_7;
          }
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_DEFAULT:
          jj_consume_token(K_DEFAULT);
          DefaultPredictionDefinition();
          break;
        default:
          jj_la1[13] = jj_gen;
          ;
        }
        jj_consume_token(58);
      } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("PredictionAssignOrOp");
    }
  }

  static final public void PredictionOp() throws ParseException {
    trace_call("PredictionOp");
    try {
                       /*@bgen(jjtree) PredictionOp */
  ASTPredictionOp jjtn000 = new ASTPredictionOp(JJTPREDICTIONOP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(K_PREDICTION);
        jj_consume_token(57);
        AlgebraOp();
        jj_consume_token(59);
        AlgebraOp();
        jj_consume_token(59);
        Identifier();
        jj_consume_token(58);
      } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("PredictionOp");
    }
  }

  static final public void Predicate() throws ParseException {
    trace_call("Predicate");
    try {
                  /*@bgen(jjtree) Predicate */
  ASTPredicate jjtn000 = new ASTPredicate(JJTPREDICATE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        if (jj_2_2(2147483647)) {
          OrPredicate();
        } else if (jj_2_3(2147483647)) {
          AndPredicate();
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case K_NOT:
            NotPredicate();
            break;
          case IDENTIFIER:
          case CHAR_LITERAL:
          case FLOAT:
          case INTEGER:
          case 57:
          case 62:
            SimplePredicate();
            break;
          default:
            jj_la1[14] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
      } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    } finally {
      trace_return("Predicate");
    }
  }

  static final public void SimplePredicate() throws ParseException {
    trace_call("SimplePredicate");
    try {
                        /*@bgen(jjtree) SimplePredicate */
  ASTSimplePredicate jjtn000 = new ASTSimplePredicate(JJTSIMPLEPREDICATE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        if (jj_2_4(2147483647)) {
          jj_consume_token(57);
          Predicate();
          jj_consume_token(58);
        } else if (jj_2_5(2147483647)) {
          BasicPredicate();
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
      } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    } finally {
      trace_return("SimplePredicate");
    }
  }

  static final public void BasicPredicate() throws ParseException {
    trace_call("BasicPredicate");
    try {
                       /*@bgen(jjtree) BasicPredicate */
  ASTBasicPredicate jjtn000 = new ASTBasicPredicate(JJTBASICPREDICATE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        Expression();
        CompareOperator();
        Expression();
      } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("BasicPredicate");
    }
  }

  static final public void OrPredicate() throws ParseException {
    trace_call("OrPredicate");
    try {
                    /*@bgen(jjtree) OrPredicate */
  ASTOrPredicate jjtn000 = new ASTOrPredicate(JJTORPREDICATE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        SimplePredicate();
        jj_consume_token(K_OR);
        Predicate();
      } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
      } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    } finally {
      trace_return("OrPredicate");
    }
  }

  static final public void AndPredicate() throws ParseException {
    trace_call("AndPredicate");
    try {
                     /*@bgen(jjtree) AndPredicate */
  ASTAndPredicate jjtn000 = new ASTAndPredicate(JJTANDPREDICATE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        SimplePredicate();
        jj_consume_token(K_AND);
        Predicate();
      } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
      } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    } finally {
      trace_return("AndPredicate");
    }
  }

  static final public void NotPredicate() throws ParseException {
    trace_call("NotPredicate");
    try {
                     /*@bgen(jjtree) NotPredicate */
  ASTNotPredicate jjtn000 = new ASTNotPredicate(JJTNOTPREDICATE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(K_NOT);
        Predicate();
      } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
      } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    } finally {
      trace_return("NotPredicate");
    }
  }

  static final public void Expression() throws ParseException {
    trace_call("Expression");
    try {
                   /*@bgen(jjtree) Expression */
  ASTExpression jjtn000 = new ASTExpression(JJTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);String tOp;
      try {
        if (jj_2_6(2147483647)) {
          SimpleToken();
          tOp = MathOperator();
    jjtn000.setOperator(tOp);
          Expression();
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case IDENTIFIER:
          case CHAR_LITERAL:
          case FLOAT:
          case INTEGER:
          case 57:
          case 62:
            SimpleToken();
            break;
          default:
            jj_la1[15] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
      } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    } finally {
      trace_return("Expression");
    }
  }

  static final public void SimpleToken() throws ParseException {
    trace_call("SimpleToken");
    try {
                    /*@bgen(jjtree) SimpleToken */
  ASTSimpleToken jjtn000 = new ASTSimpleToken(JJTSIMPLETOKEN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case FLOAT:
        case INTEGER:
          Number();
          break;
        case CHAR_LITERAL:
          String();
          break;
        default:
          jj_la1[16] = jj_gen;
          if (jj_2_7(2147483647)) {
            FunctionExpression();
          } else {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case 57:
              jj_consume_token(57);
              Expression();
              jj_consume_token(58);
              break;
            case IDENTIFIER:
            case 62:
              Identifier();
              break;
            default:
              jj_la1[17] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
        }
      } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
      } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    } finally {
      trace_return("SimpleToken");
    }
  }

  static final public void FunctionExpression() throws ParseException {
    trace_call("FunctionExpression");
    try {
                           /*@bgen(jjtree) FunctionExpression */
  ASTFunctionExpression jjtn000 = new ASTFunctionExpression(JJTFUNCTIONEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
    ASTFunctionName jjtn001 = new ASTFunctionName(JJTFUNCTIONNAME);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
        try {
          Identifier();
        } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte001;}
    }
    if (jjte001 instanceof ParseException) {
      {if (true) throw (ParseException)jjte001;}
    }
    {if (true) throw (Error)jjte001;}
        } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
        }
        jj_consume_token(57);
        Expression();
        jj_consume_token(58);
      } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
      } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    } finally {
      trace_return("FunctionExpression");
    }
  }

/*void AggregateExpression():{}{
  AggregateFunction()"("Identifier()")"
}*/
/*void AggregateFunction():{
  Token t;
}
{
  (t = <K_AVG>
  | t = <K_COUNT>
  | t = <K_MAX>
  | t = <K_MIN>
  | t = <K_SUM>){
    jjtThis.setFunction(AggregateFunction.valueOf(AggregateFunction.class , t.image.toUpperCase()));
  }
}*/
  static final public void Number() throws ParseException {
    trace_call("Number");
    try {
               /*@bgen(jjtree) Number */
  ASTNumber jjtn000 = new ASTNumber(JJTNUMBER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case FLOAT:
          t = jj_consume_token(FLOAT);
          break;
        case INTEGER:
          t = jj_consume_token(INTEGER);
          break;
        default:
          jj_la1[18] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
    jjtn000.setValue(t.image);
      } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    } finally {
      trace_return("Number");
    }
  }

  static final public void String() throws ParseException {
    trace_call("String");
    try {
               /*@bgen(jjtree) String */
  ASTString jjtn000 = new ASTString(JJTSTRING);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
      try {
        t = jj_consume_token(CHAR_LITERAL);
                      jjtree.closeNodeScope(jjtn000, true);
                      jjtc000 = false;
    jjtn000.setValue(t.image);
      } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    } finally {
      trace_return("String");
    }
  }

  static final public String MathOperator() throws ParseException {
    trace_call("MathOperator");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 60:
        jj_consume_token(60);
    {if (true) return "*";}
        break;
      case 61:
        jj_consume_token(61);
    {if (true) return "+";}
        break;
      case 62:
        jj_consume_token(62);
    {if (true) return "-";}
        break;
      case 63:
        jj_consume_token(63);
    {if (true) return "/";}
        break;
      case 64:
        jj_consume_token(64);
    {if (true) return "^";}
        break;
      default:
        jj_la1[19] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("MathOperator");
    }
  }

  static final public void Identifier() throws ParseException {
    trace_call("Identifier");
    try {
                   /*@bgen(jjtree) Identifier */
  ASTIdentifier jjtn000 = new ASTIdentifier(JJTIDENTIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token sign = null;
  Token t;
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 62:
          sign = jj_consume_token(62);
          break;
        default:
          jj_la1[20] = jj_gen;
          ;
        }
        t = jj_consume_token(IDENTIFIER);
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
    jjtn000.setName((sign != null && sign.image != null ? sign.image : "") + t.image);
      } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
      }
    } finally {
      trace_return("Identifier");
    }
  }

  static final public void CompareOperator() throws ParseException {
    trace_call("CompareOperator");
    try {
                        /*@bgen(jjtree) CompareOperator */
  ASTCompareOperator jjtn000 = new ASTCompareOperator(JJTCOMPAREOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
      try {
        t = jj_consume_token(COMPARE_OPERATOR);
                           jjtree.closeNodeScope(jjtn000, true);
                           jjtc000 = false;
    jjtn000.setOperator(t.image);
      } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    } finally {
      trace_return("CompareOperator");
    }
  }

  static final public void PredictionDefinition() throws ParseException {
    trace_call("PredictionDefinition");
    try {
                              /*@bgen(jjtree) PredictionDefinition */
  ASTPredictionDefinition jjtn000 = new ASTPredictionDefinition(JJTPREDICTIONDEFINITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        label_8:
        while (true) {
          PredictionFunctionDefinition();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case IDENTIFIER:
          case 62:
            ;
            break;
          default:
            jj_la1[21] = jj_gen;
            break label_8;
          }
        }
        jj_consume_token(K_WHERE);
        Predicate();
        jj_consume_token(56);
      } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("PredictionDefinition");
    }
  }

  static final public void DefaultPredictionDefinition() throws ParseException {
    trace_call("DefaultPredictionDefinition");
    try {
                                     /*@bgen(jjtree) DefaultPredictionDefinition */
  ASTDefaultPredictionDefinition jjtn000 = new ASTDefaultPredictionDefinition(JJTDEFAULTPREDICTIONDEFINITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        label_9:
        while (true) {
          PredictionFunctionDefinition();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case IDENTIFIER:
          case 62:
            ;
            break;
          default:
            jj_la1[22] = jj_gen;
            break label_9;
          }
        }
        jj_consume_token(56);
      } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("DefaultPredictionDefinition");
    }
  }

  static final public void PredictionFunctionDefinition() throws ParseException {
    trace_call("PredictionFunctionDefinition");
    try {
                                      /*@bgen(jjtree) PredictionFunctionDefinition */
  ASTPredictionFunctionDefinition jjtn000 = new ASTPredictionFunctionDefinition(JJTPREDICTIONFUNCTIONDEFINITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        Identifier();
        jj_consume_token(65);
        Expression();
        jj_consume_token(56);
      } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("PredictionFunctionDefinition");
    }
  }

  static final public void KeyValueList() throws ParseException {
    trace_call("KeyValueList");
    try {
                      /*@bgen(jjtree) KeyValueList */
  ASTKeyValueList jjtn000 = new ASTKeyValueList(JJTKEYVALUELIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        label_10:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case IDENTIFIER:
          case 62:
            ;
            break;
          default:
            jj_la1[23] = jj_gen;
            break label_10;
          }
          KeyValuePair();
          jj_consume_token(56);
        }
      } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("KeyValueList");
    }
  }

  static final public void KeyValuePair() throws ParseException {
    trace_call("KeyValuePair");
    try {
                      /*@bgen(jjtree) KeyValuePair */
  ASTKeyValuePair jjtn000 = new ASTKeyValuePair(JJTKEYVALUEPAIR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        Identifier();
        jj_consume_token(65);
        Identifier();
      } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("KeyValuePair");
    }
  }

  static final public void AssociationGenOp() throws ParseException {
    trace_call("AssociationGenOp");
    try {
                          /*@bgen(jjtree) AssociationGenOp */
  ASTAssociationGenOp jjtn000 = new ASTAssociationGenOp(JJTASSOCIATIONGENOP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(K_ASSOCIATION_GEN);
        jj_consume_token(57);
        AlgebraOp();
        jj_consume_token(59);
        AlgebraOp();
        jj_consume_token(59);
        Identifier();
        jj_consume_token(59);
        Identifier();
        jj_consume_token(58);
      } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
      } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    } finally {
      trace_return("AssociationGenOp");
    }
  }

  static final public void AssociationEvalOp() throws ParseException {
    trace_call("AssociationEvalOp");
    try {
                           /*@bgen(jjtree) AssociationEvalOp */
  ASTAssociationEvalOp jjtn000 = new ASTAssociationEvalOp(JJTASSOCIATIONEVALOP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(K_ASSOCIATION_EVAL);
        jj_consume_token(57);
        AlgebraOp();
        jj_consume_token(59);
        Identifier();
        jj_consume_token(59);
        KeyValueList();
        jj_consume_token(59);
        Identifier();
        jj_consume_token(59);
        Identifier();
        jj_consume_token(59);
        KeyValueList();
        jj_consume_token(58);
      } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
      } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    } finally {
      trace_return("AssociationEvalOp");
    }
  }

  static final public void AssociationSelOp() throws ParseException {
    trace_call("AssociationSelOp");
    try {
                          /*@bgen(jjtree) AssociationSelOp */
  ASTAssociationSelOp jjtn000 = new ASTAssociationSelOp(JJTASSOCIATIONSELOP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(K_ASSOCIATION_SEL);
        jj_consume_token(57);
        AlgebraOp();
        jj_consume_token(59);
        Identifier();
        jj_consume_token(59);
        Identifier();
        jj_consume_token(59);
        Identifier();
        jj_consume_token(58);
      } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
      } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    } finally {
      trace_return("AssociationSelOp");
    }
  }

  static final public void AssociationSrcOp() throws ParseException {
    trace_call("AssociationSrcOp");
    try {
                          /*@bgen(jjtree) AssociationSrcOp */
  ASTAssociationSrcOp jjtn000 = new ASTAssociationSrcOp(JJTASSOCIATIONSRCOP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(K_ASSOCIATION_SRC);
        jj_consume_token(57);
        Identifier();
        jj_consume_token(59);
        Number();
        jj_consume_token(58);
      } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
      } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    } finally {
      trace_return("AssociationSrcOp");
    }
  }

  static final public void EvaluateOp() throws ParseException {
    trace_call("EvaluateOp");
    try {
                    /*@bgen(jjtree) EvaluateOp */
  ASTEvaluateOp jjtn000 = new ASTEvaluateOp(JJTEVALUATEOP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(K_EVALUATE);
        jj_consume_token(57);
        AlgebraOp();
        jj_consume_token(59);
        Identifier();
        jj_consume_token(59);
        AlgebraOp();
        jj_consume_token(59);
        Identifier();
        jj_consume_token(59);
        AlgebraOp();
        jj_consume_token(59);
        Identifier();
        jj_consume_token(59);
        Number();
        jj_consume_token(58);
      } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
      } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    } finally {
      trace_return("EvaluateOp");
    }
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  static private boolean jj_3R_17() {
    if (jj_3R_35()) return true;
    if (jj_scan_token(57)) return true;
    if (jj_3R_23()) return true;
    if (jj_scan_token(58)) return true;
    return false;
  }

  static private boolean jj_3R_29() {
    if (jj_3R_35()) return true;
    return false;
  }

  static private boolean jj_3R_28() {
    if (jj_scan_token(57)) return true;
    if (jj_3R_23()) return true;
    if (jj_scan_token(58)) return true;
    return false;
  }

  static private boolean jj_3R_27() {
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_3R_26() {
    if (jj_3R_42()) return true;
    return false;
  }

  static private boolean jj_3_6() {
    if (jj_3R_15()) return true;
    if (jj_3R_16()) return true;
    return false;
  }

  static private boolean jj_3R_15() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_25()) {
    jj_scanpos = xsp;
    if (jj_3R_26()) {
    jj_scanpos = xsp;
    if (jj_3R_27()) {
    jj_scanpos = xsp;
    if (jj_3R_28()) {
    jj_scanpos = xsp;
    if (jj_3R_29()) return true;
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_25() {
    if (jj_3R_41()) return true;
    return false;
  }

  static private boolean jj_3R_40() {
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3R_39() {
    if (jj_3R_15()) return true;
    if (jj_3R_16()) return true;
    if (jj_3R_23()) return true;
    return false;
  }

  static private boolean jj_3R_23() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_39()) {
    jj_scanpos = xsp;
    if (jj_3R_40()) return true;
    }
    return false;
  }

  static private boolean jj_3R_38() {
    if (jj_scan_token(K_NOT)) return true;
    if (jj_3R_13()) return true;
    return false;
  }

  static private boolean jj_3R_24() {
    if (jj_scan_token(COMPARE_OPERATOR)) return true;
    return false;
  }

  static private boolean jj_3R_12() {
    if (jj_3R_18()) return true;
    if (jj_scan_token(K_AND)) return true;
    if (jj_3R_13()) return true;
    return false;
  }

  static private boolean jj_3R_14() {
    if (jj_3R_23()) return true;
    if (jj_3R_24()) return true;
    if (jj_3R_23()) return true;
    return false;
  }

  static private boolean jj_3_5() {
    if (jj_3R_14()) return true;
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_scan_token(59)) return true;
    if (jj_scan_token(K_QUEUE)) return true;
    return false;
  }

  static private boolean jj_3R_11() {
    if (jj_3R_18()) return true;
    if (jj_scan_token(K_OR)) return true;
    if (jj_3R_13()) return true;
    return false;
  }

  static private boolean jj_3_4() {
    if (jj_scan_token(57)) return true;
    if (jj_3R_13()) return true;
    return false;
  }

  static private boolean jj_3_3() {
    if (jj_3R_12()) return true;
    return false;
  }

  static private boolean jj_3R_35() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(62)) jj_scanpos = xsp;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3_2() {
    if (jj_3R_11()) return true;
    return false;
  }

  static private boolean jj_3R_37() {
    if (jj_3R_14()) return true;
    return false;
  }

  static private boolean jj_3R_18() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_36()) {
    jj_scanpos = xsp;
    if (jj_3R_37()) return true;
    }
    return false;
  }

  static private boolean jj_3R_36() {
    if (jj_scan_token(57)) return true;
    if (jj_3R_13()) return true;
    if (jj_scan_token(58)) return true;
    return false;
  }

  static private boolean jj_3R_22() {
    if (jj_3R_18()) return true;
    return false;
  }

  static private boolean jj_3R_34() {
    if (jj_scan_token(64)) return true;
    return false;
  }

  static private boolean jj_3R_21() {
    if (jj_3R_38()) return true;
    return false;
  }

  static private boolean jj_3R_20() {
    if (jj_3R_12()) return true;
    return false;
  }

  static private boolean jj_3R_33() {
    if (jj_scan_token(63)) return true;
    return false;
  }

  static private boolean jj_3R_19() {
    if (jj_3R_11()) return true;
    return false;
  }

  static private boolean jj_3R_13() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_19()) {
    jj_scanpos = xsp;
    if (jj_3R_20()) {
    jj_scanpos = xsp;
    if (jj_3R_21()) {
    jj_scanpos = xsp;
    if (jj_3R_22()) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_32() {
    if (jj_scan_token(62)) return true;
    return false;
  }

  static private boolean jj_3R_31() {
    if (jj_scan_token(61)) return true;
    return false;
  }

  static private boolean jj_3R_16() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_30()) {
    jj_scanpos = xsp;
    if (jj_3R_31()) {
    jj_scanpos = xsp;
    if (jj_3R_32()) {
    jj_scanpos = xsp;
    if (jj_3R_33()) {
    jj_scanpos = xsp;
    if (jj_3R_34()) return true;
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_30() {
    if (jj_scan_token(60)) return true;
    return false;
  }

  static private boolean jj_3R_42() {
    if (jj_scan_token(CHAR_LITERAL)) return true;
    return false;
  }

  static private boolean jj_3R_41() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(51)) {
    jj_scanpos = xsp;
    if (jj_scan_token(52)) return true;
    }
    return false;
  }

  static private boolean jj_3_7() {
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public ProceduralExpressionParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[24];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0xffb01220,0xffb01220,0x0,0x0,0x0,0x0,0x0,0x40,0x0,0x0,0x800,0x0,0x800,0x10000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x1000000,0xfc4,0xfc4,0x40001000,0x40001000,0x8000000,0x40001000,0x8000000,0x0,0x8000000,0x40001000,0x0,0x40001000,0x0,0x42189000,0x42189000,0x188000,0x42001000,0x180000,0xf0000000,0x40000000,0x40001000,0x40001000,0x40001000,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[7];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public ProceduralExpressionParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public ProceduralExpressionParser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ProceduralExpressionParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 24; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 24; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public ProceduralExpressionParser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ProceduralExpressionParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 24; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 24; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public ProceduralExpressionParser(ProceduralExpressionParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 24; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(ProceduralExpressionParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 24; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      trace_token(token, "");
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
      trace_token(token, " (in getNextToken)");
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[66];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 24; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 66; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  static private int trace_indent = 0;
  static private boolean trace_enabled = true;

/** Enable tracing. */
  static final public void enable_tracing() {
    trace_enabled = true;
  }

/** Disable tracing. */
  static final public void disable_tracing() {
    trace_enabled = false;
  }

  static private void trace_call(String s) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Call:   " + s);
    }
    trace_indent = trace_indent + 2;
  }

  static private void trace_return(String s) {
    trace_indent = trace_indent - 2;
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Return: " + s);
    }
  }

  static private void trace_token(Token t, String where) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Consumed token: <" + tokenImage[t.kind]);
      if (t.kind != 0 && !tokenImage[t.kind].equals("\"" + t.image + "\"")) {
        System.out.print(": \"" + t.image + "\"");
      }
      System.out.println(" at line " + t.beginLine + " column " + t.beginColumn + ">" + where);
    }
  }

  static private void trace_scan(Token t1, int t2) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Visited token: <" + tokenImage[t1.kind]);
      if (t1.kind != 0 && !tokenImage[t1.kind].equals("\"" + t1.image + "\"")) {
        System.out.print(": \"" + t1.image + "\"");
      }
      System.out.println(" at line " + t1.beginLine + " column " + t1.beginColumn + ">; Expected token: <" + tokenImage[t2] + ">");
    }
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 7; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

                                        }
