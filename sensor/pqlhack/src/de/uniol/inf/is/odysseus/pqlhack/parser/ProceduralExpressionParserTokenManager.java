/* Generated By:JJTree&JavaCC: Do not edit this line. ProceduralExpressionParserTokenManager.java */
package de.uniol.inf.is.odysseus.pqlhack.parser;

/** Token Manager. */
public class ProceduralExpressionParserTokenManager implements ProceduralExpressionParserConstants
{

  /** Debug output. */
  public static  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public static  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private static final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active1 & 0x20000L) != 0L)
            return 14;
         if ((active1 & 0x10000L) != 0L)
            return 41;
         if ((active0 & 0x3fffffffffffffe0L) != 0L)
         {
            jjmatchedKind = 62;
            return 42;
         }
         return -1;
      case 1:
         if ((active0 & 0x3003c00001820040L) != 0L)
            return 42;
         if ((active0 & 0xffc3ffffe7dffa0L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 62;
               jjmatchedPos = 1;
            }
            return 42;
         }
         return -1;
      case 2:
         if ((active0 & 0x40000704180L) != 0L)
            return 42;
         if ((active0 & 0x3ffffbfffe0dbe20L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 62;
               jjmatchedPos = 2;
            }
            return 42;
         }
         return -1;
      case 3:
         if ((active0 & 0x80006000000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 62;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x4000L) != 0L)
         {
            jjmatchedKind = 62;
            jjmatchedPos = 3;
            return 1;
         }
         if ((active0 & 0x8002040000L) != 0L)
            return 42;
         if ((active0 & 0x3f7ffb1ffc09be20L) != 0L)
         {
            jjmatchedKind = 62;
            jjmatchedPos = 3;
            return 42;
         }
         return -1;
      case 4:
         if ((active0 & 0x3e7fea1cdc091e20L) != 0L)
         {
            jjmatchedKind = 62;
            jjmatchedPos = 4;
            return 42;
         }
         if ((active0 & 0x100000000000000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 62;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x80006000000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 62;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x4000L) != 0L)
         {
            jjmatchedKind = 62;
            jjmatchedPos = 4;
            return 1;
         }
         if ((active0 & 0x11032000a000L) != 0L)
            return 42;
         return -1;
      case 5:
         if ((active0 & 0x200000000000000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 62;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active0 & 0x100000000000000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 62;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x80006000000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 62;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x40200000001820L) != 0L)
            return 42;
         if ((active0 & 0x4000L) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               jjmatchedKind = 62;
               jjmatchedPos = 5;
            }
            return 1;
         }
         if ((active0 & 0x3c3fca1cdc090600L) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               jjmatchedKind = 62;
               jjmatchedPos = 5;
            }
            return 42;
         }
         return -1;
      case 6:
         if ((active0 & 0x200000000000000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 62;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active0 & 0x100000000000000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 62;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x38000000000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 62;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x80006000000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 62;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x400090000L) != 0L)
            return 42;
         if ((active0 & 0x3c07ca18dc000600L) != 0L)
         {
            jjmatchedKind = 62;
            jjmatchedPos = 6;
            return 42;
         }
         if ((active0 & 0x4000L) != 0L)
         {
            jjmatchedKind = 62;
            jjmatchedPos = 6;
            return 1;
         }
         return -1;
      case 7:
         if ((active0 & 0x20000000000L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 62;
               jjmatchedPos = 6;
            }
            return -1;
         }
         if ((active0 & 0x3c03c818dc000600L) != 0L)
         {
            jjmatchedKind = 62;
            jjmatchedPos = 7;
            return 42;
         }
         if ((active0 & 0x200000000000000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 62;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active0 & 0x100000000000000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 62;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x38000000000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 62;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x80006000000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 62;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x4000000000000L) != 0L)
            return 42;
         if ((active0 & 0x4000L) != 0L)
         {
            jjmatchedKind = 62;
            jjmatchedPos = 7;
            return 1;
         }
         return -1;
      case 8:
         if ((active0 & 0x38000000000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 62;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x1000000600L) != 0L)
            return 42;
         if ((active0 & 0x200000000000000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 62;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active0 & 0x4000L) != 0L)
            return 1;
         if ((active0 & 0x100000000000000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 62;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x80006000000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 62;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0xc00080000000000L) != 0L)
         {
            if (jjmatchedPos < 7)
            {
               jjmatchedKind = 62;
               jjmatchedPos = 7;
            }
            return -1;
         }
         if ((active0 & 0x20000000000L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 62;
               jjmatchedPos = 6;
            }
            return -1;
         }
         if ((active0 & 0x3003c008dc000000L) != 0L)
         {
            if (jjmatchedPos != 8)
            {
               jjmatchedKind = 62;
               jjmatchedPos = 8;
            }
            return 42;
         }
         return -1;
      case 9:
         if ((active0 & 0xc00080000000000L) != 0L)
         {
            if (jjmatchedPos < 7)
            {
               jjmatchedKind = 62;
               jjmatchedPos = 7;
            }
            return -1;
         }
         if ((active0 & 0x20000000000L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 62;
               jjmatchedPos = 6;
            }
            return -1;
         }
         if ((active0 & 0x3003c00850000000L) != 0L)
         {
            jjmatchedKind = 62;
            jjmatchedPos = 9;
            return 42;
         }
         if ((active0 & 0x200000000000000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 62;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active0 & 0x38000000000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 62;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x80006000000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 62;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x8c000000L) != 0L)
            return 42;
         return -1;
      case 10:
         if ((active0 & 0xc00080000000000L) != 0L)
         {
            if (jjmatchedPos < 7)
            {
               jjmatchedKind = 62;
               jjmatchedPos = 7;
            }
            return -1;
         }
         if ((active0 & 0x20000000000L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 62;
               jjmatchedPos = 6;
            }
            return -1;
         }
         if ((active0 & 0x200000000000000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 62;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active0 & 0x38000000000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 62;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x80006000000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 62;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x50000000L) != 0L)
            return 42;
         if ((active0 & 0x3003c00800000000L) != 0L)
         {
            jjmatchedKind = 62;
            jjmatchedPos = 10;
            return 42;
         }
         return -1;
      case 11:
         if ((active0 & 0xc00080000000000L) != 0L)
         {
            if (jjmatchedPos < 7)
            {
               jjmatchedKind = 62;
               jjmatchedPos = 7;
            }
            return -1;
         }
         if ((active0 & 0x20000000000L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 62;
               jjmatchedPos = 6;
            }
            return -1;
         }
         if ((active0 & 0x3003c00000000000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 62;
               jjmatchedPos = 10;
            }
            return -1;
         }
         if ((active0 & 0x200000000000000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 62;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active0 & 0x30000000000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 62;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x80006000000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 62;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 62;
            jjmatchedPos = 11;
            return 42;
         }
         return -1;
      case 12:
         if ((active0 & 0xc00080000000000L) != 0L)
         {
            if (jjmatchedPos < 7)
            {
               jjmatchedKind = 62;
               jjmatchedPos = 7;
            }
            return -1;
         }
         if ((active0 & 0x20000000000L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 62;
               jjmatchedPos = 6;
            }
            return -1;
         }
         if ((active0 & 0x3003c00000000000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 62;
               jjmatchedPos = 10;
            }
            return -1;
         }
         if ((active0 & 0x200000000000000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 62;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active0 & 0x30000000000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 62;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x80006000000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 62;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x800000000L) != 0L)
            return 42;
         return -1;
      case 13:
         if ((active0 & 0xc00080000000000L) != 0L)
         {
            if (jjmatchedPos < 7)
            {
               jjmatchedKind = 62;
               jjmatchedPos = 7;
            }
            return -1;
         }
         if ((active0 & 0x20000000000L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 62;
               jjmatchedPos = 6;
            }
            return -1;
         }
         if ((active0 & 0x3003c00000000000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 62;
               jjmatchedPos = 10;
            }
            return -1;
         }
         if ((active0 & 0x200000000000000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 62;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active0 & 0x30000000000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 62;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x80006000000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 62;
               jjmatchedPos = 2;
            }
            return -1;
         }
         return -1;
      case 14:
         if ((active0 & 0xc00080000000000L) != 0L)
         {
            if (jjmatchedPos < 7)
            {
               jjmatchedKind = 62;
               jjmatchedPos = 7;
            }
            return -1;
         }
         if ((active0 & 0x20000000000L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 62;
               jjmatchedPos = 6;
            }
            return -1;
         }
         if ((active0 & 0x3003c00000000000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 62;
               jjmatchedPos = 10;
            }
            return -1;
         }
         if ((active0 & 0x200000000000000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 62;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active0 & 0x30000000000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 62;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x80004000000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 62;
               jjmatchedPos = 2;
            }
            return -1;
         }
         return -1;
      case 15:
         if ((active0 & 0xc00080000000000L) != 0L)
         {
            if (jjmatchedPos < 7)
            {
               jjmatchedKind = 62;
               jjmatchedPos = 7;
            }
            return -1;
         }
         if ((active0 & 0x20000000000L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 62;
               jjmatchedPos = 6;
            }
            return -1;
         }
         if ((active0 & 0x3000800000000000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 62;
               jjmatchedPos = 10;
            }
            return -1;
         }
         if ((active0 & 0x200000000000000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 62;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active0 & 0x20000000000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 62;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x80004000000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 62;
               jjmatchedPos = 2;
            }
            return -1;
         }
         return -1;
      case 16:
         if ((active0 & 0xc00080000000000L) != 0L)
         {
            if (jjmatchedPos < 7)
            {
               jjmatchedKind = 62;
               jjmatchedPos = 7;
            }
            return -1;
         }
         if ((active0 & 0x20000000000L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 62;
               jjmatchedPos = 6;
            }
            return -1;
         }
         if ((active0 & 0x3000000000000000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 62;
               jjmatchedPos = 10;
            }
            return -1;
         }
         if ((active0 & 0x200000000000000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 62;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active0 & 0x20000000000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 62;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x4000000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 62;
               jjmatchedPos = 2;
            }
            return -1;
         }
         return -1;
      case 17:
         if ((active0 & 0xc00080000000000L) != 0L)
         {
            if (jjmatchedPos < 7)
            {
               jjmatchedKind = 62;
               jjmatchedPos = 7;
            }
            return -1;
         }
         if ((active0 & 0x20000000000L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 62;
               jjmatchedPos = 6;
            }
            return -1;
         }
         if ((active0 & 0x3000000000000000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 62;
               jjmatchedPos = 10;
            }
            return -1;
         }
         if ((active0 & 0x200000000000000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 62;
               jjmatchedPos = 4;
            }
            return -1;
         }
         return -1;
      case 18:
         if ((active0 & 0xc00080000000000L) != 0L)
         {
            if (jjmatchedPos < 7)
            {
               jjmatchedKind = 62;
               jjmatchedPos = 7;
            }
            return -1;
         }
         if ((active0 & 0x20000000000L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 62;
               jjmatchedPos = 6;
            }
            return -1;
         }
         if ((active0 & 0x3000000000000000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 62;
               jjmatchedPos = 10;
            }
            return -1;
         }
         return -1;
      case 19:
         if ((active0 & 0xc00080000000000L) != 0L)
         {
            if (jjmatchedPos < 7)
            {
               jjmatchedKind = 62;
               jjmatchedPos = 7;
            }
            return -1;
         }
         if ((active0 & 0x3000000000000000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 62;
               jjmatchedPos = 10;
            }
            return -1;
         }
         return -1;
      case 20:
         if ((active0 & 0xc00000000000000L) != 0L)
         {
            if (jjmatchedPos < 7)
            {
               jjmatchedKind = 62;
               jjmatchedPos = 7;
            }
            return -1;
         }
         return -1;
      case 21:
         if ((active0 & 0xc00000000000000L) != 0L)
         {
            if (jjmatchedPos < 7)
            {
               jjmatchedKind = 62;
               jjmatchedPos = 7;
            }
            return -1;
         }
         return -1;
      case 22:
         if ((active0 & 0xc00000000000000L) != 0L)
         {
            if (jjmatchedPos < 7)
            {
               jjmatchedKind = 62;
               jjmatchedPos = 7;
            }
            return -1;
         }
         return -1;
      case 23:
         if ((active0 & 0xc00000000000000L) != 0L)
         {
            if (jjmatchedPos < 7)
            {
               jjmatchedKind = 62;
               jjmatchedPos = 7;
            }
            return -1;
         }
         return -1;
      case 24:
         if ((active0 & 0x800000000000000L) != 0L)
         {
            if (jjmatchedPos < 7)
            {
               jjmatchedKind = 62;
               jjmatchedPos = 7;
            }
            return -1;
         }
         return -1;
      case 25:
         if ((active0 & 0x800000000000000L) != 0L)
         {
            if (jjmatchedPos < 7)
            {
               jjmatchedKind = 62;
               jjmatchedPos = 7;
            }
            return -1;
         }
         return -1;
      case 26:
         if ((active0 & 0x800000000000000L) != 0L)
         {
            if (jjmatchedPos < 7)
            {
               jjmatchedKind = 62;
               jjmatchedPos = 7;
            }
            return -1;
         }
         return -1;
      case 27:
         if ((active0 & 0x800000000000000L) != 0L)
         {
            if (jjmatchedPos < 7)
            {
               jjmatchedKind = 62;
               jjmatchedPos = 7;
            }
            return -1;
         }
         return -1;
      case 28:
         if ((active0 & 0x800000000000000L) != 0L)
         {
            if (jjmatchedPos < 7)
            {
               jjmatchedKind = 62;
               jjmatchedPos = 7;
            }
            return -1;
         }
         return -1;
      default :
         return -1;
   }
}
private static final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
static private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
static private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 40:
         return jjStopAtPos(0, 75);
      case 41:
         return jjStopAtPos(0, 77);
      case 42:
         return jjStopAtPos(0, 78);
      case 43:
         return jjStopAtPos(0, 79);
      case 44:
         return jjStopAtPos(0, 76);
      case 45:
         return jjStartNfaWithStates_0(0, 80, 41);
      case 47:
         return jjStartNfaWithStates_0(0, 81, 14);
      case 58:
         jjmatchedKind = 73;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x80000L);
      case 59:
         return jjStopAtPos(0, 74);
      case 94:
         return jjStopAtPos(0, 82);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa1_0(0x3003c000000001e0L, 0x0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa1_0(0x40000000001e00L, 0x0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa1_0(0x8000L, 0x0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa1_0(0xc00000000010000L, 0x0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa1_0(0x4000000002000L, 0x0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa1_0(0x38000000000000L, 0x0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa1_0(0x20000L, 0x0L);
      case 74:
      case 106:
         return jjMoveStringLiteralDfa1_0(0x100000000040000L, 0x0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa1_0(0x80000L, 0x0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa1_0(0x300000L, 0x0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa1_0(0x404000L, 0x0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa1_0(0x1800000L, 0x0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa1_0(0x1e000000L, 0x0L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa1_0(0x20000000L, 0x0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa1_0(0x7c0000000L, 0x0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa1_0(0x20007f800000000L, 0x0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa1_0(0x80280000000000L, 0x0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa1_0(0x100000000000L, 0x0L);
      default :
         return jjMoveNfa_0(2, 0);
   }
}
static private int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 61:
         if ((active1 & 0x80000L) != 0L)
            return jjStopAtPos(1, 83);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000L, active1, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000800000020L, active1, 0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000000000000L, active1, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x207000010600L, active1, 0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000000000L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0xc38008000200000L, active1, 0L);
      case 74:
      case 106:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000000L, active1, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x30002000000L, active1, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000000000000L, active1, 0L);
      case 78:
      case 110:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(1, 17, 42);
         else if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(1, 24, 42);
         return jjMoveStringLiteralDfa2_0(active0, 0x200000080L, active1, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x4cc000L, active1, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000000L, active1, 0L);
      case 82:
      case 114:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(1, 23, 42);
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000c000800L, active1, 0L);
      case 83:
      case 115:
         if ((active0 & 0x40L) != 0L)
         {
            jjmatchedKind = 6;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x3003c00080000000L, active1, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0xc0430001000L, active1, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000000100L, active1, 0L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
static private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, 0L);
      return 2;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x204000002000000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x20L);
      case 68:
      case 100:
         if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(2, 7, 42);
         break;
      case 69:
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x1002a4000000L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x11000L);
      case 71:
      case 103:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(2, 8, 42);
         return jjMoveStringLiteralDfa3_0(active0, 0x80000L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x30000042000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x38001000000000L);
      case 77:
      case 109:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 42, 42);
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000000L);
      case 78:
      case 110:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(2, 21, 42);
         return jjMoveStringLiteralDfa3_0(active0, 0x410000600L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000108000800L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000000000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x3c03e00000000000L);
      case 84:
      case 116:
         if ((active0 & 0x400000L) != 0L)
         {
            jjmatchedKind = 22;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x6000004000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000000000L);
      case 88:
      case 120:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(2, 20, 42);
         break;
      case 90:
      case 122:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000000L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, 0L);
}
static private int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa4_0(active0, 0x80006000000000L);
      case 95:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000600L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa4_0(active0, 0x30004000000L);
      case 69:
      case 101:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 39, 42);
         return jjMoveStringLiteralDfa4_0(active0, 0x100001800000020L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x100080000L);
      case 74:
      case 106:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000000800L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000080000000L);
      case 78:
      case 110:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(3, 18, 42);
         else if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(3, 25, 42);
         return jjMoveStringLiteralDfa4_0(active0, 0x400008000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x3003c00040000000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x200100000000000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x200002000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0xc38200000000000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, 0L);
}
static private int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa5_0(active0, 0x100000000000000L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0xc00000000000000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x3003c01000080000L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000000000000L);
      case 69:
      case 101:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(4, 29, 42);
         else if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 40, 42);
         else if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 44, 42);
         return jjMoveStringLiteralDfa5_0(active0, 0x78000488005800L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa5_0(active0, 0x600L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x20004000000L);
      case 74:
      case 106:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000000000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0x800000000L);
      case 78:
      case 110:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(4, 32, 42);
         break;
      case 79:
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x200000000000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa5_0(active0, 0x6000000000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa5_0(active0, 0x200000000000020L);
      case 84:
      case 116:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(4, 13, 42);
         else if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(4, 15, 42);
         else if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(4, 33, 42);
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000010000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, 0L);
}
static private int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa6_0(active0, 0x200000000000000L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x84000800080000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa6_0(active0, 0x8c000000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa6_0(active0, 0x40000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x3003c80000000000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x10000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa6_0(active0, 0x600L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa6_0(active0, 0xc00020000000000L);
      case 80:
      case 112:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 45, 42);
         break;
      case 82:
      case 114:
         if ((active0 & 0x800L) != 0L)
         {
            jjmatchedKind = 11;
            jjmatchedPos = 5;
         }
         else if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(5, 12, 42);
         return jjMoveStringLiteralDfa6_0(active0, 0x78006000000000L);
      case 83:
      case 115:
         if ((active0 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(5, 5, 42);
         return jjMoveStringLiteralDfa6_0(active0, 0x100000400000000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa6_0(active0, 0x10000000L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, 0L);
}
static private int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa7_0(active0, 0x78000000000000L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x3003c00010000600L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0xc00000840000000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa7_0(active0, 0x6000000000L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa7_0(active0, 0x20000000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x100001000004000L);
      case 76:
      case 108:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(6, 19, 42);
         break;
      case 78:
      case 110:
         return jjMoveStringLiteralDfa7_0(active0, 0x80000000000L);
      case 84:
      case 116:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(6, 16, 42);
         else if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(6, 34, 42);
         return jjMoveStringLiteralDfa7_0(active0, 0x8400008c000000L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa7_0(active0, 0x200000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, 0L);
}
static private int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa8_0(active0, 0x20000000000L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0x80000000000000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x20000000000000L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa8_0(active0, 0x6000000000L);
      case 69:
      case 101:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 50, 42);
         return jjMoveStringLiteralDfa8_0(active0, 0xc10000000000000L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa8_0(active0, 0x8080000000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0x4000008c000000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa8_0(active0, 0x200000000000000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa8_0(active0, 0x100000000000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0x1800000000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa8_0(active0, 0x600L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa8_0(active0, 0x4000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa8_0(active0, 0x3003c00050000000L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, 0L);
}
static private int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa9_0(active0, 0xc80080000000000L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa9_0(active0, 0x8000000000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x3003c06050000000L);
      case 75:
      case 107:
         if ((active0 & 0x200L) != 0L)
         {
            jjmatchedKind = 9;
            jjmatchedPos = 8;
         }
         else if ((active0 & 0x100000000000000L) != 0L)
            return jjStopAtPos(8, 56);
         return jjMoveStringLiteralDfa9_0(active0, 0x400L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa9_0(active0, 0x200000000000000L);
      case 78:
      case 110:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 36, 42);
         return jjMoveStringLiteralDfa9_0(active0, 0x40000800000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0x2000008c000000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa9_0(active0, 0x10000000000000L);
      case 84:
      case 116:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(8, 14, 1);
         return jjMoveStringLiteralDfa9_0(active0, 0x20000000000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, 0L);
}
static private int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa10_0(active0, 0x200000000000400L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa10_0(active0, 0x80000000000000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa10_0(active0, 0x6000000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa10_0(active0, 0x48020000000000L);
      case 78:
      case 110:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(9, 26, 42);
         else if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(9, 27, 42);
         else if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(9, 31, 42);
         break;
      case 79:
      case 111:
         return jjMoveStringLiteralDfa10_0(active0, 0x3c03c00050000000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa10_0(active0, 0x10080000000000L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa10_0(active0, 0x20000800000000L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, 0L);
}
static private int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa11_0(active0, 0x20000000000000L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa11_0(active0, 0xc00000000000000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa11_0(active0, 0x800000400L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa11_0(active0, 0x10080000000000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa11_0(active0, 0x20000000000L);
      case 78:
      case 110:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(10, 28, 42);
         else if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(10, 30, 42);
         else if ((active0 & 0x8000000000000L) != 0L)
            return jjStopAtPos(10, 51);
         return jjMoveStringLiteralDfa11_0(active0, 0x3003c00000000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa11_0(active0, 0x80000000000000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa11_0(active0, 0x200000000000000L);
      case 84:
      case 116:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStopAtPos(10, 54);
         return jjMoveStringLiteralDfa11_0(active0, 0x6000000000L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, 0L);
}
static private int jjMoveStringLiteralDfa11_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa12_0(active0, 0x3003c00000000000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa12_0(active0, 0x20000000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa12_0(active0, 0x6000000000L);
      case 74:
      case 106:
         return jjMoveStringLiteralDfa12_0(active0, 0xc00000000000000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa12_0(active0, 0x10080000000000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa12_0(active0, 0x220000800000000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa12_0(active0, 0x80000000000000L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa12_0(active0, 0x400L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0, 0L);
}
static private int jjMoveStringLiteralDfa12_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(10, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, 0L);
      return 12;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa13_0(active0, 0x20000000000L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa13_0(active0, 0x10000000000000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa13_0(active0, 0x3c00880000000000L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa13_0(active0, 0x400000000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa13_0(active0, 0x20000000000000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa13_0(active0, 0x80000000000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa13_0(active0, 0x200006000000000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa13_0(active0, 0x3000000000000L);
      case 84:
      case 116:
         if ((active0 & 0x400L) != 0L)
            return jjStopAtPos(12, 10);
         else if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(12, 35, 42);
         break;
      default :
         break;
   }
   return jjStartNfa_0(11, active0, 0L);
}
static private int jjMoveStringLiteralDfa13_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(11, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0, 0L);
      return 13;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa14_0(active0, 0x80000000000L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa14_0(active0, 0x20000000000000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa14_0(active0, 0xc80000000000000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa14_0(active0, 0x1400000000000L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa14_0(active0, 0x200000000000000L);
      case 78:
      case 110:
         if ((active0 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 37;
            jjmatchedPos = 13;
         }
         return jjMoveStringLiteralDfa14_0(active0, 0x4000000000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa14_0(active0, 0x2000000000000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa14_0(active0, 0x10000000000000L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa14_0(active0, 0x800000000000L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa14_0(active0, 0x20000000000L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa14_0(active0, 0x3000000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(12, active0, 0L);
}
static private int jjMoveStringLiteralDfa14_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(12, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0, 0L);
      return 14;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa15_0(active0, 0x4000000000L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa15_0(active0, 0x800000000000L);
      case 67:
      case 99:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStopAtPos(14, 49);
         break;
      case 69:
      case 101:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStopAtPos(14, 52);
         return jjMoveStringLiteralDfa15_0(active0, 0x80000000000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa15_0(active0, 0x200020000000000L);
      case 76:
      case 108:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStopAtPos(14, 48);
         break;
      case 78:
      case 110:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStopAtPos(14, 46);
         return jjMoveStringLiteralDfa15_0(active0, 0x20000000000000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa15_0(active0, 0x3000000000000000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa15_0(active0, 0xc00000000000000L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa15_0(active0, 0x80000000000L);
      default :
         break;
   }
   return jjStartNfa_0(13, active0, 0L);
}
static private int jjMoveStringLiteralDfa15_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(13, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, active0, 0L);
      return 15;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa16_0(active0, 0x3c00000000000000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa16_0(active0, 0x20000000000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa16_0(active0, 0x80000000000L);
      case 76:
      case 108:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStopAtPos(15, 47);
         return jjMoveStringLiteralDfa16_0(active0, 0x200000000000000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa16_0(active0, 0x20000000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa16_0(active0, 0x4000000000L);
      case 82:
      case 114:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStopAtPos(15, 55);
         break;
      default :
         break;
   }
   return jjStartNfa_0(14, active0, 0L);
}
static private int jjMoveStringLiteralDfa16_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(14, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, active0, 0L);
      return 16;
   }
   switch(curChar)
   {
      case 68:
      case 100:
         return jjMoveStringLiteralDfa17_0(active0, 0x20000000000L);
      case 69:
      case 101:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStopAtPos(16, 53);
         return jjMoveStringLiteralDfa17_0(active0, 0x1200000000000000L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa17_0(active0, 0x2000000000000000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa17_0(active0, 0x80000000000L);
      case 82:
      case 114:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStopAtPos(16, 38);
         break;
      case 83:
      case 115:
         return jjMoveStringLiteralDfa17_0(active0, 0xc00000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(15, active0, 0L);
}
static private int jjMoveStringLiteralDfa17_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(15, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, active0, 0L);
      return 17;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa18_0(active0, 0x2000000000000000L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa18_0(active0, 0x80000000000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa18_0(active0, 0xc00000000000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa18_0(active0, 0x20000000000L);
      case 82:
      case 114:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStopAtPos(17, 57);
         break;
      case 86:
      case 118:
         return jjMoveStringLiteralDfa18_0(active0, 0x1000000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(16, active0, 0L);
}
static private int jjMoveStringLiteralDfa18_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(16, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(17, active0, 0L);
      return 18;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa19_0(active0, 0x1000000000000000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa19_0(active0, 0xc00000000000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa19_0(active0, 0x80000000000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa19_0(active0, 0x2000000000000000L);
      case 87:
      case 119:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStopAtPos(18, 41);
         break;
      default :
         break;
   }
   return jjStartNfa_0(17, active0, 0L);
}
static private int jjMoveStringLiteralDfa19_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(17, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(18, active0, 0L);
      return 19;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStopAtPos(19, 61);
         return jjMoveStringLiteralDfa20_0(active0, 0xc00000000000000L);
      case 76:
      case 108:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStopAtPos(19, 60);
         break;
      case 87:
      case 119:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStopAtPos(19, 43);
         break;
      default :
         break;
   }
   return jjStartNfa_0(18, active0, 0L);
}
static private int jjMoveStringLiteralDfa20_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(18, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(19, active0, 0L);
      return 20;
   }
   switch(curChar)
   {
      case 67:
      case 99:
         return jjMoveStringLiteralDfa21_0(active0, 0xc00000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(19, active0, 0L);
}
static private int jjMoveStringLiteralDfa21_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(19, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(20, active0, 0L);
      return 21;
   }
   switch(curChar)
   {
      case 84:
      case 116:
         return jjMoveStringLiteralDfa22_0(active0, 0xc00000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(20, active0, 0L);
}
static private int jjMoveStringLiteralDfa22_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(20, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(21, active0, 0L);
      return 22;
   }
   switch(curChar)
   {
      case 79:
      case 111:
         return jjMoveStringLiteralDfa23_0(active0, 0xc00000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(21, active0, 0L);
}
static private int jjMoveStringLiteralDfa23_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(21, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(22, active0, 0L);
      return 23;
   }
   switch(curChar)
   {
      case 82:
      case 114:
         if ((active0 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 58;
            jjmatchedPos = 23;
         }
         return jjMoveStringLiteralDfa24_0(active0, 0x800000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(22, active0, 0L);
}
static private int jjMoveStringLiteralDfa24_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(22, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(23, active0, 0L);
      return 24;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa25_0(active0, 0x800000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(23, active0, 0L);
}
static private int jjMoveStringLiteralDfa25_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(23, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(24, active0, 0L);
      return 25;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa26_0(active0, 0x800000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(24, active0, 0L);
}
static private int jjMoveStringLiteralDfa26_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(24, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(25, active0, 0L);
      return 26;
   }
   switch(curChar)
   {
      case 78:
      case 110:
         return jjMoveStringLiteralDfa27_0(active0, 0x800000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(25, active0, 0L);
}
static private int jjMoveStringLiteralDfa27_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(25, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(26, active0, 0L);
      return 27;
   }
   switch(curChar)
   {
      case 68:
      case 100:
         return jjMoveStringLiteralDfa28_0(active0, 0x800000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(26, active0, 0L);
}
static private int jjMoveStringLiteralDfa28_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(26, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(27, active0, 0L);
      return 28;
   }
   switch(curChar)
   {
      case 82:
      case 114:
         return jjMoveStringLiteralDfa29_0(active0, 0x800000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(27, active0, 0L);
}
static private int jjMoveStringLiteralDfa29_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(27, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(28, active0, 0L);
      return 29;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStopAtPos(29, 59);
         break;
      default :
         break;
   }
   return jjStartNfa_0(28, active0, 0L);
}
static private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 41;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 42:
               case 1:
                  if ((0x7ff400000000000L & l) == 0L)
                     break;
                  if (kind > 62)
                     kind = 62;
                  jjCheckNAdd(1);
                  break;
               case 41:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(18, 19);
                  else if (curChar == 46)
                     jjCheckNAdd(22);
                  break;
               case 2:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 70)
                        kind = 70;
                     jjCheckNAddStates(0, 4);
                  }
                  else if ((0x7000000000000000L & l) != 0L)
                  {
                     if (kind > 67)
                        kind = 67;
                  }
                  else if (curChar == 46)
                     jjCheckNAdd(22);
                  else if (curChar == 45)
                     jjCheckNAddTwoStates(18, 21);
                  else if (curChar == 47)
                     jjCheckNAddTwoStates(14, 15);
                  else if (curChar == 34)
                     jjCheckNAddTwoStates(8, 9);
                  else if (curChar == 39)
                     jjCheckNAddTwoStates(3, 4);
                  if (curChar == 60)
                     jjCheckNAddTwoStates(24, 11);
                  else if (curChar == 62)
                     jjCheckNAdd(11);
                  break;
               case 14:
               case 15:
                  if ((0x83ff4c1000000000L & l) != 0L)
                     jjCheckNAddTwoStates(15, 16);
                  break;
               case 3:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(3, 4);
                  break;
               case 4:
                  if (curChar != 39)
                     break;
                  if (kind > 65)
                     kind = 65;
                  jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 5:
                  if (curChar == 39)
                     jjCheckNAddTwoStates(6, 4);
                  break;
               case 6:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(6, 4);
                  break;
               case 7:
                  if (curChar == 34)
                     jjCheckNAddTwoStates(8, 9);
                  break;
               case 8:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddTwoStates(8, 9);
                  break;
               case 9:
                  if (curChar == 34 && kind > 66)
                     kind = 66;
                  break;
               case 10:
                  if ((0x7000000000000000L & l) != 0L && kind > 67)
                     kind = 67;
                  break;
               case 11:
                  if (curChar == 61 && kind > 67)
                     kind = 67;
                  break;
               case 12:
                  if (curChar == 62)
                     jjCheckNAdd(11);
                  break;
               case 13:
                  if (curChar == 47)
                     jjCheckNAddTwoStates(14, 15);
                  break;
               case 16:
                  if (curChar == 47 && kind > 68)
                     kind = 68;
                  break;
               case 17:
                  if (curChar == 45)
                     jjCheckNAddTwoStates(18, 21);
                  break;
               case 18:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(18, 19);
                  break;
               case 19:
                  if (curChar == 46)
                     jjCheckNAdd(20);
                  break;
               case 20:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 69)
                     kind = 69;
                  jjCheckNAdd(20);
                  break;
               case 21:
                  if (curChar == 46)
                     jjCheckNAdd(22);
                  break;
               case 22:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 69)
                     kind = 69;
                  jjCheckNAdd(22);
                  break;
               case 23:
                  if (curChar == 60)
                     jjCheckNAddTwoStates(24, 11);
                  break;
               case 24:
                  if (curChar == 62 && kind > 67)
                     kind = 67;
                  break;
               case 25:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 70)
                     kind = 70;
                  jjCheckNAddStates(0, 4);
                  break;
               case 26:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 70)
                     kind = 70;
                  jjCheckNAdd(26);
                  break;
               case 27:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 28:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(29, 37);
                  break;
               case 29:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 30:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(31, 35);
                  break;
               case 31:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 32:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 72)
                     kind = 72;
                  jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 33:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 72)
                     kind = 72;
                  jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 34:
                  if ((0x3ff000000000000L & l) != 0L && kind > 72)
                     kind = 72;
                  break;
               case 35:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(36, 31);
                  break;
               case 36:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAdd(31);
                  break;
               case 37:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(38, 29);
                  break;
               case 38:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAdd(29);
                  break;
               case 39:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(40, 27);
                  break;
               case 40:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAdd(27);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 42:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 62)
                        kind = 62;
                     jjCheckNAdd(1);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 62)
                        kind = 62;
                     jjCheckNAddTwoStates(0, 1);
                  }
                  break;
               case 2:
               case 0:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 62)
                     kind = 62;
                  jjCheckNAddTwoStates(0, 1);
                  break;
               case 14:
                  if ((0x7fffffe17fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(15, 16);
                  else if (curChar == 94)
                     jjCheckNAdd(15);
                  break;
               case 1:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 62)
                     kind = 62;
                  jjCheckNAdd(1);
                  break;
               case 3:
                  jjCheckNAddTwoStates(3, 4);
                  break;
               case 6:
                  jjCheckNAddTwoStates(6, 4);
                  break;
               case 8:
                  jjAddStates(5, 6);
                  break;
               case 15:
                  if ((0x7fffffe17fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(15, 16);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(3, 4);
                  break;
               case 6:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(6, 4);
                  break;
               case 8:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(5, 6);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 41 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   18, 19, 26, 27, 39, 8, 9, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, "\72", "\73", "\50", "\54", "\51", "\52", "\53", "\55", 
"\57", "\136", "\72\75", };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0x7fffffffffffffe1L, 0xfff7eL, 
};
static final long[] jjtoSkip = {
   0x1eL, 0x0L, 
};
static protected SimpleCharStream input_stream;
static private final int[] jjrounds = new int[41];
static private final int[] jjstateSet = new int[82];
static protected char curChar;
/** Constructor. */
public ProceduralExpressionParserTokenManager(SimpleCharStream stream){
   if (input_stream != null)
      throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);
   input_stream = stream;
}

/** Constructor. */
public ProceduralExpressionParserTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
static private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 41; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
static public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

static protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

static int curLexState = 0;
static int defaultLexState = 0;
static int jjnewStateCnt;
static int jjround;
static int jjmatchedPos;
static int jjmatchedKind;

/** Get the next Token. */
public static Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

static private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
static private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
static private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

static private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
