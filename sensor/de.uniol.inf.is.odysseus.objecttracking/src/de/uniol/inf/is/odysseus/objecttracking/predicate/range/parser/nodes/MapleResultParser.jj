/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. MapleResultParser.jj */
/*@egen*//**
* JJTree file
*/

options {
  JDK_VERSION = "1.5";
  IGNORE_CASE = true;
               
                 
  DEBUG_PARSER = true;
  DEBUG_TOKEN_MANAGER = false;
                             
                                    
                                                                                        
  //LOOKAHEAD = 2;
  //FORCE_LA_CHECK = true;
}

PARSER_BEGIN(MapleResultParser) 
	package de.uniol.inf.is.odysseus.objecttracking.predicate.range.parser.nodes;

	public class MapleResultParser/*@bgen(jjtree)*/implements MapleResultParserTreeConstants/*@egen*/{/*@bgen(jjtree)*/
  protected static JJTMapleResultParserState jjtree = new JJTMapleResultParserState();

/*@egen*/}

PARSER_END(MapleResultParser)
 
SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
/*| <"//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
| <"/*" (~["*"])* "*" (~["/"] (~["*"])* "*")* "/">*/
}

TOKEN:/* Keywords */
{
  < K_AND: "AND" >
  |< K_MAPLE: "MAPLE">
  |< K_PIECEWISE: "PIECEWISE" >
}

TOKEN:{
  <IDENTIFIER:(<LETTER>)+(<DIGIT>
  | <LETTER>
  | <SPECIAL_CHARS>)*>
  | <#LETTER:["a"-"z", "A"-"Z"]>
  | <#SPECIAL_CHARS:":"
  | "_"
  | ".">
  | <CHAR_LITERAL:"'"(~["'"])*"'"("'"(~["'"])*"'")*>
  | <QUOTED_IDENTIFIER:"\""(~["\n", "\r", "\""])*"\"">
  | <COMPARE_OPERATOR:"="
  | "<>"
  | ">"
  | "<"
  | "<="
  | ">=">
  | <REGEXP: "/" ("^")?(<LETTER> | <DIGIT> | "\\" | "+" | "." | "*" | "?" | "$")+ "/" >
}


TOKEN:/* Numeric Constants */
{
  //  <NUMBER:<FLOAT>
//  | <FLOAT>(["e", "E"](["-", "+"])?<FLOAT>)?>
//  | <#FLOAT:<INTEGER>
//  | <INTEGER>("."<INTEGER>)?
//  | "."<INTEGER>>
<FLOAT:(<INTEGER>"."(<INTEGER>)?
  | "."<INTEGER>)>
  | <INTEGER:(<DIGIT>)+>
  | <#DIGIT:["0"-"9"]>
 | <IPADDRESS:<DIGIT>(<DIGIT>)?(<DIGIT>)?"."<DIGIT>(<DIGIT>)?(<DIGIT>)?"."<DIGIT>(<DIGIT>)?(<DIGIT>)?"."<DIGIT>(<DIGIT>)?(<DIGIT>)?>
}

ASTMaple Maple():{/*@bgen(jjtree) Maple */
  ASTMaple jjtn000 = new ASTMaple(JJTMAPLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Maple */
        try {
/*@egen*/
	<K_MAPLE> (Solution() | MaplePiecewise())/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{return jjtn000;}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void MaplePiecewise():{/*@bgen(jjtree) MaplePiecewise */
  ASTMaplePiecewise jjtn000 = new ASTMaplePiecewise(JJTMAPLEPIECEWISE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) MaplePiecewise */
  try {
/*@egen*/
  < K_PIECEWISE >"("ConditionSolution() (LOOKAHEAD("," ConditionSolution())"," ConditionSolution())* ("," Solution())?")"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}

void ConditionSolution():{/*@bgen(jjtree) ConditionSolution */
  ASTConditionSolution jjtn000 = new ASTConditionSolution(JJTCONDITIONSOLUTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) ConditionSolution */
  try {
/*@egen*/
  Condition() "," Solution()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}

void Condition():{/*@bgen(jjtree) Condition */
  ASTCondition jjtn000 = new ASTCondition(JJTCONDITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Condition */
  try {
/*@egen*/
  ComplexCondition() | SimpleCondition()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}

void ComplexCondition():{/*@bgen(jjtree) ComplexCondition */
  ASTComplexCondition jjtn000 = new ASTComplexCondition(JJTCOMPLEXCONDITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) ComplexCondition */
  try {
/*@egen*/
  < K_AND > "("SimpleCondition()("," SimpleCondition())*")"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ }



void SimpleCondition():{/*@bgen(jjtree) SimpleCondition */
  ASTSimpleCondition jjtn000 = new ASTSimpleCondition(JJTSIMPLECONDITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) SimpleCondition */
  try {
/*@egen*/
  Expression()CompareOperator()Expression()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}

void CompareOperator():{/*@bgen(jjtree) CompareOperator */
  ASTCompareOperator jjtn000 = new ASTCompareOperator(JJTCOMPAREOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) CompareOperator */
  try {
/*@egen*/
  t = <COMPARE_OPERATOR>/*@bgen(jjtree)*/
                         {
                           jjtree.closeNodeScope(jjtn000, true);
                           jjtc000 = false;
                         }
/*@egen*/ {
    jjtn000.setOperator(t.image);
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Solution():{/*@bgen(jjtree) Solution */
  ASTSolution jjtn000 = new ASTSolution(JJTSOLUTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Solution */
  try {
/*@egen*/
  (LOOKAHEAD(FullSolution()) FullSolution() | /*LOOKAHEAD(SimpleSolution())*/ SimpleSolution()  | EmptySolution()/*@bgen(jjtree)*/
                                                                                                                  {
                                                                                                                    jjtree.closeNodeScope(jjtn000, true);
                                                                                                                    jjtc000 = false;
                                                                                                                  }
/*@egen*/ {jjtn000.setEmpty(true);} )/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}

void SimpleSolution():{/*@bgen(jjtree) SimpleSolution */
  ASTSimpleSolution jjtn000 = new ASTSimpleSolution(JJTSIMPLESOLUTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) SimpleSolution */
        try {
/*@egen*/
	"{[{" SimpleSolutionContent() "}]}"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void SimpleSolutionContent():{/*@bgen(jjtree) SimpleSolutionContent */
  ASTSimpleSolutionContent jjtn000 = new ASTSimpleSolutionContent(JJTSIMPLESOLUTIONCONTENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) SimpleSolutionContent */
  try {
/*@egen*/
// A solution can be a comparison, an identifiere, if
// it is valid for all x or nothing if it is valid for no x
  Expression()CompareOperator()Expression()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void FullSolution():{/*@bgen(jjtree) FullSolution */
  ASTFullSolution jjtn000 = new ASTFullSolution(JJTFULLSOLUTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) FullSolution */
        try {
/*@egen*/
	"{[{" Identifier() "}]}"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void EmptySolution():{/*@bgen(jjtree) EmptySolution */
  ASTEmptySolution jjtn000 = new ASTEmptySolution(JJTEMPTYSOLUTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) EmptySolution */
        try {
/*@egen*/
	"{}"/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Expression():{/*@bgen(jjtree) Expression */
  ASTExpression jjtn000 = new ASTExpression(JJTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  String tOp;
}
{/*@bgen(jjtree) Expression */
  try {
/*@egen*/
  LOOKAHEAD(SimpleToken()MathOperator())SimpleToken()tOp = MathOperator(){
    jjtn000.setOperator(tOp);
  }
  Expression()
  | SimpleToken()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void SimpleToken():{/*@bgen(jjtree) SimpleToken */
  ASTSimpleToken jjtn000 = new ASTSimpleToken(JJTSIMPLETOKEN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) SimpleToken */
  try {
/*@egen*/
  LOOKAHEAD(Number())Number()
  | String()
  /*| LOOKAHEAD(AggregateExpression())AggregateExpression()*/
  | LOOKAHEAD(FunctionExpression())FunctionExpression()
  | ("-" {jjtn000.setMinus(true);})? ("("Expression()")" | Identifier())/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ 
//TODO DISTINCE Expression
}

void FunctionExpression():{/*@bgen(jjtree) FunctionExpression */
  ASTFunctionExpression jjtn000 = new ASTFunctionExpression(JJTFUNCTIONEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) FunctionExpression */
  try {
/*@egen*//*@bgen(jjtree) FunctionName */
  {
    ASTFunctionName jjtn001 = new ASTFunctionName(JJTFUNCTIONNAME);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/
  Identifier()/*@bgen(jjtree)*/
  } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      throw (RuntimeException)jjte001;
    }
    if (jjte001 instanceof ParseException) {
      throw (ParseException)jjte001;
    }
    throw (Error)jjte001;
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
  }
/*@egen*/              "("Expression()")"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

String MathOperator()      :{}{
  "*"{
    return "*";
  }
  | "+"{
    return "+";
  }
  | "-"{
    return "-";
  }
  | "/"{
    return "/";
  }
  | "^"{
    return "^";
  }
}

void Number():{/*@bgen(jjtree) Number */
  ASTNumber jjtn000 = new ASTNumber(JJTNUMBER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token sign = null;
  Token t;
}
{/*@bgen(jjtree) Number */
  try {
/*@egen*/
  (sign = "-")?
  (t = <FLOAT>
  | t = <INTEGER>)/*@bgen(jjtree)*/
                  {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                  }
/*@egen*/{
    jjtn000.setValue(sign != null && sign.image != null ? sign.image + t.image : "" + t.image);
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void String():{/*@bgen(jjtree) String */
  ASTString jjtn000 = new ASTString(JJTSTRING);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) String */
  try {
/*@egen*/
  t = <CHAR_LITERAL>/*@bgen(jjtree)*/
                    {
                      jjtree.closeNodeScope(jjtn000, true);
                      jjtc000 = false;
                    }
/*@egen*/{
    jjtn000.setValue(t.image);
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Identifier():{/*@bgen(jjtree) Identifier */
  ASTIdentifier jjtn000 = new ASTIdentifier(JJTIDENTIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token sign = null;
  Token t;
}
{/*@bgen(jjtree) Identifier */
 try {
/*@egen*/
 (sign = "-")?
  t = <IDENTIFIER>/*@bgen(jjtree)*/
                  {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                  }
/*@egen*/{
    jjtn000.setName((sign != null && sign.image != null ? sign.image : "") + t.image);
  }/*@bgen(jjtree)*/
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/
}