#DEFINE FILE 'RecordedData.pcap'
///#DEFINE Demo 					/// For WinPP Demo, reduce to ten tuple
#DEFINE Timestamp ${NOW}		/// Change base line time stamp (ms) for the messages
#DEFINE Acceleration 1.0 		/// Acceleration for time stamps, 1 = real-time

#PARSER PQL
#ADDQUERY
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Read from Pcap file
Pcap_in = ACCESS({
              transport = 'pcapfile',
              protocol = '104client',
              wrapper = 'GENERICPUSH',
              source = 'Pcap',
              datahandler = 'tuple',
              options = [
                ['file', ${FILE}],
                ['104_ignoreHandshakes', 'true'],
                ['104_ignoreTimeouts', 'true'],
                ['104_sendResponses', 'false']
              ],
              schema = [
                ['DataUnitIdentifier', 'object'],
                ['InformationObjects', 'list']
              ]                                                                                                              
            }                                                                                          
          )
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// For WinPP Demo, reduce to ten tuple
#IFDEF Demo
input = CLOSESTREAM({
            count = 10                                                                     
          },
          Pcap_in
        )
#ELSE
input = Pcap_in
#ENDIF
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Adjust time tags and speed
manipulated104 ::= ADJUST104TIMETAGSTOBASELINE({
                      baseline = ${NOW},
                      acceleration = ${Acceleration},
                      informationobjects = 'InformationObjects',
                      delay = true,
                      name = 'Manipulate TimeTags'
                    },
                    input
                  )
                  
#PARSER PQL
#QNAME 104Provision
#RUNQUERY
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Workaround to have an active tcp server before starting the MV Recorder. 
/// This query provides no data but a started server (sender) with the correct schema.
timerinput = SELECT({
                predicate = 'false'                              
              },
              ACCESS({
                  source='Timer',
                  wrapper='GenericPush',
                  transport='Timer',
                  protocol='None',
                  datahandler='Tuple',
                  options=[['period', '360000'], ['timefromstart', 'true']],
                  schema=[
                    ['DataUnitIdentifier', 'object'],
                    ['InformationObjects', 'list']
                  ]                                                
                }                         
              )            
            )

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Provide 104 messages
TCP_OUT = SENDER({
              protocol = '104Server',
              transport = 'TCPSERVER',
              sink = 'MVRECORDER',
              wrapper = 'GENERICPULL',
              datahandler = 'TUPLE',
              options = [['PORT', '2404']],
              id = 'Sender'                                                                
            },
            timerinput
          )
            
#PARSER PQL
#QNAME 104MANIPULATION
#ADDQUERY
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Connect both queries
appendix = APPENDTO({APPENDTO = 'Sender'}, manipulated104)