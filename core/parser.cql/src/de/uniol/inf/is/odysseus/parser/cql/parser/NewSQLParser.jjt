options{  IGNORE_CASE = true;  MULTI = true;  VISITOR = true;  //  NODE_DEFAULT_VOID=true;  //  JJTREE_OUTPUT_DIRECTORY = "";  NODE_PACKAGE = "de.uniol.inf.is.odysseus.parser.cql.parser";  DEBUG_PARSER = false;  //DEBUG_TOKEN_MANAGER = false;  VISITOR_EXCEPTION = "de.uniol.inf.is.odysseus.core.server.planmanagement.QueryParseException";}PARSER_BEGIN(NewSQLParser)package de.uniol.inf.is.odysseus.parser.cql.parser;import java.util.ArrayList;import de.uniol.inf.is.odysseus.core.metadata.PointInTime;import de.uniol.inf.is.odysseus.intervalapproach.TimeInterval;import de.uniol.inf.is.odysseus.core.server.physicaloperator.aggregate.AggregateFunction;import de.uniol.inf.is.odysseus.core.server.logicaloperator.WindowType;@ SuppressWarnings("all") public class NewSQLParser{}PARSER_END(NewSQLParser)SKIP :{  " "| "\r"| "\n"| "\t"}TOKEN :{  < K_ALL : "ALL" >| < K_ADD : "ADD" >| < K_ADVANCE : "ADVANCE" >| < K_ALTER : "ALTER" >| < K_ALWAYS : "ALWAYS" >| < K_AND : "AND" >| < K_ANY : "ANY" >| < K_AS : "AS" >| < K_AT : "AT" >| < K_ATTACH : "ATTACH" >| < K_AUTO_RECONNECT : "AUTORECONNECT" >| < K_AVG : "AVG" >| < K_BROKER : "BROKER" >| < K_BY : "BY" >| < K_CHANNEL : "CHANNEL" >| < K_CONTEXT : "CONTEXT" >| < K_COMMENT : "COMMENT" >| < K_CONNECTION : "CONNECTION" >| < K_COUNT : "COUNT" >| < K_CREATE : "CREATE" >| < K_DATABASE : "DATABASE" >| < K_DAY : "DAY" ("S")? >| < K_DEFAULT : "DEFAULT" >| < K_DELETE : "DELETE" >| < K_DISTINCT : "DISTINCT" >| < K_DETACH : "DETACH" >| < K_DROP : "DROP" >| < K_EACH : "EACH" >| < K_EXISTS : "EXISTS" >| < K_FILE : "FILE" >| < K_FROM : "FROM" >| < K_GRANT : "GRANT" >| < K_GROUP : "GROUP" >| < K_HAVING : "HAVING" >| < K_HOUR : "HOUR" ("S")? >| < K_IDENTIFIED : "IDENTIFIED" >| < K_IF : "IF" >| < K_IN : "IN" >| < K_INFTY : "INFTY" >| < K_INSERT : "INSERT" >| < K_INTERSECTION : "INTERSECT" >| < K_INTO : "INTO" >| < K_IS : "IS" >| < K_JOIN : "JOIN" >| < K_KEY : "KEY" >| < K_LIKE : "LIKE" >| < K_LINEAR_STORE: "LINEAR_STORE" >| < K_LOGARITHMIC_STORE: "LOGARITHMIC_STORE" >| < K_LOGIN_REQUIRED : "LOGIN_REQUIRED" >| < K_MATRIX : "MATRIX" >| < K_MAX : "MAX" >| < K_METADATA : "METADATA" >| < K_METRIC : "METRIC" >| < K_MILLISECOND : "MILLISECOND" ("S")? >| < K_MIN : "MIN" >| < K_MINUS : "MINUS" >| < K_MINUTE : "MINUTE" ("S")? >| < K_MULTI  : "MULTI">| < K_MV : "MV" >| < K_NATURAL : "NATURAL" >| < K_NOT : "NOT" >| < K_NULL : "NULL" >| < K_OF : "OF" >| < K_OFFSET : "OFFSET" >| < K_ON : "ON" >| < K_OR : "OR" >| < K_OUTPUT : "OUTPUT" >| < K_PARTITION : "PARTITION" >| < K_PASSWORD : "PASSWORD" >| < K_PENALTY : "PENALTY" >| < K_PRIORITY : "PRIORITY" >| < K_PROB : "PROB" >| < K_QUEUE : "QUEUE" >| < K_RANGE : "RANGE" >| < K_RELATION : "RELATION" >| < K_RELATIVE : "RELATIVE" >| < K_REMOVE : "REMOVE" >| < K_REVOKE : "REVOKE" >| < K_ROLE : "ROLE" >| < K_ROWS : "ROWS" >| < K_SCOPE : "SCOPE" >| < K_SECOND : "SECOND" ("S")? >| < K_SELECT : "SELECT" >| < K_SERVICE_LEVEL : "SERVICELEVEL" >| < K_SET : "SET" >| < K_SILAB : "SILAB" >| < K_SINGLE  : "SINGLE">| < K_SINK : "SINK" >| < K_SIZE : "SIZE" >| < K_SLA : "SLA" >| < K_SLIDE : "SLIDE" >| < K_SOCKET : "SOCKET" >| < K_STORE : "STORE" >| < K_STREAM : "STREAM" >| < K_SUM : "SUM" >| < K_TABLE : "TABLE" >| < K_TIME : "TIME" >| < K_TIME_SENSITIV : "TIMESENSITIV" >| < K_TIMEOUT : "TIMEOUT" >| < K_TO : "TO" >| < K_TRUNCATE : "TRUNCATE" >| < K_TUPLE : "TUPLE" >| < K_TYPE : "TYPE" >| < K_UNBOUNDED : "UNBOUNDED" >| < K_UNION : "UNION" >| < K_USE : "USE" >| < K_USER : "USER" >| < K_VALID : "VALID" >| < K_VIEW : "VIEW" >| < K_WEEK : "WEEK" ("S")? >| < K_WHERE : "WHERE" >| < K_WITH : "WITH" >| < K_SENSOR : "SENSOR" >| < K_ATTRIBUTE : "ATTRIBUTE" >| < K_RECORD : "RECORD" >| < K_LIST : "LIST" >}TOKEN : /* spatial token */{  < S_DISTANCE : "SPATIAL_DISTANCE" >| < S_COMPARE :    "SPATIAL_INSIDE"  | "SPATIAL_INTERSECTS"  | "SPATIAL_MEETS"  | "SPATIAL_ON"  | "SPATIAL_OVERLAPS"  | "SPATIAL_IN"  | "SPATIAL_OUT" >| < S_POINT : "SPATIAL_POINT" >| < S_LINE : "SPATIAL_LINE" >| < S_POLYGON : "SPATIAL_POLYGON" >| < S_MULTI_POINT : "SPATIAL_MULTI_POINT" >| < S_MULTI_LINE : "SPATIAL_MULTI_LINE" >| < S_MULTI_POLYGON : "SPATIAL_MULTI_POLYGON" >| < SPATIAL : "SPATIAL" >}TOKEN : /* Numeric Constants */{  //  <NUMBER:<FLOAT>  //  | <FLOAT>(["e", "E"](["-", "+"])?<FLOAT>)?>  //  | <#FLOAT:<INTEGER>  //  | <INTEGER>("."<INTEGER>)?  //  | "."<INTEGER>>  < FLOAT :    ("-")?    (      < INTEGER > "." < INTEGER >    | "." < INTEGER >    ) >| < INTEGER : (< DIGIT >)+ >| < #DIGIT : [ "0"-"9" ] >| < IPADDRESS : < DIGIT > (< DIGIT >)? (< DIGIT >)? "." < DIGIT > (< DIGIT >)? (< DIGIT >)? "." < DIGIT > (< DIGIT >)? (< DIGIT >)? "." < DIGIT > (< DIGIT >)? (< DIGIT >)? >}SPECIAL_TOKEN :{  < LINE_COMMENT : "--" (~[ "\r", "\n" ])* >| < MULTI_LINE_COMMENT :    "/*" (~[ "*" ])* "*"    (      "*"    |      (        ~[ "*", "/" ] (~[ "*" ])* "*"      )    )*    "/" >}TOKEN :{  < JDBC_STRING :    "jdbc:"    (      (        < DIGIT >      | < LETTER >      | < SPECIAL_CHARS >      | "?"      | ";"      | "/"      | "="      )*    )* >| < IDENTIFIER :    (< LETTER >)+    (      < DIGIT >    | < LETTER >    | < SPECIAL_CHARS >    )* >| < #LETTER : [ "a"-"z", "A"-"Z" ] >| < #SPECIAL_CHARS :    ":"  | "_"  | "."  | "*" >| < CHAR_LITERAL :    "'" (~[ "'" ])* "'"    (      "'" (~[ "'" ])* "'"    )* >| < SQL_STRING :    "[[" (~[ "[", "]" ])* "]]"    (      "[[" (~[ "[", "]" ])* "]]"    )* >| < QUOTED_IDENTIFIER : "\"" (~[ "\n", "\r", "\"" ])* "\"" >| < COMPARE_OPERATOR :    "="  | "<>"  | ">"  | "<"  | "<="  | ">=" >| < REGEXP :    "/" ("^")?    (      < LETTER >    | < DIGIT >    | "\\"    | "+"    | "."    | "*"    | "?"    | "$"    )+    "/" >}ASTStatement Statement() :{}{  (    (      LOOKAHEAD(PriorizedStatement())      PriorizedStatement()    | LOOKAHEAD(2)      CreateStatement()    | LOOKAHEAD(2)      CreateSinkStatement()    | LOOKAHEAD(2)      CreateType()    | LOOKAHEAD(2)      DropStreamStatement()    | LOOKAHEAD(2)      DropViewStatement()    | LOOKAHEAD(2)      CreateViewStatement()    | LOOKAHEAD(2)      StreamToStatement()    | LOOKAHEAD(2)      CreateUserStatement()    | LOOKAHEAD(2)      CreateSLAStatement()    | LOOKAHEAD(2)      CreateRoleStatement()    | LOOKAHEAD(2)      DropRoleStatement()    | LOOKAHEAD(2)      CreateDatabaseConnection()    | LOOKAHEAD(2)      AlterUserStatement()    | LOOKAHEAD(2)      DropUserStatement()    | LOOKAHEAD(2)      CreateSensor()    | LOOKAHEAD(2)      CreateBroker()    | LOOKAHEAD(BrokerSelectInto())      BrokerSelectInto()    | LOOKAHEAD(2)      CreateContextStore()    | LOOKAHEAD(2)      DropContextStore()    | LOOKAHEAD(2)      GrantRoleStatement()          | LOOKAHEAD(2)      GrantStatement()          | RevokeStatement()    )    [ ";" ]  )+  < EOF >  {    return jjtThis;  }}void PriorizedStatement() :{}{  ComplexSelectStatement() [ Priority() ] [ Metric() ]}void StreamToStatement() :{}{  < K_STREAM > < K_TO > Identifier() SelectStatement()}void ComplexSelectStatement() :{}{  SelectStatement() [ SetOperator() ComplexSelectStatement() ]| "(" ComplexSelectStatement() ")"}void SelectStatement() :{}{  SelectClause() FromClause() [ WhereClause() ] [ GroupByClause() ] [ HavingClause() ] [ ElementPriorities() ]}void CreateType() :{}{  (    < K_CREATE >  | < K_ATTACH >  | < K_ADD >  )  < K_TYPE > Identifier() "(" AttributeDefinitions() ")"}void CreateContextStore():{}{  < K_CREATE >  < K_CONTEXT >  < K_STORE >  Identifier()  "(" AttributeDefinitions() ")"  < K_AS >  ContextStoreType()}void DropContextStore():{}{  < K_DROP >  < K_CONTEXT >  < K_STORE >  Identifier()  [ IfExists() ]}void  ContextStoreType():{  Token t;}{  ( t = < K_SINGLE > | t= < K_MULTI > < K_SIZE >Integer() )    {    jjtThis.jjtSetValue(t.image);  }}void CreateStatement() :{}{  (    < K_CREATE >  | < K_ATTACH >  | < K_ADD >  )  < K_STREAM > Identifier() "(" AttributeDefinitions() ")"  [    (      < K_FROM >    | < K_WITH >    )    "("    (      LOOKAHEAD(2)      TimedTuples()    | PriorizedStatement()    )    ")"  | CreateFromDatabase()  | Socket()  | Channel()  | FileSource()  | Silab()  ]  [ LoginPassword() ]}void LoginPassword() :{}{  Identifier() Identifier()}void CreateSinkStatement() :{}{  < K_CREATE > < K_SINK > Identifier() < K_AS >  (    SocketSink()  | DatabaseSink()  | FileSink()  )}void SocketSink() :{}{  < K_SOCKET > < K_AT > Integer() < K_AS > Identifier() [ < K_LOGIN_REQUIRED > ]}void DatabaseSink() :{}{  < K_DATABASE > Identifier() < K_TABLE > Identifier() [ < K_AND > DatabaseSinkOptions() ]}void DatabaseSinkOptions() :{  Token value;}{  value = < K_DROP >  {    jjtThis.jjtSetValue(value.image);  }| value = < K_TRUNCATE >  {    jjtThis.jjtSetValue(value.image);  }}void FileSink() :{  Token t;}{  < K_FILE > < K_TO > t = < CHAR_LITERAL > [ < K_AS > Identifier() [Identifier()] [Integer()] ]  {    jjtThis.setFilename(t.image.substring(1, t.image.length() - 1));  }}void CreateDatabaseConnection() :{}{  < K_CREATE > < K_DATABASE > < K_CONNECTION > Identifier() < K_AS > Identifier() < K_TO > Identifier() [ < K_AT > Host() ":" Integer() ] [ < K_WITH > < K_USER > Identifier() < K_PASSWORD > Identifier() ]}void CreateFromDatabase() :{}{  < K_DATABASE > Identifier() < K_TABLE > Identifier() [ < K_EACH > Time() ]}void DatabaseTimeSensitiv() :{}{  < K_TIME_SENSITIV >}void CreateViewStatement() :{}{  < K_CREATE > < K_VIEW > Identifier() < K_FROM > "(" PriorizedStatement() ")"}void CreateSensor() :{}{  < K_CREATE > < K_SENSOR > Identifier() "(" ORSchemaDefinition() "," Identifier() ")" < K_FROM > Channel()}void ORSchemaDefinition() :{}{  AttrDefinition()| RecordDefinition()| ListDefinition()}void RecordDefinition() :{}{  < K_RECORD > "(" Identifier() ","  (    RecordEntryDefinition()  )+  ")"}void RecordEntryDefinition() :{}{  AttrDefinition()| RecordDefinition()| ListDefinition()}void ListDefinition() :{}{  < K_LIST > "(" Identifier() ","  (    (      AttrDefinition()    )+  |    (      RecordDefinition()    )+  |    (      ListDefinition()    )+  )  ")"}void AttrDefinition() :{}{  < K_ATTRIBUTE > "(" Identifier() "," AttributeType() ")"}void AttributeDefinitions() :{}{  AttributeDefinition()  (    "," AttributeDefinition()  )*}void AttributeDefinition() :{}{  Identifier() AttributeType()}void TimedTuples() :{}{  TimedTuple()  (    "," TimedTuple()  )*}void TimedTuple() :{}{  "(" TimeInterval() "," SimpleTuple() ")"}void TimeInterval() :{  Token t;  Token t2 = null;}{  "[" t = < INTEGER >  [    ","    (      t2 = < INTEGER >    | "-"    )  ]  ")"  {    if (t2 == null)    {      jjtThis.setInterval(new TimeInterval(new PointInTime(Long.parseLong(t.image)), PointInTime.getInfinityTime()));    }    else    {      jjtThis.setInterval(new TimeInterval(new PointInTime(Long.parseLong(t.image)), new PointInTime(Long.parseLong(t2.image))));    }  }}void Socket() :{}{  < K_SOCKET >  [    (      < K_TUPLE >      {        jjtThis.setTupleMode();      }    | < K_MV >      {        jjtThis.setMVMode();      }    )  ]  Host() [ ":" ] Integer()}void Silab() :{}{  < K_SILAB >  [    (      < K_TUPLE >      {        jjtThis.setTupleMode();      }    | < K_MV >      {        jjtThis.setMVMode();      }    )  ]  Host() [ ":" ] Integer()}void Channel() :{}{  < K_CHANNEL > Host() [ ":" ] [ Integer() ] [ AutoReconnect() ]}void AutoReconnect() :{}{  < K_AUTO_RECONNECT >}void Host() :{  Token value;}{  value = < IPADDRESS >  {    jjtThis.setValue(value.image);  }| value = < IDENTIFIER >  {    jjtThis.setValue(value.image);  }}void FileSource() :{  Token t;}{  < K_FILE > t = < CHAR_LITERAL > [< K_AS > Identifier()]   {    jjtThis.setFilename(t.image.substring(1, t.image.length() - 1));  }}void SimpleTuple() :{}{  Value()  (    "," Value()  )*}void Value() #void :{}{  Number()| String()}void AttributeType() :{  ArrayList covList;  String format;  Token t = null;}{  /* This is for user defined types. */  t = < IDENTIFIER >  {    jjtThis.setType(t.image);  }}void MVCovarianceRow() :{}{  "(" Expression()  (    "," Expression()  )*  ")"}ArrayList CovarianceRow() :{  ArrayList covList = new ArrayList();  Token t;}{  (    t = < FLOAT >    {      covList.add(Double.parseDouble(t.image));    }  )+  {    return covList;  }}String DateFormat() :{  String ret;  Token t;}{  // permitted: <Year Expression> <Time Expression>  // or <Year Expression>  // or <Time Expression>  t = < IDENTIFIER >  {    ret = t.image;  }  // evtl. noch ein Identifier f�r die Zeit  (t = < IDENTIFIER >  {    ret += " " + t.image;  }  )?  {    return ret;  }}void SetOperator() :{  Token t;}{  (    t = < K_UNION >  | t = < K_INTERSECTION >  | t = < K_MINUS >  )  {    jjtThis.setOperation(ASTSetOperator.SetOperation.valueOf(t.image));  }}void SelectClause() :{}{  < K_SELECT >  (    SelectAll()  |    (      RenamedExpression()      (        "," RenamedExpression()      )*    )    (      (        MatrixExpression() #ProjectionMatrix)      (        MatrixExpression() #ProjectionVector)?    )?  )}void FromClause() :{}{  < K_FROM > Source()  (    "," Source()  )*}void WhereClause() :{}{  < K_WHERE > Predicate()}void GroupByClause() :{}{  < K_GROUP > < K_BY > Identifier()  (    "," Identifier()  )*}void HavingClause() :{}{  < K_HAVING > Predicate()}void SelectAll() :{}{  "*"}void RenamedExpression() :{}{  Expression() [ < K_AS > Identifier() #AS ]}void MatrixExpression():{  ArrayList rows = new ArrayList();  ArrayList curRow;}{  < K_MATRIX > "[" curRow = CovarianceRow()  {    rows.add(curRow);  }  (    ";" curRow = CovarianceRow()    {      rows.add(curRow);    }  )*  "]"  {    jjtThis.setMatrix(rows);  }}void Predicate() :{}{  LOOKAHEAD(OrPredicate())  OrPredicate()| LOOKAHEAD(AndPredicate())  AndPredicate()| NotPredicate()| SimplePredicate()}void SimplePredicate() :{}{  LOOKAHEAD("(" Predicate())  "(" Predicate() ")"| LOOKAHEAD(QuantificationPredicate())  QuantificationPredicate()| LOOKAHEAD(BasicPredicate())  BasicPredicate()| ProbabilityPredicate()}void BasicPredicate() :{}{  Expression() CompareOperator() Expression()}void ProbabilityPredicate() :{  ArrayList xLow = new ArrayList();  ArrayList xUp = new ArrayList();  Token intervalStart;  Token intervalEnd;  Token prob;  Token compOp;}{  /* Expression of the form PROB((H*source1+b) - (A*source1+c), [x,y],....,[v,w], prob)*/  < K_PROB > "("  (    (      "(" MatrixExpression() "*" Identifier() "+" MatrixExpression() ")"      (        "-"        {          jjtThis.setCovOperandType(ASTProbabilityPredicate.OperandTypes.MINUS);        }      | "+"        {          jjtThis.setCovOperandType(ASTProbabilityPredicate.OperandTypes.PLUS);        }      )      "(" MatrixExpression() "*" Identifier() "+" MatrixExpression() ")"      {        jjtThis.setJoinPredicate(true);      }    )  |    (      MatrixExpression() "*" Identifier() "+" MatrixExpression()    )    {      jjtThis.setJoinPredicate(false);    }  )  "," "["  (    intervalStart = < FLOAT >    {      xLow.add(Double.parseDouble(intervalStart.image));    }  | intervalStart = "-" < K_INFTY >    {      xLow.add(Double.MIN_VALUE);    }  )  ","  (    intervalEnd = < FLOAT >    {      xUp.add(Double.parseDouble(intervalEnd.image));    }  | intervalEnd = < K_INFTY >    {      xUp.add(Double.MAX_VALUE);    }  )  "]"  (    "," "["    (      intervalStart = < FLOAT >      {        xLow.add(Double.parseDouble(intervalStart.image));      }    | intervalStart = "-" < K_INFTY >      {        xLow.add(Double.MIN_VALUE);      }    )    ","    (      intervalEnd = < FLOAT >      {        xUp.add(Double.parseDouble(intervalEnd.image));      }    | intervalEnd = < K_INFTY >      {        xUp.add(Double.MAX_VALUE);      }    )    "]"  )*  ";" compOp = < COMPARE_OPERATOR > prob = < FLOAT > ")"  {    jjtThis.setXLow(xLow);    jjtThis.setXUp(xUp);    jjtThis.setProb(Double.parseDouble(prob.image));    jjtThis.setCompareOperator(compOp.image);  }}void Priority() :{  Token t;}{  < K_PRIORITY > t = < INTEGER >  {    jjtThis.setPriority(Integer.parseInt(t.image));  }}void OrPredicate() :{}{  SimplePredicate() < K_OR > Predicate()}void AndPredicate() :{}{  SimplePredicate() < K_AND > Predicate()}void NotPredicate() :{}{  < K_NOT > Predicate()}void QuantificationPredicate() :{}{  Exists()| LOOKAHEAD(AnyPredicate())  AnyPredicate()| LOOKAHEAD(AllPredicate())  AllPredicate()| InPredicate()}void AnyPredicate() :{}{  Tuple() CompareOperator() < K_ANY >  (    LOOKAHEAD(TupleSet())    TupleSet()  | "(" ComplexSelectStatement() ")"  )}void AllPredicate() :{}{  Tuple() CompareOperator() < K_ALL >  (    LOOKAHEAD(TupleSet())    TupleSet()  | "(" ComplexSelectStatement() ")"  )}void InPredicate() :{}{  Tuple() < K_IN >  (    LOOKAHEAD(TupleSet())    TupleSet()  | "(" ComplexSelectStatement() ")"  )}void Exists() :{}{  < K_EXISTS > "(" ComplexSelectStatement() ")"}void ElementPriorities() :{}{  < K_SET > < K_PRIORITY > ElementPriority()  (    LOOKAHEAD("," ElementPriority())    "," ElementPriority()  )*  [ "," DefaultPriority() ]}void ElementPriority() :{}{  Integer() < K_WHERE > Predicate()}void DefaultPriority() :{}{  Integer() < K_DEFAULT >}void Tuple() :{}{  Value()| Identifier()| "["  (    Value()  | Identifier()  )  (    ","    (      Value()    | Identifier()    )  )*  "]"}Long Time() :{  Long value;}{  value = Integer()  [    < K_MILLISECOND >  | < K_SECOND >    {      value *= 1000;    }  | < K_MINUTE >    {      value *= (60 * 1000);    }  | < K_HOUR >    {      value *= (60 * 60 * 1000);    }  | < K_DAY >    {      value *= (24 * 60 * 60 * 1000);    }  | < K_WEEK >    {      value *= (7 * 24 * 60 * 60 * 1000);    }  ]  {    jjtThis.jjtSetValue(value);    return value;  }}void TupleSet() :{}{  "(" Tuple()  (    "," Tuple()  )*  ")"}void QuantificationOperator() :{}{  < K_IN >| < K_ALL >}void Expression() :{  String tOp;}{  LOOKAHEAD(SimpleToken() MathOperator())  SimpleToken() tOp = MathOperator()  {    jjtThis.setOperator(tOp);  }  Expression()| SimpleToken()}void SimpleToken() :{}{  Number()| String()| LOOKAHEAD(AggregateExpression())  AggregateExpression()| LOOKAHEAD(FunctionExpression())  FunctionExpression()| "(" Expression() ")"|  (    "-"    {      jjtThis.setMinus(true);    }  )?  Identifier()  //TODO DISTINCE Expression}void FunctionExpression() :{}{  Identifier() #FunctionName "("  [    (LOOKAHEAD(Predicate())    Predicate()  | Expression())  (    ","    (      LOOKAHEAD(Predicate())      Predicate()    | Expression()    )  )*]")"}void AggregateExpression() :{}{  AggregateFunction() "(" Identifier() ")"}void AggregateFunction() :{  Token t;}{  (    t = < K_AVG >  | t = < K_COUNT >  | t = < K_MAX >  | t = < K_MIN >  | t = < K_SUM >  )  {    jjtn000.setFunction(new AggregateFunction(t.image.toUpperCase()));  }}String MathOperator() #void :{}{  "*"  {    return "*";  }| "+"  {    return "+";  }| "-"  {    return "-";  }| "/"  {    return "/";  }| "^"  {    return "^";  }}void DistinctExpression() :{}{  < K_DISTINCT > "(" Identifier() ")"}void Source() #void :{}{  LOOKAHEAD(SimpleSource())  SimpleSource()| LOOKAHEAD(Subselect())  Subselect()| LOOKAHEAD(BrokerSource())  BrokerSource()}void SimpleSource() :{}{  Identifier() [ Window() ] [ < K_AS > Identifier() #AS ]}void Subselect():{}{  "(" ComplexSelectStatement() ")" [ Window() ] < K_AS > Identifier() #AS}void Window() #void :{}{  "[" StreamSQLWindow() "]"}void StreamSQLWindow() :{  Long size;  Long advance;  Long value;}{  (    < K_SIZE > size = Time()    {      jjtThis.setType(WindowType.TIME);      jjtThis.setSize(size);    }    [      < K_ADVANCE > advance = Time()      {        jjtThis.setAdvance(advance);      }    ]    (      < K_TIME >    | < K_TUPLE >      {        jjtThis.setType(WindowType.TUPLE);      }    )    [      value = Slide()      {        jjtThis.setSlide(value);      }    ]    [ < K_PARTITION > < K_BY > Partition() ] [ < K_VALID > < K_ALWAYS > ]    /** [      < K_OFFSET > value = Integer()      {        jjtThis.setOffset(value);      }    ]    [      < K_TIMEOUT > value = Integer()      {        jjtThis.setOffset(value);      }    ]*/  )| < K_UNBOUNDED >  {    jjtThis.setUnbounded(true);    jjtThis.setType(WindowType.UNBOUNDED);  }}void Partition() :{}{  Identifier()  (    "," Identifier()  )*}Long Advance() :{  Long value;}{  < K_ADVANCE > value = Time()  {    return value;  }}Long Slide() :{  Long value;}{  < K_SLIDE > value = Time()  {    return value;  }}void Identifier() :{  Token t;}{  t = < IDENTIFIER >  {    jjtThis.setName(t.image);  }}Long Integer() :{  Token t;}{  t = < INTEGER >  {    jjtThis.setValue(t.image);    return jjtThis.getValue();  }}void Number() :{  Token t;}{  (    t = < FLOAT >  | t = < INTEGER >  )  {    jjtThis.setValue(t.image);  }}void String() :{  Token t;}{  t = < CHAR_LITERAL >  {    jjtThis.setValue(t.image);  }}void CompareOperator() :{  Token t;}{  t = < COMPARE_OPERATOR >  {    jjtThis.setOperator(t.image);  }}void SpatialCompareOperator() :{  Token t;}{  t = < S_COMPARE >  {    jjtThis.setOperator(t.image);  }}void CreateBroker() :{}{  < K_CREATE > < K_BROKER > Identifier()  (    "("    (      AttributeDefinitions()    | ORSchemaDefinition()    )    ")"    [      < K_QUEUE > "("      (        AttributeDefinitions()      | ORSchemaDefinition()      )      ")"    ]  )}void BrokerSource() :{}{  < K_BROKER >  (    BrokerAsSource()  | BrokerSimpleSource()  )  [ BrokerQueue() ]}void BrokerAsSource() :{}{  "(" ComplexSelectStatement() ")" < K_AS > Identifier()}void BrokerSelectInto() :{}{  SelectClause() < K_INTO > Identifier() FromClause() [ WhereClause() ] [ GroupByClause() ] [ HavingClause() ] [ ElementPriorities() ]}void BrokerSimpleSource() :{}{  Identifier()}void BrokerQueue() :{}{  < K_QUEUE > < K_BY > "(" ComplexSelectStatement() ")"}void Metric() :{}{  < K_METRIC > < K_ON > Identifier()}void CreateUserStatement() :{  Token t;}{  < K_CREATE > < K_USER > Identifier() < K_IDENTIFIED > < K_BY > t = < CHAR_LITERAL >  {    jjtThis.setPassword(t.image);  }}void AlterUserStatement() :{  Token t;}{  < K_ALTER > < K_USER > Identifier() < K_IDENTIFIED > < K_BY > t = < CHAR_LITERAL >  {    jjtThis.setPassword(t.image);  }}void DropUserStatement() :{  Token t;}{  (    < K_DROP >  | < K_REMOVE >  | < K_DELETE >  )  < K_USER > Identifier()  {}}void CreateSLAStatement() :{ }{  < K_CREATE > < K_SLA > Identifier() < K_WITH > SlaMetricDef() "," SlaScopeDef() "," SlaWindowDef() "," SlaServiceLevelDef()  (    "," SlaServiceLevelDef()  )*  {   }}void SlaMetricDef() :{}{  < K_METRIC > "(" Identifier() "," Number() "," Identifier() ")"}void SlaScopeDef() :{}{  < K_SCOPE > "(" Identifier() ")"}void SlaWindowDef() :{}{  < K_IN > "(" Number() "," Identifier() ")"}void SlaServiceLevelDef() :{}{  < K_SERVICE_LEVEL > "(" Number() "," SlaPenaltyDef() ")"}void SlaPenaltyDef() :{}{  < K_PENALTY > "(" Identifier() "," Number() ")"}void DropStreamStatement() :{}{  (    < K_DROP >  | < K_DETACH >  | < K_REMOVE >  )  < K_STREAM > Identifier()  [ IfExists() ]}void DropViewStatement() :{}{  < K_DROP > < K_VIEW > Identifier()}void CreateRoleStatement() :{}{  < K_CREATE > < K_ROLE > Identifier()}void IfExists():{}{  <K_IF > <K_EXISTS >}  void DropRoleStatement() :{}{  (    < K_DROP >  | < K_DELETE >  | < K_REMOVE >  )  < K_ROLE > Identifier()}void GrantRoleStatement() :{}{  < K_GRANT > < K_ROLE > IdentifierList() < K_TO > Identifier()}void RevokeRoleStatement() :{}{  < K_REVOKE > < K_ROLE > IdentifierList() < K_FROM > Identifier()}void GrantStatement() :{}{  < K_GRANT > IdentifierList()  (    < K_ON > IdentifierList()  )?  < K_TO > Identifier()}void IdentifierList() :{}{  Identifier()  (    "," Identifier()  )*}void RevokeStatement() :{}{  < K_REVOKE > IdentifierList()  (    < K_ON > IdentifierList()  )?  < K_FROM > Identifier()}