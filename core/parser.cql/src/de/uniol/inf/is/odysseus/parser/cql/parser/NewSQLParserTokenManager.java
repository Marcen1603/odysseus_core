/* Generated By:JJTree&JavaCC: Do not edit this line. NewSQLParserTokenManager.java */
package de.uniol.inf.is.odysseus.parser.cql.parser;
import java.util.ArrayList;
import de.uniol.inf.is.odysseus.metadata.PointInTime;
import de.uniol.inf.is.odysseus.intervalapproach.TimeInterval;
import de.uniol.inf.is.odysseus.physicaloperator.AggregateFunction;
import de.uniol.inf.is.odysseus.logicaloperator.WindowType;

/** Token Manager. */
public class NewSQLParserTokenManager implements NewSQLParserConstants
{

  /** Debug output. */
  public static  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public static  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private static final int jjStopStringLiteralDfa_0(int pos, long active0, long active1, long active2)
{
   switch (pos)
   {
      case 0:
         if ((active2 & 0x800000L) != 0L)
            return 23;
         if ((active0 & 0xf006ff3f01ffffe0L) != 0L || (active1 & 0x1c3fff8003ffffL) != 0L)
         {
            jjmatchedKind = 133;
            return 187;
         }
         if ((active0 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 133;
            return 34;
         }
         if ((active1 & 0x3fa200007ff40000L) != 0L)
         {
            jjmatchedKind = 133;
            return 88;
         }
         if ((active0 & 0xb78000000000000L) != 0L)
         {
            jjmatchedKind = 133;
            return 75;
         }
         if ((active1 & 0x1800000000000L) != 0L)
         {
            jjmatchedKind = 133;
            return 12;
         }
         if ((active2 & 0x40000L) != 0L)
            return 43;
         if ((active0 & 0xfa000000L) != 0L)
         {
            jjmatchedKind = 133;
            return 2;
         }
         if ((active2 & 0x80000L) != 0L)
            return 20;
         if ((active0 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 133;
            return 7;
         }
         return -1;
      case 1:
         if ((active0 & 0x8800fe0000047000L) != 0L || (active1 & 0x4001000000007L) != 0L)
            return 187;
         if ((active0 & 0x300000000000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 133;
               jjmatchedPos = 1;
            }
            return 74;
         }
         if ((active0 & 0x707f017ff9fb8fe0L) != 0L || (active1 & 0x19bfefff87fff8L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 133;
               jjmatchedPos = 1;
            }
            return 187;
         }
         if ((active1 & 0x3fa0000000000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 133;
               jjmatchedPos = 1;
            }
            return 100;
         }
         if ((active1 & 0x2000000700000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 133;
               jjmatchedPos = 1;
            }
            return 87;
         }
         if ((active0 & 0x2000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 133;
               jjmatchedPos = 1;
            }
            return 0;
         }
         return -1;
      case 2:
         if ((active0 & 0x2010000001010c60L) != 0L || (active1 & 0xc0044400000L) != 0L)
            return 187;
         if ((active0 & 0x506f797ffafac380L) != 0L || (active1 & 0x1fb3efbbb7fff9L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 133;
               jjmatchedPos = 2;
            }
            return 187;
         }
         if ((active1 & 0x3fa0000000000000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 133;
               jjmatchedPos = 2;
            }
            return 99;
         }
         if ((active0 & 0x300000000000000L) != 0L)
            return 79;
         return -1;
      case 3:
         if ((active0 & 0x106c39727afac380L) != 0L || (active1 & 0xe9361b8b4fdf1L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 133;
               jjmatchedPos = 3;
            }
            return 187;
         }
         if ((active0 & 0x4003400d80000000L) != 0L || (active1 & 0x11288e03030208L) != 0L)
            return 187;
         if ((active0 & 0x200000000000000L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 133;
               jjmatchedPos = 3;
            }
            return 78;
         }
         if ((active1 & 0x3fa0000000000000L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 133;
               jjmatchedPos = 3;
            }
            return 98;
         }
         return -1;
      case 4:
         if ((active1 & 0x3fa0000000000000L) != 0L)
         {
            jjmatchedKind = 133;
            jjmatchedPos = 4;
            return 97;
         }
         if ((active0 & 0x200083000400100L) != 0L || (active1 & 0x924088840c00L) != 0L)
            return 187;
         if ((active0 & 0x106c31427abac280L) != 0L || (active1 & 0xe012d3030f1f1L) != 0L)
         {
            jjmatchedKind = 133;
            jjmatchedPos = 4;
            return 187;
         }
         return -1;
      case 5:
         if ((active0 & 0x48104250824200L) != 0L || (active1 & 0xa00013010c011L) != 0L)
            return 187;
         if ((active0 & 0x102021002a388080L) != 0L || (active1 & 0x4012c002031e0L) != 0L)
         {
            jjmatchedKind = 133;
            jjmatchedPos = 5;
            return 187;
         }
         if ((active1 & 0x3fa0000000000000L) != 0L)
         {
            jjmatchedKind = 133;
            jjmatchedPos = 5;
            return 96;
         }
         if ((active0 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 133;
            jjmatchedPos = 5;
            return 37;
         }
         return -1;
      case 6:
         if ((active0 & 0x4000000000000L) != 0L)
         {
            if (jjmatchedPos != 6)
            {
               jjmatchedKind = 133;
               jjmatchedPos = 6;
            }
            return 37;
         }
         if ((active0 & 0x20210022208000L) != 0L || (active1 & 0x4012400203160L) != 0L)
         {
            if (jjmatchedPos != 6)
            {
               jjmatchedKind = 133;
               jjmatchedPos = 6;
            }
            return 187;
         }
         if ((active0 & 0x1000000008180080L) != 0L || (active1 & 0x800000080L) != 0L)
            return 187;
         if ((active1 & 0x3fa0000000000000L) != 0L)
            return 95;
         return -1;
      case 7:
         if ((active0 & 0x20000022000000L) != 0L || (active1 & 0x2000003140L) != 0L)
            return 187;
         if ((active0 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 133;
            jjmatchedPos = 7;
            return 37;
         }
         if ((active1 & 0x1fa0000000000000L) != 0L)
         {
            jjmatchedKind = 133;
            jjmatchedPos = 7;
            return 94;
         }
         if ((active0 & 0x210000208000L) != 0L || (active1 & 0x4010400200020L) != 0L)
         {
            jjmatchedKind = 133;
            jjmatchedPos = 7;
            return 187;
         }
         return -1;
      case 8:
         if ((active1 & 0x1c00000000000000L) != 0L)
         {
            jjmatchedKind = 133;
            jjmatchedPos = 8;
            return 121;
         }
         if ((active0 & 0x200000000000L) != 0L || (active1 & 0x4010000000020L) != 0L)
            return 187;
         if ((active0 & 0x10000208000L) != 0L || (active1 & 0x400200000L) != 0L)
         {
            jjmatchedKind = 133;
            jjmatchedPos = 8;
            return 187;
         }
         if ((active0 & 0x4000000000000L) != 0L || (active1 & 0x3a0000000000000L) != 0L)
         {
            jjmatchedKind = 133;
            jjmatchedPos = 8;
            return 37;
         }
         return -1;
      case 9:
         if ((active0 & 0x4000000000000L) != 0L || (active1 & 0x1fa0000000000000L) != 0L)
         {
            jjmatchedKind = 133;
            jjmatchedPos = 9;
            return 37;
         }
         if ((active0 & 0x8000L) != 0L || (active1 & 0x400200000L) != 0L)
         {
            jjmatchedKind = 133;
            jjmatchedPos = 9;
            return 187;
         }
         if ((active0 & 0x10000200000L) != 0L)
            return 187;
         return -1;
      case 10:
         if ((active0 & 0x8000L) != 0L || (active1 & 0x400200000L) != 0L)
         {
            jjmatchedKind = 133;
            jjmatchedPos = 10;
            return 187;
         }
         if ((active0 & 0x4000000000000L) != 0L || (active1 & 0x1fa0000000000000L) != 0L)
         {
            jjmatchedKind = 133;
            jjmatchedPos = 10;
            return 37;
         }
         return -1;
      case 11:
         if ((active1 & 0x400200000L) != 0L)
            return 187;
         if ((active1 & 0x100000000000000L) != 0L)
            return 37;
         if ((active0 & 0x4000000000000L) != 0L || (active1 & 0x1ea0000000000000L) != 0L)
         {
            jjmatchedKind = 133;
            jjmatchedPos = 11;
            return 37;
         }
         if ((active0 & 0x8000L) != 0L)
         {
            jjmatchedKind = 133;
            jjmatchedPos = 11;
            return 187;
         }
         return -1;
      case 12:
         if ((active0 & 0x4000000000000L) != 0L || (active1 & 0x1e20000000000000L) != 0L)
         {
            jjmatchedKind = 133;
            jjmatchedPos = 12;
            return 37;
         }
         if ((active0 & 0x8000L) != 0L)
            return 187;
         if ((active1 & 0x80000000000000L) != 0L)
            return 37;
         return -1;
      case 13:
         if ((active1 & 0x1e20000000000000L) != 0L)
         {
            jjmatchedKind = 133;
            jjmatchedPos = 13;
            return 37;
         }
         if ((active0 & 0x4000000000000L) != 0L)
            return 37;
         return -1;
      case 14:
         if ((active1 & 0x200000000000000L) != 0L)
            return 37;
         if ((active1 & 0x1c20000000000000L) != 0L)
         {
            jjmatchedKind = 133;
            jjmatchedPos = 14;
            return 37;
         }
         return -1;
      case 15:
         if ((active1 & 0x1c00000000000000L) != 0L)
         {
            jjmatchedKind = 133;
            jjmatchedPos = 15;
            return 37;
         }
         if ((active1 & 0x20000000000000L) != 0L)
            return 37;
         return -1;
      case 16:
         if ((active1 & 0x1c00000000000000L) != 0L)
         {
            jjmatchedKind = 133;
            jjmatchedPos = 16;
            return 37;
         }
         return -1;
      case 17:
         if ((active1 & 0x800000000000000L) != 0L)
            return 37;
         if ((active1 & 0x1400000000000000L) != 0L)
         {
            jjmatchedKind = 133;
            jjmatchedPos = 17;
            return 37;
         }
         return -1;
      case 18:
         if ((active1 & 0x1000000000000000L) != 0L)
         {
            jjmatchedKind = 133;
            jjmatchedPos = 18;
            return 37;
         }
         if ((active1 & 0x400000000000000L) != 0L)
            return 37;
         return -1;
      case 19:
         if ((active1 & 0x1000000000000000L) != 0L)
         {
            jjmatchedKind = 133;
            jjmatchedPos = 19;
            return 37;
         }
         return -1;
      default :
         return -1;
   }
}
private static final int jjStartNfa_0(int pos, long active0, long active1, long active2)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1, active2), pos + 1);
}
static private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
static private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 40:
         return jjStopAtPos(0, 142);
      case 41:
         return jjStopAtPos(0, 143);
      case 42:
         return jjStopAtPos(0, 148);
      case 43:
         return jjStopAtPos(0, 150);
      case 44:
         return jjStopAtPos(0, 145);
      case 45:
         return jjStartNfaWithStates_0(0, 147, 20);
      case 47:
         return jjStartNfaWithStates_0(0, 151, 23);
      case 58:
         return jjStopAtPos(0, 144);
      case 59:
         return jjStopAtPos(0, 141);
      case 91:
         return jjStartNfaWithStates_0(0, 146, 43);
      case 93:
         return jjStopAtPos(0, 149);
      case 94:
         return jjStopAtPos(0, 152);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa1_0(0x1ffe0L, 0x4000000000000L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa1_0(0x60000L, 0x0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa1_0(0x1f80000L, 0x0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa1_0(0xfa000000L, 0x0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa1_0(0x300000000L, 0x0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa1_0(0xc00000000L, 0x0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa1_0(0x3000000000L, 0x0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa1_0(0x4000000000L, 0x0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa1_0(0xff0000000000L, 0x0L);
      case 74:
      case 106:
         return jjMoveStringLiteralDfa1_0(0x1000000000000L, 0x0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa1_0(0x6000000000000L, 0x10000000000000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa1_0(0xb78000000000000L, 0x0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa1_0(0x7000000000000000L, 0x0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa1_0(0x8000000000000000L, 0x1fL);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x3e0L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x400L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x800000003f800L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x3fa200007ff40000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xff80000000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xf0000000000L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x300000000000L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1800000000000L);
      default :
         return jjMoveNfa_0(3, 0);
   }
}
static private int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1, 0L);
      return 1;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x1018004102000000L, active1, 0x100080000860L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x40000L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000000c0L, active1, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x60000058000000L, active1, 0xa00010070f080L);
      case 70:
      case 102:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 41, 187);
         else if ((active0 & 0x8000000000000000L) != 0L)
         {
            jjmatchedKind = 63;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x1L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000L, active1, 0x800000000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x302000420000000L, active1, 0x11200e03800000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x320L, active1, 0xc000000L);
      case 78:
      case 110:
         if ((active0 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 42;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(1, 65, 187);
         return jjMoveStringLiteralDfa2_0(active0, 0x780000000c00L, active1, 0x30000000000L);
      case 79:
      case 111:
         if ((active1 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 100, 187);
         return jjMoveStringLiteralDfa2_0(active0, 0x2005000000700000L, active1, 0x10030000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x3fa0000000000000L);
      case 82:
      case 114:
         if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(1, 66, 187);
         return jjMoveStringLiteralDfa2_0(active0, 0x3880820000L, active1, 0x2000000300L);
      case 83:
      case 115:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(1, 12, 187);
         else if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 47, 187);
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000L, active1, 0xc0000000008L);
      case 84:
      case 116:
         if ((active0 & 0x2000L) != 0L)
         {
            jjmatchedKind = 13;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x4000L, active1, 0x4000020000000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000000008000L, active1, 0x4040000410L);
      case 86:
      case 118:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 59, 187);
         return jjMoveStringLiteralDfa2_0(active0, 0x10000L, active1, 0L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000000L, active1, 0L);
      case 89:
      case 121:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(1, 18, 187);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x8000000000L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1, 0L);
}
static private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1, 0L);
      return 2;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         if ((active1 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(2, 90, 187);
         return jjMoveStringLiteralDfa3_0(active0, 0x1000080000L, active1, 0x3fa0000000000000L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x10080000000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000L, active1, 0x8000010000000L);
      case 68:
      case 100:
         if ((active0 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(2, 6, 187);
         else if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(2, 10, 187);
         break;
      case 69:
      case 101:
         if ((active1 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 106;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x10000800000L, active1, 0xa80000000400L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x80008000000L, active1, 0x1L);
      case 71:
      case 103:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(2, 16, 187);
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000000000L, active1, 0x8L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000200000000L, active1, 0x20008000100L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000000000L, active1, 0L);
      case 76:
      case 108:
         if ((active0 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(2, 5, 187);
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000410000000L, active1, 0x100000913000L);
      case 77:
      case 109:
         if ((active1 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(2, 94, 187);
         return jjMoveStringLiteralDfa3_0(active0, 0x100000L, active1, 0xe00004000L);
      case 78:
      case 110:
         if ((active0 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 56;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000200000L, active1, 0x2000101000880L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x2880020000L, active1, 0x40200L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0xc000000000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x20200020L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x100020000000L, active1, 0x10000000000040L);
      case 84:
      case 116:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 61, 187);
         else if ((active1 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(2, 86, 187);
         return jjMoveStringLiteralDfa3_0(active0, 0x106860004200c100L, active1, 0x5000000000010L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000L, active1, 0x2000000000L);
      case 86:
      case 118:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(2, 24, 187);
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000080L, active1, 0x8000L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa3_0(active0, 0x200L, active1, 0x20000L);
      case 88:
      case 120:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 52, 187);
         break;
      case 89:
      case 121:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(2, 11, 187);
         break;
      case 90:
      case 122:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x2000000L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1, 0L);
}
static private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000004a804280L, active1, 0x100803080L);
      case 66:
      case 98:
         if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(3, 73, 187);
         break;
      case 68:
      case 100:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x8000000L);
      case 69:
      case 101:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(3, 34, 187);
         else if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 49, 187);
         else if ((active1 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(3, 80, 187);
         else if ((active1 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(3, 89, 187);
         else if ((active1 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 97;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 103, 187);
         return jjMoveStringLiteralDfa4_0(active0, 0x300010000100L, active1, 0xc20100000L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x800L);
      case 72:
      case 104:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(3, 32, 187);
         else if ((active1 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 112, 187);
         break;
      case 73:
      case 105:
         if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(3, 67, 187);
         return jjMoveStringLiteralDfa4_0(active0, 0x4004000000000L, active1, 0x100000000000L);
      case 75:
      case 107:
         if ((active1 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(3, 88, 187);
         return jjMoveStringLiteralDfa4_0(active0, 0x20000L, active1, 0x10000000L);
      case 76:
      case 108:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 62, 187);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x4080000000L);
      case 77:
      case 109:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(3, 35, 187);
         return jjMoveStringLiteralDfa4_0(active0, 0x100000L, active1, 0L);
      case 78:
      case 110:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 48, 187);
         return jjMoveStringLiteralDfa4_0(active0, 0x11000680000L, active1, 0x2000000000L);
      case 79:
      case 111:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 46, 187);
         return jjMoveStringLiteralDfa4_0(active0, 0x8000L, active1, 0x803000000c100L);
      case 80:
      case 112:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(3, 31, 187);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x40010L);
      case 82:
      case 114:
         if ((active1 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 107, 187);
         return jjMoveStringLiteralDfa4_0(active0, 0x48000000000000L, active1, 0x4800000000000L);
      case 83:
      case 115:
         if ((active1 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(3, 81, 187);
         return jjMoveStringLiteralDfa4_0(active0, 0x200000000L, active1, 0x2000000000041L);
      case 84:
      case 116:
         if ((active1 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 116, 187);
         return jjMoveStringLiteralDfa4_0(active0, 0x80020000000L, active1, 0x3fa0000000000020L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x1200002000000000L, active1, 0x400L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x200000L);
      case 87:
      case 119:
         if ((active1 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 109, 187);
         break;
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1, 0L);
}
static private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x20000000L);
      case 66:
      case 98:
         if ((active1 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(4, 87, 187);
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000L, active1, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x40004000L, active1, 0x2000100000L);
      case 68:
      case 100:
         if ((active1 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 108, 187);
         return jjMoveStringLiteralDfa5_0(active0, 0x20000000000000L, active1, 0L);
      case 69:
      case 101:
         if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(4, 74, 187);
         else if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(4, 75, 187);
         else if ((active1 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(4, 82, 187);
         else if ((active1 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(4, 91, 187);
         else if ((active1 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(4, 95, 187);
         else if ((active1 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 102, 187);
         else if ((active1 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 111, 187);
         return jjMoveStringLiteralDfa5_0(active0, 0x320000L, active1, 0x10000001L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x48000020000000L, active1, 0x3fa4000000200020L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x8000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x80L);
      case 78:
      case 110:
         if ((active1 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 105, 187);
         return jjMoveStringLiteralDfa5_0(active0, 0x4004000080080L, active1, 0x100000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x2000800000000L);
      case 80:
      case 112:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 37, 187);
         break;
      case 82:
      case 114:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(4, 8, 187);
         return jjMoveStringLiteralDfa5_0(active0, 0x1000300000008000L, active1, 0x8000000000100L);
      case 83:
      case 115:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 57, 187);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x400000000L);
      case 84:
      case 116:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(4, 22, 187);
         else if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 36, 187);
         return jjMoveStringLiteralDfa5_0(active0, 0x10210800000L, active1, 0x3000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000L, active1, 0x10000000010L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x4000L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x40L);
      case 89:
      case 121:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 43, 187);
         return jjMoveStringLiteralDfa5_0(active0, 0x200L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1, 0L);
}
static private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(3, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000000000L, active1, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x1020000002000000L, active1, 0x3fa0002000000000L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x4000000000000L);
      case 67:
      case 99:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 54, 187);
         return jjMoveStringLiteralDfa6_0(active0, 0x200080L, active1, 0x200000L);
      case 68:
      case 100:
         if ((active1 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 115, 187);
         break;
      case 69:
      case 101:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(5, 23, 187);
         else if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(5, 28, 187);
         else if ((active1 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(5, 78, 187);
         else if ((active1 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(5, 79, 187);
         return jjMoveStringLiteralDfa6_0(active0, 0x88000L, active1, 0x400000000L);
      case 71:
      case 103:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 38, 187);
         break;
      case 72:
      case 104:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(5, 14, 187);
         else if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(5, 30, 187);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x10000000000L, active1, 0x3100L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000L, active1, 0L);
      case 77:
      case 109:
         if ((active1 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(5, 93, 187);
         break;
      case 78:
      case 110:
         return jjMoveStringLiteralDfa6_0(active0, 0x20100000L, active1, 0x10000000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x40L);
      case 82:
      case 114:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(5, 17, 187);
         else if ((active1 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 113, 187);
         break;
      case 83:
      case 115:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(5, 9, 187);
         else if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(5, 33, 187);
         return jjMoveStringLiteralDfa6_0(active0, 0x200000000000L, active1, 0L);
      case 84:
      case 116:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 44, 187);
         else if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(5, 64, 187);
         else if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(5, 68, 187);
         else if ((active1 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(5, 84, 187);
         else if ((active1 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(5, 92, 187);
         else if ((active1 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(5, 96, 187);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0xa0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x800000000L);
      case 88:
      case 120:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 51, 187);
         break;
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1, 0L);
}
static private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(4, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 67:
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x20008000L, active1, 0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x10000000000L);
      case 69:
      case 101:
         if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(6, 7, 187);
         return jjMoveStringLiteralDfa7_0(active0, 0x200000000000L, active1, 0x200000L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa7_0(active0, 0x10000000000L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x20L);
      case 76:
      case 108:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(6, 19, 187);
         else if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 60, 187);
         else if ((active1 & 0x2000000000000000L) != 0L)
         {
            jjmatchedKind = 125;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x1fa0000000000000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x400000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x1000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000000000000L, active1, 0x40L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000L, active1, 0L);
      case 84:
      case 116:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(6, 20, 187);
         else if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(6, 27, 187);
         else if ((active1 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(6, 99, 187);
         return jjMoveStringLiteralDfa7_0(active0, 0x20000000200000L, active1, 0x2000000100L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x4000000000000L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x2000L);
      case 89:
      case 121:
         if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(6, 71, 187);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1, 0L);
}
static private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(5, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x1fa0000000000000L);
      case 65:
      case 97:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 53, 187);
         break;
      case 67:
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x200000000000L, active1, 0L);
      case 68:
      case 100:
         if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(7, 70, 187);
         break;
      case 69:
      case 101:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(7, 25, 187);
         else if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(7, 77, 187);
         else if ((active1 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 101, 187);
         return jjMoveStringLiteralDfa8_0(active0, 0x4000000000000L, active1, 0x10000000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0x10000200000L, active1, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x200000L);
      case 78:
      case 110:
         if ((active1 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(7, 76, 187);
         break;
      case 79:
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0x8000L, active1, 0x20L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x400000000L);
      case 84:
      case 116:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(7, 29, 187);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x4000000000000L);
      case 89:
      case 121:
         if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(7, 72, 187);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1, 0L);
}
static private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(6, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 68:
      case 100:
         if ((active1 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 104, 187);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x20000000000000L);
      case 69:
      case 101:
         if ((active1 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 114, 187);
         return jjMoveStringLiteralDfa9_0(active0, 0x10000000000L, active1, 0x200000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x400000000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x100000000000000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x1c00000000000000L);
      case 78:
      case 110:
         if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(8, 69, 187);
         return jjMoveStringLiteralDfa9_0(active0, 0x8000L, active1, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0x200000L, active1, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x280000000000000L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa9_0(active0, 0x4000000000000L, active1, 0L);
      case 84:
      case 116:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 45, 187);
         break;
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1, 0L);
}
static private int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(7, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, active1, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 68:
      case 100:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 40, 187);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x120000000000000L);
      case 78:
      case 110:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(9, 21, 187);
         return jjMoveStringLiteralDfa10_0(active0, 0x8000L, active1, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x280000000000000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x400000000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa10_0(active0, 0x4000000000000L, active1, 0x1c00000000000000L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x200000L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, active1, 0L);
}
static private int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(8, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, active1, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         return jjMoveStringLiteralDfa11_0(active0, 0x8000L, active1, 0x200000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa11_0(active0, 0x4000000000000L, active1, 0x80000400000000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x1e00000000000000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x100000000000000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x20000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, active1, 0L);
}
static private int jjMoveStringLiteralDfa11_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(9, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, active1, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 67:
      case 99:
         return jjMoveStringLiteralDfa12_0(active0, 0x8000L, active1, 0L);
      case 69:
      case 101:
         if ((active1 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 120, 37);
         break;
      case 76:
      case 108:
         if ((active1 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(11, 85, 187);
         break;
      case 78:
      case 110:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x80000000000000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa12_0(active0, 0x4000000000000L, active1, 0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x1c20000000000000L);
      case 86:
      case 118:
         if ((active1 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(11, 98, 187);
         break;
      case 89:
      case 121:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x200000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0, active1, 0L);
}
static private int jjMoveStringLiteralDfa12_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(10, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, active1, 0L);
      return 12;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x20000000000000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa13_0(active0, 0x4000000000000L, active1, 0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x200000000000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x1c00000000000000L);
      case 84:
      case 116:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(12, 15, 187);
         else if ((active1 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(12, 119, 37);
         break;
      default :
         break;
   }
   return jjStartNfa_0(11, active0, active1, 0L);
}
static private int jjMoveStringLiteralDfa13_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(11, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0, active1, 0L);
      return 13;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x1c00000000000000L);
      case 68:
      case 100:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(13, 50, 37);
         break;
      case 78:
      case 110:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x20000000000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x200000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(12, active0, active1, 0L);
}
static private int jjMoveStringLiteralDfa14_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(12, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, 0L, active1, 0L);
      return 14;
   }
   switch(curChar)
   {
      case 67:
      case 99:
         return jjMoveStringLiteralDfa15_0(active1, 0x20000000000000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa15_0(active1, 0x800000000000000L);
      case 78:
      case 110:
         if ((active1 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(14, 121, 37);
         break;
      case 80:
      case 112:
         return jjMoveStringLiteralDfa15_0(active1, 0x1400000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(13, 0L, active1, 0L);
}
static private int jjMoveStringLiteralDfa15_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(13, 0L, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, 0L, active1, 0L);
      return 15;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         if ((active1 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(15, 117, 37);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa16_0(active1, 0x800000000000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa16_0(active1, 0x1400000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(14, 0L, active1, 0L);
}
static private int jjMoveStringLiteralDfa16_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(14, 0L, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, 0L, active1, 0L);
      return 16;
   }
   switch(curChar)
   {
      case 73:
      case 105:
         return jjMoveStringLiteralDfa17_0(active1, 0x400000000000000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa17_0(active1, 0x1000000000000000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa17_0(active1, 0x800000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(15, 0L, active1, 0L);
}
static private int jjMoveStringLiteralDfa17_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(15, 0L, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, 0L, active1, 0L);
      return 17;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         if ((active1 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(17, 123, 37);
         break;
      case 78:
      case 110:
         return jjMoveStringLiteralDfa18_0(active1, 0x400000000000000L);
      case 89:
      case 121:
         return jjMoveStringLiteralDfa18_0(active1, 0x1000000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(16, 0L, active1, 0L);
}
static private int jjMoveStringLiteralDfa18_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(16, 0L, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(17, 0L, active1, 0L);
      return 18;
   }
   switch(curChar)
   {
      case 71:
      case 103:
         return jjMoveStringLiteralDfa19_0(active1, 0x1000000000000000L);
      case 84:
      case 116:
         if ((active1 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(18, 122, 37);
         break;
      default :
         break;
   }
   return jjStartNfa_0(17, 0L, active1, 0L);
}
static private int jjMoveStringLiteralDfa19_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(17, 0L, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(18, 0L, active1, 0L);
      return 19;
   }
   switch(curChar)
   {
      case 79:
      case 111:
         return jjMoveStringLiteralDfa20_0(active1, 0x1000000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(18, 0L, active1, 0L);
}
static private int jjMoveStringLiteralDfa20_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(18, 0L, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(19, 0L, active1, 0L);
      return 20;
   }
   switch(curChar)
   {
      case 78:
      case 110:
         if ((active1 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(20, 124, 37);
         break;
      default :
         break;
   }
   return jjStartNfa_0(19, 0L, active1, 0L);
}
static private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 187;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 97:
               case 37:
                  if ((0x7ff440000000000L & l) == 0L)
                     break;
                  if (kind > 133)
                     kind = 133;
                  jjCheckNAdd(37);
                  break;
               case 2:
                  if ((0x7ff440000000000L & l) == 0L)
                     break;
                  if (kind > 133)
                     kind = 133;
                  jjCheckNAdd(37);
                  break;
               case 96:
                  if ((0x7ff440000000000L & l) == 0L)
                     break;
                  if (kind > 133)
                     kind = 133;
                  jjCheckNAdd(37);
                  break;
               case 99:
                  if ((0x7ff440000000000L & l) == 0L)
                     break;
                  if (kind > 133)
                     kind = 133;
                  jjCheckNAdd(37);
                  break;
               case 187:
                  if ((0x7ff440000000000L & l) == 0L)
                     break;
                  if (kind > 133)
                     kind = 133;
                  jjCheckNAdd(37);
                  break;
               case 3:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 127)
                        kind = 127;
                     jjCheckNAddStates(0, 4);
                  }
                  else if ((0x7000000000000000L & l) != 0L)
                  {
                     if (kind > 139)
                        kind = 139;
                  }
                  else if (curChar == 47)
                     jjCheckNAddTwoStates(59, 60);
                  else if (curChar == 34)
                     jjCheckNAddTwoStates(53, 54);
                  else if (curChar == 39)
                     jjCheckNAddTwoStates(39, 40);
                  else if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 20;
                  else if (curChar == 46)
                     jjCheckNAdd(19);
                  if (curChar == 60)
                     jjCheckNAddTwoStates(63, 56);
                  else if (curChar == 62)
                     jjCheckNAdd(56);
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 23;
                  else if (curChar == 45)
                     jjCheckNAddTwoStates(15, 18);
                  break;
               case 94:
                  if ((0x7ff440000000000L & l) == 0L)
                     break;
                  if (kind > 133)
                     kind = 133;
                  jjCheckNAdd(37);
                  break;
               case 75:
                  if ((0x7ff440000000000L & l) == 0L)
                     break;
                  if (kind > 133)
                     kind = 133;
                  jjCheckNAdd(37);
                  break;
               case 79:
                  if ((0x7ff440000000000L & l) == 0L)
                     break;
                  if (kind > 133)
                     kind = 133;
                  jjCheckNAdd(37);
                  break;
               case 34:
                  if ((0x7ff440000000000L & l) == 0L)
                     break;
                  if (kind > 133)
                     kind = 133;
                  jjCheckNAdd(37);
                  break;
               case 87:
                  if ((0x7ff440000000000L & l) == 0L)
                     break;
                  if (kind > 133)
                     kind = 133;
                  jjCheckNAdd(37);
                  break;
               case 12:
                  if ((0x7ff440000000000L & l) == 0L)
                     break;
                  if (kind > 133)
                     kind = 133;
                  jjCheckNAdd(37);
                  break;
               case 7:
                  if ((0x7ff440000000000L & l) == 0L)
                     break;
                  if (kind > 133)
                     kind = 133;
                  jjCheckNAdd(37);
                  break;
               case 23:
                  if ((0x83ff4c1000000000L & l) != 0L)
                     jjCheckNAddTwoStates(60, 61);
                  if (curChar == 42)
                     jjCheckNAddTwoStates(24, 25);
                  break;
               case 78:
                  if ((0x7ff440000000000L & l) == 0L)
                     break;
                  if (kind > 133)
                     kind = 133;
                  jjCheckNAdd(37);
                  break;
               case 95:
                  if ((0x7ff440000000000L & l) == 0L)
                     break;
                  if (kind > 133)
                     kind = 133;
                  jjCheckNAdd(37);
                  break;
               case 121:
                  if ((0x7ff440000000000L & l) == 0L)
                     break;
                  if (kind > 133)
                     kind = 133;
                  jjCheckNAdd(37);
                  break;
               case 98:
                  if ((0x7ff440000000000L & l) == 0L)
                     break;
                  if (kind > 133)
                     kind = 133;
                  jjCheckNAdd(37);
                  break;
               case 88:
                  if ((0x7ff440000000000L & l) == 0L)
                     break;
                  if (kind > 133)
                     kind = 133;
                  jjCheckNAdd(37);
                  break;
               case 100:
                  if ((0x7ff440000000000L & l) == 0L)
                     break;
                  if (kind > 133)
                     kind = 133;
                  jjCheckNAdd(37);
                  break;
               case 20:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(15, 16);
                  else if (curChar == 45)
                  {
                     if (kind > 130)
                        kind = 130;
                     jjCheckNAdd(21);
                  }
                  else if (curChar == 46)
                     jjCheckNAdd(19);
                  break;
               case 0:
                  if ((0x7ff440000000000L & l) == 0L)
                     break;
                  if (kind > 133)
                     kind = 133;
                  jjCheckNAdd(37);
                  break;
               case 74:
                  if ((0x7ff440000000000L & l) == 0L)
                     break;
                  if (kind > 133)
                     kind = 133;
                  jjCheckNAdd(37);
                  break;
               case 14:
                  if (curChar == 45)
                     jjCheckNAddTwoStates(15, 18);
                  break;
               case 15:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(15, 16);
                  break;
               case 16:
                  if (curChar == 46)
                     jjCheckNAdd(17);
                  break;
               case 17:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 126)
                     kind = 126;
                  jjCheckNAdd(17);
                  break;
               case 18:
                  if (curChar == 46)
                     jjCheckNAdd(19);
                  break;
               case 19:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 126)
                     kind = 126;
                  jjCheckNAdd(19);
                  break;
               case 21:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 130)
                     kind = 130;
                  jjCheckNAdd(21);
                  break;
               case 22:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 24:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(24, 25);
                  break;
               case 25:
                  if (curChar == 42)
                     jjCheckNAddStates(5, 7);
                  break;
               case 26:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(27, 25);
                  break;
               case 27:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(27, 25);
                  break;
               case 28:
                  if (curChar == 47 && kind > 131)
                     kind = 131;
                  break;
               case 29:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 30:
                  if (curChar != 58)
                     break;
                  if (kind > 132)
                     kind = 132;
                  jjCheckNAdd(31);
                  break;
               case 31:
                  if ((0xafffc40000000000L & l) == 0L)
                     break;
                  if (kind > 132)
                     kind = 132;
                  jjCheckNAdd(31);
                  break;
               case 38:
                  if (curChar == 39)
                     jjCheckNAddTwoStates(39, 40);
                  break;
               case 39:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(39, 40);
                  break;
               case 40:
                  if (curChar != 39)
                     break;
                  if (kind > 136)
                     kind = 136;
                  jjstateSet[jjnewStateCnt++] = 41;
                  break;
               case 41:
                  if (curChar == 39)
                     jjCheckNAddTwoStates(42, 40);
                  break;
               case 42:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(42, 40);
                  break;
               case 44:
                  jjAddStates(8, 9);
                  break;
               case 47:
                  jjAddStates(10, 11);
                  break;
               case 52:
                  if (curChar == 34)
                     jjCheckNAddTwoStates(53, 54);
                  break;
               case 53:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddTwoStates(53, 54);
                  break;
               case 54:
                  if (curChar == 34 && kind > 138)
                     kind = 138;
                  break;
               case 55:
                  if ((0x7000000000000000L & l) != 0L && kind > 139)
                     kind = 139;
                  break;
               case 56:
                  if (curChar == 61 && kind > 139)
                     kind = 139;
                  break;
               case 57:
                  if (curChar == 62)
                     jjCheckNAdd(56);
                  break;
               case 58:
                  if (curChar == 47)
                     jjCheckNAddTwoStates(59, 60);
                  break;
               case 60:
                  if ((0x83ff4c1000000000L & l) != 0L)
                     jjCheckNAddTwoStates(60, 61);
                  break;
               case 61:
                  if (curChar == 47 && kind > 140)
                     kind = 140;
                  break;
               case 62:
                  if (curChar == 60)
                     jjCheckNAddTwoStates(63, 56);
                  break;
               case 63:
                  if (curChar == 62 && kind > 139)
                     kind = 139;
                  break;
               case 171:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 127)
                     kind = 127;
                  jjCheckNAddStates(0, 4);
                  break;
               case 172:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 127)
                     kind = 127;
                  jjCheckNAdd(172);
                  break;
               case 173:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 174;
                  break;
               case 174:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(175, 183);
                  break;
               case 175:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 176;
                  break;
               case 176:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(177, 181);
                  break;
               case 177:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 178;
                  break;
               case 178:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 129)
                     kind = 129;
                  jjstateSet[jjnewStateCnt++] = 179;
                  break;
               case 179:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 129)
                     kind = 129;
                  jjstateSet[jjnewStateCnt++] = 180;
                  break;
               case 180:
                  if ((0x3ff000000000000L & l) != 0L && kind > 129)
                     kind = 129;
                  break;
               case 181:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(182, 177);
                  break;
               case 182:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAdd(177);
                  break;
               case 183:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(184, 175);
                  break;
               case 184:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAdd(175);
                  break;
               case 185:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(186, 173);
                  break;
               case 186:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAdd(173);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 97:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 133)
                        kind = 133;
                     jjCheckNAdd(37);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 133)
                        kind = 133;
                     jjCheckNAddTwoStates(36, 37);
                  }
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 165;
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 155;
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 147;
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 133;
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 124;
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 113;
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 96;
                  break;
               case 2:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 133)
                        kind = 133;
                     jjCheckNAdd(37);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 133)
                        kind = 133;
                     jjCheckNAddTwoStates(36, 37);
                  }
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 96:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 133)
                        kind = 133;
                     jjCheckNAdd(37);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 133)
                        kind = 133;
                     jjCheckNAddTwoStates(36, 37);
                  }
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 164;
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 154;
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 146;
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 132;
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 123;
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 112;
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 95;
                  break;
               case 99:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 133)
                        kind = 133;
                     jjCheckNAdd(37);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 133)
                        kind = 133;
                     jjCheckNAddTwoStates(36, 37);
                  }
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 167;
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 157;
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 149;
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 135;
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 126;
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 115;
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 98;
                  break;
               case 187:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 133)
                        kind = 133;
                     jjCheckNAdd(37);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 133)
                        kind = 133;
                     jjCheckNAddTwoStates(36, 37);
                  }
                  break;
               case 3:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 133)
                        kind = 133;
                     jjCheckNAddTwoStates(36, 37);
                  }
                  else if (curChar == 91)
                     jjstateSet[jjnewStateCnt++] = 43;
                  if ((0x8000000080000L & l) != 0L)
                     jjAddStates(12, 19);
                  else if ((0x200000002000L & l) != 0L)
                     jjAddStates(20, 21);
                  else if ((0x40000000400L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 34;
                  else if ((0x80000000800000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 12;
                  else if ((0x10000000100L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 7;
                  else if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 94:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 133)
                        kind = 133;
                     jjCheckNAdd(37);
                  }
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 162;
                  else if ((0x20000000200L & l) != 0L)
                     jjCheckNAdd(130);
                  else if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 121;
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 144;
                  else if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 110;
                  if ((0x800000008000L & l) != 0L)
                     jjCheckNAdd(130);
                  else if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 93;
                  break;
               case 75:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 133)
                        kind = 133;
                     jjCheckNAdd(37);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 133)
                        kind = 133;
                     jjCheckNAddTwoStates(36, 37);
                  }
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 80;
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 74;
                  break;
               case 79:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 133)
                        kind = 133;
                     jjCheckNAdd(37);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 133)
                        kind = 133;
                     jjCheckNAddTwoStates(36, 37);
                  }
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 78;
                  break;
               case 34:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 133)
                        kind = 133;
                     jjCheckNAdd(37);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 133)
                        kind = 133;
                     jjCheckNAddTwoStates(36, 37);
                  }
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 87:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 133)
                        kind = 133;
                     jjCheckNAdd(37);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 133)
                        kind = 133;
                     jjCheckNAddTwoStates(36, 37);
                  }
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 86;
                  break;
               case 12:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 133)
                        kind = 133;
                     jjCheckNAdd(37);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 133)
                        kind = 133;
                     jjCheckNAddTwoStates(36, 37);
                  }
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 7:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 133)
                        kind = 133;
                     jjCheckNAdd(37);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 133)
                        kind = 133;
                     jjCheckNAddTwoStates(36, 37);
                  }
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 23:
                  if ((0x7fffffe17fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(60, 61);
                  else if (curChar == 94)
                     jjCheckNAdd(60);
                  break;
               case 78:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 133)
                        kind = 133;
                     jjCheckNAdd(37);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 133)
                        kind = 133;
                     jjCheckNAddTwoStates(36, 37);
                  }
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 76;
                  break;
               case 95:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 133)
                        kind = 133;
                     jjCheckNAdd(37);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 133)
                        kind = 133;
                     jjCheckNAddTwoStates(36, 37);
                  }
                  else if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 163;
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 153;
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 145;
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 131;
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 122;
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 111;
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 94;
                  break;
               case 121:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 133)
                        kind = 133;
                     jjCheckNAdd(37);
                  }
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 120;
                  break;
               case 98:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 133)
                        kind = 133;
                     jjCheckNAdd(37);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 133)
                        kind = 133;
                     jjCheckNAddTwoStates(36, 37);
                  }
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 166;
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 156;
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 148;
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 134;
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 125;
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 114;
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 97;
                  break;
               case 88:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 133)
                        kind = 133;
                     jjCheckNAdd(37);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 133)
                        kind = 133;
                     jjCheckNAddTwoStates(36, 37);
                  }
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 169;
                  else if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 87;
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 159;
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 151;
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 137;
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 128;
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 117;
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 100;
                  break;
               case 100:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 133)
                        kind = 133;
                     jjCheckNAdd(37);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 133)
                        kind = 133;
                     jjCheckNAddTwoStates(36, 37);
                  }
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 168;
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 158;
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 150;
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 136;
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 127;
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 116;
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 99;
                  break;
               case 0:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 133)
                        kind = 133;
                     jjCheckNAdd(37);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 133)
                        kind = 133;
                     jjCheckNAddTwoStates(36, 37);
                  }
                  if ((0x200000002000000L & l) != 0L)
                  {
                     if (kind > 26)
                        kind = 26;
                     jjstateSet[jjnewStateCnt++] = 1;
                  }
                  break;
               case 74:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 133)
                        kind = 133;
                     jjCheckNAdd(37);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 133)
                        kind = 133;
                     jjCheckNAddTwoStates(36, 37);
                  }
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 79;
                  else if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 73;
                  break;
               case 1:
                  if ((0x8000000080000L & l) != 0L && kind > 26)
                     kind = 26;
                  break;
               case 4:
                  if ((0x4000000040000L & l) == 0L)
                     break;
                  if (kind > 39)
                     kind = 39;
                  jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 5:
                  if ((0x8000000080000L & l) != 0L && kind > 39)
                     kind = 39;
                  break;
               case 6:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 8:
                  if ((0x10000000100L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 9:
                  if ((0x80000000800L & l) == 0L)
                     break;
                  if (kind > 110)
                     kind = 110;
                  jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 10:
                  if ((0x8000000080000L & l) != 0L && kind > 110)
                     kind = 110;
                  break;
               case 11:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 13:
                  if ((0x80000000800000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 21:
                  if (kind > 130)
                     kind = 130;
                  jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 24:
                  jjCheckNAddTwoStates(24, 25);
                  break;
               case 26:
               case 27:
                  jjCheckNAddTwoStates(27, 25);
                  break;
               case 31:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 132)
                     kind = 132;
                  jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 32:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 33:
                  if ((0x400000004L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 35:
                  if ((0x40000000400L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 36:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 133)
                     kind = 133;
                  jjCheckNAddTwoStates(36, 37);
                  break;
               case 37:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 133)
                     kind = 133;
                  jjCheckNAdd(37);
                  break;
               case 39:
                  jjCheckNAddTwoStates(39, 40);
                  break;
               case 42:
                  jjCheckNAddTwoStates(42, 40);
                  break;
               case 43:
                  if (curChar == 91)
                     jjCheckNAddTwoStates(44, 50);
                  break;
               case 44:
                  if ((0xffffffffd7ffffffL & l) != 0L)
                     jjCheckNAddTwoStates(44, 50);
                  break;
               case 45:
                  if (curChar != 93)
                     break;
                  if (kind > 137)
                     kind = 137;
                  jjstateSet[jjnewStateCnt++] = 49;
                  break;
               case 46:
                  if (curChar == 91)
                     jjCheckNAddTwoStates(47, 48);
                  break;
               case 47:
                  if ((0xffffffffd7ffffffL & l) != 0L)
                     jjCheckNAddTwoStates(47, 48);
                  break;
               case 48:
               case 50:
                  if (curChar == 93)
                     jjCheckNAdd(45);
                  break;
               case 49:
                  if (curChar == 91)
                     jjstateSet[jjnewStateCnt++] = 46;
                  break;
               case 51:
                  if (curChar == 91)
                     jjstateSet[jjnewStateCnt++] = 43;
                  break;
               case 53:
                  jjAddStates(22, 23);
                  break;
               case 59:
                  if (curChar == 94)
                     jjCheckNAdd(60);
                  break;
               case 60:
                  if ((0x7fffffe17fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(60, 61);
                  break;
               case 64:
                  if ((0x200000002000L & l) != 0L)
                     jjAddStates(20, 21);
                  break;
               case 65:
                  if ((0x1000000010L & l) == 0L)
                     break;
                  if (kind > 55)
                     kind = 55;
                  jjstateSet[jjnewStateCnt++] = 66;
                  break;
               case 66:
                  if ((0x8000000080000L & l) != 0L && kind > 55)
                     kind = 55;
                  break;
               case 67:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 65;
                  break;
               case 68:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 67;
                  break;
               case 69:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 68;
                  break;
               case 70:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 69;
                  break;
               case 71:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 70;
                  break;
               case 72:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 71;
                  break;
               case 73:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 72;
                  break;
               case 76:
                  if ((0x2000000020L & l) == 0L)
                     break;
                  if (kind > 58)
                     kind = 58;
                  jjstateSet[jjnewStateCnt++] = 77;
                  break;
               case 77:
                  if ((0x8000000080000L & l) != 0L && kind > 58)
                     kind = 58;
                  break;
               case 80:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 79;
                  break;
               case 81:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 80;
                  break;
               case 82:
                  if ((0x8000000080000L & l) != 0L)
                     jjAddStates(12, 19);
                  break;
               case 83:
                  if ((0x1000000010L & l) == 0L)
                     break;
                  if (kind > 83)
                     kind = 83;
                  jjstateSet[jjnewStateCnt++] = 84;
                  break;
               case 84:
                  if ((0x8000000080000L & l) != 0L && kind > 83)
                     kind = 83;
                  break;
               case 85:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 83;
                  break;
               case 86:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 85;
                  break;
               case 89:
                  if ((0x2000000020L & l) != 0L && kind > 118)
                     kind = 118;
                  break;
               case 90:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 89;
                  break;
               case 91:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 90;
                  break;
               case 92:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 91;
                  break;
               case 93:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 92;
                  break;
               case 101:
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 100;
                  break;
               case 102:
                  if ((0x8000000080000L & l) != 0L && kind > 118)
                     kind = 118;
                  break;
               case 103:
               case 119:
                  if ((0x10000000100000L & l) != 0L)
                     jjCheckNAdd(102);
                  break;
               case 104:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 103;
                  break;
               case 105:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 104;
                  break;
               case 106:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 105;
                  break;
               case 107:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 106;
                  break;
               case 108:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 107;
                  break;
               case 109:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 108;
                  break;
               case 110:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 109;
                  break;
               case 111:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 110;
                  break;
               case 112:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 111;
                  break;
               case 113:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 112;
                  break;
               case 114:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 113;
                  break;
               case 115:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 114;
                  break;
               case 116:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 115;
                  break;
               case 117:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 116;
                  break;
               case 118:
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 117;
                  break;
               case 120:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 119;
                  break;
               case 122:
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 121;
                  break;
               case 123:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 122;
                  break;
               case 124:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 123;
                  break;
               case 125:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 124;
                  break;
               case 126:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 125;
                  break;
               case 127:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 126;
                  break;
               case 128:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 127;
                  break;
               case 129:
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 128;
                  break;
               case 130:
                  if ((0x400000004000L & l) != 0L && kind > 118)
                     kind = 118;
                  break;
               case 131:
                  if ((0x800000008000L & l) != 0L)
                     jjCheckNAdd(130);
                  break;
               case 132:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 131;
                  break;
               case 133:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 132;
                  break;
               case 134:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 133;
                  break;
               case 135:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 134;
                  break;
               case 136:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 135;
                  break;
               case 137:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 136;
                  break;
               case 138:
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 137;
                  break;
               case 139:
                  if ((0x1000000010000L & l) != 0L)
                     jjCheckNAdd(102);
                  break;
               case 140:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 139;
                  break;
               case 141:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 140;
                  break;
               case 142:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 141;
                  break;
               case 143:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 142;
                  break;
               case 144:
                  if ((0x40000000400000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 143;
                  break;
               case 145:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 144;
                  break;
               case 146:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 145;
                  break;
               case 147:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 146;
                  break;
               case 148:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 147;
                  break;
               case 149:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 148;
                  break;
               case 150:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 149;
                  break;
               case 151:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 150;
                  break;
               case 152:
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 151;
                  break;
               case 153:
                  if ((0x20000000200L & l) != 0L)
                     jjCheckNAdd(130);
                  break;
               case 154:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 153;
                  break;
               case 155:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 154;
                  break;
               case 156:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 155;
                  break;
               case 157:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 156;
                  break;
               case 158:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 157;
                  break;
               case 159:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 158;
                  break;
               case 160:
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 159;
                  break;
               case 161:
                  if ((0x10000000100000L & l) != 0L && kind > 118)
                     kind = 118;
                  break;
               case 162:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 161;
                  break;
               case 163:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 162;
                  break;
               case 164:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 163;
                  break;
               case 165:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 164;
                  break;
               case 166:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 165;
                  break;
               case 167:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 166;
                  break;
               case 168:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 167;
                  break;
               case 169:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 168;
                  break;
               case 170:
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 169;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 21:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 130)
                     kind = 130;
                  jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 24:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(24, 25);
                  break;
               case 26:
               case 27:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(27, 25);
                  break;
               case 39:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(39, 40);
                  break;
               case 42:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(42, 40);
                  break;
               case 44:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(8, 9);
                  break;
               case 47:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(10, 11);
                  break;
               case 53:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(22, 23);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 187 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   15, 16, 172, 173, 185, 25, 26, 28, 44, 50, 47, 48, 88, 101, 118, 129, 
   138, 152, 160, 170, 75, 81, 53, 54, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, "\73", "\50", "\51", "\72", "\54", "\133", "\55", "\52", "\135", "\53", 
"\57", "\136", };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0xffffffffffffffe1L, 0xffffffffffffffffL, 0x1ffff32L, 
};
static final long[] jjtoSkip = {
   0x1eL, 0x0L, 0xcL, 
};
static final long[] jjtoSpecial = {
   0x0L, 0x0L, 0xcL, 
};
static protected SimpleCharStream input_stream;
static private final int[] jjrounds = new int[187];
static private final int[] jjstateSet = new int[374];
static protected char curChar;
/** Constructor. */
public NewSQLParserTokenManager(SimpleCharStream stream){
   if (input_stream != null)
      throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);
   input_stream = stream;
}

/** Constructor. */
public NewSQLParserTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
static private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 187; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
static public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

static protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

static int curLexState = 0;
static int defaultLexState = 0;
static int jjnewStateCnt;
static int jjround;
static int jjmatchedPos;
static int jjmatchedKind;

/** Get the next Token. */
public static Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         matchedToken.specialToken = specialToken;
         return matchedToken;
      }
      else
      {
         if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
         {
            matchedToken = jjFillToken();
            if (specialToken == null)
               specialToken = matchedToken;
            else
            {
               matchedToken.specialToken = specialToken;
               specialToken = (specialToken.next = matchedToken);
            }
         }
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

static private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
static private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
static private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

static private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
