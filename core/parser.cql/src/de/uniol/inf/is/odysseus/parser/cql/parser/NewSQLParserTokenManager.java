/* Generated By:JJTree&JavaCC: Do not edit this line. NewSQLParserTokenManager.java */
package de.uniol.inf.is.odysseus.parser.cql.parser;
import java.util.ArrayList;
import de.uniol.inf.is.odysseus.metadata.PointInTime;
import de.uniol.inf.is.odysseus.intervalapproach.TimeInterval;
import de.uniol.inf.is.odysseus.physicaloperator.AggregateFunction;

/** Token Manager. */
public class NewSQLParserTokenManager implements NewSQLParserConstants
{

  /** Debug output. */
  public static  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public static  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private static final int jjStopStringLiteralDfa_0(int pos, long active0, long active1, long active2)
{
   switch (pos)
   {
      case 0:
         if ((active1 & 0x24880003ff000L) != 0L || (active2 & 0x8000L) != 0L)
         {
            jjmatchedKind = 120;
            return 77;
         }
         if ((active0 & 0xbc000000000000L) != 0L || (active2 & 0x6000L) != 0L)
         {
            jjmatchedKind = 120;
            return 14;
         }
         if ((active2 & 0x20L) != 0L)
            return 44;
         if ((active2 & 0x80L) != 0L)
            return 27;
         if ((active1 & 0x6000000000L) != 0L)
         {
            jjmatchedKind = 120;
            return 19;
         }
         if ((active0 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 120;
            return 67;
         }
         if ((active2 & 0x10000L) != 0L)
            return 30;
         if ((active0 & 0x7fb00000L) != 0L)
         {
            jjmatchedKind = 120;
            return 2;
         }
         if ((active0 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 120;
            return 7;
         }
         if ((active0 & 0xff037fcf800fffe0L) != 0L || (active1 & 0x1a70fffc007ffL) != 0L || (active2 & 0x1800L) != 0L)
         {
            jjmatchedKind = 120;
            return 176;
         }
         return -1;
      case 1:
         if ((active0 & 0x300000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 120;
               jjmatchedPos = 1;
            }
            return 0;
         }
         if ((active1 & 0x408000003000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 120;
               jjmatchedPos = 1;
            }
            return 76;
         }
         if ((active1 & 0x80000000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 120;
               jjmatchedPos = 1;
            }
            return 89;
         }
         if ((active0 & 0x20000000000000L) != 0L || (active2 & 0x4000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 120;
               jjmatchedPos = 1;
            }
            return 13;
         }
         if ((active0 & 0x78807f8000009000L) != 0L || (active1 & 0x8000000L) != 0L)
            return 176;
         if ((active0 & 0x871f805fff8f6fe0L) != 0L || (active1 & 0x3a76ff7ffc7ffL) != 0L || (active2 & 0xb800L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 120;
               jjmatchedPos = 1;
            }
            return 176;
         }
         return -1;
      case 2:
         if ((active0 & 0x3800000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 120;
               jjmatchedPos = 2;
            }
            return 38;
         }
         if ((active1 & 0x80000000000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 120;
               jjmatchedPos = 2;
            }
            return 88;
         }
         if ((active0 & 0x951fbe5ffc376380L) != 0L || (active1 & 0x3e7ecf7fed7ffL) != 0L || (active2 & 0xb800L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 120;
               jjmatchedPos = 2;
            }
            return 176;
         }
         if ((active0 & 0x200000000080c60L) != 0L || (active1 & 0x300012000L) != 0L)
            return 176;
         if ((active0 & 0x20000000000000L) != 0L || (active2 & 0x4000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 120;
               jjmatchedPos = 2;
            }
            return 12;
         }
         return -1;
      case 3:
         if ((active1 & 0x80000000000L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 120;
               jjmatchedPos = 3;
            }
            return 87;
         }
         if ((active0 & 0x3800000L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 120;
               jjmatchedPos = 3;
            }
            return 38;
         }
         if ((active0 & 0x20000000000000L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 120;
               jjmatchedPos = 3;
            }
            return 11;
         }
         if ((active0 & 0x111c1e5bbc176380L) != 0L || (active1 & 0x3e3a4f0fe53b7L) != 0L || (active2 & 0x1000L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 120;
               jjmatchedPos = 3;
            }
            return 176;
         }
         if ((active0 & 0x8403a00440200000L) != 0L || (active1 & 0x44a07008448L) != 0L)
            return 176;
         return -1;
      case 4:
         if ((active0 & 0x3800000L) != 0L || (active1 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 120;
            jjmatchedPos = 4;
            return 38;
         }
         if ((active1 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 120;
            jjmatchedPos = 4;
            return 86;
         }
         if ((active0 & 0x20020a00000100L) != 0L || (active1 & 0x24a0424030L) != 0L)
            return 176;
         if ((active0 & 0x111c1c51bc176280L) != 0L || (active1 & 0x3638056bc1387L) != 0L || (active2 & 0x1000L) != 0L)
         {
            jjmatchedKind = 120;
            jjmatchedPos = 4;
            return 176;
         }
         return -1;
      case 5:
         if ((active1 & 0x800000000000L) != 0L)
            return 38;
         if ((active1 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 120;
            jjmatchedPos = 5;
            return 85;
         }
         if ((active0 & 0x10818408c130080L) != 0L || (active1 & 0x410056080186L) != 0L)
         {
            jjmatchedKind = 120;
            jjmatchedPos = 5;
            return 176;
         }
         if ((active0 & 0x1014041130046200L) != 0L || (active1 & 0x28000b41201L) != 0L)
            return 176;
         if ((active0 & 0x3800000L) != 0L || (active1 & 0x3200000000000L) != 0L)
         {
            jjmatchedKind = 120;
            jjmatchedPos = 5;
            return 38;
         }
         return -1;
      case 6:
         if ((active0 & 0x3800000L) != 0L)
         {
            jjmatchedKind = 120;
            jjmatchedPos = 6;
            return 38;
         }
         if ((active1 & 0x3200000000000L) != 0L)
            return 38;
         if ((active0 & 0x8104088100000L) != 0L || (active1 & 0x410052080186L) != 0L)
         {
            jjmatchedKind = 120;
            jjmatchedPos = 6;
            return 176;
         }
         if ((active1 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 120;
            jjmatchedPos = 6;
            return 84;
         }
         if ((active0 & 0x100080004030080L) != 0L || (active1 & 0x4000000L) != 0L)
            return 176;
         return -1;
      case 7:
         if ((active0 & 0x104080000000L) != 0L || (active1 & 0x10042080002L) != 0L)
         {
            jjmatchedKind = 120;
            jjmatchedPos = 7;
            return 176;
         }
         if ((active0 & 0x3800000L) != 0L || (active1 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 120;
            jjmatchedPos = 7;
            return 38;
         }
         if ((active0 & 0x8000008100000L) != 0L || (active1 & 0x10000184L) != 0L)
            return 176;
         if ((active1 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 120;
            jjmatchedPos = 7;
            return 83;
         }
         return -1;
      case 8:
         if ((active0 & 0x3000000L) != 0L || (active1 & 0x400000000000L) != 0L)
            return 38;
         if ((active0 & 0x4080000000L) != 0L || (active1 & 0x2080000L) != 0L)
         {
            jjmatchedKind = 120;
            jjmatchedPos = 8;
            return 176;
         }
         if ((active0 & 0x800000L) != 0L || (active1 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 120;
            jjmatchedPos = 8;
            return 38;
         }
         if ((active0 & 0x100000000000L) != 0L || (active1 & 0x10040000002L) != 0L)
            return 176;
         return -1;
      case 9:
         if ((active1 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 120;
            jjmatchedPos = 9;
            return 38;
         }
         if ((active0 & 0x800000L) != 0L)
            return 38;
         if ((active0 & 0x80000000L) != 0L || (active1 & 0x2080000L) != 0L)
         {
            jjmatchedKind = 120;
            jjmatchedPos = 9;
            return 176;
         }
         if ((active0 & 0x4000000000L) != 0L)
            return 176;
         return -1;
      case 10:
         if ((active0 & 0x80000000L) != 0L || (active1 & 0x2080000L) != 0L)
         {
            jjmatchedKind = 120;
            jjmatchedPos = 10;
            return 176;
         }
         if ((active1 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 120;
            jjmatchedPos = 10;
            return 38;
         }
         return -1;
      case 11:
         if ((active1 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 120;
            jjmatchedPos = 11;
            return 38;
         }
         if ((active0 & 0x80000000L) != 0L || (active1 & 0x2000000L) != 0L)
            return 176;
         if ((active1 & 0x80000L) != 0L)
         {
            jjmatchedKind = 120;
            jjmatchedPos = 11;
            return 176;
         }
         return -1;
      case 12:
         if ((active1 & 0x80000L) != 0L)
         {
            jjmatchedKind = 120;
            jjmatchedPos = 12;
            return 176;
         }
         if ((active1 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 120;
            jjmatchedPos = 12;
            return 38;
         }
         return -1;
      case 13:
         if ((active1 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 120;
            jjmatchedPos = 13;
            return 38;
         }
         if ((active1 & 0x80000L) != 0L)
            return 176;
         return -1;
      case 14:
         if ((active1 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 120;
            jjmatchedPos = 14;
            return 38;
         }
         return -1;
      default :
         return -1;
   }
}
private static final int jjStartNfa_0(int pos, long active0, long active1, long active2)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1, active2), pos + 1);
}
static private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
static private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 40:
         return jjStopAtPos(0, 130);
      case 41:
         return jjStopAtPos(0, 132);
      case 42:
         return jjStopAtPos(0, 137);
      case 43:
         return jjStopAtPos(0, 138);
      case 44:
         return jjStopAtPos(0, 131);
      case 45:
         return jjStartNfaWithStates_0(0, 135, 27);
      case 47:
         return jjStartNfaWithStates_0(0, 144, 30);
      case 58:
         return jjStopAtPos(0, 136);
      case 59:
         return jjStopAtPos(0, 129);
      case 91:
         return jjStartNfaWithStates_0(0, 133, 44);
      case 93:
         return jjStopAtPos(0, 134);
      case 94:
         return jjStopAtPos(0, 145);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa1_0(0x3fe0L, 0x10000000000L, 0x800L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa1_0(0xc000L, 0x0L, 0x0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa1_0(0xf0000L, 0x0L, 0x1000L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa1_0(0x7fb00000L, 0x0L, 0x0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa1_0(0x180000000L, 0x0L, 0x0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa1_0(0x600000000L, 0x1000000000000L, 0x0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa1_0(0x800000000L, 0x0L, 0x0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa1_0(0x1000000000L, 0x0L, 0x0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa1_0(0x7fc000000000L, 0x0L, 0x0L);
      case 74:
      case 106:
         return jjMoveStringLiteralDfa1_0(0x800000000000L, 0x0L, 0x0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa1_0(0x3000000000000L, 0x840000000000L, 0x0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa1_0(0xbc000000000000L, 0x0L, 0x6000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa1_0(0x700000000000000L, 0x0L, 0x0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa1_0(0xf800000000000000L, 0x1L, 0x0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x20000000000eL, 0x0L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x10L, 0x0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x200000007e0L, 0x0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x24880003ff000L, 0x8000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x3fc00000L, 0x0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x3c0000000L, 0x0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xc00000000L, 0x0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x6000000000L, 0x0L);
      default :
         return jjMoveNfa_0(3, 0);
   }
}
static private int jjMoveStringLiteralDfa1_0(long active0, long active1, long active2)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1, active2);
      return 1;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x104001000300000L, active1, 0x1000400400022L, active2, 0x2000L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0x3800000L, active1, 0L, active2, 0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000000c0L, active1, 0L, active2, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x18000014000000L, active1, 0x4280008033c0L, active2, 0L);
      case 70:
      case 102:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 39, 176);
         else if ((active0 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 59;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000000000000L, active1, 0L, active2, 0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000L, active1, 0x2000000000L, active2, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x21000008000000L, active1, 0x84480700c000L, active2, 0x4000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000320L, active1, 0x30000L, active2, 0L);
      case 78:
      case 110:
         if ((active0 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 40;
            jjmatchedPos = 1;
         }
         else if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 61, 176);
         return jjMoveStringLiteralDfa2_0(active0, 0x3e0080000c00L, active1, 0xc0000000L, active2, 0L);
      case 79:
      case 111:
         if ((active1 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(1, 91, 176);
         return jjMoveStringLiteralDfa2_0(active0, 0x202800020020000L, active1, 0x2200000040400L, active2, 0x1000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x80000000000L, active2, 0L);
      case 82:
      case 114:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 62, 176);
         return jjMoveStringLiteralDfa2_0(active0, 0xc40044000L, active1, 0x1000000cL, active2, 0L);
      case 83:
      case 115:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(1, 12, 176);
         else if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 46, 176);
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000000080000L, active1, 0x300000000L, active2, 0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000L, active1, 0x10000380000L, active2, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000000000L, active1, 0x20000011L, active2, 0x8000L);
      case 86:
      case 118:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 55, 176);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x800L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000000L, active1, 0L, active2, 0L);
      case 89:
      case 121:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(1, 15, 176);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1, active2);
}
static private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(0, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1, active2);
      return 2;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa3_0(active0, 0x3800000L, active1, 0L, active2, 0L);
      case 65:
      case 97:
         if ((active1 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(2, 80, 176);
         return jjMoveStringLiteralDfa3_0(active0, 0x10000L, active1, 0x80000080040L, active2, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x40400000L, active2, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1020000040000L, active2, 0L);
      case 68:
      case 100:
         if ((active0 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(2, 6, 176);
         else if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(2, 10, 176);
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000L, active1, 0L, active2, 0L);
      case 69:
      case 101:
         if ((active1 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 96;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x4000040000L, active1, 0x2a00000010L, active2, 0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000020004000000L, active1, 0L, active2, 0L);
      case 71:
      case 103:
         if ((active2 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(2, 120, 176);
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000000000000L, active1, 0x400000000000L, active2, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x800100000000L, active1, 0x200080020004L, active2, 0L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000000000L, active1, 0L, active2, 0L);
      case 76:
      case 108:
         if ((active0 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(2, 5, 176);
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000000000L, active1, 0x2000400005180L, active2, 0L);
      case 77:
      case 109:
         if ((active2 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(2, 120, 176);
         return jjMoveStringLiteralDfa3_0(active0, 0x20000L, active1, 0x7000200L, active2, 0L);
      case 78:
      case 110:
         if ((active2 & 0x4000L) != 0L)
         {
            jjmatchedKind = 120;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x22000000000000L, active1, 0x808000800020L, active2, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0xe40004000L, active1, 0x8L, active2, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x20000000L, active2, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x300002L, active2, 0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x40008000000L, active1, 0x40000000000L, active2, 0L);
      case 84:
      case 116:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 57, 176);
         else if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(2, 77, 176);
         return jjMoveStringLiteralDfa3_0(active0, 0x11c380010302100L, active1, 0x14000000001L, active2, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000L, active1, 0x10000000L, active2, 0x1000L);
      case 86:
      case 118:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(2, 19, 176);
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000080L, active1, 0L, active2, 0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa3_0(active0, 0x200L, active1, 0x400L, active2, 0L);
      case 88:
      case 120:
         if ((active2 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(2, 120, 176);
         break;
      case 89:
      case 121:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(2, 11, 176);
         break;
      case 90:
      case 122:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x8000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1, active2);
}
static private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(1, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1, active2);
      return 3;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000214142280L, active1, 0x804180L, active2, 0L);
      case 66:
      case 98:
         if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(3, 67, 176);
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000L, active1, 0L, active2, 0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x20000L, active2, 0L);
      case 69:
      case 101:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(3, 21, 176);
         else if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 48, 176);
         else if ((active1 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(3, 79, 176);
         else if ((active1 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 88;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x1c0000800100L, active1, 0x1800006101000L, active2, 0L);
      case 71:
      case 103:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 49, 176);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x20L, active2, 0L);
      case 72:
      case 104:
         if ((active1 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 102, 176);
         break;
      case 73:
      case 105:
         if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 63, 176);
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000L, active1, 0x2000400200000L, active2, 0L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000L, active1, 0x40000L, active2, 0L);
      case 76:
      case 108:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 58, 176);
         else if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(3, 70, 176);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x20400000L, active2, 0L);
      case 77:
      case 109:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(3, 34, 176);
         return jjMoveStringLiteralDfa4_0(active0, 0x20000L, active1, 0x400000000000L, active2, 0L);
      case 78:
      case 110:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 47, 176);
         return jjMoveStringLiteralDfa4_0(active0, 0x4000010000L, active1, 0x200010000000L, active2, 0x1000L);
      case 79:
      case 111:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 45, 176);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x200c0000204L, active2, 0L);
      case 80:
      case 112:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(3, 30, 176);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x1L, active2, 0L);
      case 82:
      case 114:
         if ((active1 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(3, 97, 176);
         return jjMoveStringLiteralDfa4_0(active0, 0x14000000000000L, active1, 0x12000080000L, active2, 0L);
      case 83:
      case 115:
         if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(3, 74, 176);
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000103000000L, active1, 0x8000000000L, active2, 0L);
      case 84:
      case 116:
         if ((active1 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 106, 176);
         return jjMoveStringLiteralDfa4_0(active0, 0x20088000000L, active1, 0x80000000002L, active2, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x120000800000000L, active1, 0x10L, active2, 0L);
      case 87:
      case 119:
         if ((active1 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(3, 99, 176);
         break;
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1, active2);
}
static private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(2, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1, active2);
      return 4;
   }
   switch(curChar)
   {
      case 51:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x800000000000L, active2, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x100000L, active2, 0L);
      case 66:
      case 98:
         if ((active1 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(4, 78, 176);
         return jjMoveStringLiteralDfa5_0(active0, 0x100000L, active1, 0L, active2, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x12002000L, active1, 0x10001000L, active2, 0L);
      case 68:
      case 100:
         if ((active1 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(4, 98, 176);
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000000000L, active1, 0x2000000000000L, active2, 0L);
      case 69:
      case 101:
         if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(4, 68, 176);
         else if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(4, 69, 176);
         else if ((active1 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(4, 81, 176);
         else if ((active1 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(4, 86, 176);
         else if ((active1 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(4, 93, 176);
         else if ((active1 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 101, 176);
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000001024000L, active1, 0x400000040000L, active2, 0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000000000L, active1, 0L, active2, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x14000088000000L, active1, 0x90000000002L, active2, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x20000000L, active1, 0L, active2, 0L);
      case 78:
      case 110:
         if ((active1 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(4, 95, 176);
         return jjMoveStringLiteralDfa5_0(active0, 0x1000010080L, active1, 0xa00000L, active2, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x8004000000L, active2, 0L);
      case 80:
      case 112:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(4, 35, 176);
         break;
      case 82:
      case 114:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(4, 8, 176);
         return jjMoveStringLiteralDfa5_0(active0, 0x100140000000000L, active1, 0x20000000004L, active2, 0L);
      case 83:
      case 115:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 53, 176);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x2000000L, active2, 0L);
      case 84:
      case 116:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(4, 33, 176);
         else if ((active2 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(4, 120, 176);
         return jjMoveStringLiteralDfa5_0(active0, 0x4100040000L, active1, 0x1200000080180L, active2, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000L, active1, 0x40000001L, active2, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x200L, active2, 0L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa5_0(active0, 0x800000L, active1, 0L, active2, 0L);
      case 89:
      case 121:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 41, 176);
         return jjMoveStringLiteralDfa5_0(active0, 0x200L, active1, 0L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1, active2);
}
static private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(3, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 51:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x3200000000000L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x108000000100000L, active1, 0x80010000000L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x10000000000L);
      case 67:
      case 99:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 52, 176);
         return jjMoveStringLiteralDfa6_0(active0, 0x80L, active1, 0L);
      case 68:
      case 100:
         if ((active1 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 105, 176);
         else if ((active1 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 111, 38);
         break;
      case 69:
      case 101:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(5, 18, 176);
         else if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(5, 29, 176);
         else if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(5, 73, 176);
         return jjMoveStringLiteralDfa6_0(active0, 0x80000810000L, active1, 0x2000000L);
      case 71:
      case 103:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 36, 176);
         else if ((active1 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(5, 85, 176);
         break;
      case 72:
      case 104:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(5, 13, 176);
         else if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(5, 28, 176);
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000000L, active1, 0x184L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x5000000L, active1, 0L);
      case 77:
      case 109:
         if ((active1 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(5, 84, 176);
         return jjMoveStringLiteralDfa6_0(active0, 0x80000000L, active1, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa6_0(active0, 0x8020000L, active1, 0x400040000000L);
      case 82:
      case 114:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(5, 14, 176);
         else if ((active1 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 103, 176);
         break;
      case 83:
      case 115:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(5, 9, 176);
         else if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(5, 32, 176);
         return jjMoveStringLiteralDfa6_0(active0, 0x100000000000L, active1, 0L);
      case 84:
      case 116:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 42, 176);
         else if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 60, 176);
         else if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(5, 64, 176);
         else if ((active1 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(5, 76, 176);
         else if ((active1 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(5, 82, 176);
         else if ((active1 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(5, 87, 176);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x80002L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x4000000L);
      case 88:
      case 120:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 50, 176);
         break;
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1, 0L);
}
static private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(4, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 67:
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x8800000L, active1, 0L);
      case 68:
      case 100:
         if ((active1 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 109, 38);
         else if ((active1 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 112, 38);
         else if ((active1 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 113, 38);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x40000000L);
      case 69:
      case 101:
         if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(6, 7, 176);
         return jjMoveStringLiteralDfa7_0(active0, 0x100083000000L, active1, 0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000000000L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x80002L);
      case 76:
      case 108:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(6, 16, 176);
         else if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 56, 176);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x80000000000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x2000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x80L);
      case 82:
      case 114:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 43, 176);
         break;
      case 83:
      case 115:
         return jjMoveStringLiteralDfa7_0(active0, 0x100000L, active1, 0L);
      case 84:
      case 116:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(6, 17, 176);
         else if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(6, 26, 176);
         else if ((active1 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(6, 90, 176);
         return jjMoveStringLiteralDfa7_0(active0, 0x8000000000000L, active1, 0x400010000004L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x10000000000L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x100L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1, 0L);
}
static private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(5, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 51:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x400000000000L);
      case 95:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x80000000000L);
      case 65:
      case 97:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 51, 176);
         break;
      case 67:
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x100001000000L, active1, 0L);
      case 69:
      case 101:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(7, 20, 176);
         else if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(7, 72, 176);
         else if ((active1 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(7, 92, 176);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x40000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0x4000000000L, active1, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa8_0(active0, 0x2000000L, active1, 0x80000L);
      case 78:
      case 110:
         if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(7, 71, 176);
         break;
      case 79:
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x2L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa8_0(active0, 0x80000000L, active1, 0x2000000L);
      case 84:
      case 116:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(7, 27, 176);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x10000000000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa8_0(active0, 0x800000L, active1, 0L);
      case 89:
      case 121:
         if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(7, 66, 176);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1, 0L);
}
static private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(6, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(8, 25, 38);
         break;
      case 68:
      case 100:
         if ((active1 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(8, 94, 176);
         else if ((active1 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 110, 38);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x80000000000L);
      case 69:
      case 101:
         if ((active1 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 104, 176);
         return jjMoveStringLiteralDfa9_0(active0, 0x4000000000L, active1, 0x80000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x2000000L);
      case 78:
      case 110:
         if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(8, 65, 176);
         break;
      case 84:
      case 116:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(8, 24, 38);
         else if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 44, 176);
         return jjMoveStringLiteralDfa9_0(active0, 0x80800000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1, 0L);
}
static private int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(7, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, active1, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa10_0(active0, 0x80000000L, active1, 0L);
      case 68:
      case 100:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 38, 176);
         break;
      case 69:
      case 101:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(9, 23, 38);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x80000000000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x80000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x2000000L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, active1, 0L);
}
static private int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(8, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, active1, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 73:
      case 105:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x2000000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa11_0(active0, 0x80000000L, active1, 0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x80000000000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x80000L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, active1, 0L);
}
static private int jjMoveStringLiteralDfa11_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(9, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, active1, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x80000L);
      case 80:
      case 112:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(11, 31, 176);
         break;
      case 84:
      case 116:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x80000000000L);
      case 86:
      case 118:
         if ((active1 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(11, 89, 176);
         break;
      default :
         break;
   }
   return jjStartNfa_0(10, active0, active1, 0L);
}
static private int jjMoveStringLiteralDfa12_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(10, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, 0L, active1, 0L);
      return 12;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa13_0(active1, 0x80000000000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa13_0(active1, 0x80000L);
      default :
         break;
   }
   return jjStartNfa_0(11, 0L, active1, 0L);
}
static private int jjMoveStringLiteralDfa13_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(11, 0L, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, 0L, active1, 0L);
      return 13;
   }
   switch(curChar)
   {
      case 78:
      case 110:
         return jjMoveStringLiteralDfa14_0(active1, 0x80000000000L);
      case 80:
      case 112:
         if ((active1 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(13, 83, 176);
         break;
      default :
         break;
   }
   return jjStartNfa_0(12, 0L, active1, 0L);
}
static private int jjMoveStringLiteralDfa14_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(12, 0L, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, 0L, active1, 0L);
      return 14;
   }
   switch(curChar)
   {
      case 67:
      case 99:
         return jjMoveStringLiteralDfa15_0(active1, 0x80000000000L);
      default :
         break;
   }
   return jjStartNfa_0(13, 0L, active1, 0L);
}
static private int jjMoveStringLiteralDfa15_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(13, 0L, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, 0L, active1, 0L);
      return 15;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         if ((active1 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(15, 107, 38);
         break;
      default :
         break;
   }
   return jjStartNfa_0(14, 0L, active1, 0L);
}
static private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 176;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 30:
                  if ((0x83ff4c1000000000L & l) != 0L)
                     jjCheckNAddTwoStates(61, 62);
                  if (curChar == 42)
                     jjCheckNAddTwoStates(31, 32);
                  break;
               case 2:
               case 38:
                  if ((0x7ff440000000000L & l) == 0L)
                     break;
                  if (kind > 120)
                     kind = 120;
                  jjCheckNAdd(38);
                  break;
               case 67:
                  if ((0x7ff440000000000L & l) == 0L)
                     break;
                  if (kind > 120)
                     kind = 120;
                  jjCheckNAdd(38);
                  break;
               case 176:
                  if ((0x7ff440000000000L & l) == 0L)
                     break;
                  if (kind > 120)
                     kind = 120;
                  jjCheckNAdd(38);
                  break;
               case 76:
                  if ((0x7ff440000000000L & l) == 0L)
                     break;
                  if (kind > 120)
                     kind = 120;
                  jjCheckNAdd(38);
                  break;
               case 19:
                  if ((0x7ff440000000000L & l) == 0L)
                     break;
                  if (kind > 120)
                     kind = 120;
                  jjCheckNAdd(38);
                  break;
               case 86:
                  if ((0x7ff440000000000L & l) == 0L)
                     break;
                  if (kind > 120)
                     kind = 120;
                  jjCheckNAdd(38);
                  break;
               case 11:
                  if ((0x7ff440000000000L & l) == 0L)
                     break;
                  if (kind > 120)
                     kind = 120;
                  jjCheckNAdd(38);
                  break;
               case 3:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 115)
                        kind = 115;
                     jjCheckNAddStates(0, 4);
                  }
                  else if ((0x7000000000000000L & l) != 0L)
                  {
                     if (kind > 126)
                        kind = 126;
                  }
                  else if (curChar == 47)
                     jjCheckNAddTwoStates(60, 61);
                  else if (curChar == 34)
                     jjCheckNAddTwoStates(54, 55);
                  else if (curChar == 39)
                     jjCheckNAddTwoStates(40, 41);
                  else if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 27;
                  else if (curChar == 46)
                     jjCheckNAdd(26);
                  if (curChar == 60)
                     jjCheckNAddTwoStates(70, 57);
                  else if (curChar == 62)
                     jjCheckNAdd(57);
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 30;
                  else if (curChar == 45)
                     jjCheckNAddTwoStates(22, 25);
                  break;
               case 27:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(22, 23);
                  else if (curChar == 45)
                  {
                     if (kind > 118)
                        kind = 118;
                     jjCheckNAdd(28);
                  }
                  else if (curChar == 46)
                     jjCheckNAdd(26);
                  break;
               case 77:
                  if ((0x7ff440000000000L & l) == 0L)
                     break;
                  if (kind > 120)
                     kind = 120;
                  jjCheckNAdd(38);
                  break;
               case 12:
                  if ((0x7ff440000000000L & l) == 0L)
                     break;
                  if (kind > 120)
                     kind = 120;
                  jjCheckNAdd(38);
                  break;
               case 7:
                  if ((0x7ff440000000000L & l) == 0L)
                     break;
                  if (kind > 120)
                     kind = 120;
                  jjCheckNAdd(38);
                  break;
               case 83:
                  if ((0x7ff440000000000L & l) == 0L)
                     break;
                  if (kind > 120)
                     kind = 120;
                  jjCheckNAdd(38);
                  break;
               case 13:
                  if ((0x7ff440000000000L & l) == 0L)
                     break;
                  if (kind > 120)
                     kind = 120;
                  jjCheckNAdd(38);
                  break;
               case 85:
                  if ((0x7ff440000000000L & l) == 0L)
                     break;
                  if (kind > 120)
                     kind = 120;
                  jjCheckNAdd(38);
                  break;
               case 84:
                  if ((0x7ff440000000000L & l) == 0L)
                     break;
                  if (kind > 120)
                     kind = 120;
                  jjCheckNAdd(38);
                  break;
               case 0:
                  if ((0x7ff440000000000L & l) == 0L)
                     break;
                  if (kind > 120)
                     kind = 120;
                  jjCheckNAdd(38);
                  break;
               case 88:
                  if ((0x7ff440000000000L & l) == 0L)
                     break;
                  if (kind > 120)
                     kind = 120;
                  jjCheckNAdd(38);
                  break;
               case 87:
                  if ((0x7ff440000000000L & l) == 0L)
                     break;
                  if (kind > 120)
                     kind = 120;
                  jjCheckNAdd(38);
                  break;
               case 89:
                  if ((0x7ff440000000000L & l) == 0L)
                     break;
                  if (kind > 120)
                     kind = 120;
                  jjCheckNAdd(38);
                  break;
               case 14:
                  if ((0x7ff440000000000L & l) == 0L)
                     break;
                  if (kind > 120)
                     kind = 120;
                  jjCheckNAdd(38);
                  break;
               case 21:
                  if (curChar == 45)
                     jjCheckNAddTwoStates(22, 25);
                  break;
               case 22:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(22, 23);
                  break;
               case 23:
                  if (curChar == 46)
                     jjCheckNAdd(24);
                  break;
               case 24:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 114)
                     kind = 114;
                  jjCheckNAdd(24);
                  break;
               case 25:
                  if (curChar == 46)
                     jjCheckNAdd(26);
                  break;
               case 26:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 114)
                     kind = 114;
                  jjCheckNAdd(26);
                  break;
               case 28:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 118)
                     kind = 118;
                  jjCheckNAdd(28);
                  break;
               case 29:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 31:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(31, 32);
                  break;
               case 32:
                  if (curChar == 42)
                     jjCheckNAddStates(5, 7);
                  break;
               case 33:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(34, 32);
                  break;
               case 34:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(34, 32);
                  break;
               case 35:
                  if (curChar == 47 && kind > 119)
                     kind = 119;
                  break;
               case 36:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 39:
                  if (curChar == 39)
                     jjCheckNAddTwoStates(40, 41);
                  break;
               case 40:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(40, 41);
                  break;
               case 41:
                  if (curChar != 39)
                     break;
                  if (kind > 123)
                     kind = 123;
                  jjstateSet[jjnewStateCnt++] = 42;
                  break;
               case 42:
                  if (curChar == 39)
                     jjCheckNAddTwoStates(43, 41);
                  break;
               case 43:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(43, 41);
                  break;
               case 45:
                  jjAddStates(8, 9);
                  break;
               case 48:
                  jjAddStates(10, 11);
                  break;
               case 53:
                  if (curChar == 34)
                     jjCheckNAddTwoStates(54, 55);
                  break;
               case 54:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddTwoStates(54, 55);
                  break;
               case 55:
                  if (curChar == 34 && kind > 125)
                     kind = 125;
                  break;
               case 56:
                  if ((0x7000000000000000L & l) != 0L && kind > 126)
                     kind = 126;
                  break;
               case 57:
                  if (curChar == 61 && kind > 126)
                     kind = 126;
                  break;
               case 58:
                  if (curChar == 62)
                     jjCheckNAdd(57);
                  break;
               case 59:
                  if (curChar == 47)
                     jjCheckNAddTwoStates(60, 61);
                  break;
               case 61:
                  if ((0x83ff4c1000000000L & l) != 0L)
                     jjCheckNAddTwoStates(61, 62);
                  break;
               case 62:
                  if (curChar == 47 && kind > 127)
                     kind = 127;
                  break;
               case 63:
                  if (curChar != 58)
                     break;
                  if (kind > 128)
                     kind = 128;
                  jjCheckNAdd(64);
                  break;
               case 64:
                  if ((0xafffc40000000000L & l) == 0L)
                     break;
                  if (kind > 128)
                     kind = 128;
                  jjCheckNAdd(64);
                  break;
               case 69:
                  if (curChar == 60)
                     jjCheckNAddTwoStates(70, 57);
                  break;
               case 70:
                  if (curChar == 62 && kind > 126)
                     kind = 126;
                  break;
               case 160:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 115)
                     kind = 115;
                  jjCheckNAddStates(0, 4);
                  break;
               case 161:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 115)
                     kind = 115;
                  jjCheckNAdd(161);
                  break;
               case 162:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 163;
                  break;
               case 163:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(164, 172);
                  break;
               case 164:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 165;
                  break;
               case 165:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(166, 170);
                  break;
               case 166:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 167;
                  break;
               case 167:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 117)
                     kind = 117;
                  jjstateSet[jjnewStateCnt++] = 168;
                  break;
               case 168:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 117)
                     kind = 117;
                  jjstateSet[jjnewStateCnt++] = 169;
                  break;
               case 169:
                  if ((0x3ff000000000000L & l) != 0L && kind > 117)
                     kind = 117;
                  break;
               case 170:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(171, 166);
                  break;
               case 171:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAdd(166);
                  break;
               case 172:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(173, 164);
                  break;
               case 173:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAdd(164);
                  break;
               case 174:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(175, 162);
                  break;
               case 175:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAdd(162);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 30:
                  if ((0x7fffffe17fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(61, 62);
                  else if (curChar == 94)
                     jjCheckNAdd(61);
                  break;
               case 2:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 120)
                        kind = 120;
                     jjCheckNAdd(38);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 120)
                        kind = 120;
                     jjCheckNAddTwoStates(37, 38);
                  }
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 67:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 120)
                        kind = 120;
                     jjCheckNAdd(38);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 120)
                        kind = 120;
                     jjCheckNAddTwoStates(37, 38);
                  }
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 66;
                  break;
               case 176:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 120)
                        kind = 120;
                     jjCheckNAdd(38);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 120)
                        kind = 120;
                     jjCheckNAddTwoStates(37, 38);
                  }
                  break;
               case 76:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 120)
                        kind = 120;
                     jjCheckNAdd(38);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 120)
                        kind = 120;
                     jjCheckNAddTwoStates(37, 38);
                  }
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 75;
                  break;
               case 19:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 120)
                        kind = 120;
                     jjCheckNAdd(38);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 120)
                        kind = 120;
                     jjCheckNAddTwoStates(37, 38);
                  }
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 86:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 120)
                        kind = 120;
                     jjCheckNAdd(38);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 120)
                        kind = 120;
                     jjCheckNAddTwoStates(37, 38);
                  }
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 154;
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 144;
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 136;
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 122;
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 113;
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 102;
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 85;
                  break;
               case 11:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 120)
                        kind = 120;
                     jjCheckNAdd(38);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 120)
                        kind = 120;
                     jjCheckNAddTwoStates(37, 38);
                  }
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 3:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 120)
                        kind = 120;
                     jjCheckNAddTwoStates(37, 38);
                  }
                  else if (curChar == 91)
                     jjstateSet[jjnewStateCnt++] = 44;
                  if ((0x8000000080000L & l) != 0L)
                     jjAddStates(12, 19);
                  else if ((0x40000000400L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 67;
                  else if ((0x80000000800000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 19;
                  else if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 14;
                  else if ((0x10000000100L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 7;
                  else if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 77:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 120)
                        kind = 120;
                     jjCheckNAdd(38);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 120)
                        kind = 120;
                     jjCheckNAddTwoStates(37, 38);
                  }
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 158;
                  else if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 76;
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 148;
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 140;
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 126;
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 117;
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 106;
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 89;
                  break;
               case 12:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 120)
                        kind = 120;
                     jjCheckNAdd(38);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 120)
                        kind = 120;
                     jjCheckNAddTwoStates(37, 38);
                  }
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 7:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 120)
                        kind = 120;
                     jjCheckNAdd(38);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 120)
                        kind = 120;
                     jjCheckNAddTwoStates(37, 38);
                  }
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 83:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 120)
                        kind = 120;
                     jjCheckNAdd(38);
                  }
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 151;
                  else if ((0x20000000200L & l) != 0L)
                     jjCheckNAdd(119);
                  else if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 110;
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 133;
                  else if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 99;
                  if ((0x800000008000L & l) != 0L)
                     jjCheckNAdd(119);
                  else if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 82;
                  break;
               case 13:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 120)
                        kind = 120;
                     jjCheckNAdd(38);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 120)
                        kind = 120;
                     jjCheckNAddTwoStates(37, 38);
                  }
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 85:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 120)
                        kind = 120;
                     jjCheckNAdd(38);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 120)
                        kind = 120;
                     jjCheckNAddTwoStates(37, 38);
                  }
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 153;
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 143;
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 135;
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 121;
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 112;
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 101;
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 84;
                  break;
               case 84:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 120)
                        kind = 120;
                     jjCheckNAdd(38);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 120)
                        kind = 120;
                     jjCheckNAddTwoStates(37, 38);
                  }
                  else if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 152;
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 142;
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 134;
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 120;
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 111;
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 100;
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 83;
                  break;
               case 0:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 120)
                        kind = 120;
                     jjCheckNAdd(38);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 120)
                        kind = 120;
                     jjCheckNAddTwoStates(37, 38);
                  }
                  if ((0x200000002000000L & l) != 0L)
                  {
                     if (kind > 22)
                        kind = 22;
                     jjstateSet[jjnewStateCnt++] = 1;
                  }
                  break;
               case 88:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 120)
                        kind = 120;
                     jjCheckNAdd(38);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 120)
                        kind = 120;
                     jjCheckNAddTwoStates(37, 38);
                  }
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 156;
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 146;
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 138;
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 124;
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 115;
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 104;
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 87;
                  break;
               case 87:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 120)
                        kind = 120;
                     jjCheckNAdd(38);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 120)
                        kind = 120;
                     jjCheckNAddTwoStates(37, 38);
                  }
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 155;
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 145;
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 137;
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 123;
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 114;
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 103;
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 86;
                  break;
               case 89:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 120)
                        kind = 120;
                     jjCheckNAdd(38);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 120)
                        kind = 120;
                     jjCheckNAddTwoStates(37, 38);
                  }
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 157;
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 147;
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 139;
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 125;
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 116;
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 105;
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 88;
                  break;
               case 14:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 120)
                        kind = 120;
                     jjCheckNAdd(38);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 120)
                        kind = 120;
                     jjCheckNAddTwoStates(37, 38);
                  }
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 1:
                  if ((0x8000000080000L & l) != 0L && kind > 22)
                     kind = 22;
                  break;
               case 4:
                  if ((0x4000000040000L & l) == 0L)
                     break;
                  if (kind > 37)
                     kind = 37;
                  jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 5:
                  if ((0x8000000080000L & l) != 0L && kind > 37)
                     kind = 37;
                  break;
               case 6:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 8:
                  if ((0x10000000100L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 9:
                  if ((0x2000000020L & l) == 0L)
                     break;
                  if (kind > 54)
                     kind = 54;
                  jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 10:
                  if ((0x8000000080000L & l) != 0L && kind > 54)
                     kind = 54;
                  break;
               case 15:
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 16:
                  if ((0x80000000800L & l) == 0L)
                     break;
                  if (kind > 100)
                     kind = 100;
                  jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 17:
                  if ((0x8000000080000L & l) != 0L && kind > 100)
                     kind = 100;
                  break;
               case 18:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 20:
                  if ((0x80000000800000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 28:
                  if (kind > 118)
                     kind = 118;
                  jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 31:
                  jjCheckNAddTwoStates(31, 32);
                  break;
               case 33:
               case 34:
                  jjCheckNAddTwoStates(34, 32);
                  break;
               case 37:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 120)
                     kind = 120;
                  jjCheckNAddTwoStates(37, 38);
                  break;
               case 38:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 120)
                     kind = 120;
                  jjCheckNAdd(38);
                  break;
               case 40:
                  jjCheckNAddTwoStates(40, 41);
                  break;
               case 43:
                  jjCheckNAddTwoStates(43, 41);
                  break;
               case 44:
                  if (curChar == 91)
                     jjCheckNAddTwoStates(45, 51);
                  break;
               case 45:
                  if ((0xffffffffd7ffffffL & l) != 0L)
                     jjCheckNAddTwoStates(45, 51);
                  break;
               case 46:
                  if (curChar != 93)
                     break;
                  if (kind > 124)
                     kind = 124;
                  jjstateSet[jjnewStateCnt++] = 50;
                  break;
               case 47:
                  if (curChar == 91)
                     jjCheckNAddTwoStates(48, 49);
                  break;
               case 48:
                  if ((0xffffffffd7ffffffL & l) != 0L)
                     jjCheckNAddTwoStates(48, 49);
                  break;
               case 49:
               case 51:
                  if (curChar == 93)
                     jjCheckNAdd(46);
                  break;
               case 50:
                  if (curChar == 91)
                     jjstateSet[jjnewStateCnt++] = 47;
                  break;
               case 52:
                  if (curChar == 91)
                     jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 54:
                  jjAddStates(20, 21);
                  break;
               case 60:
                  if (curChar == 94)
                     jjCheckNAdd(61);
                  break;
               case 61:
                  if ((0x7fffffe17fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(61, 62);
                  break;
               case 64:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 128)
                     kind = 128;
                  jjstateSet[jjnewStateCnt++] = 64;
                  break;
               case 65:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 63;
                  break;
               case 66:
                  if ((0x400000004L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 65;
                  break;
               case 68:
                  if ((0x40000000400L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 67;
                  break;
               case 71:
                  if ((0x8000000080000L & l) != 0L)
                     jjAddStates(12, 19);
                  break;
               case 72:
                  if ((0x1000000010L & l) == 0L)
                     break;
                  if (kind > 75)
                     kind = 75;
                  jjstateSet[jjnewStateCnt++] = 73;
                  break;
               case 73:
                  if ((0x8000000080000L & l) != 0L && kind > 75)
                     kind = 75;
                  break;
               case 74:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 72;
                  break;
               case 75:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 74;
                  break;
               case 78:
                  if ((0x2000000020L & l) != 0L && kind > 108)
                     kind = 108;
                  break;
               case 79:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 78;
                  break;
               case 80:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 79;
                  break;
               case 81:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 80;
                  break;
               case 82:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 81;
                  break;
               case 90:
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 89;
                  break;
               case 91:
                  if ((0x8000000080000L & l) != 0L && kind > 108)
                     kind = 108;
                  break;
               case 92:
               case 108:
                  if ((0x10000000100000L & l) != 0L)
                     jjCheckNAdd(91);
                  break;
               case 93:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 92;
                  break;
               case 94:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 93;
                  break;
               case 95:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 94;
                  break;
               case 96:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 95;
                  break;
               case 97:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 96;
                  break;
               case 98:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 97;
                  break;
               case 99:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 98;
                  break;
               case 100:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 99;
                  break;
               case 101:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 100;
                  break;
               case 102:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 101;
                  break;
               case 103:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 102;
                  break;
               case 104:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 103;
                  break;
               case 105:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 104;
                  break;
               case 106:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 105;
                  break;
               case 107:
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 106;
                  break;
               case 109:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 108;
                  break;
               case 110:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 109;
                  break;
               case 111:
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 110;
                  break;
               case 112:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 111;
                  break;
               case 113:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 112;
                  break;
               case 114:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 113;
                  break;
               case 115:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 114;
                  break;
               case 116:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 115;
                  break;
               case 117:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 116;
                  break;
               case 118:
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 117;
                  break;
               case 119:
                  if ((0x400000004000L & l) != 0L && kind > 108)
                     kind = 108;
                  break;
               case 120:
                  if ((0x800000008000L & l) != 0L)
                     jjCheckNAdd(119);
                  break;
               case 121:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 120;
                  break;
               case 122:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 121;
                  break;
               case 123:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 122;
                  break;
               case 124:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 123;
                  break;
               case 125:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 124;
                  break;
               case 126:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 125;
                  break;
               case 127:
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 126;
                  break;
               case 128:
                  if ((0x1000000010000L & l) != 0L)
                     jjCheckNAdd(91);
                  break;
               case 129:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 128;
                  break;
               case 130:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 129;
                  break;
               case 131:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 130;
                  break;
               case 132:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 131;
                  break;
               case 133:
                  if ((0x40000000400000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 132;
                  break;
               case 134:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 133;
                  break;
               case 135:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 134;
                  break;
               case 136:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 135;
                  break;
               case 137:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 136;
                  break;
               case 138:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 137;
                  break;
               case 139:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 138;
                  break;
               case 140:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 139;
                  break;
               case 141:
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 140;
                  break;
               case 142:
                  if ((0x20000000200L & l) != 0L)
                     jjCheckNAdd(119);
                  break;
               case 143:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 142;
                  break;
               case 144:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 143;
                  break;
               case 145:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 144;
                  break;
               case 146:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 145;
                  break;
               case 147:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 146;
                  break;
               case 148:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 147;
                  break;
               case 149:
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 148;
                  break;
               case 150:
                  if ((0x10000000100000L & l) != 0L && kind > 108)
                     kind = 108;
                  break;
               case 151:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 150;
                  break;
               case 152:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 151;
                  break;
               case 153:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 152;
                  break;
               case 154:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 153;
                  break;
               case 155:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 154;
                  break;
               case 156:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 155;
                  break;
               case 157:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 156;
                  break;
               case 158:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 157;
                  break;
               case 159:
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 158;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 28:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 118)
                     kind = 118;
                  jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 31:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(31, 32);
                  break;
               case 33:
               case 34:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(34, 32);
                  break;
               case 40:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(40, 41);
                  break;
               case 43:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(43, 41);
                  break;
               case 45:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(8, 9);
                  break;
               case 48:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(10, 11);
                  break;
               case 54:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(20, 21);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 176 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   22, 23, 161, 162, 174, 32, 33, 35, 45, 51, 48, 49, 77, 90, 107, 118, 
   127, 141, 149, 159, 54, 55, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, "\73", "\50", "\54", "\51", "\133", "\135", "\55", "\72", 
"\52", "\53", null, null, null, null, null, "\57", "\136", };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0xffffffffffffffe1L, 0xf92fffffffffffffL, 0x3ffffL, 
};
static final long[] jjtoSkip = {
   0x1eL, 0xc0000000000000L, 0x0L, 
};
static final long[] jjtoSpecial = {
   0x0L, 0xc0000000000000L, 0x0L, 
};
static protected SimpleCharStream input_stream;
static private final int[] jjrounds = new int[176];
static private final int[] jjstateSet = new int[352];
static protected char curChar;
/** Constructor. */
public NewSQLParserTokenManager(SimpleCharStream stream){
   if (input_stream != null)
      throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);
   input_stream = stream;
}

/** Constructor. */
public NewSQLParserTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
static private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 176; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
static public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

static protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

static int curLexState = 0;
static int defaultLexState = 0;
static int jjnewStateCnt;
static int jjround;
static int jjmatchedPos;
static int jjmatchedKind;

/** Get the next Token. */
public static Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         matchedToken.specialToken = specialToken;
         return matchedToken;
      }
      else
      {
         if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
         {
            matchedToken = jjFillToken();
            if (specialToken == null)
               specialToken = matchedToken;
            else
            {
               matchedToken.specialToken = specialToken;
               specialToken = (specialToken.next = matchedToken);
            }
         }
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

static private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
static private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
static private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

static private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
