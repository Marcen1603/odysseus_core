/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. NewSQLParser.jj */
/*@egen*/options{  IGNORE_CASE = true;                                                                                                                                                                                                                                                                                                                       }PARSER_BEGIN(NewSQLParser)package de.uniol.inf.is.odysseus.parser.cql.parser;import java.util.ArrayList;import de.uniol.inf.is.odysseus.core.metadata.PointInTime;import de.uniol.inf.is.odysseus.core.metadata.TimeInterval;import de.uniol.inf.is.odysseus.core.server.physicaloperator.aggregate.AggregateFunction;import de.uniol.inf.is.odysseus.core.server.logicaloperator.WindowType;@ SuppressWarnings("all") public class NewSQLParser/*@bgen(jjtree)*/implements NewSQLParserTreeConstants/*@egen*/{/*@bgen(jjtree)*/
  protected static JJTNewSQLParserState jjtree = new JJTNewSQLParserState();

/*@egen*/}PARSER_END(NewSQLParser)SKIP :{  " "| "\r"| "\n"| "\t"}TOKEN :{  < K_ALL : "ALL" >| < K_ADD : "ADD" >| < K_ADVANCE : "ADVANCE" >| < K_ALTER : "ALTER" >| < K_ALWAYS : "ALWAYS" >| < K_AND : "AND" >| < K_ANY : "ANY" >| < K_AS : "AS" >| < K_ASSIGN : "ASSIGN" >| < K_AT : "AT" >| < K_ATTACH : "ATTACH" >| < K_ATTRIBUTE : "ATTRIBUTE" >| < K_AUTO_RECONNECT : "AUTORECONNECT" >| < K_AVG : "AVG" >| < K_BROKER : "BROKER" >| < K_BY : "BY" >| < K_CHANNEL : "CHANNEL" >| < K_CHECK : "CHECK" >| < K_CONTEXT : "CONTEXT" >| < K_COMMENT : "COMMENT" >| < K_CONNECTION : "CONNECTION" >| < K_COUNT : "COUNT" >| < K_CREATE : "CREATE" >| < K_DATABASE : "DATABASE" >| < K_DATAHANDLER : "DATAHANDLER" >| < K_DAY : "DAY" ("S")? >| < K_DEFAULT : "DEFAULT" >| < K_DELETE : "DELETE" >| < K_DISTINCT : "DISTINCT" >| < K_DETACH : "DETACH" >| < K_DROP : "DROP" >| < K_EACH : "EACH" >| < K_EXISTS : "EXISTS" >| < K_FILE : "FILE" >| < K_FROM : "FROM" >| < K_GRANT : "GRANT" >| < K_GROUP : "GROUP" >| < K_HAVING : "HAVING" >| < K_HOUR : "HOUR" ("S")? >| < K_IDENTIFIED : "IDENTIFIED" >| < K_IF : "IF" >| < K_IN : "IN" >| < K_INFTY : "INFTY" >| < K_INSERT : "INSERT" >| < K_INTERSECTION : "INTERSECT" >| < K_INTO : "INTO" >| < K_IS : "IS" >| < K_JDBC : "JDBC" >| < K_JOIN : "JOIN" >| < K_KILL : "KILL" >| < K_KEY : "KEY" >| < K_LAZY_CONNECTION_CHECK : "LAZY_CONNECTION_CHECK" >| < K_LIKE : "LIKE" >| < K_LINEAR_STORE : "LINEAR_STORE" >| < K_LIST : "LIST" >| < K_LOGARITHMIC_STORE : "LOGARITHMIC_STORE" >| < K_LOGIN_REQUIRED : "LOGIN_REQUIRED" >| < K_MATRIX : "MATRIX" >| < K_MAX : "MAX" >| < K_MAX_ADMISSION_COST_FACTOR : "MAX_ADMISSION_COST_FACTOR" >| < K_METADATA : "METADATA" >| < K_METRIC : "METRIC" >| < K_MILLISECOND : "MILLISECOND" ("S")? >| < K_MIN : "MIN" >| < K_MINUS : "MINUS" >| < K_MINUTE : "MINUTE" ("S")? >| < K_MULTI : "MULTI" >| < K_MV : "MV" >| < K_NATURAL : "NATURAL" >| < K_NO_LAZY_CONNECTION_CHECK : "NO_LAZY_CONNECTION_CHECK" >| < K_NOT : "NOT" >| < K_NULL : "NULL" >| < K_OF : "OF" >| < K_OFFSET : "OFFSET" >| < K_ON : "ON" >| < K_OPTIONS : "OPTIONS" >| < K_OR : "OR" >| < K_OUTPUT : "OUTPUT" >| < K_PARTITION : "PARTITION" >| < K_PASSWORD : "PASSWORD" >| < K_PENALTY : "PENALTY" >| < K_PRIORITY : "PRIORITY" >| < K_PROB : "PROB" >| < K_PROTOCOL : "PROTOCOL" >| < K_QUEUE : "QUEUE" >| < K_RANGE : "RANGE" >| < K_RECORD : "RECORD" >| < K_RELATION : "RELATION" >| < K_RELATIVE : "RELATIVE" >| < K_REMOVE : "REMOVE" >| < K_REVOKE : "REVOKE" >| < K_ROLE : "ROLE" >| < K_ROWS : "ROWS" >| < K_SCOPE : "SCOPE" >| < K_SECOND : "SECOND" ("S")? >| < K_SELECT : "SELECT" >| < K_SENSOR : "SENSOR" >| < K_SERVICE_LEVEL : "SERVICELEVEL" >| < K_SET : "SET" >| < K_SILAB : "SILAB" >| < K_SINGLE : "SINGLE" >| < K_SINK : "SINK" >| < K_SIZE : "SIZE" >| < K_SLA : "SLA" >| < K_SLIDE : "SLIDE" >| < K_SOCKET : "SOCKET" >| < K_STORE : "STORE" >| < K_STREAM : "STREAM" >| < K_SUM : "SUM" >| < K_TABLE : "TABLE" >| < K_TIME : "TIME" >| < K_TIME_SENSITIV : "TIMESENSITIV" >| < K_TIMEOUT : "TIMEOUT" >| < K_TO : "TO" >| < K_TRANSPORT : "TRANSPORT" >| < K_TRUNCATE : "TRUNCATE" >| < K_TUPLE : "TUPLE" >| < K_TYPE : "TYPE" >| < K_UNBOUNDED : "UNBOUNDED" >| < K_UNION : "UNION" >| < K_USE : "USE" >| < K_USER : "USER" >| < K_VALID : "VALID" >| < K_VIEW : "VIEW" >| < K_WEEK : "WEEK" ("S")? >| < K_WHERE : "WHERE" >| < K_WITH : "WITH" >| < K_WRAPPER : "WRAPPER" >}TOKEN : /* spatial token */{  < S_DISTANCE : "SPATIAL_DISTANCE" >| < S_COMPARE :    "SPATIAL_INSIDE"  | "SPATIAL_INTERSECTS"  | "SPATIAL_MEETS"  | "SPATIAL_ON"  | "SPATIAL_OVERLAPS"  | "SPATIAL_IN"  | "SPATIAL_OUT" >| < S_POINT : "SPATIAL_POINT" >| < S_LINE : "SPATIAL_LINE" >| < S_POLYGON : "SPATIAL_POLYGON" >| < S_MULTI_POINT : "SPATIAL_MULTI_POINT" >| < S_MULTI_LINE : "SPATIAL_MULTI_LINE" >| < S_MULTI_POLYGON : "SPATIAL_MULTI_POLYGON" >| < SPATIAL : "SPATIAL" >}TOKEN : /* Numeric Constants */{  //  <NUMBER:<FLOAT>  //  | <FLOAT>(["e", "E"](["-", "+"])?<FLOAT>)?>  //  | <#FLOAT:<INTEGER>  //  | <INTEGER>("."<INTEGER>)?  //  | "."<INTEGER>>  < FLOAT :    ("-")?    (      < INTEGER > "." < INTEGER >    | "." < INTEGER >    ) >| < INTEGER : (< DIGIT >)+ >| < #DIGIT : [ "0"-"9" ] >| < IPADDRESS : < DIGIT > (< DIGIT >)? (< DIGIT >)? "." < DIGIT > (< DIGIT >)? (< DIGIT >)? "." < DIGIT > (< DIGIT >)? (< DIGIT >)? "." < DIGIT > (< DIGIT >)? (< DIGIT >)? >}SPECIAL_TOKEN :{  < LINE_COMMENT : "--" (~[ "\r", "\n" ])* >| < MULTI_LINE_COMMENT :    "/*" (~[ "*" ])* "*"    (      "*"    |      (        ~[ "*", "/" ] (~[ "*" ])* "*"      )    )*    "/" >}TOKEN :{  < JDBC_STRING :    "jdbc:"    (      (        < DIGIT >      | < LETTER >      | < SPECIAL_CHARS >      | "?"      | ";"      | "/"      | "="      | "@"      )*    )* >| < IDENTIFIER :    (< LETTER >)+    (      < DIGIT >    | < LETTER >    | < SPECIAL_CHARS >    )* >| < #LETTER : [ "a"-"z", "A"-"Z" ] >| < #SPECIAL_CHARS :    ":"  | "_"  | "."  | "-"  | "*" >| < CHAR_LITERAL :    "'" (~[ "'" ])* "'"    (      "'" (~[ "'" ])* "'"    )* >| < SQL_STRING :    "[[" (~[ "[", "]" ])* "]]"    (      "[[" (~[ "[", "]" ])* "]]"    )* >| < QUOTED_IDENTIFIER : "\"" (~[ "\n", "\r", "\"" ])* "\"" >| < COMPARE_OPERATOR :    "="  | "<>"  | ">"  | "<"  | "<="  | ">=" >| < REGEXP :    "/" ("^")?    (      < LETTER >    | < DIGIT >    | "\\"    | "+"    | "."    | "*"    | "?"    | "$"    )+    "/" >}ASTStatement Statement() :{/*@bgen(jjtree) Statement */
  ASTStatement jjtn000 = new ASTStatement(JJTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Statement */
  try {
/*@egen*/  (    (      LOOKAHEAD(PriorizedStatement())      PriorizedStatement()    | LOOKAHEAD(2)      CreateStatement()    | LOOKAHEAD(2)      CreateSinkStatement()    | LOOKAHEAD(2)      CreateType()    | LOOKAHEAD(2)      DropStreamStatement()    | LOOKAHEAD(2)      DropViewStatement()    | LOOKAHEAD(2)      CreateViewStatement()    | LOOKAHEAD(2)      StreamToStatement()    | LOOKAHEAD(2)      CreateUserStatement()    | LOOKAHEAD(2)      CreateSLAStatement()    | LOOKAHEAD(2)      AssignSLAStatement()    | LOOKAHEAD(2)      CreateRoleStatement()    | LOOKAHEAD(2)      DropRoleStatement()    | LOOKAHEAD(2)      CreateDatabaseConnection()    | LOOKAHEAD(2)      DropDatabaseConnection()    | LOOKAHEAD(2)      AlterUserStatement()    | LOOKAHEAD(2)      DropUserStatement()    | LOOKAHEAD(2)      CreateSensor()    | LOOKAHEAD(2)      CreateBroker()    | LOOKAHEAD(BrokerSelectInto())      BrokerSelectInto()    | LOOKAHEAD(2)      CreateContextStore()    | LOOKAHEAD(2)      DropContextStore()    | LOOKAHEAD(2)      GrantRoleStatement()    | LOOKAHEAD(2)      GrantStatement()    | RevokeStatement()    )    [ ";" ]  )+  < EOF >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void PriorizedStatement() :{/*@bgen(jjtree) PriorizedStatement */
  ASTPriorizedStatement jjtn000 = new ASTPriorizedStatement(JJTPRIORIZEDSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) PriorizedStatement */
  try {
/*@egen*/  ComplexSelectStatement() [ Priority() ] [ Metric() ]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void StreamToStatement() :{/*@bgen(jjtree) StreamToStatement */
  ASTStreamToStatement jjtn000 = new ASTStreamToStatement(JJTSTREAMTOSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) StreamToStatement */
  try {
/*@egen*/  < K_STREAM > < K_TO > Identifier() SelectStatement()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void ComplexSelectStatement() :{/*@bgen(jjtree) ComplexSelectStatement */
  ASTComplexSelectStatement jjtn000 = new ASTComplexSelectStatement(JJTCOMPLEXSELECTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) ComplexSelectStatement */
  try {
/*@egen*/  SelectStatement() [ SetOperator() ComplexSelectStatement() ]| "(" ComplexSelectStatement() ")"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void SelectStatement() :{/*@bgen(jjtree) SelectStatement */
  ASTSelectStatement jjtn000 = new ASTSelectStatement(JJTSELECTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) SelectStatement */
  try {
/*@egen*/  SelectClause() FromClause() [ WhereClause() ] [ GroupByClause() ] [ HavingClause() ] [ ElementPriorities() ]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void CreateType() :{/*@bgen(jjtree) CreateType */
  ASTCreateType jjtn000 = new ASTCreateType(JJTCREATETYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) CreateType */
  try {
/*@egen*/  (    < K_CREATE >  | < K_ATTACH >  | < K_ADD >  )  < K_TYPE > Identifier() "(" AttributeDefinitions() ")"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void CreateContextStore() :{/*@bgen(jjtree) CreateContextStore */
  ASTCreateContextStore jjtn000 = new ASTCreateContextStore(JJTCREATECONTEXTSTORE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) CreateContextStore */
  try {
/*@egen*/  < K_CREATE > < K_CONTEXT > < K_STORE > Identifier() "(" AttributeDefinitions() ")" < K_AS > ContextStoreType()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void DropContextStore() :{/*@bgen(jjtree) DropContextStore */
  ASTDropContextStore jjtn000 = new ASTDropContextStore(JJTDROPCONTEXTSTORE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) DropContextStore */
  try {
/*@egen*/  < K_DROP > < K_CONTEXT > < K_STORE > Identifier() [ IfExists() ]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void ContextStoreType() :{/*@bgen(jjtree) ContextStoreType */
  ASTContextStoreType jjtn000 = new ASTContextStoreType(JJTCONTEXTSTORETYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Token t;}{/*@bgen(jjtree) ContextStoreType */
  try {
/*@egen*/  (    t = < K_SINGLE >  | t = < K_MULTI > < K_SIZE > Integer()  )/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    jjtn000.jjtSetValue(t.image);  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void CreateStatement() :{/*@bgen(jjtree) CreateStatement */
  ASTCreateStatement jjtn000 = new ASTCreateStatement(JJTCREATESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) CreateStatement */
  try {
/*@egen*/  (    < K_CREATE >  | < K_ATTACH >  | < K_ADD >  )  < K_STREAM > Identifier() "(" AttributeDefinitions() ")" [ IfNotExists() ]  [    (      < K_FROM >    | < K_WITH >    )    "("    (      LOOKAHEAD(2)      TimedTuples()    | PriorizedStatement()    )    ")"  | CreateFromDatabase()  | Socket()  | Channel()  | FileSource()  | Silab()  | AccessSource()  ]  [ LoginPassword() ]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void LoginPassword() :{/*@bgen(jjtree) LoginPassword */
  ASTLoginPassword jjtn000 = new ASTLoginPassword(JJTLOGINPASSWORD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) LoginPassword */
  try {
/*@egen*/  Identifier() Identifier()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void CreateSinkStatement() :{/*@bgen(jjtree) CreateSinkStatement */
  ASTCreateSinkStatement jjtn000 = new ASTCreateSinkStatement(JJTCREATESINKSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) CreateSinkStatement */
  try {
/*@egen*/  < K_CREATE > < K_SINK > Identifier()     ( 	     SpecificSink()  | SenderSink()	)/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/     }void SpecificSink() :{/*@bgen(jjtree) SpecificSink */
  ASTSpecificSink jjtn000 = new ASTSpecificSink(JJTSPECIFICSINK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) SpecificSink */
  try {
/*@egen*/  < K_AS >    (    	SocketSink()  		| DatabaseSink()  		| FileSink()  	)/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/  	}void AccessSource() :{/*@bgen(jjtree) AccessSource */
  ASTAccessSource jjtn000 = new ASTAccessSource(JJTACCESSSOURCE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) AccessSource */
  try {
/*@egen*/    < K_WRAPPER > QuotedIdentifier() < K_PROTOCOL > QuotedIdentifier() < K_TRANSPORT > QuotedIdentifier() < K_DATAHANDLER > QuotedIdentifier() [ Options() ]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/  }void SenderSink() :{/*@bgen(jjtree) SenderSink */
  ASTSenderSink jjtn000 = new ASTSenderSink(JJTSENDERSINK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) SenderSink */
  try {
/*@egen*/  "(" AttributeDefinitions() ")"    < K_WRAPPER > QuotedIdentifier() < K_PROTOCOL > QuotedIdentifier() < K_TRANSPORT > QuotedIdentifier() < K_DATAHANDLER > QuotedIdentifier() [ Options() ]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/  }void Options():{/*@bgen(jjtree) Options */
  ASTOptions jjtn000 = new ASTOptions(JJTOPTIONS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  }{/*@bgen(jjtree) Options */
  try {
/*@egen*/  < K_OPTIONS > "(" Option()	(    	","  Option()  	)*  	")"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/  }void Option():{/*@bgen(jjtree) Option */
  ASTOption jjtn000 = new ASTOption(JJTOPTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  }{/*@bgen(jjtree) Option */
  try {
/*@egen*/  QuotedIdentifier() QuotedIdentifier()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/  }void SocketSink() :{/*@bgen(jjtree) SocketSink */
  ASTSocketSink jjtn000 = new ASTSocketSink(JJTSOCKETSINK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) SocketSink */
  try {
/*@egen*/  < K_SOCKET > < K_AT > Integer() < K_AS > Identifier() [ < K_LOGIN_REQUIRED > ]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void DatabaseSink() :{/*@bgen(jjtree) DatabaseSink */
  ASTDatabaseSink jjtn000 = new ASTDatabaseSink(JJTDATABASESINK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) DatabaseSink */
  try {
/*@egen*/  < K_DATABASE > Identifier() < K_TABLE > Identifier() [ < K_AND > DatabaseSinkOptions() ]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void DatabaseSinkOptions() :{/*@bgen(jjtree) DatabaseSinkOptions */
  ASTDatabaseSinkOptions jjtn000 = new ASTDatabaseSinkOptions(JJTDATABASESINKOPTIONS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Token value;}{/*@bgen(jjtree) DatabaseSinkOptions */
  try {
/*@egen*/  value = < K_DROP >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    jjtn000.jjtSetValue(value.image);  }| value = < K_TRUNCATE >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    jjtn000.jjtSetValue(value.image);  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void FileSink() :{/*@bgen(jjtree) FileSink */
  ASTFileSink jjtn000 = new ASTFileSink(JJTFILESINK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Token t;}{/*@bgen(jjtree) FileSink */
  try {
/*@egen*/  < K_FILE > < K_TO > t = < CHAR_LITERAL >  [    < K_AS > Identifier() [ Identifier() ] [ Integer() ]  ]/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    jjtn000.setFilename(t.image.substring(1, t.image.length() - 1));  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void CreateDatabaseConnection() :{/*@bgen(jjtree) CreateDatabaseConnection */
  ASTCreateDatabaseConnection jjtn000 = new ASTCreateDatabaseConnection(JJTCREATEDATABASECONNECTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) CreateDatabaseConnection */
  try {
/*@egen*/  < K_CREATE > < K_DATABASE > < K_CONNECTION > Identifier()  (    (      < K_AS > Identifier() < K_TO > Identifier() [ < K_AT > Host() ":" Integer() ]    )  |    (      < K_JDBC > JDBCConnection()    )  )  [ < K_WITH > < K_USER > Identifier() < K_PASSWORD > Identifier() ] [ DatabaseConnectionCheck() ]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void DropDatabaseConnection() :{/*@bgen(jjtree) DropDatabaseConnection */
  ASTDropDatabaseConnection jjtn000 = new ASTDropDatabaseConnection(JJTDROPDATABASECONNECTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) DropDatabaseConnection */
  try {
/*@egen*/  < K_DROP > < K_DATABASE > < K_CONNECTION > Identifier()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void DatabaseConnectionCheck() :{/*@bgen(jjtree) DatabaseConnectionCheck */
  ASTDatabaseConnectionCheck jjtn000 = new ASTDatabaseConnectionCheck(JJTDATABASECONNECTIONCHECK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) DatabaseConnectionCheck */
  try {
/*@egen*/  < K_NO_LAZY_CONNECTION_CHECK >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void JDBCConnection() :{/*@bgen(jjtree) JDBCConnection */
  ASTJDBCConnection jjtn000 = new ASTJDBCConnection(JJTJDBCCONNECTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Token value;}{/*@bgen(jjtree) JDBCConnection */
  try {
/*@egen*/  value = < JDBC_STRING >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    jjtn000.jjtSetValue(value.image);  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void CreateFromDatabase() :{/*@bgen(jjtree) CreateFromDatabase */
  ASTCreateFromDatabase jjtn000 = new ASTCreateFromDatabase(JJTCREATEFROMDATABASE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) CreateFromDatabase */
  try {
/*@egen*/  < K_DATABASE > Identifier() < K_TABLE > Identifier() [ < K_EACH > Time() ]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void DatabaseTimeSensitiv() :{/*@bgen(jjtree) DatabaseTimeSensitiv */
  ASTDatabaseTimeSensitiv jjtn000 = new ASTDatabaseTimeSensitiv(JJTDATABASETIMESENSITIV);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) DatabaseTimeSensitiv */
  try {
/*@egen*/  < K_TIME_SENSITIV >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void CreateViewStatement() :{/*@bgen(jjtree) CreateViewStatement */
  ASTCreateViewStatement jjtn000 = new ASTCreateViewStatement(JJTCREATEVIEWSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) CreateViewStatement */
  try {
/*@egen*/  < K_CREATE > < K_VIEW > Identifier() < K_FROM > "(" PriorizedStatement() ")"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void CreateSensor() :{/*@bgen(jjtree) CreateSensor */
  ASTCreateSensor jjtn000 = new ASTCreateSensor(JJTCREATESENSOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) CreateSensor */
  try {
/*@egen*/  < K_CREATE > < K_SENSOR > Identifier() "(" ORSchemaDefinition() "," Identifier() ")" < K_FROM > Channel()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void ORSchemaDefinition() :{/*@bgen(jjtree) ORSchemaDefinition */
  ASTORSchemaDefinition jjtn000 = new ASTORSchemaDefinition(JJTORSCHEMADEFINITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) ORSchemaDefinition */
  try {
/*@egen*/  AttrDefinition()| RecordDefinition()| ListDefinition()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void RecordDefinition() :{/*@bgen(jjtree) RecordDefinition */
  ASTRecordDefinition jjtn000 = new ASTRecordDefinition(JJTRECORDDEFINITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) RecordDefinition */
  try {
/*@egen*/  < K_RECORD > "(" Identifier() ","  (    RecordEntryDefinition()  )+  ")"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void RecordEntryDefinition() :{/*@bgen(jjtree) RecordEntryDefinition */
  ASTRecordEntryDefinition jjtn000 = new ASTRecordEntryDefinition(JJTRECORDENTRYDEFINITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) RecordEntryDefinition */
  try {
/*@egen*/  AttrDefinition()| RecordDefinition()| ListDefinition()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void ListDefinition() :{/*@bgen(jjtree) ListDefinition */
  ASTListDefinition jjtn000 = new ASTListDefinition(JJTLISTDEFINITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) ListDefinition */
  try {
/*@egen*/  < K_LIST > "(" Identifier() ","  (    (      AttrDefinition()    )+  |    (      RecordDefinition()    )+  |    (      ListDefinition()    )+  )  ")"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void AttrDefinition() :{/*@bgen(jjtree) AttrDefinition */
  ASTAttrDefinition jjtn000 = new ASTAttrDefinition(JJTATTRDEFINITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) AttrDefinition */
  try {
/*@egen*/  < K_ATTRIBUTE > "(" Identifier() "," AttributeType() ")"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void AttributeDefinitions() :{/*@bgen(jjtree) AttributeDefinitions */
  ASTAttributeDefinitions jjtn000 = new ASTAttributeDefinitions(JJTATTRIBUTEDEFINITIONS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) AttributeDefinitions */
  try {
/*@egen*/  AttributeDefinition()  (    "," AttributeDefinition()  )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void AttributeDefinition() :{/*@bgen(jjtree) AttributeDefinition */
  ASTAttributeDefinition jjtn000 = new ASTAttributeDefinition(JJTATTRIBUTEDEFINITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) AttributeDefinition */
  try {
/*@egen*/  Identifier() AttributeType()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void TimedTuples() :{/*@bgen(jjtree) TimedTuples */
  ASTTimedTuples jjtn000 = new ASTTimedTuples(JJTTIMEDTUPLES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) TimedTuples */
  try {
/*@egen*/  TimedTuple()  (    "," TimedTuple()  )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void TimedTuple() :{/*@bgen(jjtree) TimedTuple */
  ASTTimedTuple jjtn000 = new ASTTimedTuple(JJTTIMEDTUPLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) TimedTuple */
  try {
/*@egen*/  "(" TimeInterval() "," SimpleTuple() ")"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void TimeInterval() :{/*@bgen(jjtree) TimeInterval */
  ASTTimeInterval jjtn000 = new ASTTimeInterval(JJTTIMEINTERVAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Token t;  Token t2 = null;}{/*@bgen(jjtree) TimeInterval */
  try {
/*@egen*/  "[" t = < INTEGER >  [    ","    (      t2 = < INTEGER >    | "-"    )  ]  ")"/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    if (t2 == null)    {      jjtn000.setInterval(new TimeInterval(new PointInTime(Long.parseLong(t.image)), PointInTime.getInfinityTime()));    }    else    {      jjtn000.setInterval(new TimeInterval(new PointInTime(Long.parseLong(t.image)), new PointInTime(Long.parseLong(t2.image))));    }  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void Socket() :{/*@bgen(jjtree) Socket */
  ASTSocket jjtn000 = new ASTSocket(JJTSOCKET);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Socket */
  try {
/*@egen*/  < K_SOCKET >  [    (      < K_TUPLE >      {        jjtn000.setTupleMode();      }    | < K_MV >      {        jjtn000.setMVMode();      }    )  ]  Host() [ ":" ] Integer()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void Silab() :{/*@bgen(jjtree) Silab */
  ASTSilab jjtn000 = new ASTSilab(JJTSILAB);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Silab */
  try {
/*@egen*/  < K_SILAB >  [    (      < K_TUPLE >      {        jjtn000.setTupleMode();      }    | < K_MV >      {        jjtn000.setMVMode();      }    )  ]  Host() [ ":" ] Integer()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void Channel() :{/*@bgen(jjtree) Channel */
  ASTChannel jjtn000 = new ASTChannel(JJTCHANNEL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Channel */
  try {
/*@egen*/  < K_CHANNEL > Host() [ ":" ] [ Integer() ] [ AutoReconnect() ]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void AutoReconnect() :{/*@bgen(jjtree) AutoReconnect */
  ASTAutoReconnect jjtn000 = new ASTAutoReconnect(JJTAUTORECONNECT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) AutoReconnect */
  try {
/*@egen*/  < K_AUTO_RECONNECT >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void Host() :{/*@bgen(jjtree) Host */
  ASTHost jjtn000 = new ASTHost(JJTHOST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Token value;}{/*@bgen(jjtree) Host */
  try {
/*@egen*/  value = < IPADDRESS >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    jjtn000.setValue(value.image);  }| value = < IDENTIFIER >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    jjtn000.setValue(value.image);  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void FileSource() :{/*@bgen(jjtree) FileSource */
  ASTFileSource jjtn000 = new ASTFileSource(JJTFILESOURCE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Token t;}{/*@bgen(jjtree) FileSource */
  try {
/*@egen*/  < K_FILE > t = < CHAR_LITERAL > [ < K_AS > Identifier() ]/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    jjtn000.setFilename(t.image.substring(1, t.image.length() - 1));  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void SimpleTuple() :{/*@bgen(jjtree) SimpleTuple */
  ASTSimpleTuple jjtn000 = new ASTSimpleTuple(JJTSIMPLETUPLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) SimpleTuple */
  try {
/*@egen*/  Value()  (    "," Value()  )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void Value()       :{}{  Number()| String()}void AttributeType() :{/*@bgen(jjtree) AttributeType */
  ASTAttributeType jjtn000 = new ASTAttributeType(JJTATTRIBUTETYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  ArrayList covList;  String format;  Token t = null;}{/*@bgen(jjtree) AttributeType */
  try {
/*@egen*/  /* This is for user defined types. */  t = < IDENTIFIER >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    jjtn000.setType(t.image);  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void MVCovarianceRow() :{/*@bgen(jjtree) MVCovarianceRow */
  ASTMVCovarianceRow jjtn000 = new ASTMVCovarianceRow(JJTMVCOVARIANCEROW);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) MVCovarianceRow */
  try {
/*@egen*/  "(" Expression()  (    "," Expression()  )*  ")"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}ArrayList CovarianceRow() :{/*@bgen(jjtree) CovarianceRow */
  ASTCovarianceRow jjtn000 = new ASTCovarianceRow(JJTCOVARIANCEROW);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  ArrayList covList = new ArrayList();  Token t;}{/*@bgen(jjtree) CovarianceRow */
  try {
/*@egen*/  (    t = < FLOAT >    {      covList.add(Double.parseDouble(t.image));    }  )+/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    return covList;  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}String DateFormat() :{/*@bgen(jjtree) DateFormat */
  ASTDateFormat jjtn000 = new ASTDateFormat(JJTDATEFORMAT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  String ret;  Token t;}{/*@bgen(jjtree) DateFormat */
  try {
/*@egen*/  // permitted: <Year Expression> <Time Expression>  // or <Year Expression>  // or <Time Expression>  t = < IDENTIFIER >  {    ret = t.image;  }  // evtl. noch ein Identifier f\u00ef\u00bf\u00bdr die Zeit  (t = < IDENTIFIER >  {    ret += " " + t.image;  }  )?/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    return ret;  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void SetOperator() :{/*@bgen(jjtree) SetOperator */
  ASTSetOperator jjtn000 = new ASTSetOperator(JJTSETOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Token t;}{/*@bgen(jjtree) SetOperator */
  try {
/*@egen*/  (    t = < K_UNION >  | t = < K_INTERSECTION >  | t = < K_MINUS >  )/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    jjtn000.setOperation(ASTSetOperator.SetOperation.valueOf(t.image));  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void SelectClause() :{/*@bgen(jjtree) SelectClause */
  ASTSelectClause jjtn000 = new ASTSelectClause(JJTSELECTCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) SelectClause */
  try {
/*@egen*/  < K_SELECT >  (    (      RenamedExpression()      (        "," RenamedExpression()      )*    )    (      (/*@bgen(jjtree) ProjectionMatrix */
        {
          ASTProjectionMatrix jjtn001 = new ASTProjectionMatrix(JJTPROJECTIONMATRIX);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        }
        try {
/*@egen*/        MatrixExpression()/*@bgen(jjtree)*/
        } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            throw (RuntimeException)jjte001;
          }
          if (jjte001 instanceof ParseException) {
            throw (ParseException)jjte001;
          }
          throw (Error)jjte001;
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
          }
        }
/*@egen*/                  )      (/*@bgen(jjtree) ProjectionVector */
        {
          ASTProjectionVector jjtn002 = new ASTProjectionVector(JJTPROJECTIONVECTOR);
          boolean jjtc002 = true;
          jjtree.openNodeScope(jjtn002);
        }
        try {
/*@egen*/        MatrixExpression()/*@bgen(jjtree)*/
        } catch (Throwable jjte002) {
          if (jjtc002) {
            jjtree.clearNodeScope(jjtn002);
            jjtc002 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte002 instanceof RuntimeException) {
            throw (RuntimeException)jjte002;
          }
          if (jjte002 instanceof ParseException) {
            throw (ParseException)jjte002;
          }
          throw (Error)jjte002;
        } finally {
          if (jjtc002) {
            jjtree.closeNodeScope(jjtn002, true);
          }
        }
/*@egen*/                  )?    )?  )/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void FromClause() :{/*@bgen(jjtree) FromClause */
  ASTFromClause jjtn000 = new ASTFromClause(JJTFROMCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) FromClause */
  try {
/*@egen*/  < K_FROM > Source()  (    "," Source()  )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void WhereClause() :{/*@bgen(jjtree) WhereClause */
  ASTWhereClause jjtn000 = new ASTWhereClause(JJTWHERECLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) WhereClause */
  try {
/*@egen*/  < K_WHERE > Predicate()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void GroupByClause() :{/*@bgen(jjtree) GroupByClause */
  ASTGroupByClause jjtn000 = new ASTGroupByClause(JJTGROUPBYCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) GroupByClause */
  try {
/*@egen*/  < K_GROUP > < K_BY > Identifier()  (    "," Identifier()  )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void HavingClause() :{/*@bgen(jjtree) HavingClause */
  ASTHavingClause jjtn000 = new ASTHavingClause(JJTHAVINGCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) HavingClause */
  try {
/*@egen*/  < K_HAVING > Predicate()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void SelectAll() :{/*@bgen(jjtree) SelectAll */
  ASTSelectAll jjtn000 = new ASTSelectAll(JJTSELECTALL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) SelectAll */
  try {
/*@egen*/  "*"/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void RenamedExpression() :{/*@bgen(jjtree) RenamedExpression */
  ASTRenamedExpression jjtn000 = new ASTRenamedExpression(JJTRENAMEDEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) RenamedExpression */
  try {
/*@egen*/  (    SelectAll()  )|  (    Expression() [ < K_AS >/*@bgen(jjtree) AS */
                            {
                              ASTAS jjtn001 = new ASTAS(JJTAS);
                              boolean jjtc001 = true;
                              jjtree.openNodeScope(jjtn001);
                            }
                            try {
/*@egen*/ Identifier()/*@bgen(jjtree)*/
                            } catch (Throwable jjte001) {
                              if (jjtc001) {
                                jjtree.clearNodeScope(jjtn001);
                                jjtc001 = false;
                              } else {
                                jjtree.popNode();
                              }
                              if (jjte001 instanceof RuntimeException) {
                                throw (RuntimeException)jjte001;
                              }
                              if (jjte001 instanceof ParseException) {
                                throw (ParseException)jjte001;
                              }
                              throw (Error)jjte001;
                            } finally {
                              if (jjtc001) {
                                jjtree.closeNodeScope(jjtn001, true);
                              }
                            }
/*@egen*/     ])/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void MatrixExpression() :{/*@bgen(jjtree) MatrixExpression */
  ASTMatrixExpression jjtn000 = new ASTMatrixExpression(JJTMATRIXEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  ArrayList rows = new ArrayList();  ArrayList curRow;}{/*@bgen(jjtree) MatrixExpression */
  try {
/*@egen*/  < K_MATRIX > "[" curRow = CovarianceRow()  {    rows.add(curRow);  }  (    ";" curRow = CovarianceRow()    {      rows.add(curRow);    }  )*  "]"/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    jjtn000.setMatrix(rows);  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void Predicate() :{/*@bgen(jjtree) Predicate */
  ASTPredicate jjtn000 = new ASTPredicate(JJTPREDICATE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Predicate */
  try {
/*@egen*/  LOOKAHEAD(OrPredicate())  OrPredicate()| LOOKAHEAD(AndPredicate())  AndPredicate()| NotPredicate()| SimplePredicate()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void SimplePredicate() :{/*@bgen(jjtree) SimplePredicate */
  ASTSimplePredicate jjtn000 = new ASTSimplePredicate(JJTSIMPLEPREDICATE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) SimplePredicate */
  try {
/*@egen*/  LOOKAHEAD("(" Predicate())  "(" Predicate() ")"| LOOKAHEAD(QuantificationPredicate())  QuantificationPredicate()| LOOKAHEAD(BasicPredicate())  BasicPredicate()| ProbabilityPredicate()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void BasicPredicate() :{/*@bgen(jjtree) BasicPredicate */
  ASTBasicPredicate jjtn000 = new ASTBasicPredicate(JJTBASICPREDICATE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) BasicPredicate */
  try {
/*@egen*/  Expression() CompareOperator() Expression()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void ProbabilityPredicate() :{/*@bgen(jjtree) ProbabilityPredicate */
  ASTProbabilityPredicate jjtn000 = new ASTProbabilityPredicate(JJTPROBABILITYPREDICATE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  ArrayList xLow = new ArrayList();  ArrayList xUp = new ArrayList();  Token intervalStart;  Token intervalEnd;  Token prob;  Token compOp;}{/*@bgen(jjtree) ProbabilityPredicate */
  try {
/*@egen*/  /* Expression of the form PROB((H*source1+b) - (A*source1+c), [x,y],....,[v,w], prob)*/  < K_PROB > "("  (    (      "(" MatrixExpression() "*" Identifier() "+" MatrixExpression() ")"      (        "-"        {          jjtn000.setCovOperandType(ASTProbabilityPredicate.OperandTypes.MINUS);        }      | "+"        {          jjtn000.setCovOperandType(ASTProbabilityPredicate.OperandTypes.PLUS);        }      )      "(" MatrixExpression() "*" Identifier() "+" MatrixExpression() ")"      {        jjtn000.setJoinPredicate(true);      }    )  |    (      MatrixExpression() "*" Identifier() "+" MatrixExpression()    )    {      jjtn000.setJoinPredicate(false);    }  )  "," "["  (    intervalStart = < FLOAT >    {      xLow.add(Double.parseDouble(intervalStart.image));    }  | intervalStart = "-" < K_INFTY >    {      xLow.add(Double.MIN_VALUE);    }  )  ","  (    intervalEnd = < FLOAT >    {      xUp.add(Double.parseDouble(intervalEnd.image));    }  | intervalEnd = < K_INFTY >    {      xUp.add(Double.MAX_VALUE);    }  )  "]"  (    "," "["    (      intervalStart = < FLOAT >      {        xLow.add(Double.parseDouble(intervalStart.image));      }    | intervalStart = "-" < K_INFTY >      {        xLow.add(Double.MIN_VALUE);      }    )    ","    (      intervalEnd = < FLOAT >      {        xUp.add(Double.parseDouble(intervalEnd.image));      }    | intervalEnd = < K_INFTY >      {        xUp.add(Double.MAX_VALUE);      }    )    "]"  )*  ";" compOp = < COMPARE_OPERATOR > prob = < FLOAT > ")"/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    jjtn000.setXLow(xLow);    jjtn000.setXUp(xUp);    jjtn000.setProb(Double.parseDouble(prob.image));    jjtn000.setCompareOperator(compOp.image);  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void Priority() :{/*@bgen(jjtree) Priority */
  ASTPriority jjtn000 = new ASTPriority(JJTPRIORITY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Token t;}{/*@bgen(jjtree) Priority */
  try {
/*@egen*/  < K_PRIORITY > t = < INTEGER >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    jjtn000.setPriority(Integer.parseInt(t.image));  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void OrPredicate() :{/*@bgen(jjtree) OrPredicate */
  ASTOrPredicate jjtn000 = new ASTOrPredicate(JJTORPREDICATE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) OrPredicate */
  try {
/*@egen*/  SimplePredicate() < K_OR > Predicate()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void AndPredicate() :{/*@bgen(jjtree) AndPredicate */
  ASTAndPredicate jjtn000 = new ASTAndPredicate(JJTANDPREDICATE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) AndPredicate */
  try {
/*@egen*/  SimplePredicate() < K_AND > Predicate()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void NotPredicate() :{/*@bgen(jjtree) NotPredicate */
  ASTNotPredicate jjtn000 = new ASTNotPredicate(JJTNOTPREDICATE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) NotPredicate */
  try {
/*@egen*/  < K_NOT > Predicate()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void QuantificationPredicate() :{/*@bgen(jjtree) QuantificationPredicate */
  ASTQuantificationPredicate jjtn000 = new ASTQuantificationPredicate(JJTQUANTIFICATIONPREDICATE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) QuantificationPredicate */
  try {
/*@egen*/  Exists()| LOOKAHEAD(AnyPredicate())  AnyPredicate()| LOOKAHEAD(AllPredicate())  AllPredicate()| InPredicate()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void AnyPredicate() :{/*@bgen(jjtree) AnyPredicate */
  ASTAnyPredicate jjtn000 = new ASTAnyPredicate(JJTANYPREDICATE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) AnyPredicate */
  try {
/*@egen*/  Tuple() CompareOperator() < K_ANY >  (    LOOKAHEAD(TupleSet())    TupleSet()  | "(" ComplexSelectStatement() ")"  )/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void AllPredicate() :{/*@bgen(jjtree) AllPredicate */
  ASTAllPredicate jjtn000 = new ASTAllPredicate(JJTALLPREDICATE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) AllPredicate */
  try {
/*@egen*/  Tuple() CompareOperator() < K_ALL >  (    LOOKAHEAD(TupleSet())    TupleSet()  | "(" ComplexSelectStatement() ")"  )/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void InPredicate() :{/*@bgen(jjtree) InPredicate */
  ASTInPredicate jjtn000 = new ASTInPredicate(JJTINPREDICATE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) InPredicate */
  try {
/*@egen*/  Tuple() < K_IN >  (    LOOKAHEAD(TupleSet())    TupleSet()  | "(" ComplexSelectStatement() ")"  )/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void Exists() :{/*@bgen(jjtree) Exists */
  ASTExists jjtn000 = new ASTExists(JJTEXISTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Exists */
  try {
/*@egen*/  < K_EXISTS > "(" ComplexSelectStatement() ")"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void ElementPriorities() :{/*@bgen(jjtree) ElementPriorities */
  ASTElementPriorities jjtn000 = new ASTElementPriorities(JJTELEMENTPRIORITIES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) ElementPriorities */
  try {
/*@egen*/  < K_SET > < K_PRIORITY > ElementPriority()  (    LOOKAHEAD("," ElementPriority())    "," ElementPriority()  )*  [ "," DefaultPriority() ]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void ElementPriority() :{/*@bgen(jjtree) ElementPriority */
  ASTElementPriority jjtn000 = new ASTElementPriority(JJTELEMENTPRIORITY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) ElementPriority */
  try {
/*@egen*/  Integer() < K_WHERE > Predicate()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void DefaultPriority() :{/*@bgen(jjtree) DefaultPriority */
  ASTDefaultPriority jjtn000 = new ASTDefaultPriority(JJTDEFAULTPRIORITY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) DefaultPriority */
  try {
/*@egen*/  Integer() < K_DEFAULT >/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void Tuple() :{/*@bgen(jjtree) Tuple */
  ASTTuple jjtn000 = new ASTTuple(JJTTUPLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Tuple */
  try {
/*@egen*/  Value()| Identifier()| "["  (    Value()  | Identifier()  )  (    ","    (      Value()    | Identifier()    )  )*  "]"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}Long Time() :{/*@bgen(jjtree) Time */
  ASTTime jjtn000 = new ASTTime(JJTTIME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Long value;}{/*@bgen(jjtree) Time */
  try {
/*@egen*/  value = Integer()  [    < K_MILLISECOND >  | < K_SECOND >    {      value *= 1000;    }  | < K_MINUTE >    {      value *= (60 * 1000);    }  | < K_HOUR >    {      value *= (60 * 60 * 1000);    }  | < K_DAY >    {      value *= (24 * 60 * 60 * 1000);    }  | < K_WEEK >    {      value *= (7 * 24 * 60 * 60 * 1000);    }  ]/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    jjtn000.jjtSetValue(value);    return value;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void TupleSet() :{/*@bgen(jjtree) TupleSet */
  ASTTupleSet jjtn000 = new ASTTupleSet(JJTTUPLESET);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) TupleSet */
  try {
/*@egen*/  "(" Tuple()  (    "," Tuple()  )*  ")"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void QuantificationOperator() :{/*@bgen(jjtree) QuantificationOperator */
  ASTQuantificationOperator jjtn000 = new ASTQuantificationOperator(JJTQUANTIFICATIONOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) QuantificationOperator */
  try {
/*@egen*/  < K_IN >| < K_ALL >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void Expression() :{/*@bgen(jjtree) Expression */
  ASTExpression jjtn000 = new ASTExpression(JJTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  String tOp;}{/*@bgen(jjtree) Expression */
  try {
/*@egen*/  LOOKAHEAD(SimpleToken() MathOperator())  SimpleToken() tOp = MathOperator()  {    jjtn000.setOperator(tOp);  }  Expression()| SimpleToken()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void SimpleToken() :{/*@bgen(jjtree) SimpleToken */
  ASTSimpleToken jjtn000 = new ASTSimpleToken(JJTSIMPLETOKEN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) SimpleToken */
  try {
/*@egen*/  Number()| String()| LOOKAHEAD(AggregateExpression())  AggregateExpression()| LOOKAHEAD(FunctionExpression())  FunctionExpression()| "(" Expression() ")"|  (    "-"    {      jjtn000.setMinus(true);    }  )?  Identifier()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/  //TODO DISTINCE Expression}void FunctionExpression() :{/*@bgen(jjtree) FunctionExpression */
  ASTFunctionExpression jjtn000 = new ASTFunctionExpression(JJTFUNCTIONEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) FunctionExpression */
  try {
/*@egen*//*@bgen(jjtree) FunctionName */
  {
    ASTFunctionName jjtn001 = new ASTFunctionName(JJTFUNCTIONNAME);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/  Identifier()/*@bgen(jjtree)*/
  } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      throw (RuntimeException)jjte001;
    }
    if (jjte001 instanceof ParseException) {
      throw (ParseException)jjte001;
    }
    throw (Error)jjte001;
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
  }
/*@egen*/               "("  [    (LOOKAHEAD(Predicate())    Predicate()  | Expression())  (    ","    (      LOOKAHEAD(Predicate())      Predicate()    | Expression()    )  )*]")"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void AggregateExpression() :{/*@bgen(jjtree) AggregateExpression */
  ASTAggregateExpression jjtn000 = new ASTAggregateExpression(JJTAGGREGATEEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) AggregateExpression */
  try {
/*@egen*/  AggregateFunction() "(" Identifier() ")"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void AggregateFunction() :{/*@bgen(jjtree) AggregateFunction */
  ASTAggregateFunction jjtn000 = new ASTAggregateFunction(JJTAGGREGATEFUNCTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Token t;}{/*@bgen(jjtree) AggregateFunction */
  try {
/*@egen*/  (    t = < K_AVG >  | t = < K_COUNT >  | t = < K_MAX >  | t = < K_MIN >  | t = < K_SUM >  )/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    jjtn000.setFunction(new AggregateFunction(t.image.toUpperCase()));  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}String MathOperator()       :{}{  "*"  {    return "*";  }| "+"  {    return "+";  }| "-"  {    return "-";  }| "/"  {    return "/";  }| "^"  {    return "^";  }}void DistinctExpression() :{/*@bgen(jjtree) DistinctExpression */
  ASTDistinctExpression jjtn000 = new ASTDistinctExpression(JJTDISTINCTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) DistinctExpression */
  try {
/*@egen*/  < K_DISTINCT > "(" Identifier() ")"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void Source()       :{}{  LOOKAHEAD(SimpleSource())  SimpleSource()| LOOKAHEAD(Subselect())  Subselect()| LOOKAHEAD(BrokerSource())  BrokerSource()}void SimpleSource() :{/*@bgen(jjtree) SimpleSource */
  ASTSimpleSource jjtn000 = new ASTSimpleSource(JJTSIMPLESOURCE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) SimpleSource */
  try {
/*@egen*/  Identifier() [ Window() ] [ < K_AS >/*@bgen(jjtree) AS */
                                       {
                                         ASTAS jjtn001 = new ASTAS(JJTAS);
                                         boolean jjtc001 = true;
                                         jjtree.openNodeScope(jjtn001);
                                       }
                                       try {
/*@egen*/ Identifier()/*@bgen(jjtree)*/
                                       } catch (Throwable jjte001) {
                                         if (jjtc001) {
                                           jjtree.clearNodeScope(jjtn001);
                                           jjtc001 = false;
                                         } else {
                                           jjtree.popNode();
                                         }
                                         if (jjte001 instanceof RuntimeException) {
                                           throw (RuntimeException)jjte001;
                                         }
                                         if (jjte001 instanceof ParseException) {
                                           throw (ParseException)jjte001;
                                         }
                                         throw (Error)jjte001;
                                       } finally {
                                         if (jjtc001) {
                                           jjtree.closeNodeScope(jjtn001, true);
                                         }
                                       }
/*@egen*/     ]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void Subselect():{/*@bgen(jjtree) Subselect */
  ASTSubselect jjtn000 = new ASTSubselect(JJTSUBSELECT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Subselect */
  try {
/*@egen*/  "(" ComplexSelectStatement() ")" [ Window() ] < K_AS >/*@bgen(jjtree) AS */
                                                         {
                                                           ASTAS jjtn001 = new ASTAS(JJTAS);
                                                           boolean jjtc001 = true;
                                                           jjtree.openNodeScope(jjtn001);
                                                         }
                                                         try {
/*@egen*/ Identifier()/*@bgen(jjtree)*/
                                                         } catch (Throwable jjte001) {
                                                           if (jjtc001) {
                                                             jjtree.clearNodeScope(jjtn001);
                                                             jjtc001 = false;
                                                           } else {
                                                             jjtree.popNode();
                                                           }
                                                           if (jjte001 instanceof RuntimeException) {
                                                             throw (RuntimeException)jjte001;
                                                           }
                                                           if (jjte001 instanceof ParseException) {
                                                             throw (ParseException)jjte001;
                                                           }
                                                           throw (Error)jjte001;
                                                         } finally {
                                                           if (jjtc001) {
                                                             jjtree.closeNodeScope(jjtn001, true);
                                                           }
                                                         }
/*@egen*/    /*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void Window()       :{}{  "[" StreamSQLWindow() "]"}void StreamSQLWindow() :{/*@bgen(jjtree) StreamSQLWindow */
  ASTStreamSQLWindow jjtn000 = new ASTStreamSQLWindow(JJTSTREAMSQLWINDOW);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Long size;  Long advance;  Long value;}{/*@bgen(jjtree) StreamSQLWindow */
  try {
/*@egen*/  (    < K_SIZE > size = Time()    {      jjtn000.setType(WindowType.TIME);      jjtn000.setSize(size);    }    [      < K_ADVANCE > advance = Time()      {        jjtn000.setAdvance(advance);      }    ]    (      < K_TIME >    | < K_TUPLE >      {        jjtn000.setType(WindowType.TUPLE);      }    )    [      value = Slide()      {        jjtn000.setSlide(value);      }    ]    [ < K_PARTITION > < K_BY > Partition() ] [ < K_VALID > < K_ALWAYS > ]    /** [      < K_OFFSET > value = Integer()      {        jjtThis.setOffset(value);      }    ]    [      < K_TIMEOUT > value = Integer()      {        jjtThis.setOffset(value);      }    ]*/  )| < K_UNBOUNDED >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    jjtn000.setUnbounded(true);    jjtn000.setType(WindowType.UNBOUNDED);  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void Partition() :{/*@bgen(jjtree) Partition */
  ASTPartition jjtn000 = new ASTPartition(JJTPARTITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Partition */
  try {
/*@egen*/  Identifier()  (    "," Identifier()  )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}Long Advance() :{/*@bgen(jjtree) Advance */
  ASTAdvance jjtn000 = new ASTAdvance(JJTADVANCE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Long value;}{/*@bgen(jjtree) Advance */
  try {
/*@egen*/  < K_ADVANCE > value = Time()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    return value;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}Long Slide() :{/*@bgen(jjtree) Slide */
  ASTSlide jjtn000 = new ASTSlide(JJTSLIDE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Long value;}{/*@bgen(jjtree) Slide */
  try {
/*@egen*/  < K_SLIDE > value = Time()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    return value;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void Identifier() :{/*@bgen(jjtree) Identifier */
  ASTIdentifier jjtn000 = new ASTIdentifier(JJTIDENTIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Token t;}{/*@bgen(jjtree) Identifier */
  try {
/*@egen*/  t = < IDENTIFIER >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    jjtn000.setName(t.image);  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void QuotedIdentifier() :{/*@bgen(jjtree) QuotedIdentifier */
  ASTQuotedIdentifier jjtn000 = new ASTQuotedIdentifier(JJTQUOTEDIDENTIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Token t;}{/*@bgen(jjtree) QuotedIdentifier */
  try {
/*@egen*/  t = < QUOTED_IDENTIFIER > | t = < CHAR_LITERAL >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    jjtn000.setName(t.image);  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}Long Integer() :{/*@bgen(jjtree) Integer */
  ASTInteger jjtn000 = new ASTInteger(JJTINTEGER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Token t;}{/*@bgen(jjtree) Integer */
  try {
/*@egen*/  t = < INTEGER >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    jjtn000.setValue(t.image);    return jjtn000.getValue();  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void Number() :{/*@bgen(jjtree) Number */
  ASTNumber jjtn000 = new ASTNumber(JJTNUMBER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Token t;}{/*@bgen(jjtree) Number */
  try {
/*@egen*/  (    t = < FLOAT >  | t = < INTEGER >  )/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    jjtn000.setValue(t.image);  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void String() :{/*@bgen(jjtree) String */
  ASTString jjtn000 = new ASTString(JJTSTRING);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Token t;}{/*@bgen(jjtree) String */
  try {
/*@egen*/  t = < CHAR_LITERAL >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    jjtn000.setValue(t.image);  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void CompareOperator() :{/*@bgen(jjtree) CompareOperator */
  ASTCompareOperator jjtn000 = new ASTCompareOperator(JJTCOMPAREOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Token t;}{/*@bgen(jjtree) CompareOperator */
  try {
/*@egen*/  t = < COMPARE_OPERATOR >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    jjtn000.setOperator(t.image);  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void SpatialCompareOperator() :{/*@bgen(jjtree) SpatialCompareOperator */
  ASTSpatialCompareOperator jjtn000 = new ASTSpatialCompareOperator(JJTSPATIALCOMPAREOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Token t;}{/*@bgen(jjtree) SpatialCompareOperator */
  try {
/*@egen*/  t = < S_COMPARE >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    jjtn000.setOperator(t.image);  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void CreateBroker() :{/*@bgen(jjtree) CreateBroker */
  ASTCreateBroker jjtn000 = new ASTCreateBroker(JJTCREATEBROKER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) CreateBroker */
  try {
/*@egen*/  < K_CREATE > < K_BROKER > Identifier()  (    "("    (      AttributeDefinitions()    | ORSchemaDefinition()    )    ")"    [      < K_QUEUE > "("      (        AttributeDefinitions()      | ORSchemaDefinition()      )      ")"    ]  )/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void BrokerSource() :{/*@bgen(jjtree) BrokerSource */
  ASTBrokerSource jjtn000 = new ASTBrokerSource(JJTBROKERSOURCE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) BrokerSource */
  try {
/*@egen*/  < K_BROKER >  (    BrokerAsSource()  | BrokerSimpleSource()  )  [ BrokerQueue() ]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void BrokerAsSource() :{/*@bgen(jjtree) BrokerAsSource */
  ASTBrokerAsSource jjtn000 = new ASTBrokerAsSource(JJTBROKERASSOURCE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) BrokerAsSource */
  try {
/*@egen*/  "(" ComplexSelectStatement() ")" < K_AS > Identifier()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void BrokerSelectInto() :{/*@bgen(jjtree) BrokerSelectInto */
  ASTBrokerSelectInto jjtn000 = new ASTBrokerSelectInto(JJTBROKERSELECTINTO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) BrokerSelectInto */
  try {
/*@egen*/  SelectClause() < K_INTO > Identifier() FromClause() [ WhereClause() ] [ GroupByClause() ] [ HavingClause() ] [ ElementPriorities() ]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void BrokerSimpleSource() :{/*@bgen(jjtree) BrokerSimpleSource */
  ASTBrokerSimpleSource jjtn000 = new ASTBrokerSimpleSource(JJTBROKERSIMPLESOURCE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) BrokerSimpleSource */
  try {
/*@egen*/  Identifier()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void BrokerQueue() :{/*@bgen(jjtree) BrokerQueue */
  ASTBrokerQueue jjtn000 = new ASTBrokerQueue(JJTBROKERQUEUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) BrokerQueue */
  try {
/*@egen*/  < K_QUEUE > < K_BY > "(" ComplexSelectStatement() ")"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void Metric() :{/*@bgen(jjtree) Metric */
  ASTMetric jjtn000 = new ASTMetric(JJTMETRIC);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Metric */
  try {
/*@egen*/  < K_METRIC > < K_ON > Identifier()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void CreateUserStatement() :{/*@bgen(jjtree) CreateUserStatement */
  ASTCreateUserStatement jjtn000 = new ASTCreateUserStatement(JJTCREATEUSERSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Token t;}{/*@bgen(jjtree) CreateUserStatement */
  try {
/*@egen*/  < K_CREATE > < K_USER > Identifier() < K_IDENTIFIED > < K_BY > t = < CHAR_LITERAL >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    jjtn000.setPassword(t.image);  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void AlterUserStatement() :{/*@bgen(jjtree) AlterUserStatement */
  ASTAlterUserStatement jjtn000 = new ASTAlterUserStatement(JJTALTERUSERSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Token t;}{/*@bgen(jjtree) AlterUserStatement */
  try {
/*@egen*/  < K_ALTER > < K_USER > Identifier() < K_IDENTIFIED > < K_BY > t = < CHAR_LITERAL >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    jjtn000.setPassword(t.image);  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void DropUserStatement() :{/*@bgen(jjtree) DropUserStatement */
  ASTDropUserStatement jjtn000 = new ASTDropUserStatement(JJTDROPUSERSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Token t;}{/*@bgen(jjtree) DropUserStatement */
  try {
/*@egen*/  (    < K_DROP >  | < K_REMOVE >  | < K_DELETE >  )  < K_USER > Identifier()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {}/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void CreateSLAStatement() :{/*@bgen(jjtree) CreateSLAStatement */
  ASTCreateSLAStatement jjtn000 = new ASTCreateSLAStatement(JJTCREATESLASTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) CreateSLAStatement */
  try {
/*@egen*/  < K_CREATE > < K_SLA > Identifier() < K_WITH > SlaMetricDef() "," SlaScopeDef() "," SlaWindowDef() "," SlaServiceLevelDef()  (    LOOKAHEAD(2)    "," SlaServiceLevelDef()  )*  [    LOOKAHEAD(2)    "," SlaMaxAdmissionCostFactor()  ]  [    LOOKAHEAD(2)    "," SlaKillPenalty()  ]/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {}/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void SlaMetricDef() :{/*@bgen(jjtree) SlaMetricDef */
  ASTSlaMetricDef jjtn000 = new ASTSlaMetricDef(JJTSLAMETRICDEF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) SlaMetricDef */
  try {
/*@egen*/  < K_METRIC > "(" Identifier() "," Number() "," Identifier() ")"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void SlaScopeDef() :{/*@bgen(jjtree) SlaScopeDef */
  ASTSlaScopeDef jjtn000 = new ASTSlaScopeDef(JJTSLASCOPEDEF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) SlaScopeDef */
  try {
/*@egen*/  < K_SCOPE > "(" Identifier() ")"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void SlaWindowDef() :{/*@bgen(jjtree) SlaWindowDef */
  ASTSlaWindowDef jjtn000 = new ASTSlaWindowDef(JJTSLAWINDOWDEF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) SlaWindowDef */
  try {
/*@egen*/  < K_IN > "(" Number() "," Identifier() ")"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void SlaServiceLevelDef() :{/*@bgen(jjtree) SlaServiceLevelDef */
  ASTSlaServiceLevelDef jjtn000 = new ASTSlaServiceLevelDef(JJTSLASERVICELEVELDEF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) SlaServiceLevelDef */
  try {
/*@egen*/  < K_SERVICE_LEVEL > "(" Number() "," SlaPenaltyDef() ")"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void SlaPenaltyDef() :{/*@bgen(jjtree) SlaPenaltyDef */
  ASTSlaPenaltyDef jjtn000 = new ASTSlaPenaltyDef(JJTSLAPENALTYDEF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) SlaPenaltyDef */
  try {
/*@egen*/  < K_PENALTY > "(" Identifier() "," Number() ")"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void SlaMaxAdmissionCostFactor() :{/*@bgen(jjtree) SlaMaxAdmissionCostFactor */
  ASTSlaMaxAdmissionCostFactor jjtn000 = new ASTSlaMaxAdmissionCostFactor(JJTSLAMAXADMISSIONCOSTFACTOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) SlaMaxAdmissionCostFactor */
  try {
/*@egen*/  < K_MAX_ADMISSION_COST_FACTOR > "(" Number() ")"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void SlaKillPenalty() :{/*@bgen(jjtree) SlaKillPenalty */
  ASTSlaKillPenalty jjtn000 = new ASTSlaKillPenalty(JJTSLAKILLPENALTY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) SlaKillPenalty */
  try {
/*@egen*/  < K_KILL > "(" SlaPenaltyDef() ")"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void AssignSLAStatement() :{/*@bgen(jjtree) AssignSLAStatement */
  ASTAssignSLAStatement jjtn000 = new ASTAssignSLAStatement(JJTASSIGNSLASTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) AssignSLAStatement */
  try {
/*@egen*/  < K_ASSIGN > < K_SLA > Identifier() < K_TO > < K_USER > Identifier()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void DropStreamStatement() :{/*@bgen(jjtree) DropStreamStatement */
  ASTDropStreamStatement jjtn000 = new ASTDropStreamStatement(JJTDROPSTREAMSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) DropStreamStatement */
  try {
/*@egen*/  (    < K_DROP >  | < K_DETACH >  | < K_REMOVE >  )  < K_STREAM > Identifier() [ IfExists() ]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void DropViewStatement() :{/*@bgen(jjtree) DropViewStatement */
  ASTDropViewStatement jjtn000 = new ASTDropViewStatement(JJTDROPVIEWSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) DropViewStatement */
  try {
/*@egen*/  < K_DROP > < K_VIEW > Identifier()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void CreateRoleStatement() :{/*@bgen(jjtree) CreateRoleStatement */
  ASTCreateRoleStatement jjtn000 = new ASTCreateRoleStatement(JJTCREATEROLESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) CreateRoleStatement */
  try {
/*@egen*/  < K_CREATE > < K_ROLE > Identifier()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void IfExists() :{/*@bgen(jjtree) IfExists */
  ASTIfExists jjtn000 = new ASTIfExists(JJTIFEXISTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) IfExists */
  try {
/*@egen*/  < K_IF > < K_EXISTS >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void IfNotExists() :{/*@bgen(jjtree) IfNotExists */
  ASTIfNotExists jjtn000 = new ASTIfNotExists(JJTIFNOTEXISTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) IfNotExists */
  try {
/*@egen*/  < K_IF > < K_NOT > < K_EXISTS >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void DropRoleStatement() :{/*@bgen(jjtree) DropRoleStatement */
  ASTDropRoleStatement jjtn000 = new ASTDropRoleStatement(JJTDROPROLESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) DropRoleStatement */
  try {
/*@egen*/  (    < K_DROP >  | < K_DELETE >  | < K_REMOVE >  )  < K_ROLE > Identifier()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void GrantRoleStatement() :{/*@bgen(jjtree) GrantRoleStatement */
  ASTGrantRoleStatement jjtn000 = new ASTGrantRoleStatement(JJTGRANTROLESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) GrantRoleStatement */
  try {
/*@egen*/  < K_GRANT > < K_ROLE > IdentifierList() < K_TO > Identifier()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void RevokeRoleStatement() :{/*@bgen(jjtree) RevokeRoleStatement */
  ASTRevokeRoleStatement jjtn000 = new ASTRevokeRoleStatement(JJTREVOKEROLESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) RevokeRoleStatement */
  try {
/*@egen*/  < K_REVOKE > < K_ROLE > IdentifierList() < K_FROM > Identifier()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void GrantStatement() :{/*@bgen(jjtree) GrantStatement */
  ASTGrantStatement jjtn000 = new ASTGrantStatement(JJTGRANTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) GrantStatement */
  try {
/*@egen*/  < K_GRANT > IdentifierList()  (    < K_ON > IdentifierList()  )?  < K_TO > Identifier()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void IdentifierList() :{/*@bgen(jjtree) IdentifierList */
  ASTIdentifierList jjtn000 = new ASTIdentifierList(JJTIDENTIFIERLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) IdentifierList */
  try {
/*@egen*/  Identifier()  (    "," Identifier()  )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void RevokeStatement() :{/*@bgen(jjtree) RevokeStatement */
  ASTRevokeStatement jjtn000 = new ASTRevokeStatement(JJTREVOKESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) RevokeStatement */
  try {
/*@egen*/  < K_REVOKE > IdentifierList()  (    < K_ON > IdentifierList()  )?  < K_FROM > Identifier()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}