 /**
 * JavaCC file
 * @author Jonas Jacobi, Marco Grawunder
 */options{  JDK_VERSION = "1.5";  IGNORE_CASE = true;}PARSER_BEGIN(PQLParserImpl)package de.uniol.inf.is.odysseus.parser.pql.impl;import java.beans.BeanInfo;import java.beans.IntrospectionException;import java.beans.Introspector;import java.beans.PropertyDescriptor;import java.lang.reflect.Method;import java.util.ArrayList;import java.util.Collection;import java.util.Collections;import java.util.HashMap;import java.util.HashSet;import java.util.LinkedList;import java.util.List;import java.util.Map;import java.util.Set;import de.uniol.inf.is.odysseus.core.server.datadictionary.IDataDictionary;import de.uniol.inf.is.odysseus.core.server.datadictionary.DataDictionaryException;import de.uniol.inf.is.odysseus.core.server.planmanagement.QueryParseException;import de.uniol.inf.is.odysseus.core.usermanagement.ISession;import de.uniol.inf.is.odysseus.core.logicaloperator.ILogicalOperator;
import de.uniol.inf.is.odysseus.core.server.logicaloperator.TopAO;import de.uniol.inf.is.odysseus.core.logicaloperator.LogicalSubscription;import de.uniol.inf.is.odysseus.core.planmanagement.query.ILogicalQuery;import de.uniol.inf.is.odysseus.core.planmanagement.query.LogicalQuery;import de.uniol.inf.is.odysseus.core.server.logicaloperator.builder.IOperatorBuilder;import de.uniol.inf.is.odysseus.core.server.logicaloperator.builder.InputOperatorItem;import de.uniol.inf.is.odysseus.core.server.logicaloperator.builder.OperatorBuilderFactory;import de.uniol.inf.is.odysseus.core.server.logicaloperator.builder.PredicateItem;import de.uniol.inf.is.odysseus.core.server.logicaloperator.builder.ValidationException;import de.uniol.inf.is.odysseus.parser.pql.PQLParser;import de.uniol.inf.is.odysseus.core.server.util.AbstractGraphWalker;import de.uniol.inf.is.odysseus.core.server.util.SetOwnerGraphVisitor;public class PQLParserImpl{  static private ILogicalOperator createOperator(String identifier, Map < String, Object > parameters, List < InputOperatorItem > inputOps)  {    IOperatorBuilder builder = OperatorBuilderFactory.createOperatorBuilder(identifier.toUpperCase(), getUser(), getDataDictionary());    List < ILogicalOperator > inputOperators = new ArrayList < ILogicalOperator > ();    for (int i = 0; i < inputOps.size(); ++i)    {      builder.setInputOperator(i, inputOps.get(i).operator, inputOps.get(i).outputPort);    }    PQLParser.initParameters(identifier.toUpperCase(), builder.getParameters(), parameters);    if (!builder.validate())    {      throw new ValidationException(identifier, builder.getErrors());    }    ILogicalOperator operator = builder.createOperator();    return operator;  }  static private Set < ILogicalOperator > findRoots(ILogicalOperator op)  {    return findRoots(op, new ArrayList < ILogicalOperator > ());  }  static private Set < ILogicalOperator > findRoots(ILogicalOperator op, List < ILogicalOperator > visited)  {    Set < ILogicalOperator > result = new HashSet < ILogicalOperator > ();    if (!visited.contains(op))    {      visited.add(op);      Collection < LogicalSubscription > subscriptions = op.getSubscriptions();      if (subscriptions.isEmpty())      {        return Collections.singleton(op);      }      for (LogicalSubscription sub : subscriptions)      {        result.addAll(findRoots(sub.getTarget(), visited));      }    }    return result;  }  static ISession user;  static public ISession getUser()  {    return user;  }  static public void setUser(ISession newUser)  {    user = newUser;  }  static IDataDictionary dd;  static public void setDataDictionary(IDataDictionary dataDictionary)  {    dd = dataDictionary;  }  static public IDataDictionary getDataDictionary()  {    return dd;  }}PARSER_END(PQLParserImpl)SKIP :{  " "| "\r"| "\t"| "\n"}TOKEN :{  < IDENTIFIER :    (< LETTER >)+    (      < DIGIT >    | < LETTER >    | < SPECIAL_CHARS >    )* >| < #LETTER : [ "a"-"z", "A"-"Z" ] >| < #SPECIAL_CHARS :    "_"  | "."  | ":" >| < CHAR_LITERAL :    "'" (~[ "'" ])* "'"    (      "'" (~[ "'" ])* "'"    )* >| < PLUS : "+" >| < MINUS : "-" >| < MULTIPLY : "*" >| < DIVIDE : "/" >}TOKEN : /* Numeric Constants */{  < FLOAT :    ("-")?    (      < INTEGER > "." < INTEGER >    | "." < INTEGER >    ) >| < INTEGER : (< DIGIT >)+ >| < #DIGIT : [ "0"-"9" ] >}List < ILogicalQuery > query() :{  Map < String, ILogicalOperator > namedOps = new HashMap < String, ILogicalOperator > ();  Map < String, Map < String, Object > > namedOpParameters = new HashMap < String, Map < String, Object > > ();  ILogicalOperator outputStream;}{  (    namedStream(namedOps, namedOpParameters)  )+  < EOF >  {    LinkedList < ILogicalOperator > result = new LinkedList < ILogicalOperator > ();    Set < ILogicalOperator > roots = new HashSet < ILogicalOperator > ();    for (ILogicalOperator op : namedOps.values())    {      roots.addAll(findRoots(op));    }    BeanInfo beanInfo;    try    {      beanInfo = Introspector.getBeanInfo(ILogicalQuery.class);    }    catch (IntrospectionException e)    {      {        if (true) throw new RuntimeException(e);      }    }    PropertyDescriptor [ ] properties = beanInfo.getPropertyDescriptors();    for (Map.Entry < String, ILogicalOperator > opEntry : namedOps.entrySet())    {      String queryName = opEntry.getKey();      ILogicalOperator topOperator = opEntry.getValue();      if (roots.contains(topOperator))      {        ILogicalQuery query = new LogicalQuery();        PQLParser.initQueryParameters(namedOpParameters.get(queryName));        for (String parameterName : namedOpParameters.get(queryName).keySet())        {          boolean found = false;          for (PropertyDescriptor property : properties)          {            if (property.getName().equalsIgnoreCase(parameterName))            {              Method method = property.getWriteMethod();              try              {                method.invoke(query, PQLParser.getQueryParameter(parameterName).getValue());              }              catch (Exception e)              {                throw new RuntimeException(e);              }              found = true;            }          }          if (!found)          {            throw new RuntimeException("unknown parameter for query: " + parameterName);          }        }      }      else      {        if (!namedOpParameters.get(queryName).isEmpty())        {          {            if (true)            {              if (true) throw new QueryParseException("query parameters can only be defined for root operators, not for: " + queryName);            }          }        }      }    }    List < ILogicalQuery > queries = new ArrayList < ILogicalQuery > ();    if (roots.size() > 0)    {
      ILogicalOperator topOperator = new TopAO();
      int inputPort = 0;      for (ILogicalOperator root : roots){			root.subscribeSink(topOperator, inputPort++, 0, root.getOutputSchema());
      }      ILogicalQuery query = new LogicalQuery();      // Set Owners for query 
      //AbstractTreeWalker walker = new AbstractTreeWalker();
      AbstractGraphWalker walker = new AbstractGraphWalker();      SetOwnerGraphVisitor visitor = new SetOwnerGraphVisitor(query);      walker.prefixWalk(topOperator, visitor);      //		System.err.println("SET OWNER");
      //
      //		AbstractTreeWalker walker2 = new AbstractTreeWalker();
      //		System.err.println(walker2.prefixWalk(topOperator, new AlgebraPlanToStringVisitor()));
      query.setLogicalPlan(topOperator, false);      queries.add(query);    }    return queries;  }}void namedStream(Map < String, ILogicalOperator > namedOps, Map < String, Map < String, Object > > namedOpParameters) :{  Token name;  ILogicalOperator op;  boolean isView = false;  boolean isSharedSource = false;  Map < String, Object > parameters = new HashMap < String, Object > ();}{  name = < IDENTIFIER > [ "{" parameters = parameterMap() "}" ]  (    "="  | "::="    {      isSharedSource = true;    }  | ":="    {      isView = true;    }  )  op = operator(namedOps)  {    String nameStr = name.image.toUpperCase();    if (namedOps.containsKey(nameStr))    {      throw new QueryParseException("multiple definition of '" + nameStr + "'");    }    try    {      if (isView || isSharedSource)      {        nameStr = name.image;        IDataDictionary dd = getDataDictionary();        if (dd.containsViewOrStream(nameStr, getUser()))        {          throw new QueryParseException("multiple definition of view '" + nameStr + "'");        }        dd.addSourceType(nameStr, "RelationalStreaming");        dd.addEntitySchema(nameStr, op.getOutputSchema(), getUser());        if (isSharedSource)        {          dd.setStream(nameStr, op, user);        }        else        {          dd.setView(nameStr, op, user);        }        //get access operator for view, so other operators don't get subscribed
        //to top operator of the view
        op = dd.getViewOrStream(nameStr, getUser());      }      else      {        namedOpParameters.put(nameStr.toUpperCase(), parameters);        namedOps.put(nameStr.toUpperCase(), op);      }    }    catch (DataDictionaryException e)    {      throw new QueryParseException(e.getMessage());    }  }}ILogicalOperator operator(Map < String, ILogicalOperator > namedOps) :{  Token identifier;  Token port;  Map < String, Object > parameters = new HashMap < String, Object > ();  List < InputOperatorItem > inputOps = new ArrayList < InputOperatorItem > ();}{  (    LOOKAHEAD(< IDENTIFIER > "(")    identifier = < IDENTIFIER > "("    (      "{" parameters = parameterMap() "}" [ "," inputOps = operatorList(namedOps) ]    | inputOps = operatorList(namedOps)    )    ")"    {      return createOperator(identifier.image, parameters, inputOps);    }  | identifier = < IDENTIFIER >    {      ILogicalOperator op = namedOps.get(identifier.image.toUpperCase());      if (op == null)      {        try        {          op = getDataDictionary().getViewOrStream(identifier.image, getUser());        }        catch (DataDictionaryException e)        {          throw new QueryParseException("no such operator: " + identifier.image);        }      }      return op;    }  )}Map < String, Object > parameterMap() :{  Map < String, Object > parameters = new HashMap < String, Object > ();}{  parameter(parameters)  (    "," parameter(parameters)  )*  {    return parameters;  }}void parameter(Map < String, Object > parameters) :{  Token id;  Object value;}{  id = < IDENTIFIER > "=" value = parameterValue()  {    parameters.put(id.image.toUpperCase(), value);  }}Object parameterValue() :{  Token t;  Object value;}{  (    t = < FLOAT >    {      value = Double.valueOf(t.image);    }  | t = < INTEGER >    {      value = Long.valueOf(t.image);    }  | t = < CHAR_LITERAL >    {      value = t.image.substring(1, t.image.length() - 1);    }  | value = list()  | value = predicate()  )  {    return value;  }}List < Object > list() :{  Object value;  List < Object > list = new ArrayList < Object > ();}{  "["  [    value = parameterValue()    {      list.add(value);    }    (      "," value = parameterValue()      {        list.add(value);      }    )*  ]  "]"  {    return list;  }}List < InputOperatorItem > operatorList(Map < String, ILogicalOperator > namedOps) :{  List < InputOperatorItem > list = new LinkedList < InputOperatorItem > ();  Token tPort = null;  ILogicalOperator operator;  int port = 0;}{  [    [ tPort = < INTEGER > ":" ] operator = operator(namedOps)    {      port = tPort == null ? 0 : Integer.parseInt(tPort.image);      list.add(new InputOperatorItem(operator, port));    }    (      "," [ tPort = < INTEGER > ":" ] operator = operator(namedOps)      {        port = tPort == null ? 0 : Integer.parseInt(tPort.image);        list.add(new InputOperatorItem(operator, port));      }    )*  ]  {    return list;  }}PredicateItem predicate() :{  Token predicateType;  Token predicate;}{  predicateType = < IDENTIFIER > "(" predicate = < CHAR_LITERAL > ")"  {    return new PredicateItem(predicateType.image, predicate.image.substring(1, predicate.image.length() - 1));  }}