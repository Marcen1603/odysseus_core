///OdysseusScript
#TRANSCFG salsa 
#PARSER PQL
#QUERY

///Simulation Laser: Andre
Lms1 = ADAPTER({schema = ['scan:SpatialMultiPoint'], options = ['host:10.53.1.63', 'port:12340', 'record:500'], adapter = 'Sick'})  
Rot_Lms1 = MAP({expressions = ['MoveViewPoint(RotateViewPoint(scan, 0.00), 0.0, 0.0)']},Lms1)
Rename_Lms1 = RENAME({aliases = ['scan']}, Rot_Lms1)
Window_Lms1 = WINDOW({type = 'time', size = 40, advance = 20}, Rename_Lms1)
Segments_Lms1 = RENAME({aliases = ['scan']},MAP({expressions = ['ExtractSegments(scan, 20.0)']}, Window_Lms1))

///Simulation Laser: Christian
Lms2 = ADAPTER({schema = ['scan:SpatialMultiPoint'], options = ['host:10.53.1.63', 'port:12341', 'record:500'], adapter = 'Sick'})  
Rot_Lms2 = MAP({expressions = ['MoveViewPoint(RotateViewPoint(scan,180.00), 526.0,-410.0)']},Lms2)
Rename_Lms2 = RENAME({aliases = ['scan']}, Rot_Lms2)
Window_Lms2 = WINDOW({type = 'time', size = 40, advance = 20}, Rename_Lms2)
Segments_Lms2 = RENAME({aliases = ['scan']},MAP({expressions = ['ExtractSegments(scan, 20.0)']}, Window_Lms2))

///Simulation Laser: Tim
Lms3 = ADAPTER({schema = ['scan:SpatialMultiPoint'], options = ['host:10.53.1.63', 'port:12342', 'record:500'], adapter = 'Sick'})  
Rot_Lms3 = MAP({expressions = ['MoveViewPoint(RotateViewPoint(scan,180.00), 1200.0, 280.0)']},Lms3)
Rename_Lms3 = RENAME({aliases = ['scan']}, Rot_Lms3)
Window_Lms3 = WINDOW({type = 'time', size = 40, advance = 20}, Rename_Lms3)
Segments_Lms3 = RENAME({aliases = ['scan']},MAP({expressions = ['ExtractSegments(scan, 20.0)']}, Window_Lms3))

///Simulation Laser: Terasse
Lms4 = ADAPTER({schema = ['scan:SpatialMultiPoint'], options = ['host:10.53.1.63', 'port:12344', 'record:500'], adapter = 'Sick'})  
Rot_Lms4 = MAP({expressions = ['MoveViewPoint(RotateViewPoint(scan,90.00), -130.0,-552.0)']},Lms4)
Rename_Lms4 = RENAME({aliases = ['scan']}, Rot_Lms4)
Window_Lms4 = WINDOW({type = 'time', size = 40, advance = 20}, Rename_Lms4)
Segments_Lms4 = RENAME({aliases = ['scan']},MAP({expressions = ['ExtractSegments(scan, 40.0)']}, Window_Lms4))

Combined12 = UNION(Segments_Lms1,Segments_Lms2)
Combined34 = UNION(Segments_Lms3,Segments_Lms4)
Combined = UNION(Combined12,Combined34)

Unested 		= UNNEST({attribute = 'scan',recalculate='false'}, Combined)
///sink = VPOLYGONSINK(Unested)

ConvexHull 		= RENAME({aliases = ['scan']},MAP({expressions = ['SpatialConvexHull(scan)']},Unested))
poly 			= SELECT({predicate = RelationalPredicate('SpatialIsPolygon(scan)')},RENAME({aliases = ['scan']},MAP({expressions = ['AsPolygon(scan)']},ConvexHull)))

///Geometry Collector
GeometryCollector = UDO({class='GeometryCollector', init='Jubel'},poly)
socket			= SOCKETSINK({SINKNAME='SaLsASink',SINKPORT=9999,SINKTYPE='bytebuffer',LOGINNEEDED='false'}, TimestampToPayload(GeometryCollector))
