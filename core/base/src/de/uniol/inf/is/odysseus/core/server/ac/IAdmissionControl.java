/*******************************************************************************
 * Copyright 2012 The Odysseus Team
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 ******************************************************************************/
package de.uniol.inf.is.odysseus.core.server.ac;

import java.util.List;
import java.util.Set;

import de.uniol.inf.is.odysseus.core.planmanagement.query.ILogicalQuery;
import de.uniol.inf.is.odysseus.core.server.costmodel.ICost;
import de.uniol.inf.is.odysseus.core.server.planmanagement.query.IPhysicalQuery;
import de.uniol.inf.is.odysseus.core.usermanagement.IUser;

/**
 * Zentrale Schnittstelle der Admission Control in Odysseus. Die aktuelle
 * Implementierung kann √ºber ein Service angefordert werden. Die
 * Standardimplementierung ist die Klasse {@link StandardAC}.
 * 
 * @author Timo Michelsen
 * 
 */
public interface IAdmissionControl {

	/**
	 * Gibt zur√ºck, ob die gegebene {@link ILogicalQuery} unter Ber√ºcksichtigung der
	 * aktuellen Gesamtkosten ausgef√ºhrt werden k√∂nnte, ohne die maximalen
	 * Kosten zu √ºbersteigen.
	 * 
	 * @param query
	 *            {@link ILogicalQuery}, dessen potenzielle Ausf√ºhrung gepr√ºft werden
	 *            soll.
	 * 
	 * @return <code>true</code>, falls die {@link ILogicalQuery} ohne √úberschreitung
	 *         der maximalen Kosten ausgef√ºhrt werden kann, sonst
	 *         <code>false</code>.
	 */
	public boolean canStartQuery(IPhysicalQuery query);

	/**
	 * Liefert die aktuelle Kostensch√§tzung zur gegebenen {@link ILogicalQuery} zur√ºck.
	 * Liegt keine Kostensch√§tzung vor (bspw. die Anfrage wurde dem
	 * Ausf√ºhrungsplan noch nicht hinzugef√ºgt), wird <code>null</code>
	 * zur√ºckgegeben.
	 * 
	 * @param query
	 *            Anfrage, dessen Kostensch√§tzung zur√ºckgegeben werden soll.
	 * @return Kostensch√§tzung als Instanz von {@link ICost}, oder
	 *         <code>null</code>, falls noch keine Kostensch√§tzung vorliegt.
	 */
	public ICost getCost(IPhysicalQuery query);

	/**
	 * Erzwingt eine erneute Kostensch√§tzung des Ausf√ºhrungsplans, sodass die
	 * aktuellen Gesamtkosten aktualisiert werden. Aktualisiert demenstprechend
	 * die Kostenabsch√§tzungen aller laufenden Anfragen.
	 */
	public void updateEstimations();

	/**
	 * Liefert die aktuellen Gesamtkosten des Ausf√ºhrungsplans zur√ºck.
	 * 
	 * @return Gesamtkosten des Ausf√ºhrungsplans
	 */
	public ICost getActualCost();

	/**
	 * Liefert die maximal erlaubten Kosten zur√ºck. Die Admission Control sorgt
	 * daf√ºr, dass die Gesamtkosten aller laufenen Anfragen die Maximalkosten
	 * nicht √ºbersteigen.
	 * 
	 * @return Maximalkosten
	 */
	public ICost getMaximumCost();
	
	/**
	 * Liefert den Schwellwert an Kosten, die - wenn unterschritten - f¸r ein erneutes
	 * Starten vom AC gestoppter Anfragen sorgt.
	 * 
	 * @return Minimalkosten
	 */
	public ICost getMinimumCost();

	/**
	 * Liefert eine Liste der Namen aller vorhandenden Kostenmodelle zur√ºck. Der
	 * Name ist gleich dem Klassennamen des Kostenmodells.
	 * 
	 * @return
	 */
	public Set<String> getRegisteredCostModels();

	/**
	 * W√§hlt ein Kostenmodell aus, welches in Zukunft f√ºr die Kostensch√§tzungen
	 * verwendet wird. Es sollte darauf geachtet werden, das Kostenmodell nicht
	 * bei laufenden Anfragen zu wechseln.
	 * 
	 * @param name
	 *            Name der Klasse des Kostenmodells, welches fortan benutzt
	 *            werden soll
	 */
	public void selectCostModel(String name);

	/**
	 * Liefert den Namen des aktuell gew√§hlten Kostenmodells zur√ºck, oder
	 * <code>null</code>, falls kein Kostenmodell gew√§hlt wurde.
	 * 
	 * @return
	 */
	public String getSelectedCostModel();

	/**
	 * F√ºgt einen {@link IAdmissionListener} hinzu. Dieser wird fortan √ºber
	 * √úberlastungen informiert.
	 * 
	 * @param listener
	 *            Hinzuzuf√ºgender Listener. Darf nicht <code>null</code> sein.
	 */
	public void addListener(IAdmissionListener listener);

	/**
	 * Entfernt einen {@link IAdmissionListener}. Ab diesem Zeitpunkt wird der
	 * Listener nicht mehr √ºber √úberlastungen informiert.
	 * 
	 * @param listener
	 *            Zu entfernender Listener. Wird <code>null</code> angegeben,
	 *            geschieht nichts.
	 */
	public void removeListener(IAdmissionListener listener);

	/**
	 * Liefert eine Liste von {@link IPossibleExecution}, welche Vorschl√§ge von
	 * Anfragekombinationen beinhaltet. Jede Kombination schl√§gt vor, welche
	 * Anfragen gestoppt werden sollten, um eine √úberlastung zu vermeiden. Bei
	 * jedem Aufruf wird die Liste neu generiert. Ist aktuelle keine √úberlastung
	 * vorhanden, so wird nur ein Vorschlag - alle Anfragen auszuf√ºhren -
	 * zur√ºckgegeben.
	 * 
	 * @param user User, welcher angibt, welche Anfragen genau betrachtet werden m¸ssen.
	 * 
	 * @return Liste an Vorschl√§gen, welche Anfragen laufen und welche Anfragen
	 *         gestoppt werden sollten, um eine √úberlastung aufzul√∂sen.
	 */
	public List<IPossibleExecution> getPossibleExecutions(IUser user);
	
	/**
	 * Liefert <code>true</code>, wenn die letzte Kostensch‰tzung eine ‹berlastung
	 * festgestellt hat, <code>false</code> sonst.
	 * 
	 * @return <code>true</code> bei ‹berlastungssituation, sonts <code>false</code>.
	 */
	public boolean isOverloaded();
}
