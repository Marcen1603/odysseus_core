package de.uniol.inf.is.odysseus.wrapper.inertiacube.interfaces;
import com.ochafik.lang.jnaerator.runtime.Structure;
import de.uniol.inf.is.odysseus.wrapper.inertiacube.interfaces.ISenseLib.Bool;
import java.util.Arrays;
import java.util.List;
/**
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class ISD_STATION_HARDWARE_INFO_TYPE extends Structure<ISD_STATION_HARDWARE_INFO_TYPE, ISD_STATION_HARDWARE_INFO_TYPE.ByValue, ISD_STATION_HARDWARE_INFO_TYPE.ByReference > {
	/**
	 * Set to TRUE if ISD_GetStationHardwareInfo succeeded<br>
	 * C type : Bool
	 */
	public Bool Valid;
	/** Unique number identifying a station. It is the same as that */
	public int ID;
	/**
	 * Station Descriptor version<br>
	 * C type : char[20]
	 */
	public byte[] DescVersion = new byte[20];
	/** Station firmware revision */
	public float FirmwareRev;
	/** Station serial number */
	public int SerialNum;
	/**
	 * Last factory calibration date (mm/dd/yyyy)<br>
	 * C type : char[20]
	 */
	public byte[] CalDate = new byte[20];
	/** Hardware port number */
	public int Port;
	/** C type : Capability_struct */
	public Capability_struct Capability;
	/** C type : Bool */
	public Bool bReserved1;
	/** C type : Bool */
	public Bool bReserved2;
	/** C type : Bool */
	public Bool bReserved3;
	/** C type : Bool */
	public Bool bReserved4;
	/** Station type */
	public int Type;
	public int DeviceID;
	public int dwReserved3;
	public int dwReserved4;
	public float fReserved1;
	public float fReserved2;
	public float fReserved3;
	public float fReserved4;
	/** C type : char[128] */
	public byte[] cReserved1 = new byte[128];
	/** C type : char[128] */
	public byte[] cReserved2 = new byte[128];
	/** C type : char[128] */
	public byte[] cReserved3 = new byte[128];
	/** C type : char[128] */
	public byte[] cReserved4 = new byte[128];
	/** <i>native declaration : line 574</i> */
	public static class Capability_struct extends Structure<Capability_struct, Capability_struct.ByValue, Capability_struct.ByReference > {
		/**
		 * TRUE if station can track position<br>
		 * C type : Bool
		 */
		public Bool Position;
		/**
		 * TRUE if station can track orientation<br>
		 * C type : Bool
		 */
		public Bool Orientation;
		/** Number of lens encoders, if 0 then none are available */
		public int Encoders;
		/** Number of analog channels supported by this station, wand has 2 (joystick axes) */
		public int NumChannels;
		/** Number of digital button inputs supported by this station */
		public int NumButtons;
		/** Number of auxiliary input channels (OEM products) */
		public int AuxInputs;
		/** Number of auxiliary output channels (OEM products) */
		public int AuxOutputs;
		/**
		 * TRUE if station has a compass<br>
		 * C type : Bool
		 */
		public Bool Compass;
		/** C type : Bool */
		public Bool bReserved1;
		/** C type : Bool */
		public Bool bReserved2;
		/** C type : Bool */
		public Bool bReserved3;
		/** C type : Bool */
		public Bool bReserved4;
		public int dwReserved1;
		public int dwReserved2;
		public int dwReserved3;
		public int dwReserved4;
		public Capability_struct() {
			super();
		}
		@Override
		protected List<? > getFieldOrder() {
			return Arrays.asList("Position", "Orientation", "Encoders", "NumChannels", "NumButtons", "AuxInputs", "AuxOutputs", "Compass", "bReserved1", "bReserved2", "bReserved3", "bReserved4", "dwReserved1", "dwReserved2", "dwReserved3", "dwReserved4");
		}
		@Override
		protected ByReference newByReference() { return new ByReference(); }
		@Override
		protected ByValue newByValue() { return new ByValue(); }
		@Override
		protected Capability_struct newInstance() { return new Capability_struct(); }
		public static Capability_struct[] newArray(int arrayLength) {
			return Structure.newArray(Capability_struct.class, arrayLength);
		}
		public static class ByReference extends Capability_struct implements Structure.ByReference {
			
		};
		public static class ByValue extends Capability_struct implements Structure.ByValue {
			
		};
	};
	public ISD_STATION_HARDWARE_INFO_TYPE() {
		super();
	}
	@Override
	protected List<? > getFieldOrder() {
		return Arrays.asList("Valid", "ID", "DescVersion", "FirmwareRev", "SerialNum", "CalDate", "Port", "Capability", "bReserved1", "bReserved2", "bReserved3", "bReserved4", "Type", "DeviceID", "dwReserved3", "dwReserved4", "fReserved1", "fReserved2", "fReserved3", "fReserved4", "cReserved1", "cReserved2", "cReserved3", "cReserved4");
	}
	@Override
	protected ByReference newByReference() { return new ByReference(); }
	@Override
	protected ByValue newByValue() { return new ByValue(); }
	@Override
	protected ISD_STATION_HARDWARE_INFO_TYPE newInstance() { return new ISD_STATION_HARDWARE_INFO_TYPE(); }
	public static ISD_STATION_HARDWARE_INFO_TYPE[] newArray(int arrayLength) {
		return Structure.newArray(ISD_STATION_HARDWARE_INFO_TYPE.class, arrayLength);
	}
	public static class ByReference extends ISD_STATION_HARDWARE_INFO_TYPE implements Structure.ByReference {
		
	};
	public static class ByValue extends ISD_STATION_HARDWARE_INFO_TYPE implements Structure.ByValue {
		
	};
}
