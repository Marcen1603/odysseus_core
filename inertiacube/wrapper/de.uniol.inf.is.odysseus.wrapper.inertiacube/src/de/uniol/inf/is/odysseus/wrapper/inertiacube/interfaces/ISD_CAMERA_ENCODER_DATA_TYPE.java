package de.uniol.inf.is.odysseus.wrapper.inertiacube.interfaces;
import com.ochafik.lang.jnaerator.runtime.Structure;
import com.sun.jna.NativeLong;
import java.util.Arrays;
import java.util.List;
/**
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class ISD_CAMERA_ENCODER_DATA_TYPE extends Structure<ISD_CAMERA_ENCODER_DATA_TYPE, ISD_CAMERA_ENCODER_DATA_TYPE.ByValue, ISD_CAMERA_ENCODER_DATA_TYPE.ByReference > {
	/** Tracking status byte */
	public byte TrackingStatus;
	/** Pack to 4 byte boundary */
	public byte bReserved1;
	public byte bReserved2;
	public byte bReserved3;
	/** Timecode, not implemented yet */
	public int Timecode;
	/** Aperture encoder counts, relative to last reset or power up */
	public NativeLong ApertureEncoder;
	/** Focus encoder counts */
	public NativeLong FocusEncoder;
	/** Zoom encoded counts */
	public NativeLong ZoomEncoder;
	/** Time code user bits, not implemented yet */
	public int TimecodeUserBits;
	/** Computed aperture value */
	public float Aperture;
	/** Computed focus value (mm), not implemented yet */
	public float Focus;
	/** Computed vertical FOV value (degrees) */
	public float FOV;
	/** Nodal point offset due to zoom and focus (mm) */
	public float NodalPoint;
	/**
	 * Available only for IS-1200<br>
	 * C type : float[3]
	 */
	public float[] CovarianceOrientation = new float[3];
	/** C type : float[3] */
	public float[] CovariancePosition = new float[3];
	public int dwReserved1;
	public int dwReserved2;
	public float fReserved1;
	public float fReserved2;
	public float fReserved3;
	public float fReserved4;
	public ISD_CAMERA_ENCODER_DATA_TYPE() {
		super();
	}
	@Override
	protected List<? > getFieldOrder() {
		return Arrays.asList("TrackingStatus", "bReserved1", "bReserved2", "bReserved3", "Timecode", "ApertureEncoder", "FocusEncoder", "ZoomEncoder", "TimecodeUserBits", "Aperture", "Focus", "FOV", "NodalPoint", "CovarianceOrientation", "CovariancePosition", "dwReserved1", "dwReserved2", "fReserved1", "fReserved2", "fReserved3", "fReserved4");
	}
	@Override
	protected ByReference newByReference() { return new ByReference(); }
	@Override
	protected ByValue newByValue() { return new ByValue(); }
	@Override
	protected ISD_CAMERA_ENCODER_DATA_TYPE newInstance() { return new ISD_CAMERA_ENCODER_DATA_TYPE(); }
	public static ISD_CAMERA_ENCODER_DATA_TYPE[] newArray(int arrayLength) {
		return Structure.newArray(ISD_CAMERA_ENCODER_DATA_TYPE.class, arrayLength);
	}
	public static class ByReference extends ISD_CAMERA_ENCODER_DATA_TYPE implements Structure.ByReference {
		
	};
	public static class ByValue extends ISD_CAMERA_ENCODER_DATA_TYPE implements Structure.ByValue {
		
	};
}
