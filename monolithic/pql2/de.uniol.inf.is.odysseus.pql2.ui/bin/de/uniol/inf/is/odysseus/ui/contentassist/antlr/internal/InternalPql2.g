/*
 * generated by Xtext
 */
grammar InternalPql2;

options {
	superClass=AbstractInternalContentAssistParser;
	backtrack=true;
	
}

@lexer::header {
package de.uniol.inf.is.odysseus.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package de.uniol.inf.is.odysseus.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import de.uniol.inf.is.odysseus.services.Pql2GrammarAccess;

}

@parser::members {
 
 	private Pql2GrammarAccess grammarAccess;
 	
    public void setGrammarAccess(Pql2GrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRulePQLModel
entryRulePQLModel 
:
{ before(grammarAccess.getPQLModelRule()); }
	 rulePQLModel
{ after(grammarAccess.getPQLModelRule()); } 
	 EOF 
;

// Rule PQLModel
rulePQLModel
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPQLModelAccess().getQueriesAssignment()); }
(rule__PQLModel__QueriesAssignment)*
{ after(grammarAccess.getPQLModelAccess().getQueriesAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleQuery
entryRuleQuery 
:
{ before(grammarAccess.getQueryRule()); }
	 ruleQuery
{ after(grammarAccess.getQueryRule()); } 
	 EOF 
;

// Rule Query
ruleQuery
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getQueryAccess().getAlternatives()); }
(rule__Query__Alternatives)
{ after(grammarAccess.getQueryAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTemporaryStream
entryRuleTemporaryStream 
:
{ before(grammarAccess.getTemporaryStreamRule()); }
	 ruleTemporaryStream
{ after(grammarAccess.getTemporaryStreamRule()); } 
	 EOF 
;

// Rule TemporaryStream
ruleTemporaryStream
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTemporaryStreamAccess().getGroup()); }
(rule__TemporaryStream__Group__0)
{ after(grammarAccess.getTemporaryStreamAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleView
entryRuleView 
:
{ before(grammarAccess.getViewRule()); }
	 ruleView
{ after(grammarAccess.getViewRule()); } 
	 EOF 
;

// Rule View
ruleView
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getViewAccess().getGroup()); }
(rule__View__Group__0)
{ after(grammarAccess.getViewAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSharedStream
entryRuleSharedStream 
:
{ before(grammarAccess.getSharedStreamRule()); }
	 ruleSharedStream
{ after(grammarAccess.getSharedStreamRule()); } 
	 EOF 
;

// Rule SharedStream
ruleSharedStream
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSharedStreamAccess().getGroup()); }
(rule__SharedStream__Group__0)
{ after(grammarAccess.getSharedStreamAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOperator
entryRuleOperator 
:
{ before(grammarAccess.getOperatorRule()); }
	 ruleOperator
{ after(grammarAccess.getOperatorRule()); } 
	 EOF 
;

// Rule Operator
ruleOperator
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getOperatorAccess().getGroup()); }
(rule__Operator__Group__0)
{ after(grammarAccess.getOperatorAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOperatorList
entryRuleOperatorList 
:
{ before(grammarAccess.getOperatorListRule()); }
	 ruleOperatorList
{ after(grammarAccess.getOperatorListRule()); } 
	 EOF 
;

// Rule OperatorList
ruleOperatorList
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getOperatorListAccess().getGroup()); }
(rule__OperatorList__Group__0)
{ after(grammarAccess.getOperatorListAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOperatorOrQuery
entryRuleOperatorOrQuery 
:
{ before(grammarAccess.getOperatorOrQueryRule()); }
	 ruleOperatorOrQuery
{ after(grammarAccess.getOperatorOrQueryRule()); } 
	 EOF 
;

// Rule OperatorOrQuery
ruleOperatorOrQuery
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getOperatorOrQueryAccess().getGroup()); }
(rule__OperatorOrQuery__Group__0)
{ after(grammarAccess.getOperatorOrQueryAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleParameterList
entryRuleParameterList 
:
{ before(grammarAccess.getParameterListRule()); }
	 ruleParameterList
{ after(grammarAccess.getParameterListRule()); } 
	 EOF 
;

// Rule ParameterList
ruleParameterList
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getParameterListAccess().getGroup()); }
(rule__ParameterList__Group__0)
{ after(grammarAccess.getParameterListAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleParameter
entryRuleParameter 
:
{ before(grammarAccess.getParameterRule()); }
	 ruleParameter
{ after(grammarAccess.getParameterRule()); } 
	 EOF 
;

// Rule Parameter
ruleParameter
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getParameterAccess().getGroup()); }
(rule__Parameter__Group__0)
{ after(grammarAccess.getParameterAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleParameterValue
entryRuleParameterValue 
:
{ before(grammarAccess.getParameterValueRule()); }
	 ruleParameterValue
{ after(grammarAccess.getParameterValueRule()); } 
	 EOF 
;

// Rule ParameterValue
ruleParameterValue
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getParameterValueAccess().getAlternatives()); }
(rule__ParameterValue__Alternatives)
{ after(grammarAccess.getParameterValueAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLongParameterValue
entryRuleLongParameterValue 
:
{ before(grammarAccess.getLongParameterValueRule()); }
	 ruleLongParameterValue
{ after(grammarAccess.getLongParameterValueRule()); } 
	 EOF 
;

// Rule LongParameterValue
ruleLongParameterValue
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLongParameterValueAccess().getValueAssignment()); }
(rule__LongParameterValue__ValueAssignment)
{ after(grammarAccess.getLongParameterValueAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDoubleParameterValue
entryRuleDoubleParameterValue 
:
{ before(grammarAccess.getDoubleParameterValueRule()); }
	 ruleDoubleParameterValue
{ after(grammarAccess.getDoubleParameterValueRule()); } 
	 EOF 
;

// Rule DoubleParameterValue
ruleDoubleParameterValue
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDoubleParameterValueAccess().getValueAssignment()); }
(rule__DoubleParameterValue__ValueAssignment)
{ after(grammarAccess.getDoubleParameterValueAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStringParameterValue
entryRuleStringParameterValue 
:
{ before(grammarAccess.getStringParameterValueRule()); }
	 ruleStringParameterValue
{ after(grammarAccess.getStringParameterValueRule()); } 
	 EOF 
;

// Rule StringParameterValue
ruleStringParameterValue
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStringParameterValueAccess().getValueAssignment()); }
(rule__StringParameterValue__ValueAssignment)
{ after(grammarAccess.getStringParameterValueAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleListParameterValue
entryRuleListParameterValue 
:
{ before(grammarAccess.getListParameterValueRule()); }
	 ruleListParameterValue
{ after(grammarAccess.getListParameterValueRule()); } 
	 EOF 
;

// Rule ListParameterValue
ruleListParameterValue
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getListParameterValueAccess().getGroup()); }
(rule__ListParameterValue__Group__0)
{ after(grammarAccess.getListParameterValueAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMapParameterValue
entryRuleMapParameterValue 
:
{ before(grammarAccess.getMapParameterValueRule()); }
	 ruleMapParameterValue
{ after(grammarAccess.getMapParameterValueRule()); } 
	 EOF 
;

// Rule MapParameterValue
ruleMapParameterValue
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMapParameterValueAccess().getGroup()); }
(rule__MapParameterValue__Group__0)
{ after(grammarAccess.getMapParameterValueAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMapEntry
entryRuleMapEntry 
:
{ before(grammarAccess.getMapEntryRule()); }
	 ruleMapEntry
{ after(grammarAccess.getMapEntryRule()); } 
	 EOF 
;

// Rule MapEntry
ruleMapEntry
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMapEntryAccess().getGroup()); }
(rule__MapEntry__Group__0)
{ after(grammarAccess.getMapEntryAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__Query__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQueryAccess().getTemporaryStreamParserRuleCall_0()); }
	ruleTemporaryStream
{ after(grammarAccess.getQueryAccess().getTemporaryStreamParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getQueryAccess().getViewParserRuleCall_1()); }
	ruleView
{ after(grammarAccess.getQueryAccess().getViewParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getQueryAccess().getSharedStreamParserRuleCall_2()); }
	ruleSharedStream
{ after(grammarAccess.getQueryAccess().getSharedStreamParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Operator__Alternatives_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperatorAccess().getOperatorsAssignment_2_0()); }
(rule__Operator__OperatorsAssignment_2_0)
{ after(grammarAccess.getOperatorAccess().getOperatorsAssignment_2_0()); }
)

    |(
{ before(grammarAccess.getOperatorAccess().getGroup_2_1()); }
(rule__Operator__Group_2_1__0)
{ after(grammarAccess.getOperatorAccess().getGroup_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OperatorOrQuery__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperatorOrQueryAccess().getOpAssignment_1_0()); }
(rule__OperatorOrQuery__OpAssignment_1_0)
{ after(grammarAccess.getOperatorOrQueryAccess().getOpAssignment_1_0()); }
)

    |(
{ before(grammarAccess.getOperatorOrQueryAccess().getQueryAssignment_1_1()); }
(rule__OperatorOrQuery__QueryAssignment_1_1)
{ after(grammarAccess.getOperatorOrQueryAccess().getQueryAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterValue__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterValueAccess().getLongParameterValueParserRuleCall_0()); }
	ruleLongParameterValue
{ after(grammarAccess.getParameterValueAccess().getLongParameterValueParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getParameterValueAccess().getDoubleParameterValueParserRuleCall_1()); }
	ruleDoubleParameterValue
{ after(grammarAccess.getParameterValueAccess().getDoubleParameterValueParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getParameterValueAccess().getStringParameterValueParserRuleCall_2()); }
	ruleStringParameterValue
{ after(grammarAccess.getParameterValueAccess().getStringParameterValueParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getParameterValueAccess().getListParameterValueParserRuleCall_3()); }
(	ruleListParameterValue)
{ after(grammarAccess.getParameterValueAccess().getListParameterValueParserRuleCall_3()); }
)

    |(
{ before(grammarAccess.getParameterValueAccess().getMapParameterValueParserRuleCall_4()); }
	ruleMapParameterValue
{ after(grammarAccess.getParameterValueAccess().getMapParameterValueParserRuleCall_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__TemporaryStream__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TemporaryStream__Group__0__Impl
	rule__TemporaryStream__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TemporaryStream__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTemporaryStreamAccess().getNameAssignment_0()); }
(rule__TemporaryStream__NameAssignment_0)
{ after(grammarAccess.getTemporaryStreamAccess().getNameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TemporaryStream__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TemporaryStream__Group__1__Impl
	rule__TemporaryStream__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TemporaryStream__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTemporaryStreamAccess().getEqualsSignKeyword_1()); }

	'=' 

{ after(grammarAccess.getTemporaryStreamAccess().getEqualsSignKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TemporaryStream__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TemporaryStream__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TemporaryStream__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTemporaryStreamAccess().getOpAssignment_2()); }
(rule__TemporaryStream__OpAssignment_2)
{ after(grammarAccess.getTemporaryStreamAccess().getOpAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__View__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__View__Group__0__Impl
	rule__View__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__View__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getViewAccess().getNameAssignment_0()); }
(rule__View__NameAssignment_0)
{ after(grammarAccess.getViewAccess().getNameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__View__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__View__Group__1__Impl
	rule__View__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__View__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getViewAccess().getColonEqualsSignKeyword_1()); }

	':=' 

{ after(grammarAccess.getViewAccess().getColonEqualsSignKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__View__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__View__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__View__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getViewAccess().getOpAssignment_2()); }
(rule__View__OpAssignment_2)
{ after(grammarAccess.getViewAccess().getOpAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__SharedStream__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SharedStream__Group__0__Impl
	rule__SharedStream__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SharedStream__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSharedStreamAccess().getNameAssignment_0()); }
(rule__SharedStream__NameAssignment_0)
{ after(grammarAccess.getSharedStreamAccess().getNameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SharedStream__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SharedStream__Group__1__Impl
	rule__SharedStream__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SharedStream__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSharedStreamAccess().getColonColonEqualsSignKeyword_1()); }

	'::=' 

{ after(grammarAccess.getSharedStreamAccess().getColonColonEqualsSignKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SharedStream__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SharedStream__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SharedStream__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSharedStreamAccess().getOpAssignment_2()); }
(rule__SharedStream__OpAssignment_2)
{ after(grammarAccess.getSharedStreamAccess().getOpAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Operator__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Operator__Group__0__Impl
	rule__Operator__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Operator__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperatorAccess().getOperatorTypeAssignment_0()); }
(rule__Operator__OperatorTypeAssignment_0)
{ after(grammarAccess.getOperatorAccess().getOperatorTypeAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Operator__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Operator__Group__1__Impl
	rule__Operator__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Operator__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperatorAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getOperatorAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Operator__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Operator__Group__2__Impl
	rule__Operator__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Operator__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperatorAccess().getAlternatives_2()); }
(rule__Operator__Alternatives_2)?
{ after(grammarAccess.getOperatorAccess().getAlternatives_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Operator__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Operator__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Operator__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperatorAccess().getRightParenthesisKeyword_3()); }

	')' 

{ after(grammarAccess.getOperatorAccess().getRightParenthesisKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Operator__Group_2_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Operator__Group_2_1__0__Impl
	rule__Operator__Group_2_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Operator__Group_2_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperatorAccess().getParametersAssignment_2_1_0()); }
(rule__Operator__ParametersAssignment_2_1_0)
{ after(grammarAccess.getOperatorAccess().getParametersAssignment_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Operator__Group_2_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Operator__Group_2_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Operator__Group_2_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperatorAccess().getGroup_2_1_1()); }
(rule__Operator__Group_2_1_1__0)?
{ after(grammarAccess.getOperatorAccess().getGroup_2_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Operator__Group_2_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Operator__Group_2_1_1__0__Impl
	rule__Operator__Group_2_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Operator__Group_2_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperatorAccess().getCommaKeyword_2_1_1_0()); }

	',' 

{ after(grammarAccess.getOperatorAccess().getCommaKeyword_2_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Operator__Group_2_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Operator__Group_2_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Operator__Group_2_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperatorAccess().getOperatorsAssignment_2_1_1_1()); }
(rule__Operator__OperatorsAssignment_2_1_1_1)
{ after(grammarAccess.getOperatorAccess().getOperatorsAssignment_2_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__OperatorList__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OperatorList__Group__0__Impl
	rule__OperatorList__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OperatorList__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperatorListAccess().getElementsAssignment_0()); }
(rule__OperatorList__ElementsAssignment_0)
{ after(grammarAccess.getOperatorListAccess().getElementsAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OperatorList__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OperatorList__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OperatorList__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperatorListAccess().getGroup_1()); }
(rule__OperatorList__Group_1__0)*
{ after(grammarAccess.getOperatorListAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__OperatorList__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OperatorList__Group_1__0__Impl
	rule__OperatorList__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OperatorList__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperatorListAccess().getCommaKeyword_1_0()); }

	',' 

{ after(grammarAccess.getOperatorListAccess().getCommaKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OperatorList__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OperatorList__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OperatorList__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperatorListAccess().getElementsAssignment_1_1()); }
(rule__OperatorList__ElementsAssignment_1_1)
{ after(grammarAccess.getOperatorListAccess().getElementsAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__OperatorOrQuery__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OperatorOrQuery__Group__0__Impl
	rule__OperatorOrQuery__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OperatorOrQuery__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperatorOrQueryAccess().getGroup_0()); }
(rule__OperatorOrQuery__Group_0__0)?
{ after(grammarAccess.getOperatorOrQueryAccess().getGroup_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OperatorOrQuery__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OperatorOrQuery__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OperatorOrQuery__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperatorOrQueryAccess().getAlternatives_1()); }
(rule__OperatorOrQuery__Alternatives_1)
{ after(grammarAccess.getOperatorOrQueryAccess().getAlternatives_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__OperatorOrQuery__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OperatorOrQuery__Group_0__0__Impl
	rule__OperatorOrQuery__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OperatorOrQuery__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperatorOrQueryAccess().getOutputPortAssignment_0_0()); }
(rule__OperatorOrQuery__OutputPortAssignment_0_0)
{ after(grammarAccess.getOperatorOrQueryAccess().getOutputPortAssignment_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OperatorOrQuery__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OperatorOrQuery__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OperatorOrQuery__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperatorOrQueryAccess().getColonKeyword_0_1()); }

	':' 

{ after(grammarAccess.getOperatorOrQueryAccess().getColonKeyword_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ParameterList__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParameterList__Group__0__Impl
	rule__ParameterList__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterList__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterListAccess().getLeftCurlyBracketKeyword_0()); }

	'{' 

{ after(grammarAccess.getParameterListAccess().getLeftCurlyBracketKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ParameterList__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParameterList__Group__1__Impl
	rule__ParameterList__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterList__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterListAccess().getElementsAssignment_1()); }
(rule__ParameterList__ElementsAssignment_1)
{ after(grammarAccess.getParameterListAccess().getElementsAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ParameterList__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParameterList__Group__2__Impl
	rule__ParameterList__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterList__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterListAccess().getGroup_2()); }
(rule__ParameterList__Group_2__0)*
{ after(grammarAccess.getParameterListAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ParameterList__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParameterList__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterList__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterListAccess().getRightCurlyBracketKeyword_3()); }

	'}' 

{ after(grammarAccess.getParameterListAccess().getRightCurlyBracketKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__ParameterList__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParameterList__Group_2__0__Impl
	rule__ParameterList__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterList__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterListAccess().getCommaKeyword_2_0()); }

	',' 

{ after(grammarAccess.getParameterListAccess().getCommaKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ParameterList__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParameterList__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterList__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterListAccess().getElementsAssignment_2_1()); }
(rule__ParameterList__ElementsAssignment_2_1)
{ after(grammarAccess.getParameterListAccess().getElementsAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Parameter__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Parameter__Group__0__Impl
	rule__Parameter__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterAccess().getNameAssignment_0()); }
(rule__Parameter__NameAssignment_0)
{ after(grammarAccess.getParameterAccess().getNameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Parameter__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Parameter__Group__1__Impl
	rule__Parameter__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterAccess().getEqualsSignKeyword_1()); }

	'=' 

{ after(grammarAccess.getParameterAccess().getEqualsSignKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Parameter__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Parameter__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterAccess().getValueAssignment_2()); }
(rule__Parameter__ValueAssignment_2)
{ after(grammarAccess.getParameterAccess().getValueAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ListParameterValue__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ListParameterValue__Group__0__Impl
	rule__ListParameterValue__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ListParameterValue__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getListParameterValueAccess().getListAction_0()); }
(

)
{ after(grammarAccess.getListParameterValueAccess().getListAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ListParameterValue__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ListParameterValue__Group__1__Impl
	rule__ListParameterValue__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ListParameterValue__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getListParameterValueAccess().getLeftSquareBracketKeyword_1()); }

	'[' 

{ after(grammarAccess.getListParameterValueAccess().getLeftSquareBracketKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ListParameterValue__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ListParameterValue__Group__2__Impl
	rule__ListParameterValue__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ListParameterValue__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getListParameterValueAccess().getGroup_2()); }
(rule__ListParameterValue__Group_2__0)?
{ after(grammarAccess.getListParameterValueAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ListParameterValue__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ListParameterValue__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ListParameterValue__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getListParameterValueAccess().getRightSquareBracketKeyword_3()); }

	']' 

{ after(grammarAccess.getListParameterValueAccess().getRightSquareBracketKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__ListParameterValue__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ListParameterValue__Group_2__0__Impl
	rule__ListParameterValue__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ListParameterValue__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getListParameterValueAccess().getElementsAssignment_2_0()); }
(rule__ListParameterValue__ElementsAssignment_2_0)
{ after(grammarAccess.getListParameterValueAccess().getElementsAssignment_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ListParameterValue__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ListParameterValue__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ListParameterValue__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getListParameterValueAccess().getGroup_2_1()); }
(rule__ListParameterValue__Group_2_1__0)*
{ after(grammarAccess.getListParameterValueAccess().getGroup_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ListParameterValue__Group_2_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ListParameterValue__Group_2_1__0__Impl
	rule__ListParameterValue__Group_2_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ListParameterValue__Group_2_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getListParameterValueAccess().getCommaKeyword_2_1_0()); }

	',' 

{ after(grammarAccess.getListParameterValueAccess().getCommaKeyword_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ListParameterValue__Group_2_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ListParameterValue__Group_2_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ListParameterValue__Group_2_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getListParameterValueAccess().getElementsAssignment_2_1_1()); }
(rule__ListParameterValue__ElementsAssignment_2_1_1)
{ after(grammarAccess.getListParameterValueAccess().getElementsAssignment_2_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__MapParameterValue__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MapParameterValue__Group__0__Impl
	rule__MapParameterValue__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MapParameterValue__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMapParameterValueAccess().getMapAction_0()); }
(

)
{ after(grammarAccess.getMapParameterValueAccess().getMapAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MapParameterValue__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MapParameterValue__Group__1__Impl
	rule__MapParameterValue__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MapParameterValue__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMapParameterValueAccess().getLeftSquareBracketKeyword_1()); }

	'[' 

{ after(grammarAccess.getMapParameterValueAccess().getLeftSquareBracketKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MapParameterValue__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MapParameterValue__Group__2__Impl
	rule__MapParameterValue__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__MapParameterValue__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMapParameterValueAccess().getGroup_2()); }
(rule__MapParameterValue__Group_2__0)?
{ after(grammarAccess.getMapParameterValueAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MapParameterValue__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MapParameterValue__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MapParameterValue__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMapParameterValueAccess().getRightSquareBracketKeyword_3()); }

	']' 

{ after(grammarAccess.getMapParameterValueAccess().getRightSquareBracketKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__MapParameterValue__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MapParameterValue__Group_2__0__Impl
	rule__MapParameterValue__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MapParameterValue__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMapParameterValueAccess().getElementsAssignment_2_0()); }
(rule__MapParameterValue__ElementsAssignment_2_0)
{ after(grammarAccess.getMapParameterValueAccess().getElementsAssignment_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MapParameterValue__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MapParameterValue__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MapParameterValue__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMapParameterValueAccess().getGroup_2_1()); }
(rule__MapParameterValue__Group_2_1__0)*
{ after(grammarAccess.getMapParameterValueAccess().getGroup_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__MapParameterValue__Group_2_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MapParameterValue__Group_2_1__0__Impl
	rule__MapParameterValue__Group_2_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MapParameterValue__Group_2_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMapParameterValueAccess().getCommaKeyword_2_1_0()); }

	',' 

{ after(grammarAccess.getMapParameterValueAccess().getCommaKeyword_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MapParameterValue__Group_2_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MapParameterValue__Group_2_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MapParameterValue__Group_2_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMapParameterValueAccess().getElementsAssignment_2_1_1()); }
(rule__MapParameterValue__ElementsAssignment_2_1_1)
{ after(grammarAccess.getMapParameterValueAccess().getElementsAssignment_2_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__MapEntry__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MapEntry__Group__0__Impl
	rule__MapEntry__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MapEntry__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMapEntryAccess().getKeyAssignment_0()); }
(rule__MapEntry__KeyAssignment_0)
{ after(grammarAccess.getMapEntryAccess().getKeyAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MapEntry__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MapEntry__Group__1__Impl
	rule__MapEntry__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MapEntry__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMapEntryAccess().getEqualsSignKeyword_1()); }

	'=' 

{ after(grammarAccess.getMapEntryAccess().getEqualsSignKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MapEntry__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MapEntry__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MapEntry__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMapEntryAccess().getValueAssignment_2()); }
(rule__MapEntry__ValueAssignment_2)
{ after(grammarAccess.getMapEntryAccess().getValueAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}









rule__PQLModel__QueriesAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPQLModelAccess().getQueriesQueryParserRuleCall_0()); }
	ruleQuery{ after(grammarAccess.getPQLModelAccess().getQueriesQueryParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TemporaryStream__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTemporaryStreamAccess().getNameIDTerminalRuleCall_0_0()); }
	RULE_ID{ after(grammarAccess.getTemporaryStreamAccess().getNameIDTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TemporaryStream__OpAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTemporaryStreamAccess().getOpOperatorParserRuleCall_2_0()); }
	ruleOperator{ after(grammarAccess.getTemporaryStreamAccess().getOpOperatorParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__View__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getViewAccess().getNameIDTerminalRuleCall_0_0()); }
	RULE_ID{ after(grammarAccess.getViewAccess().getNameIDTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__View__OpAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getViewAccess().getOpOperatorParserRuleCall_2_0()); }
	ruleOperator{ after(grammarAccess.getViewAccess().getOpOperatorParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SharedStream__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSharedStreamAccess().getNameIDTerminalRuleCall_0_0()); }
	RULE_ID{ after(grammarAccess.getSharedStreamAccess().getNameIDTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SharedStream__OpAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSharedStreamAccess().getOpOperatorParserRuleCall_2_0()); }
	ruleOperator{ after(grammarAccess.getSharedStreamAccess().getOpOperatorParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Operator__OperatorTypeAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperatorAccess().getOperatorTypeIDTerminalRuleCall_0_0()); }
	RULE_ID{ after(grammarAccess.getOperatorAccess().getOperatorTypeIDTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Operator__OperatorsAssignment_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperatorAccess().getOperatorsOperatorListParserRuleCall_2_0_0()); }
	ruleOperatorList{ after(grammarAccess.getOperatorAccess().getOperatorsOperatorListParserRuleCall_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Operator__ParametersAssignment_2_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperatorAccess().getParametersParameterListParserRuleCall_2_1_0_0()); }
	ruleParameterList{ after(grammarAccess.getOperatorAccess().getParametersParameterListParserRuleCall_2_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Operator__OperatorsAssignment_2_1_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperatorAccess().getOperatorsOperatorListParserRuleCall_2_1_1_1_0()); }
	ruleOperatorList{ after(grammarAccess.getOperatorAccess().getOperatorsOperatorListParserRuleCall_2_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OperatorList__ElementsAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperatorListAccess().getElementsOperatorOrQueryParserRuleCall_0_0()); }
	ruleOperatorOrQuery{ after(grammarAccess.getOperatorListAccess().getElementsOperatorOrQueryParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OperatorList__ElementsAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperatorListAccess().getElementsOperatorOrQueryParserRuleCall_1_1_0()); }
	ruleOperatorOrQuery{ after(grammarAccess.getOperatorListAccess().getElementsOperatorOrQueryParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OperatorOrQuery__OutputPortAssignment_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperatorOrQueryAccess().getOutputPortINTTerminalRuleCall_0_0_0()); }
	RULE_INT{ after(grammarAccess.getOperatorOrQueryAccess().getOutputPortINTTerminalRuleCall_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OperatorOrQuery__OpAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperatorOrQueryAccess().getOpOperatorParserRuleCall_1_0_0()); }
	ruleOperator{ after(grammarAccess.getOperatorOrQueryAccess().getOpOperatorParserRuleCall_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OperatorOrQuery__QueryAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperatorOrQueryAccess().getQueryQueryCrossReference_1_1_0()); }
(
{ before(grammarAccess.getOperatorOrQueryAccess().getQueryQueryIDTerminalRuleCall_1_1_0_1()); }
	RULE_ID{ after(grammarAccess.getOperatorOrQueryAccess().getQueryQueryIDTerminalRuleCall_1_1_0_1()); }
)
{ after(grammarAccess.getOperatorOrQueryAccess().getQueryQueryCrossReference_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterList__ElementsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterListAccess().getElementsParameterParserRuleCall_1_0()); }
	ruleParameter{ after(grammarAccess.getParameterListAccess().getElementsParameterParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterList__ElementsAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterListAccess().getElementsParameterParserRuleCall_2_1_0()); }
	ruleParameter{ after(grammarAccess.getParameterListAccess().getElementsParameterParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterAccess().getNameIDTerminalRuleCall_0_0()); }
	RULE_ID{ after(grammarAccess.getParameterAccess().getNameIDTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__ValueAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterAccess().getValueParameterValueParserRuleCall_2_0()); }
	ruleParameterValue{ after(grammarAccess.getParameterAccess().getValueParameterValueParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LongParameterValue__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLongParameterValueAccess().getValueINTTerminalRuleCall_0()); }
	RULE_INT{ after(grammarAccess.getLongParameterValueAccess().getValueINTTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DoubleParameterValue__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDoubleParameterValueAccess().getValueDOUBLETerminalRuleCall_0()); }
	RULE_DOUBLE{ after(grammarAccess.getDoubleParameterValueAccess().getValueDOUBLETerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StringParameterValue__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringParameterValueAccess().getValueSTRINGTerminalRuleCall_0()); }
	RULE_STRING{ after(grammarAccess.getStringParameterValueAccess().getValueSTRINGTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ListParameterValue__ElementsAssignment_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getListParameterValueAccess().getElementsParameterValueParserRuleCall_2_0_0()); }
	ruleParameterValue{ after(grammarAccess.getListParameterValueAccess().getElementsParameterValueParserRuleCall_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ListParameterValue__ElementsAssignment_2_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getListParameterValueAccess().getElementsParameterValueParserRuleCall_2_1_1_0()); }
	ruleParameterValue{ after(grammarAccess.getListParameterValueAccess().getElementsParameterValueParserRuleCall_2_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MapParameterValue__ElementsAssignment_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMapParameterValueAccess().getElementsMapEntryParserRuleCall_2_0_0()); }
	ruleMapEntry{ after(grammarAccess.getMapParameterValueAccess().getElementsMapEntryParserRuleCall_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MapParameterValue__ElementsAssignment_2_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMapParameterValueAccess().getElementsMapEntryParserRuleCall_2_1_1_0()); }
	ruleMapEntry{ after(grammarAccess.getMapParameterValueAccess().getElementsMapEntryParserRuleCall_2_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MapEntry__KeyAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMapEntryAccess().getKeyParameterValueParserRuleCall_0_0()); }
	ruleParameterValue{ after(grammarAccess.getMapEntryAccess().getKeyParameterValueParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MapEntry__ValueAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMapEntryAccess().getValueParameterValueParserRuleCall_2_0()); }
	ruleParameterValue{ after(grammarAccess.getMapEntryAccess().getValueParameterValueParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_DOUBLE : (' 0 '..' 9 ')* ' . ' (' 0 '..' 9 ')+;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


