/*
 * generated by Xtext
 */
package de.uniol.inf.is.odysseus.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import de.uniol.inf.is.odysseus.services.Pql2GrammarAccess;

public class Pql2Parser extends AbstractContentAssistParser {
	
	@Inject
	private Pql2GrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected de.uniol.inf.is.odysseus.ui.contentassist.antlr.internal.InternalPql2Parser createParser() {
		de.uniol.inf.is.odysseus.ui.contentassist.antlr.internal.InternalPql2Parser result = new de.uniol.inf.is.odysseus.ui.contentassist.antlr.internal.InternalPql2Parser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getQueryAccess().getAlternatives(), "rule__Query__Alternatives");
					put(grammarAccess.getOperatorAccess().getAlternatives_2(), "rule__Operator__Alternatives_2");
					put(grammarAccess.getOperatorOrQueryAccess().getAlternatives_1(), "rule__OperatorOrQuery__Alternatives_1");
					put(grammarAccess.getParameterValueAccess().getAlternatives(), "rule__ParameterValue__Alternatives");
					put(grammarAccess.getTemporaryStreamAccess().getGroup(), "rule__TemporaryStream__Group__0");
					put(grammarAccess.getViewAccess().getGroup(), "rule__View__Group__0");
					put(grammarAccess.getSharedStreamAccess().getGroup(), "rule__SharedStream__Group__0");
					put(grammarAccess.getOperatorAccess().getGroup(), "rule__Operator__Group__0");
					put(grammarAccess.getOperatorAccess().getGroup_2_1(), "rule__Operator__Group_2_1__0");
					put(grammarAccess.getOperatorAccess().getGroup_2_1_1(), "rule__Operator__Group_2_1_1__0");
					put(grammarAccess.getOperatorListAccess().getGroup(), "rule__OperatorList__Group__0");
					put(grammarAccess.getOperatorListAccess().getGroup_1(), "rule__OperatorList__Group_1__0");
					put(grammarAccess.getOperatorOrQueryAccess().getGroup(), "rule__OperatorOrQuery__Group__0");
					put(grammarAccess.getOperatorOrQueryAccess().getGroup_0(), "rule__OperatorOrQuery__Group_0__0");
					put(grammarAccess.getParameterListAccess().getGroup(), "rule__ParameterList__Group__0");
					put(grammarAccess.getParameterListAccess().getGroup_2(), "rule__ParameterList__Group_2__0");
					put(grammarAccess.getParameterAccess().getGroup(), "rule__Parameter__Group__0");
					put(grammarAccess.getListParameterValueAccess().getGroup(), "rule__ListParameterValue__Group__0");
					put(grammarAccess.getListParameterValueAccess().getGroup_2(), "rule__ListParameterValue__Group_2__0");
					put(grammarAccess.getListParameterValueAccess().getGroup_2_1(), "rule__ListParameterValue__Group_2_1__0");
					put(grammarAccess.getMapParameterValueAccess().getGroup(), "rule__MapParameterValue__Group__0");
					put(grammarAccess.getMapParameterValueAccess().getGroup_2(), "rule__MapParameterValue__Group_2__0");
					put(grammarAccess.getMapParameterValueAccess().getGroup_2_1(), "rule__MapParameterValue__Group_2_1__0");
					put(grammarAccess.getMapEntryAccess().getGroup(), "rule__MapEntry__Group__0");
					put(grammarAccess.getPQLModelAccess().getQueriesAssignment(), "rule__PQLModel__QueriesAssignment");
					put(grammarAccess.getTemporaryStreamAccess().getNameAssignment_0(), "rule__TemporaryStream__NameAssignment_0");
					put(grammarAccess.getTemporaryStreamAccess().getOpAssignment_2(), "rule__TemporaryStream__OpAssignment_2");
					put(grammarAccess.getViewAccess().getNameAssignment_0(), "rule__View__NameAssignment_0");
					put(grammarAccess.getViewAccess().getOpAssignment_2(), "rule__View__OpAssignment_2");
					put(grammarAccess.getSharedStreamAccess().getNameAssignment_0(), "rule__SharedStream__NameAssignment_0");
					put(grammarAccess.getSharedStreamAccess().getOpAssignment_2(), "rule__SharedStream__OpAssignment_2");
					put(grammarAccess.getOperatorAccess().getOperatorTypeAssignment_0(), "rule__Operator__OperatorTypeAssignment_0");
					put(grammarAccess.getOperatorAccess().getOperatorsAssignment_2_0(), "rule__Operator__OperatorsAssignment_2_0");
					put(grammarAccess.getOperatorAccess().getParametersAssignment_2_1_0(), "rule__Operator__ParametersAssignment_2_1_0");
					put(grammarAccess.getOperatorAccess().getOperatorsAssignment_2_1_1_1(), "rule__Operator__OperatorsAssignment_2_1_1_1");
					put(grammarAccess.getOperatorListAccess().getElementsAssignment_0(), "rule__OperatorList__ElementsAssignment_0");
					put(grammarAccess.getOperatorListAccess().getElementsAssignment_1_1(), "rule__OperatorList__ElementsAssignment_1_1");
					put(grammarAccess.getOperatorOrQueryAccess().getOutputPortAssignment_0_0(), "rule__OperatorOrQuery__OutputPortAssignment_0_0");
					put(grammarAccess.getOperatorOrQueryAccess().getOpAssignment_1_0(), "rule__OperatorOrQuery__OpAssignment_1_0");
					put(grammarAccess.getOperatorOrQueryAccess().getQueryAssignment_1_1(), "rule__OperatorOrQuery__QueryAssignment_1_1");
					put(grammarAccess.getParameterListAccess().getElementsAssignment_1(), "rule__ParameterList__ElementsAssignment_1");
					put(grammarAccess.getParameterListAccess().getElementsAssignment_2_1(), "rule__ParameterList__ElementsAssignment_2_1");
					put(grammarAccess.getParameterAccess().getNameAssignment_0(), "rule__Parameter__NameAssignment_0");
					put(grammarAccess.getParameterAccess().getValueAssignment_2(), "rule__Parameter__ValueAssignment_2");
					put(grammarAccess.getLongParameterValueAccess().getValueAssignment(), "rule__LongParameterValue__ValueAssignment");
					put(grammarAccess.getDoubleParameterValueAccess().getValueAssignment(), "rule__DoubleParameterValue__ValueAssignment");
					put(grammarAccess.getStringParameterValueAccess().getValueAssignment(), "rule__StringParameterValue__ValueAssignment");
					put(grammarAccess.getListParameterValueAccess().getElementsAssignment_2_0(), "rule__ListParameterValue__ElementsAssignment_2_0");
					put(grammarAccess.getListParameterValueAccess().getElementsAssignment_2_1_1(), "rule__ListParameterValue__ElementsAssignment_2_1_1");
					put(grammarAccess.getMapParameterValueAccess().getElementsAssignment_2_0(), "rule__MapParameterValue__ElementsAssignment_2_0");
					put(grammarAccess.getMapParameterValueAccess().getElementsAssignment_2_1_1(), "rule__MapParameterValue__ElementsAssignment_2_1_1");
					put(grammarAccess.getMapEntryAccess().getKeyAssignment_0(), "rule__MapEntry__KeyAssignment_0");
					put(grammarAccess.getMapEntryAccess().getValueAssignment_2(), "rule__MapEntry__ValueAssignment_2");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			de.uniol.inf.is.odysseus.ui.contentassist.antlr.internal.InternalPql2Parser typedParser = (de.uniol.inf.is.odysseus.ui.contentassist.antlr.internal.InternalPql2Parser) parser;
			typedParser.entryRulePQLModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public Pql2GrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(Pql2GrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
