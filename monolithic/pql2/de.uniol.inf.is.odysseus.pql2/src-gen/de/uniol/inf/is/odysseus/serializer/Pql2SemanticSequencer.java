/*
 * generated by Xtext
 */
package de.uniol.inf.is.odysseus.serializer;

import com.google.inject.Inject;
import com.google.inject.Provider;
import de.uniol.inf.is.odysseus.pql2.DoubleParameterValue;
import de.uniol.inf.is.odysseus.pql2.List;
import de.uniol.inf.is.odysseus.pql2.LongParameterValue;
import de.uniol.inf.is.odysseus.pql2.Map;
import de.uniol.inf.is.odysseus.pql2.MapEntry;
import de.uniol.inf.is.odysseus.pql2.Operator;
import de.uniol.inf.is.odysseus.pql2.OperatorList;
import de.uniol.inf.is.odysseus.pql2.OperatorOrQuery;
import de.uniol.inf.is.odysseus.pql2.PQLModel;
import de.uniol.inf.is.odysseus.pql2.Parameter;
import de.uniol.inf.is.odysseus.pql2.ParameterList;
import de.uniol.inf.is.odysseus.pql2.Pql2Package;
import de.uniol.inf.is.odysseus.pql2.SharedStream;
import de.uniol.inf.is.odysseus.pql2.StringParameterValue;
import de.uniol.inf.is.odysseus.pql2.TemporaryStream;
import de.uniol.inf.is.odysseus.pql2.View;
import de.uniol.inf.is.odysseus.services.Pql2GrammarAccess;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.serializer.acceptor.ISemanticSequenceAcceptor;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.diagnostic.ISemanticSequencerDiagnosticProvider;
import org.eclipse.xtext.serializer.diagnostic.ISerializationDiagnostic.Acceptor;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.GenericSequencer;
import org.eclipse.xtext.serializer.sequencer.ISemanticNodeProvider.INodesForEObjectProvider;
import org.eclipse.xtext.serializer.sequencer.ISemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class Pql2SemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private Pql2GrammarAccess grammarAccess;
	
	@Override
	public void createSequence(EObject context, EObject semanticObject) {
		if(semanticObject.eClass().getEPackage() == Pql2Package.eINSTANCE) switch(semanticObject.eClass().getClassifierID()) {
			case Pql2Package.DOUBLE_PARAMETER_VALUE:
				sequence_DoubleParameterValue(context, (DoubleParameterValue) semanticObject); 
				return; 
			case Pql2Package.LIST:
				sequence_ListParameterValue(context, (List) semanticObject); 
				return; 
			case Pql2Package.LONG_PARAMETER_VALUE:
				sequence_LongParameterValue(context, (LongParameterValue) semanticObject); 
				return; 
			case Pql2Package.MAP:
				sequence_MapParameterValue(context, (Map) semanticObject); 
				return; 
			case Pql2Package.MAP_ENTRY:
				sequence_MapEntry(context, (MapEntry) semanticObject); 
				return; 
			case Pql2Package.OPERATOR:
				sequence_Operator(context, (Operator) semanticObject); 
				return; 
			case Pql2Package.OPERATOR_LIST:
				sequence_OperatorList(context, (OperatorList) semanticObject); 
				return; 
			case Pql2Package.OPERATOR_OR_QUERY:
				sequence_OperatorOrQuery(context, (OperatorOrQuery) semanticObject); 
				return; 
			case Pql2Package.PQL_MODEL:
				sequence_PQLModel(context, (PQLModel) semanticObject); 
				return; 
			case Pql2Package.PARAMETER:
				sequence_Parameter(context, (Parameter) semanticObject); 
				return; 
			case Pql2Package.PARAMETER_LIST:
				sequence_ParameterList(context, (ParameterList) semanticObject); 
				return; 
			case Pql2Package.SHARED_STREAM:
				sequence_SharedStream(context, (SharedStream) semanticObject); 
				return; 
			case Pql2Package.STRING_PARAMETER_VALUE:
				sequence_StringParameterValue(context, (StringParameterValue) semanticObject); 
				return; 
			case Pql2Package.TEMPORARY_STREAM:
				sequence_TemporaryStream(context, (TemporaryStream) semanticObject); 
				return; 
			case Pql2Package.VIEW:
				sequence_View(context, (View) semanticObject); 
				return; 
			}
		if (errorAcceptor != null) errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Constraint:
	 *     value=DOUBLE
	 */
	protected void sequence_DoubleParameterValue(EObject context, DoubleParameterValue semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, Pql2Package.Literals.DOUBLE_PARAMETER_VALUE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Pql2Package.Literals.DOUBLE_PARAMETER_VALUE__VALUE));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getDoubleParameterValueAccess().getValueDOUBLETerminalRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     ((elements+=ParameterValue elements+=ParameterValue*)?)
	 */
	protected void sequence_ListParameterValue(EObject context, List semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     value=INT
	 */
	protected void sequence_LongParameterValue(EObject context, LongParameterValue semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, Pql2Package.Literals.LONG_PARAMETER_VALUE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Pql2Package.Literals.LONG_PARAMETER_VALUE__VALUE));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getLongParameterValueAccess().getValueINTTerminalRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (key=ParameterValue value=ParameterValue)
	 */
	protected void sequence_MapEntry(EObject context, MapEntry semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, Pql2Package.Literals.MAP_ENTRY__KEY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Pql2Package.Literals.MAP_ENTRY__KEY));
			if(transientValues.isValueTransient(semanticObject, Pql2Package.Literals.MAP_ENTRY__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Pql2Package.Literals.MAP_ENTRY__VALUE));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getMapEntryAccess().getKeyParameterValueParserRuleCall_0_0(), semanticObject.getKey());
		feeder.accept(grammarAccess.getMapEntryAccess().getValueParameterValueParserRuleCall_2_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     ((elements+=MapEntry elements+=MapEntry*)?)
	 */
	protected void sequence_MapParameterValue(EObject context, Map semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (elements+=OperatorOrQuery elements+=OperatorOrQuery*)
	 */
	protected void sequence_OperatorList(EObject context, OperatorList semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (outputPort=INT? (op=Operator | query=[Query|ID]))
	 */
	protected void sequence_OperatorOrQuery(EObject context, OperatorOrQuery semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (operatorType=ID (operators=OperatorList | (parameters=ParameterList operators=OperatorList?))?)
	 */
	protected void sequence_Operator(EObject context, Operator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     queries+=Query*
	 */
	protected void sequence_PQLModel(EObject context, PQLModel semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (elements+=Parameter elements+=Parameter*)
	 */
	protected void sequence_ParameterList(EObject context, ParameterList semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (name=ID value=ParameterValue)
	 */
	protected void sequence_Parameter(EObject context, Parameter semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, Pql2Package.Literals.PARAMETER__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Pql2Package.Literals.PARAMETER__NAME));
			if(transientValues.isValueTransient(semanticObject, Pql2Package.Literals.PARAMETER__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Pql2Package.Literals.PARAMETER__VALUE));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getParameterAccess().getNameIDTerminalRuleCall_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getParameterAccess().getValueParameterValueParserRuleCall_2_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (name=ID op=Operator)
	 */
	protected void sequence_SharedStream(EObject context, SharedStream semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, Pql2Package.Literals.QUERY__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Pql2Package.Literals.QUERY__NAME));
			if(transientValues.isValueTransient(semanticObject, Pql2Package.Literals.QUERY__OP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Pql2Package.Literals.QUERY__OP));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getSharedStreamAccess().getNameIDTerminalRuleCall_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getSharedStreamAccess().getOpOperatorParserRuleCall_2_0(), semanticObject.getOp());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     value=STRING
	 */
	protected void sequence_StringParameterValue(EObject context, StringParameterValue semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, Pql2Package.Literals.STRING_PARAMETER_VALUE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Pql2Package.Literals.STRING_PARAMETER_VALUE__VALUE));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getStringParameterValueAccess().getValueSTRINGTerminalRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (name=ID op=Operator)
	 */
	protected void sequence_TemporaryStream(EObject context, TemporaryStream semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, Pql2Package.Literals.QUERY__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Pql2Package.Literals.QUERY__NAME));
			if(transientValues.isValueTransient(semanticObject, Pql2Package.Literals.QUERY__OP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Pql2Package.Literals.QUERY__OP));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getTemporaryStreamAccess().getNameIDTerminalRuleCall_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getTemporaryStreamAccess().getOpOperatorParserRuleCall_2_0(), semanticObject.getOp());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (name=ID op=Operator)
	 */
	protected void sequence_View(EObject context, View semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, Pql2Package.Literals.QUERY__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Pql2Package.Literals.QUERY__NAME));
			if(transientValues.isValueTransient(semanticObject, Pql2Package.Literals.QUERY__OP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Pql2Package.Literals.QUERY__OP));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getViewAccess().getNameIDTerminalRuleCall_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getViewAccess().getOpOperatorParserRuleCall_2_0(), semanticObject.getOp());
		feeder.finish();
	}
}
