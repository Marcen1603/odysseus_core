/*
 * generated by Xtext
 */
package de.uniol.inf.is.odysseus.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class Pql2GrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class PQLModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PQLModel");
		private final Assignment cQueriesAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cQueriesQueryParserRuleCall_0 = (RuleCall)cQueriesAssignment.eContents().get(0);
		
		//PQLModel:
		//	queries+=Query*;
		@Override public ParserRule getRule() { return rule; }

		//queries+=Query*
		public Assignment getQueriesAssignment() { return cQueriesAssignment; }

		//Query
		public RuleCall getQueriesQueryParserRuleCall_0() { return cQueriesQueryParserRuleCall_0; }
	}

	public class QueryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Query");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTemporaryStreamParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cViewParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSharedStreamParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Query:
		//	TemporaryStream | View | SharedStream;
		@Override public ParserRule getRule() { return rule; }

		//TemporaryStream | View | SharedStream
		public Alternatives getAlternatives() { return cAlternatives; }

		//TemporaryStream
		public RuleCall getTemporaryStreamParserRuleCall_0() { return cTemporaryStreamParserRuleCall_0; }

		//View
		public RuleCall getViewParserRuleCall_1() { return cViewParserRuleCall_1; }

		//SharedStream
		public RuleCall getSharedStreamParserRuleCall_2() { return cSharedStreamParserRuleCall_2; }
	}

	public class TemporaryStreamElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TemporaryStream");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOpAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOpOperatorParserRuleCall_2_0 = (RuleCall)cOpAssignment_2.eContents().get(0);
		
		//TemporaryStream:
		//	name=ID "=" op=Operator;
		@Override public ParserRule getRule() { return rule; }

		//name=ID "=" op=Operator
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//op=Operator
		public Assignment getOpAssignment_2() { return cOpAssignment_2; }

		//Operator
		public RuleCall getOpOperatorParserRuleCall_2_0() { return cOpOperatorParserRuleCall_2_0; }
	}

	public class ViewElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "View");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOpAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOpOperatorParserRuleCall_2_0 = (RuleCall)cOpAssignment_2.eContents().get(0);
		
		//View:
		//	name=ID ":=" op=Operator;
		@Override public ParserRule getRule() { return rule; }

		//name=ID ":=" op=Operator
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//":="
		public Keyword getColonEqualsSignKeyword_1() { return cColonEqualsSignKeyword_1; }

		//op=Operator
		public Assignment getOpAssignment_2() { return cOpAssignment_2; }

		//Operator
		public RuleCall getOpOperatorParserRuleCall_2_0() { return cOpOperatorParserRuleCall_2_0; }
	}

	public class SharedStreamElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SharedStream");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonColonEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOpAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOpOperatorParserRuleCall_2_0 = (RuleCall)cOpAssignment_2.eContents().get(0);
		
		//SharedStream:
		//	name=ID "::=" op=Operator;
		@Override public ParserRule getRule() { return rule; }

		//name=ID "::=" op=Operator
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//"::="
		public Keyword getColonColonEqualsSignKeyword_1() { return cColonColonEqualsSignKeyword_1; }

		//op=Operator
		public Assignment getOpAssignment_2() { return cOpAssignment_2; }

		//Operator
		public RuleCall getOpOperatorParserRuleCall_2_0() { return cOpOperatorParserRuleCall_2_0; }
	}

	public class OperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Operator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOperatorTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOperatorTypeIDTerminalRuleCall_0_0 = (RuleCall)cOperatorTypeAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cOperatorsAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cOperatorsOperatorListParserRuleCall_2_0_0 = (RuleCall)cOperatorsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Assignment cParametersAssignment_2_1_0 = (Assignment)cGroup_2_1.eContents().get(0);
		private final RuleCall cParametersParameterListParserRuleCall_2_1_0_0 = (RuleCall)cParametersAssignment_2_1_0.eContents().get(0);
		private final Group cGroup_2_1_1 = (Group)cGroup_2_1.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_1_0 = (Keyword)cGroup_2_1_1.eContents().get(0);
		private final Assignment cOperatorsAssignment_2_1_1_1 = (Assignment)cGroup_2_1_1.eContents().get(1);
		private final RuleCall cOperatorsOperatorListParserRuleCall_2_1_1_1_0 = (RuleCall)cOperatorsAssignment_2_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Operator:
		//	operatorType=ID "(" (operators=OperatorList | parameters=ParameterList ("," operators=OperatorList)?)? ")";
		@Override public ParserRule getRule() { return rule; }

		//operatorType=ID "(" (operators=OperatorList | parameters=ParameterList ("," operators=OperatorList)?)? ")"
		public Group getGroup() { return cGroup; }

		//operatorType=ID
		public Assignment getOperatorTypeAssignment_0() { return cOperatorTypeAssignment_0; }

		//ID
		public RuleCall getOperatorTypeIDTerminalRuleCall_0_0() { return cOperatorTypeIDTerminalRuleCall_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//(operators=OperatorList | parameters=ParameterList ("," operators=OperatorList)?)?
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//operators=OperatorList
		public Assignment getOperatorsAssignment_2_0() { return cOperatorsAssignment_2_0; }

		//OperatorList
		public RuleCall getOperatorsOperatorListParserRuleCall_2_0_0() { return cOperatorsOperatorListParserRuleCall_2_0_0; }

		//parameters=ParameterList ("," operators=OperatorList)?
		public Group getGroup_2_1() { return cGroup_2_1; }

		//parameters=ParameterList
		public Assignment getParametersAssignment_2_1_0() { return cParametersAssignment_2_1_0; }

		//ParameterList
		public RuleCall getParametersParameterListParserRuleCall_2_1_0_0() { return cParametersParameterListParserRuleCall_2_1_0_0; }

		//("," operators=OperatorList)?
		public Group getGroup_2_1_1() { return cGroup_2_1_1; }

		//","
		public Keyword getCommaKeyword_2_1_1_0() { return cCommaKeyword_2_1_1_0; }

		//operators=OperatorList
		public Assignment getOperatorsAssignment_2_1_1_1() { return cOperatorsAssignment_2_1_1_1; }

		//OperatorList
		public RuleCall getOperatorsOperatorListParserRuleCall_2_1_1_1_0() { return cOperatorsOperatorListParserRuleCall_2_1_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class OperatorListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OperatorList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cElementsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cElementsOperatorOrQueryParserRuleCall_0_0 = (RuleCall)cElementsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cElementsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cElementsOperatorOrQueryParserRuleCall_1_1_0 = (RuleCall)cElementsAssignment_1_1.eContents().get(0);
		
		//OperatorList:
		//	elements+=OperatorOrQuery ("," elements+=OperatorOrQuery)*;
		@Override public ParserRule getRule() { return rule; }

		//elements+=OperatorOrQuery ("," elements+=OperatorOrQuery)*
		public Group getGroup() { return cGroup; }

		//elements+=OperatorOrQuery
		public Assignment getElementsAssignment_0() { return cElementsAssignment_0; }

		//OperatorOrQuery
		public RuleCall getElementsOperatorOrQueryParserRuleCall_0_0() { return cElementsOperatorOrQueryParserRuleCall_0_0; }

		//("," elements+=OperatorOrQuery)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//elements+=OperatorOrQuery
		public Assignment getElementsAssignment_1_1() { return cElementsAssignment_1_1; }

		//OperatorOrQuery
		public RuleCall getElementsOperatorOrQueryParserRuleCall_1_1_0() { return cElementsOperatorOrQueryParserRuleCall_1_1_0; }
	}

	public class OperatorOrQueryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OperatorOrQuery");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cOutputPortAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cOutputPortINTTerminalRuleCall_0_0_0 = (RuleCall)cOutputPortAssignment_0_0.eContents().get(0);
		private final Keyword cColonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cOpAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cOpOperatorParserRuleCall_1_0_0 = (RuleCall)cOpAssignment_1_0.eContents().get(0);
		private final Assignment cQueryAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final CrossReference cQueryQueryCrossReference_1_1_0 = (CrossReference)cQueryAssignment_1_1.eContents().get(0);
		private final RuleCall cQueryQueryIDTerminalRuleCall_1_1_0_1 = (RuleCall)cQueryQueryCrossReference_1_1_0.eContents().get(1);
		
		//OperatorOrQuery:
		//	(outputPort=INT ":")? (op=Operator | query=[Query]);
		@Override public ParserRule getRule() { return rule; }

		//(outputPort=INT ":")? (op=Operator | query=[Query])
		public Group getGroup() { return cGroup; }

		//(outputPort=INT ":")?
		public Group getGroup_0() { return cGroup_0; }

		//outputPort=INT
		public Assignment getOutputPortAssignment_0_0() { return cOutputPortAssignment_0_0; }

		//INT
		public RuleCall getOutputPortINTTerminalRuleCall_0_0_0() { return cOutputPortINTTerminalRuleCall_0_0_0; }

		//":"
		public Keyword getColonKeyword_0_1() { return cColonKeyword_0_1; }

		//op=Operator | query=[Query]
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//op=Operator
		public Assignment getOpAssignment_1_0() { return cOpAssignment_1_0; }

		//Operator
		public RuleCall getOpOperatorParserRuleCall_1_0_0() { return cOpOperatorParserRuleCall_1_0_0; }

		//query=[Query]
		public Assignment getQueryAssignment_1_1() { return cQueryAssignment_1_1; }

		//[Query]
		public CrossReference getQueryQueryCrossReference_1_1_0() { return cQueryQueryCrossReference_1_1_0; }

		//ID
		public RuleCall getQueryQueryIDTerminalRuleCall_1_1_0_1() { return cQueryQueryIDTerminalRuleCall_1_1_0_1; }
	}

	public class ParameterListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParameterList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cElementsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cElementsParameterParserRuleCall_1_0 = (RuleCall)cElementsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cElementsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cElementsParameterParserRuleCall_2_1_0 = (RuleCall)cElementsAssignment_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ParameterList:
		//	"{" elements+=Parameter ("," elements+=Parameter)* "}";
		@Override public ParserRule getRule() { return rule; }

		//"{" elements+=Parameter ("," elements+=Parameter)* "}"
		public Group getGroup() { return cGroup; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }

		//elements+=Parameter
		public Assignment getElementsAssignment_1() { return cElementsAssignment_1; }

		//Parameter
		public RuleCall getElementsParameterParserRuleCall_1_0() { return cElementsParameterParserRuleCall_1_0; }

		//("," elements+=Parameter)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//elements+=Parameter
		public Assignment getElementsAssignment_2_1() { return cElementsAssignment_2_1; }

		//Parameter
		public RuleCall getElementsParameterParserRuleCall_2_1_0() { return cElementsParameterParserRuleCall_2_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Parameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueParameterValueParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//Parameter:
		//	name=ID "=" value=ParameterValue;
		@Override public ParserRule getRule() { return rule; }

		//name=ID "=" value=ParameterValue
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//value=ParameterValue
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//ParameterValue
		public RuleCall getValueParameterValueParserRuleCall_2_0() { return cValueParameterValueParserRuleCall_2_0; }
	}

	public class ParameterValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParameterValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLongParameterValueParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDoubleParameterValueParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cStringParameterValueParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cListParameterValueParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cMapParameterValueParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//ParameterValue:
		//	LongParameterValue | DoubleParameterValue | StringParameterValue | => ListParameterValue | MapParameterValue;
		@Override public ParserRule getRule() { return rule; }

		//LongParameterValue | DoubleParameterValue | StringParameterValue | => ListParameterValue | MapParameterValue
		public Alternatives getAlternatives() { return cAlternatives; }

		//LongParameterValue
		public RuleCall getLongParameterValueParserRuleCall_0() { return cLongParameterValueParserRuleCall_0; }

		//DoubleParameterValue
		public RuleCall getDoubleParameterValueParserRuleCall_1() { return cDoubleParameterValueParserRuleCall_1; }

		//StringParameterValue
		public RuleCall getStringParameterValueParserRuleCall_2() { return cStringParameterValueParserRuleCall_2; }

		//=> ListParameterValue
		public RuleCall getListParameterValueParserRuleCall_3() { return cListParameterValueParserRuleCall_3; }

		//MapParameterValue
		public RuleCall getMapParameterValueParserRuleCall_4() { return cMapParameterValueParserRuleCall_4; }
	}

	public class LongParameterValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LongParameterValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//LongParameterValue:
		//	value=INT;
		@Override public ParserRule getRule() { return rule; }

		//value=INT
		public Assignment getValueAssignment() { return cValueAssignment; }

		//INT
		public RuleCall getValueINTTerminalRuleCall_0() { return cValueINTTerminalRuleCall_0; }
	}

	public class DoubleParameterValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DoubleParameterValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueDOUBLETerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//DoubleParameterValue:
		//	value=DOUBLE;
		@Override public ParserRule getRule() { return rule; }

		//value=DOUBLE
		public Assignment getValueAssignment() { return cValueAssignment; }

		//DOUBLE
		public RuleCall getValueDOUBLETerminalRuleCall_0() { return cValueDOUBLETerminalRuleCall_0; }
	}

	public class StringParameterValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StringParameterValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//StringParameterValue:
		//	value=STRING;
		@Override public ParserRule getRule() { return rule; }

		//value=STRING
		public Assignment getValueAssignment() { return cValueAssignment; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0() { return cValueSTRINGTerminalRuleCall_0; }
	}

	public class ListParameterValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ListParameterValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cListAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cElementsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cElementsParameterValueParserRuleCall_2_0_0 = (RuleCall)cElementsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cElementsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cElementsParameterValueParserRuleCall_2_1_1_0 = (RuleCall)cElementsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ListParameterValue:
		//	{List} "[" (elements+=ParameterValue ("," elements+=ParameterValue)*)? "]";
		@Override public ParserRule getRule() { return rule; }

		//{List} "[" (elements+=ParameterValue ("," elements+=ParameterValue)*)? "]"
		public Group getGroup() { return cGroup; }

		//{List}
		public Action getListAction_0() { return cListAction_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }

		//(elements+=ParameterValue ("," elements+=ParameterValue)*)?
		public Group getGroup_2() { return cGroup_2; }

		//elements+=ParameterValue
		public Assignment getElementsAssignment_2_0() { return cElementsAssignment_2_0; }

		//ParameterValue
		public RuleCall getElementsParameterValueParserRuleCall_2_0_0() { return cElementsParameterValueParserRuleCall_2_0_0; }

		//("," elements+=ParameterValue)*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }

		//elements+=ParameterValue
		public Assignment getElementsAssignment_2_1_1() { return cElementsAssignment_2_1_1; }

		//ParameterValue
		public RuleCall getElementsParameterValueParserRuleCall_2_1_1_0() { return cElementsParameterValueParserRuleCall_2_1_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}

	public class MapParameterValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MapParameterValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMapAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cElementsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cElementsMapEntryParserRuleCall_2_0_0 = (RuleCall)cElementsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cElementsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cElementsMapEntryParserRuleCall_2_1_1_0 = (RuleCall)cElementsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//MapParameterValue:
		//	{Map} "[" (elements+=MapEntry ("," elements+=MapEntry)*)? "]";
		@Override public ParserRule getRule() { return rule; }

		//{Map} "[" (elements+=MapEntry ("," elements+=MapEntry)*)? "]"
		public Group getGroup() { return cGroup; }

		//{Map}
		public Action getMapAction_0() { return cMapAction_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }

		//(elements+=MapEntry ("," elements+=MapEntry)*)?
		public Group getGroup_2() { return cGroup_2; }

		//elements+=MapEntry
		public Assignment getElementsAssignment_2_0() { return cElementsAssignment_2_0; }

		//MapEntry
		public RuleCall getElementsMapEntryParserRuleCall_2_0_0() { return cElementsMapEntryParserRuleCall_2_0_0; }

		//("," elements+=MapEntry)*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }

		//elements+=MapEntry
		public Assignment getElementsAssignment_2_1_1() { return cElementsAssignment_2_1_1; }

		//MapEntry
		public RuleCall getElementsMapEntryParserRuleCall_2_1_1_0() { return cElementsMapEntryParserRuleCall_2_1_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}

	public class MapEntryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MapEntry");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cKeyParameterValueParserRuleCall_0_0 = (RuleCall)cKeyAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueParameterValueParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//MapEntry:
		//	key=ParameterValue "=" value=ParameterValue;
		@Override public ParserRule getRule() { return rule; }

		//key=ParameterValue "=" value=ParameterValue
		public Group getGroup() { return cGroup; }

		//key=ParameterValue
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }

		//ParameterValue
		public RuleCall getKeyParameterValueParserRuleCall_0_0() { return cKeyParameterValueParserRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//value=ParameterValue
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//ParameterValue
		public RuleCall getValueParameterValueParserRuleCall_2_0() { return cValueParameterValueParserRuleCall_2_0; }
	}
	
	
	private final PQLModelElements pPQLModel;
	private final QueryElements pQuery;
	private final TemporaryStreamElements pTemporaryStream;
	private final ViewElements pView;
	private final SharedStreamElements pSharedStream;
	private final OperatorElements pOperator;
	private final OperatorListElements pOperatorList;
	private final OperatorOrQueryElements pOperatorOrQuery;
	private final ParameterListElements pParameterList;
	private final ParameterElements pParameter;
	private final ParameterValueElements pParameterValue;
	private final LongParameterValueElements pLongParameterValue;
	private final DoubleParameterValueElements pDoubleParameterValue;
	private final StringParameterValueElements pStringParameterValue;
	private final ListParameterValueElements pListParameterValue;
	private final MapParameterValueElements pMapParameterValue;
	private final MapEntryElements pMapEntry;
	private final TerminalRule tDOUBLE;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public Pql2GrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pPQLModel = new PQLModelElements();
		this.pQuery = new QueryElements();
		this.pTemporaryStream = new TemporaryStreamElements();
		this.pView = new ViewElements();
		this.pSharedStream = new SharedStreamElements();
		this.pOperator = new OperatorElements();
		this.pOperatorList = new OperatorListElements();
		this.pOperatorOrQuery = new OperatorOrQueryElements();
		this.pParameterList = new ParameterListElements();
		this.pParameter = new ParameterElements();
		this.pParameterValue = new ParameterValueElements();
		this.pLongParameterValue = new LongParameterValueElements();
		this.pDoubleParameterValue = new DoubleParameterValueElements();
		this.pStringParameterValue = new StringParameterValueElements();
		this.pListParameterValue = new ListParameterValueElements();
		this.pMapParameterValue = new MapParameterValueElements();
		this.pMapEntry = new MapEntryElements();
		this.tDOUBLE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "DOUBLE");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("de.uniol.inf.is.odysseus.Pql2".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//PQLModel:
	//	queries+=Query*;
	public PQLModelElements getPQLModelAccess() {
		return pPQLModel;
	}
	
	public ParserRule getPQLModelRule() {
		return getPQLModelAccess().getRule();
	}

	//Query:
	//	TemporaryStream | View | SharedStream;
	public QueryElements getQueryAccess() {
		return pQuery;
	}
	
	public ParserRule getQueryRule() {
		return getQueryAccess().getRule();
	}

	//TemporaryStream:
	//	name=ID "=" op=Operator;
	public TemporaryStreamElements getTemporaryStreamAccess() {
		return pTemporaryStream;
	}
	
	public ParserRule getTemporaryStreamRule() {
		return getTemporaryStreamAccess().getRule();
	}

	//View:
	//	name=ID ":=" op=Operator;
	public ViewElements getViewAccess() {
		return pView;
	}
	
	public ParserRule getViewRule() {
		return getViewAccess().getRule();
	}

	//SharedStream:
	//	name=ID "::=" op=Operator;
	public SharedStreamElements getSharedStreamAccess() {
		return pSharedStream;
	}
	
	public ParserRule getSharedStreamRule() {
		return getSharedStreamAccess().getRule();
	}

	//Operator:
	//	operatorType=ID "(" (operators=OperatorList | parameters=ParameterList ("," operators=OperatorList)?)? ")";
	public OperatorElements getOperatorAccess() {
		return pOperator;
	}
	
	public ParserRule getOperatorRule() {
		return getOperatorAccess().getRule();
	}

	//OperatorList:
	//	elements+=OperatorOrQuery ("," elements+=OperatorOrQuery)*;
	public OperatorListElements getOperatorListAccess() {
		return pOperatorList;
	}
	
	public ParserRule getOperatorListRule() {
		return getOperatorListAccess().getRule();
	}

	//OperatorOrQuery:
	//	(outputPort=INT ":")? (op=Operator | query=[Query]);
	public OperatorOrQueryElements getOperatorOrQueryAccess() {
		return pOperatorOrQuery;
	}
	
	public ParserRule getOperatorOrQueryRule() {
		return getOperatorOrQueryAccess().getRule();
	}

	//ParameterList:
	//	"{" elements+=Parameter ("," elements+=Parameter)* "}";
	public ParameterListElements getParameterListAccess() {
		return pParameterList;
	}
	
	public ParserRule getParameterListRule() {
		return getParameterListAccess().getRule();
	}

	//Parameter:
	//	name=ID "=" value=ParameterValue;
	public ParameterElements getParameterAccess() {
		return pParameter;
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}

	//ParameterValue:
	//	LongParameterValue | DoubleParameterValue | StringParameterValue | => ListParameterValue | MapParameterValue;
	public ParameterValueElements getParameterValueAccess() {
		return pParameterValue;
	}
	
	public ParserRule getParameterValueRule() {
		return getParameterValueAccess().getRule();
	}

	//LongParameterValue:
	//	value=INT;
	public LongParameterValueElements getLongParameterValueAccess() {
		return pLongParameterValue;
	}
	
	public ParserRule getLongParameterValueRule() {
		return getLongParameterValueAccess().getRule();
	}

	//DoubleParameterValue:
	//	value=DOUBLE;
	public DoubleParameterValueElements getDoubleParameterValueAccess() {
		return pDoubleParameterValue;
	}
	
	public ParserRule getDoubleParameterValueRule() {
		return getDoubleParameterValueAccess().getRule();
	}

	//StringParameterValue:
	//	value=STRING;
	public StringParameterValueElements getStringParameterValueAccess() {
		return pStringParameterValue;
	}
	
	public ParserRule getStringParameterValueRule() {
		return getStringParameterValueAccess().getRule();
	}

	//ListParameterValue:
	//	{List} "[" (elements+=ParameterValue ("," elements+=ParameterValue)*)? "]";
	public ListParameterValueElements getListParameterValueAccess() {
		return pListParameterValue;
	}
	
	public ParserRule getListParameterValueRule() {
		return getListParameterValueAccess().getRule();
	}

	//MapParameterValue:
	//	{Map} "[" (elements+=MapEntry ("," elements+=MapEntry)*)? "]";
	public MapParameterValueElements getMapParameterValueAccess() {
		return pMapParameterValue;
	}
	
	public ParserRule getMapParameterValueRule() {
		return getMapParameterValueAccess().getRule();
	}

	//MapEntry:
	//	key=ParameterValue "=" value=ParameterValue;
	public MapEntryElements getMapEntryAccess() {
		return pMapEntry;
	}
	
	public ParserRule getMapEntryRule() {
		return getMapEntryAccess().getRule();
	}

	//terminal DOUBLE returns ecore::EDouble:
	//	" 0 ".." 9 "* " . " " 0 ".." 9 "+;
	public TerminalRule getDOUBLERule() {
		return tDOUBLE;
	} 

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
