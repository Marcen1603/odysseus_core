/*
 * generated by Xtext
 */
grammar InternalPql2;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package de.uniol.inf.is.odysseus.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package de.uniol.inf.is.odysseus.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import de.uniol.inf.is.odysseus.services.Pql2GrammarAccess;

}

@parser::members {

 	private Pql2GrammarAccess grammarAccess;
 	
    public InternalPql2Parser(TokenStream input, Pql2GrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "PQLModel";	
   	}
   	
   	@Override
   	protected Pql2GrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRulePQLModel
entryRulePQLModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPQLModelRule()); }
	 iv_rulePQLModel=rulePQLModel 
	 { $current=$iv_rulePQLModel.current; } 
	 EOF 
;

// Rule PQLModel
rulePQLModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getPQLModelAccess().getQueriesQueryParserRuleCall_0()); 
	    }
		lv_queries_0_0=ruleQuery		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPQLModelRule());
	        }
       		add(
       			$current, 
       			"queries",
        		lv_queries_0_0, 
        		"Query");
	        afterParserOrEnumRuleCall();
	    }

)
)*
;





// Entry rule entryRuleQuery
entryRuleQuery returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getQueryRule()); }
	 iv_ruleQuery=ruleQuery 
	 { $current=$iv_ruleQuery.current; } 
	 EOF 
;

// Rule Query
ruleQuery returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getQueryAccess().getTemporaryStreamParserRuleCall_0()); 
    }
    this_TemporaryStream_0=ruleTemporaryStream
    { 
        $current = $this_TemporaryStream_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getQueryAccess().getViewParserRuleCall_1()); 
    }
    this_View_1=ruleView
    { 
        $current = $this_View_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getQueryAccess().getSharedStreamParserRuleCall_2()); 
    }
    this_SharedStream_2=ruleSharedStream
    { 
        $current = $this_SharedStream_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleTemporaryStream
entryRuleTemporaryStream returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTemporaryStreamRule()); }
	 iv_ruleTemporaryStream=ruleTemporaryStream 
	 { $current=$iv_ruleTemporaryStream.current; } 
	 EOF 
;

// Rule TemporaryStream
ruleTemporaryStream returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getTemporaryStreamAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTemporaryStreamRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)	otherlv_1='=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getTemporaryStreamAccess().getEqualsSignKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTemporaryStreamAccess().getOpOperatorParserRuleCall_2_0()); 
	    }
		lv_op_2_0=ruleOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTemporaryStreamRule());
	        }
       		set(
       			$current, 
       			"op",
        		lv_op_2_0, 
        		"Operator");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleView
entryRuleView returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getViewRule()); }
	 iv_ruleView=ruleView 
	 { $current=$iv_ruleView.current; } 
	 EOF 
;

// Rule View
ruleView returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getViewAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getViewRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)	otherlv_1=':=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getViewAccess().getColonEqualsSignKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getViewAccess().getOpOperatorParserRuleCall_2_0()); 
	    }
		lv_op_2_0=ruleOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getViewRule());
	        }
       		set(
       			$current, 
       			"op",
        		lv_op_2_0, 
        		"Operator");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleSharedStream
entryRuleSharedStream returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSharedStreamRule()); }
	 iv_ruleSharedStream=ruleSharedStream 
	 { $current=$iv_ruleSharedStream.current; } 
	 EOF 
;

// Rule SharedStream
ruleSharedStream returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getSharedStreamAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSharedStreamRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)	otherlv_1='::=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getSharedStreamAccess().getColonColonEqualsSignKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSharedStreamAccess().getOpOperatorParserRuleCall_2_0()); 
	    }
		lv_op_2_0=ruleOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSharedStreamRule());
	        }
       		set(
       			$current, 
       			"op",
        		lv_op_2_0, 
        		"Operator");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleOperator
entryRuleOperator returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOperatorRule()); }
	 iv_ruleOperator=ruleOperator 
	 { $current=$iv_ruleOperator.current; } 
	 EOF 
;

// Rule Operator
ruleOperator returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_operatorType_0_0=RULE_ID
		{
			newLeafNode(lv_operatorType_0_0, grammarAccess.getOperatorAccess().getOperatorTypeIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getOperatorRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"operatorType",
        		lv_operatorType_0_0, 
        		"ID");
	    }

)
)	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getOperatorAccess().getLeftParenthesisKeyword_1());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getOperatorAccess().getOperatorsOperatorListParserRuleCall_2_0_0()); 
	    }
		lv_operators_2_0=ruleOperatorList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOperatorRule());
	        }
       		set(
       			$current, 
       			"operators",
        		lv_operators_2_0, 
        		"OperatorList");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |((
(
		{ 
	        newCompositeNode(grammarAccess.getOperatorAccess().getParametersParameterListParserRuleCall_2_1_0_0()); 
	    }
		lv_parameters_3_0=ruleParameterList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOperatorRule());
	        }
       		set(
       			$current, 
       			"parameters",
        		lv_parameters_3_0, 
        		"ParameterList");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getOperatorAccess().getCommaKeyword_2_1_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getOperatorAccess().getOperatorsOperatorListParserRuleCall_2_1_1_1_0()); 
	    }
		lv_operators_5_0=ruleOperatorList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOperatorRule());
	        }
       		set(
       			$current, 
       			"operators",
        		lv_operators_5_0, 
        		"OperatorList");
	        afterParserOrEnumRuleCall();
	    }

)
))?))?	otherlv_6=')' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getOperatorAccess().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRuleOperatorList
entryRuleOperatorList returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOperatorListRule()); }
	 iv_ruleOperatorList=ruleOperatorList 
	 { $current=$iv_ruleOperatorList.current; } 
	 EOF 
;

// Rule OperatorList
ruleOperatorList returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getOperatorListAccess().getElementsOperatorOrQueryParserRuleCall_0_0()); 
	    }
		lv_elements_0_0=ruleOperatorOrQuery		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOperatorListRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_0_0, 
        		"OperatorOrQuery");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1=',' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getOperatorListAccess().getCommaKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getOperatorListAccess().getElementsOperatorOrQueryParserRuleCall_1_1_0()); 
	    }
		lv_elements_2_0=ruleOperatorOrQuery		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOperatorListRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_2_0, 
        		"OperatorOrQuery");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleOperatorOrQuery
entryRuleOperatorOrQuery returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOperatorOrQueryRule()); }
	 iv_ruleOperatorOrQuery=ruleOperatorOrQuery 
	 { $current=$iv_ruleOperatorOrQuery.current; } 
	 EOF 
;

// Rule OperatorOrQuery
ruleOperatorOrQuery returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		lv_outputPort_0_0=RULE_INT
		{
			newLeafNode(lv_outputPort_0_0, grammarAccess.getOperatorOrQueryAccess().getOutputPortINTTerminalRuleCall_0_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getOperatorOrQueryRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"outputPort",
        		lv_outputPort_0_0, 
        		"INT");
	    }

)
)	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getOperatorOrQueryAccess().getColonKeyword_0_1());
    }
)?((
(
		{ 
	        newCompositeNode(grammarAccess.getOperatorOrQueryAccess().getOpOperatorParserRuleCall_1_0_0()); 
	    }
		lv_op_2_0=ruleOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOperatorOrQueryRule());
	        }
       		set(
       			$current, 
       			"op",
        		lv_op_2_0, 
        		"Operator");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getOperatorOrQueryRule());
	        }
        }
	otherlv_3=RULE_ID
	{
		newLeafNode(otherlv_3, grammarAccess.getOperatorOrQueryAccess().getQueryQueryCrossReference_1_1_0()); 
	}

)
)))
;





// Entry rule entryRuleParameterList
entryRuleParameterList returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParameterListRule()); }
	 iv_ruleParameterList=ruleParameterList 
	 { $current=$iv_ruleParameterList.current; } 
	 EOF 
;

// Rule ParameterList
ruleParameterList returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='{' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getParameterListAccess().getLeftCurlyBracketKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getParameterListAccess().getElementsParameterParserRuleCall_1_0()); 
	    }
		lv_elements_1_0=ruleParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParameterListRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_1_0, 
        		"Parameter");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getParameterListAccess().getCommaKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getParameterListAccess().getElementsParameterParserRuleCall_2_1_0()); 
	    }
		lv_elements_3_0=ruleParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParameterListRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_3_0, 
        		"Parameter");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_4='}' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getParameterListAccess().getRightCurlyBracketKeyword_3());
    }
)
;





// Entry rule entryRuleParameter
entryRuleParameter returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParameterRule()); }
	 iv_ruleParameter=ruleParameter 
	 { $current=$iv_ruleParameter.current; } 
	 EOF 
;

// Rule Parameter
ruleParameter returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getParameterAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getParameterRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)	otherlv_1='=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getParameterAccess().getEqualsSignKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getParameterAccess().getValueParameterValueParserRuleCall_2_0()); 
	    }
		lv_value_2_0=ruleParameterValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParameterRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_2_0, 
        		"ParameterValue");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleParameterValue
entryRuleParameterValue returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParameterValueRule()); }
	 iv_ruleParameterValue=ruleParameterValue 
	 { $current=$iv_ruleParameterValue.current; } 
	 EOF 
;

// Rule ParameterValue
ruleParameterValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getParameterValueAccess().getLongParameterValueParserRuleCall_0()); 
    }
    this_LongParameterValue_0=ruleLongParameterValue
    { 
        $current = $this_LongParameterValue_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getParameterValueAccess().getDoubleParameterValueParserRuleCall_1()); 
    }
    this_DoubleParameterValue_1=ruleDoubleParameterValue
    { 
        $current = $this_DoubleParameterValue_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getParameterValueAccess().getStringParameterValueParserRuleCall_2()); 
    }
    this_StringParameterValue_2=ruleStringParameterValue
    { 
        $current = $this_StringParameterValue_2.current; 
        afterParserOrEnumRuleCall();
    }

    |((	ruleListParameterValue)=>
    { 
        newCompositeNode(grammarAccess.getParameterValueAccess().getListParameterValueParserRuleCall_3()); 
    }
    this_ListParameterValue_3=ruleListParameterValue
    { 
        $current = $this_ListParameterValue_3.current; 
        afterParserOrEnumRuleCall();
    }
)
    |
    { 
        newCompositeNode(grammarAccess.getParameterValueAccess().getMapParameterValueParserRuleCall_4()); 
    }
    this_MapParameterValue_4=ruleMapParameterValue
    { 
        $current = $this_MapParameterValue_4.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleLongParameterValue
entryRuleLongParameterValue returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLongParameterValueRule()); }
	 iv_ruleLongParameterValue=ruleLongParameterValue 
	 { $current=$iv_ruleLongParameterValue.current; } 
	 EOF 
;

// Rule LongParameterValue
ruleLongParameterValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_value_0_0=RULE_INT
		{
			newLeafNode(lv_value_0_0, grammarAccess.getLongParameterValueAccess().getValueINTTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLongParameterValueRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"INT");
	    }

)
)
;





// Entry rule entryRuleDoubleParameterValue
entryRuleDoubleParameterValue returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDoubleParameterValueRule()); }
	 iv_ruleDoubleParameterValue=ruleDoubleParameterValue 
	 { $current=$iv_ruleDoubleParameterValue.current; } 
	 EOF 
;

// Rule DoubleParameterValue
ruleDoubleParameterValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_value_0_0=RULE_DOUBLE
		{
			newLeafNode(lv_value_0_0, grammarAccess.getDoubleParameterValueAccess().getValueDOUBLETerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDoubleParameterValueRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"DOUBLE");
	    }

)
)
;





// Entry rule entryRuleStringParameterValue
entryRuleStringParameterValue returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStringParameterValueRule()); }
	 iv_ruleStringParameterValue=ruleStringParameterValue 
	 { $current=$iv_ruleStringParameterValue.current; } 
	 EOF 
;

// Rule StringParameterValue
ruleStringParameterValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_value_0_0=RULE_STRING
		{
			newLeafNode(lv_value_0_0, grammarAccess.getStringParameterValueAccess().getValueSTRINGTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStringParameterValueRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"STRING");
	    }

)
)
;





// Entry rule entryRuleListParameterValue
entryRuleListParameterValue returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getListParameterValueRule()); }
	 iv_ruleListParameterValue=ruleListParameterValue 
	 { $current=$iv_ruleListParameterValue.current; } 
	 EOF 
;

// Rule ListParameterValue
ruleListParameterValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getListParameterValueAccess().getListAction_0(),
            $current);
    }
)	otherlv_1='[' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getListParameterValueAccess().getLeftSquareBracketKeyword_1());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getListParameterValueAccess().getElementsParameterValueParserRuleCall_2_0_0()); 
	    }
		lv_elements_2_0=ruleParameterValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getListParameterValueRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_2_0, 
        		"ParameterValue");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getListParameterValueAccess().getCommaKeyword_2_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getListParameterValueAccess().getElementsParameterValueParserRuleCall_2_1_1_0()); 
	    }
		lv_elements_4_0=ruleParameterValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getListParameterValueRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_4_0, 
        		"ParameterValue");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_5=']' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getListParameterValueAccess().getRightSquareBracketKeyword_3());
    }
)
;





// Entry rule entryRuleMapParameterValue
entryRuleMapParameterValue returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMapParameterValueRule()); }
	 iv_ruleMapParameterValue=ruleMapParameterValue 
	 { $current=$iv_ruleMapParameterValue.current; } 
	 EOF 
;

// Rule MapParameterValue
ruleMapParameterValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getMapParameterValueAccess().getMapAction_0(),
            $current);
    }
)	otherlv_1='[' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getMapParameterValueAccess().getLeftSquareBracketKeyword_1());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getMapParameterValueAccess().getElementsMapEntryParserRuleCall_2_0_0()); 
	    }
		lv_elements_2_0=ruleMapEntry		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMapParameterValueRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_2_0, 
        		"MapEntry");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getMapParameterValueAccess().getCommaKeyword_2_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMapParameterValueAccess().getElementsMapEntryParserRuleCall_2_1_1_0()); 
	    }
		lv_elements_4_0=ruleMapEntry		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMapParameterValueRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_4_0, 
        		"MapEntry");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_5=']' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getMapParameterValueAccess().getRightSquareBracketKeyword_3());
    }
)
;





// Entry rule entryRuleMapEntry
entryRuleMapEntry returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMapEntryRule()); }
	 iv_ruleMapEntry=ruleMapEntry 
	 { $current=$iv_ruleMapEntry.current; } 
	 EOF 
;

// Rule MapEntry
ruleMapEntry returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getMapEntryAccess().getKeyParameterValueParserRuleCall_0_0()); 
	    }
		lv_key_0_0=ruleParameterValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMapEntryRule());
	        }
       		set(
       			$current, 
       			"key",
        		lv_key_0_0, 
        		"ParameterValue");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getMapEntryAccess().getEqualsSignKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMapEntryAccess().getValueParameterValueParserRuleCall_2_0()); 
	    }
		lv_value_2_0=ruleParameterValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMapEntryRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_2_0, 
        		"ParameterValue");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





RULE_DOUBLE : (' 0 '..' 9 ')* ' . ' (' 0 '..' 9 ')+;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


