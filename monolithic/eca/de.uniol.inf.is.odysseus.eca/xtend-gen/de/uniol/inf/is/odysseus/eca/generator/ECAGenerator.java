/**
 * generated by Xtext
 */
package de.uniol.inf.is.odysseus.eca.generator;

import com.google.common.base.Objects;
import com.google.common.collect.Iterators;
import de.uniol.inf.is.odysseus.eca.connect.EcaPluginConnector;
import de.uniol.inf.is.odysseus.eca.eCA.COMMANDACTION;
import de.uniol.inf.is.odysseus.eca.eCA.Constant;
import de.uniol.inf.is.odysseus.eca.eCA.DefinedEvent;
import de.uniol.inf.is.odysseus.eca.eCA.EcaValue;
import de.uniol.inf.is.odysseus.eca.eCA.FREECONDITION;
import de.uniol.inf.is.odysseus.eca.eCA.MAPCONDITION;
import de.uniol.inf.is.odysseus.eca.eCA.QUERYCONDITION;
import de.uniol.inf.is.odysseus.eca.eCA.RNDQUERY;
import de.uniol.inf.is.odysseus.eca.eCA.Rule;
import de.uniol.inf.is.odysseus.eca.eCA.SOURCECONDITION;
import de.uniol.inf.is.odysseus.eca.eCA.SYSTEMCONDITION;
import de.uniol.inf.is.odysseus.eca.eCA.Source;
import de.uniol.inf.is.odysseus.eca.eCA.Timer;
import de.uniol.inf.is.odysseus.eca.eCA.Window;
import de.uniol.inf.is.odysseus.eca.plugin.EcaRuleObj;
import java.util.ArrayList;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtext.generator.IFileSystemAccess;
import org.eclipse.xtext.generator.IGenerator;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class ECAGenerator implements IGenerator {
  private EcaPluginConnector connect = new EcaPluginConnector();
  
  private ArrayList<EcaRuleObj> querySet = new ArrayList<EcaRuleObj>();
  
  private ArrayList<String> actionList = new ArrayList<String>();
  
  private ArrayList<String> systemList = new ArrayList<String>();
  
  private ArrayList<String> queryCondList = new ArrayList<String>();
  
  private int sourceCondCount = 0;
  
  private StringBuffer sourceCond = new StringBuffer();
  
  private int systemCondCount = 0;
  
  private StringBuffer systemCond = new StringBuffer();
  
  private int freeCondCount = 0;
  
  private StringBuffer freeCond = new StringBuffer();
  
  private ArrayList<String> map = new ArrayList<String>();
  
  private int subActionCount = 0;
  
  private int windowSize = 1000;
  
  private int timerIntervall = 1000;
  
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess fsa) {
    final Procedure1<Window> _function = (Window it) -> {
      boolean _notEquals = (!Objects.equal(it, null));
      if (_notEquals) {
        this.windowSize = it.getWindowValue();
      }
    };
    IteratorExtensions.<Window>forEach(Iterators.<Window>filter(resource.getAllContents(), Window.class), _function);
    final Procedure1<Timer> _function_1 = (Timer it) -> {
      boolean _notEquals = (!Objects.equal(it, null));
      if (_notEquals) {
        this.timerIntervall = it.getTimerIntervallValue();
      }
    };
    IteratorExtensions.<Timer>forEach(Iterators.<Timer>filter(resource.getAllContents(), Timer.class), _function_1);
    final Procedure1<Rule> _function_2 = (Rule it) -> {
      this.extract(it);
    };
    IteratorExtensions.<Rule>forEach(Iterators.<Rule>filter(resource.getAllContents(), Rule.class), _function_2);
  }
  
  public void extract(final Rule rule) {
    this.querySet.clear();
    this.actionList.clear();
    this.queryCondList.clear();
    this.systemList.clear();
    String ruleName = rule.getName();
    String ruleSource = null;
    String ruleCondition = null;
    DefinedEvent _defSource = rule.getSource().getDefSource();
    boolean _equals = Objects.equal(_defSource, null);
    boolean _not = (!_equals);
    if (_not) {
      ruleSource = rule.getSource().getDefSource().getDefinedSource().getName();
      this.sourceCondCount++;
      String _definedAttribute = rule.getSource().getDefSource().getDefinedAttribute();
      String _plus = (_definedAttribute + " ");
      String _definedOperator = rule.getSource().getDefSource().getDefinedOperator();
      String _plus_1 = (_plus + _definedOperator);
      String _plus_2 = (_plus_1 + 
        " ");
      this.sourceCond.append(_plus_2);
      Constant _constValue = rule.getSource().getDefSource().getDefinedValue().getConstValue();
      boolean _notEquals = (!Objects.equal(_constValue, null));
      if (_notEquals) {
        this.sourceCond.append(rule.getSource().getDefSource().getDefinedValue().getConstValue());
      } else {
        String _idValue = rule.getSource().getDefSource().getDefinedValue().getIdValue();
        boolean _notEquals_1 = (!Objects.equal(_idValue, null));
        if (_notEquals_1) {
          String _idValue_1 = rule.getSource().getDefSource().getDefinedValue().getIdValue();
          String _plus_3 = ("\"" + _idValue_1);
          String _plus_4 = (_plus_3 + "\"");
          this.sourceCond.append(_plus_4);
        } else {
          String _stringValue = rule.getSource().getDefSource().getDefinedValue().getStringValue();
          boolean _notEquals_2 = (!Objects.equal(_stringValue, null));
          if (_notEquals_2) {
            this.systemCond.append(rule.getSource().getDefSource().getDefinedValue().getStringValue());
          } else {
            double _doubleValue = rule.getSource().getDefSource().getDefinedValue().getDoubleValue();
            boolean _greaterThan = (_doubleValue > 0);
            if (_greaterThan) {
              this.sourceCond.append(rule.getSource().getDefSource().getDefinedValue().getDoubleValue());
            } else {
              this.sourceCond.append(rule.getSource().getDefSource().getDefinedValue().getIntValue());
            }
          }
        }
      }
    } else {
      Source _newSource = rule.getSource().getNewSource();
      boolean _equals_1 = Objects.equal(_newSource, null);
      boolean _not_1 = (!_equals_1);
      if (_not_1) {
        ruleSource = rule.getSource().getNewSource().getName();
      } else {
        String _preSource = rule.getSource().getPreSource();
        boolean _equals_2 = Objects.equal(_preSource, null);
        boolean _not_2 = (!_equals_2);
        if (_not_2) {
          ruleSource = rule.getSource().getPreSource();
        }
      }
    }
    final Procedure1<COMMANDACTION> _function = (COMMANDACTION it) -> {
      this.addActions(it);
    };
    IteratorExtensions.<COMMANDACTION>forEach(Iterators.<COMMANDACTION>filter(rule.getRuleActions().eAllContents(), COMMANDACTION.class), _function);
    this.subActionCount = 0;
    final Procedure1<SYSTEMCONDITION> _function_1 = (SYSTEMCONDITION it) -> {
      this.addSystemCondition(it);
    };
    IteratorExtensions.<SYSTEMCONDITION>forEach(Iterators.<SYSTEMCONDITION>filter(rule.getRuleConditions().eAllContents(), SYSTEMCONDITION.class), _function_1);
    this.systemCondCount = 0;
    final Procedure1<QUERYCONDITION> _function_2 = (QUERYCONDITION it) -> {
      this.addQueryCondition(it);
    };
    IteratorExtensions.<QUERYCONDITION>forEach(Iterators.<QUERYCONDITION>filter(rule.getRuleConditions().eAllContents(), QUERYCONDITION.class), _function_2);
    final Procedure1<SOURCECONDITION> _function_3 = (SOURCECONDITION it) -> {
      this.addSourceCondition(it);
    };
    IteratorExtensions.<SOURCECONDITION>forEach(Iterators.<SOURCECONDITION>filter(rule.getRuleConditions().eAllContents(), SOURCECONDITION.class), _function_3);
    int _length = this.sourceCond.length();
    boolean _greaterThan_1 = (_length > 2);
    if (_greaterThan_1) {
      ruleCondition = this.sourceCond.toString();
      this.sourceCond.setLength(0);
      this.sourceCondCount = 0;
      EcaRuleObj _ecaRuleObj = new EcaRuleObj("source", ruleName, ruleSource, ruleCondition, this.systemList, this.queryCondList, this.actionList, 
        Integer.valueOf(this.windowSize), Integer.valueOf(this.timerIntervall));
      this.querySet.add(_ecaRuleObj);
    }
    final Procedure1<MAPCONDITION> _function_4 = (MAPCONDITION it) -> {
      this.map.add(it.getMapCond());
    };
    IteratorExtensions.<MAPCONDITION>forEach(Iterators.<MAPCONDITION>filter(rule.getRuleConditions().eAllContents(), MAPCONDITION.class), _function_4);
    for (int i = 0; (i < this.map.size()); i++) {
      String _get = this.map.get(i);
      EcaRuleObj _ecaRuleObj_1 = new EcaRuleObj("map", ruleName, ruleSource, _get, this.systemList, this.queryCondList, this.actionList, 
        Integer.valueOf(this.windowSize), Integer.valueOf(this.timerIntervall));
      this.querySet.add(_ecaRuleObj_1);
    }
    this.map.clear();
    final Procedure1<FREECONDITION> _function_5 = (FREECONDITION it) -> {
      this.addFreeCondition(it);
    };
    IteratorExtensions.<FREECONDITION>forEach(Iterators.<FREECONDITION>filter(rule.getRuleConditions().eAllContents(), FREECONDITION.class), _function_5);
    int _length_1 = this.freeCond.length();
    boolean _greaterThan_2 = (_length_1 > 2);
    if (_greaterThan_2) {
      ruleCondition = this.freeCond.toString();
      this.freeCond.setLength(0);
      this.freeCondCount = 0;
      EcaRuleObj _ecaRuleObj_1 = new EcaRuleObj("free", ruleName, ruleSource, ruleCondition, this.systemList, this.queryCondList, this.actionList, 
        Integer.valueOf(this.windowSize), Integer.valueOf(this.timerIntervall));
      this.querySet.add(_ecaRuleObj_1);
    }
    if (((this.querySet.size() < 1) && (this.systemList.size() > 0))) {
      EcaRuleObj _ecaRuleObj_2 = new EcaRuleObj("systemload", ruleName, ruleSource, ruleCondition, this.systemList, this.queryCondList, this.actionList, 
        Integer.valueOf(this.windowSize), Integer.valueOf(this.timerIntervall));
      this.querySet.add(_ecaRuleObj_2);
    }
    if (((this.querySet.size() < 1) && (this.queryCondList.size() > 0))) {
      EcaRuleObj _ecaRuleObj_3 = new EcaRuleObj("queryCond", ruleName, ruleSource, ruleCondition, this.systemList, this.queryCondList, this.actionList, 
        Integer.valueOf(this.windowSize), Integer.valueOf(this.timerIntervall));
      this.querySet.add(_ecaRuleObj_3);
    }
    this.connect.makeQuery(this.querySet);
  }
  
  public void addSourceCondition(final SOURCECONDITION cond) {
    if ((this.sourceCondCount > 0)) {
      this.sourceCond.append(" AND ");
    }
    this.sourceCondCount++;
    String _condAttribute = cond.getCondAttribute();
    String _plus = (_condAttribute + " ");
    String _operator = cond.getOperator();
    String _plus_1 = (_plus + _operator);
    String _plus_2 = (_plus_1 + " ");
    this.sourceCond.append(_plus_2);
    Constant _constValue = cond.getValue().getConstValue();
    boolean _notEquals = (!Objects.equal(_constValue, null));
    if (_notEquals) {
      this.sourceCond.append(cond.getValue().getConstValue().getConstValue());
    } else {
      String _idValue = cond.getValue().getIdValue();
      boolean _notEquals_1 = (!Objects.equal(_idValue, null));
      if (_notEquals_1) {
        String _idValue_1 = cond.getValue().getIdValue();
        String _plus_3 = ("\"" + _idValue_1);
        String _plus_4 = (_plus_3 + "\"");
        this.sourceCond.append(_plus_4);
      } else {
        String _stringValue = cond.getValue().getStringValue();
        boolean _notEquals_2 = (!Objects.equal(_stringValue, null));
        if (_notEquals_2) {
          this.systemCond.append(cond.getValue().getStringValue());
        } else {
          double _doubleValue = cond.getValue().getDoubleValue();
          boolean _greaterThan = (_doubleValue > 0);
          if (_greaterThan) {
            this.sourceCond.append(cond.getValue().getDoubleValue());
          } else {
            this.sourceCond.append(cond.getValue().getIntValue());
          }
        }
      }
    }
  }
  
  public void addSystemCondition(final SYSTEMCONDITION cond) {
    StringBuffer tmp = new StringBuffer();
    this.systemCondCount++;
    this.systemList.add(cond.getSystemAttribute());
    this.systemList.add(cond.getOperator());
    Constant _constValue = cond.getValue().getConstValue();
    boolean _notEquals = (!Objects.equal(_constValue, null));
    if (_notEquals) {
      tmp.append(cond.getValue().getConstValue().getConstValue());
      this.systemList.add(tmp.toString());
      tmp.setLength(0);
    } else {
      String _idValue = cond.getValue().getIdValue();
      boolean _notEquals_1 = (!Objects.equal(_idValue, null));
      if (_notEquals_1) {
        tmp.append(cond.getValue().getIdValue());
        this.systemList.add(tmp.toString());
        tmp.setLength(0);
      } else {
        String _stringValue = cond.getValue().getStringValue();
        boolean _notEquals_2 = (!Objects.equal(_stringValue, null));
        if (_notEquals_2) {
          tmp.append(cond.getValue().getStringValue());
          this.systemList.add(tmp.toString());
          tmp.setLength(0);
        } else {
          double _doubleValue = cond.getValue().getDoubleValue();
          boolean _greaterThan = (_doubleValue > 0);
          if (_greaterThan) {
            tmp.append(cond.getValue().getDoubleValue());
            this.systemList.add(tmp.toString());
            tmp.setLength(0);
          } else {
            tmp.append(cond.getValue().getIntValue());
            this.systemList.add(tmp.toString());
            tmp.setLength(0);
          }
        }
      }
    }
  }
  
  public void addFreeCondition(final FREECONDITION cond) {
    this.freeCond.append(cond.getFreeCondition());
    this.freeCondCount++;
  }
  
  public void addActions(final COMMANDACTION actions) {
    StringBuffer tmp = new StringBuffer();
    tmp.setLength(0);
    this.subActionCount++;
    this.actionList.add(actions.getSubActname());
    EcaValue _actionValue = actions.getActionValue();
    boolean _notEquals = (!Objects.equal(_actionValue, null));
    if (_notEquals) {
      Constant _constValue = actions.getActionValue().getConstValue();
      boolean _notEquals_1 = (!Objects.equal(_constValue, null));
      if (_notEquals_1) {
        tmp.append(actions.getActionValue().getConstValue().getConstValue());
        this.actionList.add(tmp.toString());
        tmp.setLength(0);
      } else {
        String _idValue = actions.getActionValue().getIdValue();
        boolean _notEquals_2 = (!Objects.equal(_idValue, null));
        if (_notEquals_2) {
          tmp.append(actions.getActionValue().getIdValue());
          this.actionList.add(tmp.toString());
          tmp.setLength(0);
        } else {
          String _stringValue = actions.getActionValue().getStringValue();
          boolean _notEquals_3 = (!Objects.equal(_stringValue, null));
          if (_notEquals_3) {
            tmp.append(actions.getActionValue().getStringValue());
            this.actionList.add(tmp.toString());
            tmp.setLength(0);
          } else {
            double _doubleValue = actions.getActionValue().getDoubleValue();
            boolean _greaterThan = (_doubleValue > 0);
            if (_greaterThan) {
              tmp.append(actions.getActionValue().getDoubleValue());
              this.actionList.add(tmp.toString());
              tmp.setLength(0);
            } else {
              tmp.append(actions.getActionValue().getIntValue());
              this.actionList.add(tmp.toString());
              tmp.setLength(0);
            }
          }
        }
      }
    } else {
      RNDQUERY _functAction = actions.getFunctAction();
      boolean _notEquals_4 = (!Objects.equal(_functAction, null));
      if (_notEquals_4) {
        String _sel = actions.getFunctAction().getSel();
        boolean _notEquals_5 = (!Objects.equal(_sel, null));
        if (_notEquals_5) {
          this.actionList.add(actions.getFunctAction().getSel());
        } else {
          this.actionList.add("rnd");
        }
        tmp.append(actions.getFunctAction().getPriOperator());
        this.actionList.add(tmp.toString());
        tmp.setLength(0);
        tmp.append(actions.getFunctAction().getPriVal());
        this.actionList.add(tmp.toString());
        tmp.setLength(0);
        tmp.append(actions.getFunctAction().getStateName());
        this.actionList.add(tmp.toString());
        tmp.setLength(0);
      } else {
        this.actionList.add(null);
      }
    }
  }
  
  public void addQueryCondition(final QUERYCONDITION cond) {
    StringBuffer tmp = new StringBuffer();
    tmp.setLength(0);
    String _queryNot = cond.getQueryNot();
    boolean _notEquals = (!Objects.equal(_queryNot, null));
    if (_notEquals) {
      this.queryCondList.add("!exists");
    } else {
      this.queryCondList.add("exists");
    }
    tmp.append(cond.getQueryFunct().getPriOperator());
    this.queryCondList.add(tmp.toString());
    tmp.setLength(0);
    tmp.append(cond.getQueryFunct().getPriVal());
    this.queryCondList.add(tmp.toString());
    tmp.setLength(0);
    tmp.append(cond.getQueryFunct().getStateName());
    this.queryCondList.add(tmp.toString());
    tmp.setLength(0);
  }
}
