/*
 * generated by Xtext
 */
package de.uniol.inf.is.odysseus.eca.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class ECAGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final UnorderedGroup cUnorderedGroup = (UnorderedGroup)rule.eContents().get(1);
		private final UnorderedGroup cUnorderedGroup_0 = (UnorderedGroup)cUnorderedGroup.eContents().get(0);
		private final Assignment cConstantsAssignment_0_0 = (Assignment)cUnorderedGroup_0.eContents().get(0);
		private final RuleCall cConstantsConstantParserRuleCall_0_0_0 = (RuleCall)cConstantsAssignment_0_0.eContents().get(0);
		private final Assignment cDefEventsAssignment_0_1 = (Assignment)cUnorderedGroup_0.eContents().get(1);
		private final RuleCall cDefEventsDefinedEventParserRuleCall_0_1_0 = (RuleCall)cDefEventsAssignment_0_1.eContents().get(0);
		private final Assignment cWindowSizeAssignment_0_2 = (Assignment)cUnorderedGroup_0.eContents().get(2);
		private final RuleCall cWindowSizeWindowParserRuleCall_0_2_0 = (RuleCall)cWindowSizeAssignment_0_2.eContents().get(0);
		private final Assignment cTimeIntervallAssignment_0_3 = (Assignment)cUnorderedGroup_0.eContents().get(3);
		private final RuleCall cTimeIntervallTimerParserRuleCall_0_3_0 = (RuleCall)cTimeIntervallAssignment_0_3.eContents().get(0);
		private final Assignment cRulesAssignment_1 = (Assignment)cUnorderedGroup.eContents().get(1);
		private final RuleCall cRulesRuleParserRuleCall_1_0 = (RuleCall)cRulesAssignment_1.eContents().get(0);
		
		/// * Genereller Aufbau: Konstanten und Event-Definitionen, danach erst die Regeln * / Model:
		//	(constants+=Constant* & defEvents+=DefinedEvent* & windowSize=Window? & timeIntervall=Timer?) & rules+=Rule*;
		@Override public ParserRule getRule() { return rule; }

		//(constants+=Constant* & defEvents+=DefinedEvent* & windowSize=Window? & timeIntervall=Timer?) & rules+=Rule*
		public UnorderedGroup getUnorderedGroup() { return cUnorderedGroup; }

		//constants+=Constant* & defEvents+=DefinedEvent* & windowSize=Window? & timeIntervall=Timer?
		public UnorderedGroup getUnorderedGroup_0() { return cUnorderedGroup_0; }

		//constants+=Constant*
		public Assignment getConstantsAssignment_0_0() { return cConstantsAssignment_0_0; }

		//Constant
		public RuleCall getConstantsConstantParserRuleCall_0_0_0() { return cConstantsConstantParserRuleCall_0_0_0; }

		//defEvents+=DefinedEvent*
		public Assignment getDefEventsAssignment_0_1() { return cDefEventsAssignment_0_1; }

		//DefinedEvent
		public RuleCall getDefEventsDefinedEventParserRuleCall_0_1_0() { return cDefEventsDefinedEventParserRuleCall_0_1_0; }

		//windowSize=Window?
		public Assignment getWindowSizeAssignment_0_2() { return cWindowSizeAssignment_0_2; }

		//Window
		public RuleCall getWindowSizeWindowParserRuleCall_0_2_0() { return cWindowSizeWindowParserRuleCall_0_2_0; }

		//timeIntervall=Timer?
		public Assignment getTimeIntervallAssignment_0_3() { return cTimeIntervallAssignment_0_3; }

		//Timer
		public RuleCall getTimeIntervallTimerParserRuleCall_0_3_0() { return cTimeIntervallTimerParserRuleCall_0_3_0; }

		//rules+=Rule*
		public Assignment getRulesAssignment_1() { return cRulesAssignment_1; }

		//Rule
		public RuleCall getRulesRuleParserRuleCall_1_0() { return cRulesRuleParserRuleCall_1_0; }
	}

	public class ConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Constant");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDEFINECONSTANTKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cConstValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cConstValueINTTerminalRuleCall_3_0 = (RuleCall)cConstValueAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		/// * Definition von Konstanten, Fenstern, Timerintervall und Events * / Constant:
		//	"DEFINE CONSTANT" name=ID ":" constValue=INT ";";
		@Override public ParserRule getRule() { return rule; }

		//"DEFINE CONSTANT" name=ID ":" constValue=INT ";"
		public Group getGroup() { return cGroup; }

		//"DEFINE CONSTANT"
		public Keyword getDEFINECONSTANTKeyword_0() { return cDEFINECONSTANTKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//constValue=INT
		public Assignment getConstValueAssignment_3() { return cConstValueAssignment_3; }

		//INT
		public RuleCall getConstValueINTTerminalRuleCall_3_0() { return cConstValueINTTerminalRuleCall_3_0; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class WindowElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Window");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDEFINEWINDOWSIZEKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cWindowValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cWindowValueINTTerminalRuleCall_2_0 = (RuleCall)cWindowValueAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Window:
		//	"DEFINE WINDOWSIZE" ":" windowValue=INT ";";
		@Override public ParserRule getRule() { return rule; }

		//"DEFINE WINDOWSIZE" ":" windowValue=INT ";"
		public Group getGroup() { return cGroup; }

		//"DEFINE WINDOWSIZE"
		public Keyword getDEFINEWINDOWSIZEKeyword_0() { return cDEFINEWINDOWSIZEKeyword_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//windowValue=INT
		public Assignment getWindowValueAssignment_2() { return cWindowValueAssignment_2; }

		//INT
		public RuleCall getWindowValueINTTerminalRuleCall_2_0() { return cWindowValueINTTerminalRuleCall_2_0; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class TimerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Timer");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDEFINETIMEINTERVALLKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTimerIntervallValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTimerIntervallValueINTTerminalRuleCall_2_0 = (RuleCall)cTimerIntervallValueAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Timer:
		//	"DEFINE TIMEINTERVALL" ":" timerIntervallValue=INT ";";
		@Override public ParserRule getRule() { return rule; }

		//"DEFINE TIMEINTERVALL" ":" timerIntervallValue=INT ";"
		public Group getGroup() { return cGroup; }

		//"DEFINE TIMEINTERVALL"
		public Keyword getDEFINETIMEINTERVALLKeyword_0() { return cDEFINETIMEINTERVALLKeyword_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//timerIntervallValue=INT
		public Assignment getTimerIntervallValueAssignment_2() { return cTimerIntervallValueAssignment_2; }

		//INT
		public RuleCall getTimerIntervallValueINTTerminalRuleCall_2_0() { return cTimerIntervallValueINTTerminalRuleCall_2_0; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class DefinedEventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DefinedEvent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDEFINEEVENTKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDefinedSourceAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDefinedSourceSourceParserRuleCall_3_0 = (RuleCall)cDefinedSourceAssignment_3.eContents().get(0);
		private final Keyword cWITHKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cDefinedAttributeAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cDefinedAttributeIDTerminalRuleCall_5_0 = (RuleCall)cDefinedAttributeAssignment_5.eContents().get(0);
		private final Assignment cDefinedOperatorAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cDefinedOperatorOperatorParserRuleCall_6_0 = (RuleCall)cDefinedOperatorAssignment_6.eContents().get(0);
		private final Assignment cDefinedValueAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cDefinedValueEcaValueParserRuleCall_7_0 = (RuleCall)cDefinedValueAssignment_7.eContents().get(0);
		private final Keyword cSemicolonKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//DefinedEvent:
		//	"DEFINE EVENT" name=ID ":" definedSource=Source "WITH" definedAttribute=ID definedOperator=Operator
		//	definedValue=EcaValue ";";
		@Override public ParserRule getRule() { return rule; }

		//"DEFINE EVENT" name=ID ":" definedSource=Source "WITH" definedAttribute=ID definedOperator=Operator
		//definedValue=EcaValue ";"
		public Group getGroup() { return cGroup; }

		//"DEFINE EVENT"
		public Keyword getDEFINEEVENTKeyword_0() { return cDEFINEEVENTKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//definedSource=Source
		public Assignment getDefinedSourceAssignment_3() { return cDefinedSourceAssignment_3; }

		//Source
		public RuleCall getDefinedSourceSourceParserRuleCall_3_0() { return cDefinedSourceSourceParserRuleCall_3_0; }

		//"WITH"
		public Keyword getWITHKeyword_4() { return cWITHKeyword_4; }

		//definedAttribute=ID
		public Assignment getDefinedAttributeAssignment_5() { return cDefinedAttributeAssignment_5; }

		//ID
		public RuleCall getDefinedAttributeIDTerminalRuleCall_5_0() { return cDefinedAttributeIDTerminalRuleCall_5_0; }

		//definedOperator=Operator
		public Assignment getDefinedOperatorAssignment_6() { return cDefinedOperatorAssignment_6; }

		//Operator
		public RuleCall getDefinedOperatorOperatorParserRuleCall_6_0() { return cDefinedOperatorOperatorParserRuleCall_6_0; }

		//definedValue=EcaValue
		public Assignment getDefinedValueAssignment_7() { return cDefinedValueAssignment_7; }

		//EcaValue
		public RuleCall getDefinedValueEcaValueParserRuleCall_7_0() { return cDefinedValueEcaValueParserRuleCall_7_0; }

		//";"
		public Keyword getSemicolonKeyword_8() { return cSemicolonKeyword_8; }
	}

	public class RuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Rule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cONKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cSourceAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSourceRuleSourceParserRuleCall_2_0 = (RuleCall)cSourceAssignment_2.eContents().get(0);
		private final Keyword cIFKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cRuleConditionsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cRuleConditionsCONDITIONSParserRuleCall_4_0 = (RuleCall)cRuleConditionsAssignment_4.eContents().get(0);
		private final Keyword cTHENKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cRuleActionsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cRuleActionsACTIONSParserRuleCall_6_0 = (RuleCall)cRuleActionsAssignment_6.eContents().get(0);
		private final Keyword cSemicolonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		/// * Regeldefinitiony * / Rule:
		//	"ON" name=ID source=RuleSource "IF" ruleConditions=CONDITIONS "THEN" ruleActions=ACTIONS ";";
		@Override public ParserRule getRule() { return rule; }

		//"ON" name=ID source=RuleSource "IF" ruleConditions=CONDITIONS "THEN" ruleActions=ACTIONS ";"
		public Group getGroup() { return cGroup; }

		//"ON"
		public Keyword getONKeyword_0() { return cONKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//source=RuleSource
		public Assignment getSourceAssignment_2() { return cSourceAssignment_2; }

		//RuleSource
		public RuleCall getSourceRuleSourceParserRuleCall_2_0() { return cSourceRuleSourceParserRuleCall_2_0; }

		//"IF"
		public Keyword getIFKeyword_3() { return cIFKeyword_3; }

		//ruleConditions=CONDITIONS
		public Assignment getRuleConditionsAssignment_4() { return cRuleConditionsAssignment_4; }

		//CONDITIONS
		public RuleCall getRuleConditionsCONDITIONSParserRuleCall_4_0() { return cRuleConditionsCONDITIONSParserRuleCall_4_0; }

		//"THEN"
		public Keyword getTHENKeyword_5() { return cTHENKeyword_5; }

		//ruleActions=ACTIONS
		public Assignment getRuleActionsAssignment_6() { return cRuleActionsAssignment_6; }

		//ACTIONS
		public RuleCall getRuleActionsACTIONSParserRuleCall_6_0() { return cRuleActionsACTIONSParserRuleCall_6_0; }

		//";"
		public Keyword getSemicolonKeyword_7() { return cSemicolonKeyword_7; }
	}

	public class CONDITIONSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CONDITIONS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSUBCONDITIONParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cCONDITIONSLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cANDKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightSUBCONDITIONParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//CONDITIONS returns Expression:
		//	SUBCONDITION ({CONDITIONS.left=current} "AND" right=SUBCONDITION)*;
		@Override public ParserRule getRule() { return rule; }

		//SUBCONDITION ({CONDITIONS.left=current} "AND" right=SUBCONDITION)*
		public Group getGroup() { return cGroup; }

		//SUBCONDITION
		public RuleCall getSUBCONDITIONParserRuleCall_0() { return cSUBCONDITIONParserRuleCall_0; }

		//({CONDITIONS.left=current} "AND" right=SUBCONDITION)*
		public Group getGroup_1() { return cGroup_1; }

		//{CONDITIONS.left=current}
		public Action getCONDITIONSLeftAction_1_0() { return cCONDITIONSLeftAction_1_0; }

		//"AND"
		public Keyword getANDKeyword_1_1() { return cANDKeyword_1_1; }

		//right=SUBCONDITION
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//SUBCONDITION
		public RuleCall getRightSUBCONDITIONParserRuleCall_1_2_0() { return cRightSUBCONDITIONParserRuleCall_1_2_0; }
	}

	public class SUBCONDITIONElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SUBCONDITION");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cSubsourceAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cSubsourceSOURCECONDITIONParserRuleCall_0_0 = (RuleCall)cSubsourceAssignment_0.eContents().get(0);
		private final Assignment cSubsysAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cSubsysSYSTEMCONDITIONParserRuleCall_1_0 = (RuleCall)cSubsysAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cSUBCONDITIONAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cSubfreeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cSubfreeFREECONDITIONParserRuleCall_2_1_0 = (RuleCall)cSubfreeAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cSUBCONDITIONAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Assignment cSubmapAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cSubmapMAPCONDITIONParserRuleCall_3_1_0 = (RuleCall)cSubmapAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cSUBCONDITIONAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Assignment cQueryCondAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cQueryCondQUERYCONDITIONParserRuleCall_4_1_0 = (RuleCall)cQueryCondAssignment_4_1.eContents().get(0);
		
		//SUBCONDITION returns Expression:
		//	subsource=SOURCECONDITION | subsys=SYSTEMCONDITION | {SUBCONDITION} subfree=FREECONDITION | {SUBCONDITION}
		//	submap=MAPCONDITION? | {SUBCONDITION} queryCond=QUERYCONDITION;
		@Override public ParserRule getRule() { return rule; }

		//subsource=SOURCECONDITION | subsys=SYSTEMCONDITION | {SUBCONDITION} subfree=FREECONDITION | {SUBCONDITION}
		//submap=MAPCONDITION? | {SUBCONDITION} queryCond=QUERYCONDITION
		public Alternatives getAlternatives() { return cAlternatives; }

		//subsource=SOURCECONDITION
		public Assignment getSubsourceAssignment_0() { return cSubsourceAssignment_0; }

		//SOURCECONDITION
		public RuleCall getSubsourceSOURCECONDITIONParserRuleCall_0_0() { return cSubsourceSOURCECONDITIONParserRuleCall_0_0; }

		//subsys=SYSTEMCONDITION
		public Assignment getSubsysAssignment_1() { return cSubsysAssignment_1; }

		//SYSTEMCONDITION
		public RuleCall getSubsysSYSTEMCONDITIONParserRuleCall_1_0() { return cSubsysSYSTEMCONDITIONParserRuleCall_1_0; }

		//{SUBCONDITION} subfree=FREECONDITION
		public Group getGroup_2() { return cGroup_2; }

		//{SUBCONDITION}
		public Action getSUBCONDITIONAction_2_0() { return cSUBCONDITIONAction_2_0; }

		//subfree=FREECONDITION
		public Assignment getSubfreeAssignment_2_1() { return cSubfreeAssignment_2_1; }

		//FREECONDITION
		public RuleCall getSubfreeFREECONDITIONParserRuleCall_2_1_0() { return cSubfreeFREECONDITIONParserRuleCall_2_1_0; }

		//{SUBCONDITION} submap=MAPCONDITION?
		public Group getGroup_3() { return cGroup_3; }

		//{SUBCONDITION}
		public Action getSUBCONDITIONAction_3_0() { return cSUBCONDITIONAction_3_0; }

		//submap=MAPCONDITION?
		public Assignment getSubmapAssignment_3_1() { return cSubmapAssignment_3_1; }

		//MAPCONDITION
		public RuleCall getSubmapMAPCONDITIONParserRuleCall_3_1_0() { return cSubmapMAPCONDITIONParserRuleCall_3_1_0; }

		//{SUBCONDITION} queryCond=QUERYCONDITION
		public Group getGroup_4() { return cGroup_4; }

		//{SUBCONDITION}
		public Action getSUBCONDITIONAction_4_0() { return cSUBCONDITIONAction_4_0; }

		//queryCond=QUERYCONDITION
		public Assignment getQueryCondAssignment_4_1() { return cQueryCondAssignment_4_1; }

		//QUERYCONDITION
		public RuleCall getQueryCondQUERYCONDITIONParserRuleCall_4_1_0() { return cQueryCondQUERYCONDITIONParserRuleCall_4_1_0; }
	}

	public class RuleSourceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RuleSource");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cDollarSignLeftCurlyBracketKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cDefSourceAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final CrossReference cDefSourceDefinedEventCrossReference_0_1_0 = (CrossReference)cDefSourceAssignment_0_1.eContents().get(0);
		private final RuleCall cDefSourceDefinedEventIDTerminalRuleCall_0_1_0_1 = (RuleCall)cDefSourceDefinedEventCrossReference_0_1_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cNewSourceAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cNewSourceSourceParserRuleCall_1_0 = (RuleCall)cNewSourceAssignment_1.eContents().get(0);
		private final Assignment cPreSourceAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cPreSourcePREDEFINEDSOURCEParserRuleCall_2_0 = (RuleCall)cPreSourceAssignment_2.eContents().get(0);
		
		//RuleSource:
		//	"${" defSource=[DefinedEvent] "}" | newSource=Source | preSource=PREDEFINEDSOURCE;
		@Override public ParserRule getRule() { return rule; }

		//"${" defSource=[DefinedEvent] "}" | newSource=Source | preSource=PREDEFINEDSOURCE
		public Alternatives getAlternatives() { return cAlternatives; }

		//"${" defSource=[DefinedEvent] "}"
		public Group getGroup_0() { return cGroup_0; }

		//"${"
		public Keyword getDollarSignLeftCurlyBracketKeyword_0_0() { return cDollarSignLeftCurlyBracketKeyword_0_0; }

		//defSource=[DefinedEvent]
		public Assignment getDefSourceAssignment_0_1() { return cDefSourceAssignment_0_1; }

		//[DefinedEvent]
		public CrossReference getDefSourceDefinedEventCrossReference_0_1_0() { return cDefSourceDefinedEventCrossReference_0_1_0; }

		//ID
		public RuleCall getDefSourceDefinedEventIDTerminalRuleCall_0_1_0_1() { return cDefSourceDefinedEventIDTerminalRuleCall_0_1_0_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_0_2() { return cRightCurlyBracketKeyword_0_2; }

		//newSource=Source
		public Assignment getNewSourceAssignment_1() { return cNewSourceAssignment_1; }

		//Source
		public RuleCall getNewSourceSourceParserRuleCall_1_0() { return cNewSourceSourceParserRuleCall_1_0; }

		//preSource=PREDEFINEDSOURCE
		public Assignment getPreSourceAssignment_2() { return cPreSourceAssignment_2; }

		//PREDEFINEDSOURCE
		public RuleCall getPreSourcePREDEFINEDSOURCEParserRuleCall_2_0() { return cPreSourcePREDEFINEDSOURCEParserRuleCall_2_0; }
	}

	public class SOURCECONDITIONElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SOURCECONDITION");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCondAttributeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cCondAttributeIDTerminalRuleCall_0_0 = (RuleCall)cCondAttributeAssignment_0.eContents().get(0);
		private final Assignment cOperatorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOperatorOperatorParserRuleCall_1_0 = (RuleCall)cOperatorAssignment_1.eContents().get(0);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueEcaValueParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//SOURCECONDITION:
		//	condAttribute=ID operator=Operator value=EcaValue;
		@Override public ParserRule getRule() { return rule; }

		//condAttribute=ID operator=Operator value=EcaValue
		public Group getGroup() { return cGroup; }

		//condAttribute=ID
		public Assignment getCondAttributeAssignment_0() { return cCondAttributeAssignment_0; }

		//ID
		public RuleCall getCondAttributeIDTerminalRuleCall_0_0() { return cCondAttributeIDTerminalRuleCall_0_0; }

		//operator=Operator
		public Assignment getOperatorAssignment_1() { return cOperatorAssignment_1; }

		//Operator
		public RuleCall getOperatorOperatorParserRuleCall_1_0() { return cOperatorOperatorParserRuleCall_1_0; }

		//value=EcaValue
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//EcaValue
		public RuleCall getValueEcaValueParserRuleCall_2_0() { return cValueEcaValueParserRuleCall_2_0; }
	}

	public class QUERYCONDITIONElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QUERYCONDITION");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cQueryNotAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cQueryNotExclamationMarkKeyword_0_0 = (Keyword)cQueryNotAssignment_0.eContents().get(0);
		private final Keyword cQueryExistsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cQueryFunctAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cQueryFunctRNDQUERYParserRuleCall_3_0 = (RuleCall)cQueryFunctAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//QUERYCONDITION:
		//	queryNot="!"? "queryExists" "(" queryFunct=RNDQUERY ")";
		@Override public ParserRule getRule() { return rule; }

		//queryNot="!"? "queryExists" "(" queryFunct=RNDQUERY ")"
		public Group getGroup() { return cGroup; }

		//queryNot="!"?
		public Assignment getQueryNotAssignment_0() { return cQueryNotAssignment_0; }

		//"!"
		public Keyword getQueryNotExclamationMarkKeyword_0_0() { return cQueryNotExclamationMarkKeyword_0_0; }

		//"queryExists"
		public Keyword getQueryExistsKeyword_1() { return cQueryExistsKeyword_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//queryFunct=RNDQUERY
		public Assignment getQueryFunctAssignment_3() { return cQueryFunctAssignment_3; }

		//RNDQUERY
		public RuleCall getQueryFunctRNDQUERYParserRuleCall_3_0() { return cQueryFunctRNDQUERYParserRuleCall_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class SYSTEMCONDITIONElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SYSTEMCONDITION");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSYSTEMKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSystemAttributeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSystemAttributeSYSTEMFUNCTIONParserRuleCall_1_0 = (RuleCall)cSystemAttributeAssignment_1.eContents().get(0);
		private final Assignment cOperatorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOperatorOperatorParserRuleCall_2_0 = (RuleCall)cOperatorAssignment_2.eContents().get(0);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueEcaValueParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		
		//SYSTEMCONDITION:
		//	"SYSTEM." systemAttribute=SYSTEMFUNCTION operator=Operator value=EcaValue;
		@Override public ParserRule getRule() { return rule; }

		//"SYSTEM." systemAttribute=SYSTEMFUNCTION operator=Operator value=EcaValue
		public Group getGroup() { return cGroup; }

		//"SYSTEM."
		public Keyword getSYSTEMKeyword_0() { return cSYSTEMKeyword_0; }

		//systemAttribute=SYSTEMFUNCTION
		public Assignment getSystemAttributeAssignment_1() { return cSystemAttributeAssignment_1; }

		//SYSTEMFUNCTION
		public RuleCall getSystemAttributeSYSTEMFUNCTIONParserRuleCall_1_0() { return cSystemAttributeSYSTEMFUNCTIONParserRuleCall_1_0; }

		//operator=Operator
		public Assignment getOperatorAssignment_2() { return cOperatorAssignment_2; }

		//Operator
		public RuleCall getOperatorOperatorParserRuleCall_2_0() { return cOperatorOperatorParserRuleCall_2_0; }

		//value=EcaValue
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }

		//EcaValue
		public RuleCall getValueEcaValueParserRuleCall_3_0() { return cValueEcaValueParserRuleCall_3_0; }
	}

	public class FREECONDITIONElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FREECONDITION");
		private final Assignment cFreeConditionAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cFreeConditionSTRINGTerminalRuleCall_0 = (RuleCall)cFreeConditionAssignment.eContents().get(0);
		
		//FREECONDITION:
		//	freeCondition=STRING;
		@Override public ParserRule getRule() { return rule; }

		//freeCondition=STRING
		public Assignment getFreeConditionAssignment() { return cFreeConditionAssignment; }

		//STRING
		public RuleCall getFreeConditionSTRINGTerminalRuleCall_0() { return cFreeConditionSTRINGTerminalRuleCall_0; }
	}

	public class MAPCONDITIONElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MAPCONDITION");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGETKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cMapCondAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMapCondSTRINGTerminalRuleCall_1_0 = (RuleCall)cMapCondAssignment_1.eContents().get(0);
		
		//MAPCONDITION:
		//	"GET" mapCond=STRING;
		@Override public ParserRule getRule() { return rule; }

		//"GET" mapCond=STRING
		public Group getGroup() { return cGroup; }

		//"GET"
		public Keyword getGETKeyword_0() { return cGETKeyword_0; }

		//mapCond=STRING
		public Assignment getMapCondAssignment_1() { return cMapCondAssignment_1; }

		//STRING
		public RuleCall getMapCondSTRINGTerminalRuleCall_1_0() { return cMapCondSTRINGTerminalRuleCall_1_0; }
	}

	public class ACTIONSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ACTIONS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSUBACTIONSParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cACTIONSLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cANDKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightSUBACTIONSParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		////SourceAttribute:
		////	simpleName=ID;
		//ACTIONS returns Expression:
		//	SUBACTIONS ({ACTIONS.left=current} "AND" right=SUBACTIONS)*;
		@Override public ParserRule getRule() { return rule; }

		//SUBACTIONS ({ACTIONS.left=current} "AND" right=SUBACTIONS)*
		public Group getGroup() { return cGroup; }

		//SUBACTIONS
		public RuleCall getSUBACTIONSParserRuleCall_0() { return cSUBACTIONSParserRuleCall_0; }

		//({ACTIONS.left=current} "AND" right=SUBACTIONS)*
		public Group getGroup_1() { return cGroup_1; }

		//{ACTIONS.left=current}
		public Action getACTIONSLeftAction_1_0() { return cACTIONSLeftAction_1_0; }

		//"AND"
		public Keyword getANDKeyword_1_1() { return cANDKeyword_1_1; }

		//right=SUBACTIONS
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//SUBACTIONS
		public RuleCall getRightSUBACTIONSParserRuleCall_1_2_0() { return cRightSUBACTIONSParserRuleCall_1_2_0; }
	}

	public class SUBACTIONSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SUBACTIONS");
		private final Assignment cComActionAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cComActionCOMMANDACTIONParserRuleCall_0 = (RuleCall)cComActionAssignment.eContents().get(0);
		
		//SUBACTIONS returns Expression:
		//	comAction=COMMANDACTION;
		@Override public ParserRule getRule() { return rule; }

		//comAction=COMMANDACTION
		public Assignment getComActionAssignment() { return cComActionAssignment; }

		//COMMANDACTION
		public RuleCall getComActionCOMMANDACTIONParserRuleCall_0() { return cComActionCOMMANDACTIONParserRuleCall_0; }
	}

	public class COMMANDACTIONElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "COMMANDACTION");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSubActnameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSubActnameIDTerminalRuleCall_0_0 = (RuleCall)cSubActnameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cFunctActionAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cFunctActionRNDQUERYParserRuleCall_2_0_0 = (RuleCall)cFunctActionAssignment_2_0.eContents().get(0);
		private final Assignment cActionValueAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cActionValueEcaValueParserRuleCall_2_1_0 = (RuleCall)cActionValueAssignment_2_1.eContents().get(0);
		private final Assignment cInnerActionAssignment_2_2 = (Assignment)cAlternatives_2.eContents().get(2);
		private final RuleCall cInnerActionCOMMANDACTIONParserRuleCall_2_2_0 = (RuleCall)cInnerActionAssignment_2_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//COMMANDACTION:
		//	subActname=ID "(" (functAction=RNDQUERY | actionValue=EcaValue | innerAction+=COMMANDACTION*) ")";
		@Override public ParserRule getRule() { return rule; }

		//subActname=ID "(" (functAction=RNDQUERY | actionValue=EcaValue | innerAction+=COMMANDACTION*) ")"
		public Group getGroup() { return cGroup; }

		//subActname=ID
		public Assignment getSubActnameAssignment_0() { return cSubActnameAssignment_0; }

		//ID
		public RuleCall getSubActnameIDTerminalRuleCall_0_0() { return cSubActnameIDTerminalRuleCall_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//functAction=RNDQUERY | actionValue=EcaValue | innerAction+=COMMANDACTION*
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//functAction=RNDQUERY
		public Assignment getFunctActionAssignment_2_0() { return cFunctActionAssignment_2_0; }

		//RNDQUERY
		public RuleCall getFunctActionRNDQUERYParserRuleCall_2_0_0() { return cFunctActionRNDQUERYParserRuleCall_2_0_0; }

		//actionValue=EcaValue
		public Assignment getActionValueAssignment_2_1() { return cActionValueAssignment_2_1; }

		//EcaValue
		public RuleCall getActionValueEcaValueParserRuleCall_2_1_0() { return cActionValueEcaValueParserRuleCall_2_1_0; }

		//innerAction+=COMMANDACTION*
		public Assignment getInnerActionAssignment_2_2() { return cInnerActionAssignment_2_2; }

		//COMMANDACTION
		public RuleCall getInnerActionCOMMANDACTIONParserRuleCall_2_2_0() { return cInnerActionCOMMANDACTIONParserRuleCall_2_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class RNDQUERYElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RNDQUERY");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPrioKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPriOperatorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPriOperatorOperatorParserRuleCall_1_0 = (RuleCall)cPriOperatorAssignment_1.eContents().get(0);
		private final Assignment cPriValAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPriValINTTerminalRuleCall_2_0 = (RuleCall)cPriValAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cSelAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final Alternatives cSelAlternatives_3_1_0 = (Alternatives)cSelAssignment_3_1.eContents().get(0);
		private final Keyword cSelMINKeyword_3_1_0_0 = (Keyword)cSelAlternatives_3_1_0.eContents().get(0);
		private final Keyword cSelMAXKeyword_3_1_0_1 = (Keyword)cSelAlternatives_3_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cStateKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cEqualsSignKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cStateNameAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cStateNameIDTerminalRuleCall_7_0 = (RuleCall)cStateNameAssignment_7.eContents().get(0);
		
		//RNDQUERY:
		//	"prio" priOperator=Operator priVal=INT ("(" sel=("MIN" | "MAX") ")")? "," "state" "=" stateName=ID;
		@Override public ParserRule getRule() { return rule; }

		//"prio" priOperator=Operator priVal=INT ("(" sel=("MIN" | "MAX") ")")? "," "state" "=" stateName=ID
		public Group getGroup() { return cGroup; }

		//"prio"
		public Keyword getPrioKeyword_0() { return cPrioKeyword_0; }

		//priOperator=Operator
		public Assignment getPriOperatorAssignment_1() { return cPriOperatorAssignment_1; }

		//Operator
		public RuleCall getPriOperatorOperatorParserRuleCall_1_0() { return cPriOperatorOperatorParserRuleCall_1_0; }

		//priVal=INT
		public Assignment getPriValAssignment_2() { return cPriValAssignment_2; }

		//INT
		public RuleCall getPriValINTTerminalRuleCall_2_0() { return cPriValINTTerminalRuleCall_2_0; }

		//("(" sel=("MIN" | "MAX") ")")?
		public Group getGroup_3() { return cGroup_3; }

		//"("
		public Keyword getLeftParenthesisKeyword_3_0() { return cLeftParenthesisKeyword_3_0; }

		//sel=("MIN" | "MAX")
		public Assignment getSelAssignment_3_1() { return cSelAssignment_3_1; }

		//"MIN" | "MAX"
		public Alternatives getSelAlternatives_3_1_0() { return cSelAlternatives_3_1_0; }

		//"MIN"
		public Keyword getSelMINKeyword_3_1_0_0() { return cSelMINKeyword_3_1_0_0; }

		//"MAX"
		public Keyword getSelMAXKeyword_3_1_0_1() { return cSelMAXKeyword_3_1_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_3_2() { return cRightParenthesisKeyword_3_2; }

		//","
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }

		//"state"
		public Keyword getStateKeyword_5() { return cStateKeyword_5; }

		//"="
		public Keyword getEqualsSignKeyword_6() { return cEqualsSignKeyword_6; }

		//stateName=ID
		public Assignment getStateNameAssignment_7() { return cStateNameAssignment_7; }

		//ID
		public RuleCall getStateNameIDTerminalRuleCall_7_0() { return cStateNameIDTerminalRuleCall_7_0; }
	}

	public class SourceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Source");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Source:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }

		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}

	public class EcaValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EcaValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cIntValueAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cIntValueINTTerminalRuleCall_0_0 = (RuleCall)cIntValueAssignment_0.eContents().get(0);
		private final Assignment cIdValueAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cIdValueIDTerminalRuleCall_1_0 = (RuleCall)cIdValueAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cGroup_2.eContents().get(0);
		private final Keyword cDollarSignLeftCurlyBracketKeyword_2_0_0 = (Keyword)cGroup_2_0.eContents().get(0);
		private final Assignment cConstValueAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final CrossReference cConstValueConstantCrossReference_2_0_1_0 = (CrossReference)cConstValueAssignment_2_0_1.eContents().get(0);
		private final RuleCall cConstValueConstantIDTerminalRuleCall_2_0_1_0_1 = (RuleCall)cConstValueConstantCrossReference_2_0_1_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cStringValueAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cStringValueSTRINGTerminalRuleCall_3_0 = (RuleCall)cStringValueAssignment_3.eContents().get(0);
		private final Assignment cDoubleValueAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cDoubleValueDOUBLETerminalRuleCall_4_0 = (RuleCall)cDoubleValueAssignment_4.eContents().get(0);
		
		//EcaValue:
		//	intValue=INT | idValue=ID | ("${" constValue=[Constant]) "}" | stringValue=STRING | doubleValue=DOUBLE;
		@Override public ParserRule getRule() { return rule; }

		//intValue=INT | idValue=ID | ("${" constValue=[Constant]) "}" | stringValue=STRING | doubleValue=DOUBLE
		public Alternatives getAlternatives() { return cAlternatives; }

		//intValue=INT
		public Assignment getIntValueAssignment_0() { return cIntValueAssignment_0; }

		//INT
		public RuleCall getIntValueINTTerminalRuleCall_0_0() { return cIntValueINTTerminalRuleCall_0_0; }

		//idValue=ID
		public Assignment getIdValueAssignment_1() { return cIdValueAssignment_1; }

		//ID
		public RuleCall getIdValueIDTerminalRuleCall_1_0() { return cIdValueIDTerminalRuleCall_1_0; }

		//("${" constValue=[Constant]) "}"
		public Group getGroup_2() { return cGroup_2; }

		//"${" constValue=[Constant]
		public Group getGroup_2_0() { return cGroup_2_0; }

		//"${"
		public Keyword getDollarSignLeftCurlyBracketKeyword_2_0_0() { return cDollarSignLeftCurlyBracketKeyword_2_0_0; }

		//constValue=[Constant]
		public Assignment getConstValueAssignment_2_0_1() { return cConstValueAssignment_2_0_1; }

		//[Constant]
		public CrossReference getConstValueConstantCrossReference_2_0_1_0() { return cConstValueConstantCrossReference_2_0_1_0; }

		//ID
		public RuleCall getConstValueConstantIDTerminalRuleCall_2_0_1_0_1() { return cConstValueConstantIDTerminalRuleCall_2_0_1_0_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2_1() { return cRightCurlyBracketKeyword_2_1; }

		//stringValue=STRING
		public Assignment getStringValueAssignment_3() { return cStringValueAssignment_3; }

		//STRING
		public RuleCall getStringValueSTRINGTerminalRuleCall_3_0() { return cStringValueSTRINGTerminalRuleCall_3_0; }

		//doubleValue=DOUBLE
		public Assignment getDoubleValueAssignment_4() { return cDoubleValueAssignment_4; }

		//DOUBLE
		public RuleCall getDoubleValueDOUBLETerminalRuleCall_4_0() { return cDoubleValueDOUBLETerminalRuleCall_4_0; }
	}

	public class PREDEFINEDSOURCEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PREDEFINEDSOURCE");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTimerEventKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cQueryEventKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//PREDEFINEDSOURCE:
		//	"TimerEvent" | "QueryEvent";
		@Override public ParserRule getRule() { return rule; }

		//"TimerEvent" | "QueryEvent"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"TimerEvent"
		public Keyword getTimerEventKeyword_0() { return cTimerEventKeyword_0; }

		//"QueryEvent"
		public Keyword getQueryEventKeyword_1() { return cQueryEventKeyword_1; }
	}

	public class SYSTEMFUNCTIONElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SYSTEMFUNCTION");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cCurCPULoadKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cCurMEMLoadKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cCurNETLoadKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//SYSTEMFUNCTION:
		//	"curCPULoad" | "curMEMLoad" | "curNETLoad";
		@Override public ParserRule getRule() { return rule; }

		//"curCPULoad" | "curMEMLoad" | "curNETLoad"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"curCPULoad"
		public Keyword getCurCPULoadKeyword_0() { return cCurCPULoadKeyword_0; }

		//"curMEMLoad"
		public Keyword getCurMEMLoadKeyword_1() { return cCurMEMLoadKeyword_1; }

		//"curNETLoad"
		public Keyword getCurNETLoadKeyword_2() { return cCurNETLoadKeyword_2; }
	}

	public class OperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Operator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cLessThanSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cLessThanSignEqualsSignKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cGreaterThanSignEqualsSignKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		
		//Operator:
		//	"<" | ">" | "=" | "<=" | ">=";
		@Override public ParserRule getRule() { return rule; }

		//"<" | ">" | "=" | "<=" | ">="
		public Alternatives getAlternatives() { return cAlternatives; }

		//"<"
		public Keyword getLessThanSignKeyword_0() { return cLessThanSignKeyword_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_1() { return cGreaterThanSignKeyword_1; }

		//"="
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }

		//"<="
		public Keyword getLessThanSignEqualsSignKeyword_3() { return cLessThanSignEqualsSignKeyword_3; }

		//">="
		public Keyword getGreaterThanSignEqualsSignKeyword_4() { return cGreaterThanSignEqualsSignKeyword_4; }
	}
	
	
	private final ModelElements pModel;
	private final ConstantElements pConstant;
	private final WindowElements pWindow;
	private final TimerElements pTimer;
	private final DefinedEventElements pDefinedEvent;
	private final RuleElements pRule;
	private final CONDITIONSElements pCONDITIONS;
	private final SUBCONDITIONElements pSUBCONDITION;
	private final RuleSourceElements pRuleSource;
	private final SOURCECONDITIONElements pSOURCECONDITION;
	private final QUERYCONDITIONElements pQUERYCONDITION;
	private final SYSTEMCONDITIONElements pSYSTEMCONDITION;
	private final FREECONDITIONElements pFREECONDITION;
	private final MAPCONDITIONElements pMAPCONDITION;
	private final ACTIONSElements pACTIONS;
	private final SUBACTIONSElements pSUBACTIONS;
	private final COMMANDACTIONElements pCOMMANDACTION;
	private final RNDQUERYElements pRNDQUERY;
	private final SourceElements pSource;
	private final EcaValueElements pEcaValue;
	private final PREDEFINEDSOURCEElements pPREDEFINEDSOURCE;
	private final SYSTEMFUNCTIONElements pSYSTEMFUNCTION;
	private final OperatorElements pOperator;
	private final TerminalRule tDOUBLE;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public ECAGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pConstant = new ConstantElements();
		this.pWindow = new WindowElements();
		this.pTimer = new TimerElements();
		this.pDefinedEvent = new DefinedEventElements();
		this.pRule = new RuleElements();
		this.pCONDITIONS = new CONDITIONSElements();
		this.pSUBCONDITION = new SUBCONDITIONElements();
		this.pRuleSource = new RuleSourceElements();
		this.pSOURCECONDITION = new SOURCECONDITIONElements();
		this.pQUERYCONDITION = new QUERYCONDITIONElements();
		this.pSYSTEMCONDITION = new SYSTEMCONDITIONElements();
		this.pFREECONDITION = new FREECONDITIONElements();
		this.pMAPCONDITION = new MAPCONDITIONElements();
		this.pACTIONS = new ACTIONSElements();
		this.pSUBACTIONS = new SUBACTIONSElements();
		this.pCOMMANDACTION = new COMMANDACTIONElements();
		this.pRNDQUERY = new RNDQUERYElements();
		this.pSource = new SourceElements();
		this.pEcaValue = new EcaValueElements();
		this.pPREDEFINEDSOURCE = new PREDEFINEDSOURCEElements();
		this.pSYSTEMFUNCTION = new SYSTEMFUNCTIONElements();
		this.pOperator = new OperatorElements();
		this.tDOUBLE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "DOUBLE");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("de.uniol.inf.is.odysseus.eca.ECA".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	/// * Genereller Aufbau: Konstanten und Event-Definitionen, danach erst die Regeln * / Model:
	//	(constants+=Constant* & defEvents+=DefinedEvent* & windowSize=Window? & timeIntervall=Timer?) & rules+=Rule*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	/// * Definition von Konstanten, Fenstern, Timerintervall und Events * / Constant:
	//	"DEFINE CONSTANT" name=ID ":" constValue=INT ";";
	public ConstantElements getConstantAccess() {
		return pConstant;
	}
	
	public ParserRule getConstantRule() {
		return getConstantAccess().getRule();
	}

	//Window:
	//	"DEFINE WINDOWSIZE" ":" windowValue=INT ";";
	public WindowElements getWindowAccess() {
		return pWindow;
	}
	
	public ParserRule getWindowRule() {
		return getWindowAccess().getRule();
	}

	//Timer:
	//	"DEFINE TIMEINTERVALL" ":" timerIntervallValue=INT ";";
	public TimerElements getTimerAccess() {
		return pTimer;
	}
	
	public ParserRule getTimerRule() {
		return getTimerAccess().getRule();
	}

	//DefinedEvent:
	//	"DEFINE EVENT" name=ID ":" definedSource=Source "WITH" definedAttribute=ID definedOperator=Operator
	//	definedValue=EcaValue ";";
	public DefinedEventElements getDefinedEventAccess() {
		return pDefinedEvent;
	}
	
	public ParserRule getDefinedEventRule() {
		return getDefinedEventAccess().getRule();
	}

	/// * Regeldefinitiony * / Rule:
	//	"ON" name=ID source=RuleSource "IF" ruleConditions=CONDITIONS "THEN" ruleActions=ACTIONS ";";
	public RuleElements getRuleAccess() {
		return pRule;
	}
	
	public ParserRule getRuleRule() {
		return getRuleAccess().getRule();
	}

	//CONDITIONS returns Expression:
	//	SUBCONDITION ({CONDITIONS.left=current} "AND" right=SUBCONDITION)*;
	public CONDITIONSElements getCONDITIONSAccess() {
		return pCONDITIONS;
	}
	
	public ParserRule getCONDITIONSRule() {
		return getCONDITIONSAccess().getRule();
	}

	//SUBCONDITION returns Expression:
	//	subsource=SOURCECONDITION | subsys=SYSTEMCONDITION | {SUBCONDITION} subfree=FREECONDITION | {SUBCONDITION}
	//	submap=MAPCONDITION? | {SUBCONDITION} queryCond=QUERYCONDITION;
	public SUBCONDITIONElements getSUBCONDITIONAccess() {
		return pSUBCONDITION;
	}
	
	public ParserRule getSUBCONDITIONRule() {
		return getSUBCONDITIONAccess().getRule();
	}

	//RuleSource:
	//	"${" defSource=[DefinedEvent] "}" | newSource=Source | preSource=PREDEFINEDSOURCE;
	public RuleSourceElements getRuleSourceAccess() {
		return pRuleSource;
	}
	
	public ParserRule getRuleSourceRule() {
		return getRuleSourceAccess().getRule();
	}

	//SOURCECONDITION:
	//	condAttribute=ID operator=Operator value=EcaValue;
	public SOURCECONDITIONElements getSOURCECONDITIONAccess() {
		return pSOURCECONDITION;
	}
	
	public ParserRule getSOURCECONDITIONRule() {
		return getSOURCECONDITIONAccess().getRule();
	}

	//QUERYCONDITION:
	//	queryNot="!"? "queryExists" "(" queryFunct=RNDQUERY ")";
	public QUERYCONDITIONElements getQUERYCONDITIONAccess() {
		return pQUERYCONDITION;
	}
	
	public ParserRule getQUERYCONDITIONRule() {
		return getQUERYCONDITIONAccess().getRule();
	}

	//SYSTEMCONDITION:
	//	"SYSTEM." systemAttribute=SYSTEMFUNCTION operator=Operator value=EcaValue;
	public SYSTEMCONDITIONElements getSYSTEMCONDITIONAccess() {
		return pSYSTEMCONDITION;
	}
	
	public ParserRule getSYSTEMCONDITIONRule() {
		return getSYSTEMCONDITIONAccess().getRule();
	}

	//FREECONDITION:
	//	freeCondition=STRING;
	public FREECONDITIONElements getFREECONDITIONAccess() {
		return pFREECONDITION;
	}
	
	public ParserRule getFREECONDITIONRule() {
		return getFREECONDITIONAccess().getRule();
	}

	//MAPCONDITION:
	//	"GET" mapCond=STRING;
	public MAPCONDITIONElements getMAPCONDITIONAccess() {
		return pMAPCONDITION;
	}
	
	public ParserRule getMAPCONDITIONRule() {
		return getMAPCONDITIONAccess().getRule();
	}

	////SourceAttribute:
	////	simpleName=ID;
	//ACTIONS returns Expression:
	//	SUBACTIONS ({ACTIONS.left=current} "AND" right=SUBACTIONS)*;
	public ACTIONSElements getACTIONSAccess() {
		return pACTIONS;
	}
	
	public ParserRule getACTIONSRule() {
		return getACTIONSAccess().getRule();
	}

	//SUBACTIONS returns Expression:
	//	comAction=COMMANDACTION;
	public SUBACTIONSElements getSUBACTIONSAccess() {
		return pSUBACTIONS;
	}
	
	public ParserRule getSUBACTIONSRule() {
		return getSUBACTIONSAccess().getRule();
	}

	//COMMANDACTION:
	//	subActname=ID "(" (functAction=RNDQUERY | actionValue=EcaValue | innerAction+=COMMANDACTION*) ")";
	public COMMANDACTIONElements getCOMMANDACTIONAccess() {
		return pCOMMANDACTION;
	}
	
	public ParserRule getCOMMANDACTIONRule() {
		return getCOMMANDACTIONAccess().getRule();
	}

	//RNDQUERY:
	//	"prio" priOperator=Operator priVal=INT ("(" sel=("MIN" | "MAX") ")")? "," "state" "=" stateName=ID;
	public RNDQUERYElements getRNDQUERYAccess() {
		return pRNDQUERY;
	}
	
	public ParserRule getRNDQUERYRule() {
		return getRNDQUERYAccess().getRule();
	}

	//Source:
	//	name=ID;
	public SourceElements getSourceAccess() {
		return pSource;
	}
	
	public ParserRule getSourceRule() {
		return getSourceAccess().getRule();
	}

	//EcaValue:
	//	intValue=INT | idValue=ID | ("${" constValue=[Constant]) "}" | stringValue=STRING | doubleValue=DOUBLE;
	public EcaValueElements getEcaValueAccess() {
		return pEcaValue;
	}
	
	public ParserRule getEcaValueRule() {
		return getEcaValueAccess().getRule();
	}

	//PREDEFINEDSOURCE:
	//	"TimerEvent" | "QueryEvent";
	public PREDEFINEDSOURCEElements getPREDEFINEDSOURCEAccess() {
		return pPREDEFINEDSOURCE;
	}
	
	public ParserRule getPREDEFINEDSOURCERule() {
		return getPREDEFINEDSOURCEAccess().getRule();
	}

	//SYSTEMFUNCTION:
	//	"curCPULoad" | "curMEMLoad" | "curNETLoad";
	public SYSTEMFUNCTIONElements getSYSTEMFUNCTIONAccess() {
		return pSYSTEMFUNCTION;
	}
	
	public ParserRule getSYSTEMFUNCTIONRule() {
		return getSYSTEMFUNCTIONAccess().getRule();
	}

	//Operator:
	//	"<" | ">" | "=" | "<=" | ">=";
	public OperatorElements getOperatorAccess() {
		return pOperator;
	}
	
	public ParserRule getOperatorRule() {
		return getOperatorAccess().getRule();
	}

	//terminal DOUBLE returns ecore::EDouble:
	//	"-"? "0".."9"+ "." "0".."9";
	public TerminalRule getDOUBLERule() {
		return tDOUBLE;
	} 

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
