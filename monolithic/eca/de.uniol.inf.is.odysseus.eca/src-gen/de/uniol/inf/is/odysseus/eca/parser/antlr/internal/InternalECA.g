/*
 * generated by Xtext
 */
grammar InternalECA;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package de.uniol.inf.is.odysseus.eca.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package de.uniol.inf.is.odysseus.eca.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import de.uniol.inf.is.odysseus.eca.services.ECAGrammarAccess;

}

@parser::members {

 	private ECAGrammarAccess grammarAccess;
 	
    public InternalECAParser(TokenStream input, ECAGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Model";	
   	}
   	
   	@Override
   	protected ECAGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	 iv_ruleModel=ruleModel 
	 { $current=$iv_ruleModel.current; } 
	 EOF 
;

// Rule Model
ruleModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(

(
	{ 
	  getUnorderedGroupHelper().enter(grammarAccess.getModelAccess().getUnorderedGroup());
	}
	(
		(

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getModelAccess().getUnorderedGroup(), 0)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getModelAccess().getUnorderedGroup(), 0);
	 				}
					({true}?=>(

(
	{ 
	  getUnorderedGroupHelper().enter(grammarAccess.getModelAccess().getUnorderedGroup_0());
	}
	(
		(

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getModelAccess().getUnorderedGroup_0(), 0)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getModelAccess().getUnorderedGroup_0(), 0);
	 				}
					({true}?=>(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getConstantsConstantParserRuleCall_0_0_0()); 
	    }
		lv_constants_2_0=ruleConstant		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"constants",
        		lv_constants_2_0, 
        		"Constant");
	        afterParserOrEnumRuleCall();
	    }

)
))+
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getModelAccess().getUnorderedGroup_0());
	 				}
 				)
			)  |

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getModelAccess().getUnorderedGroup_0(), 1)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getModelAccess().getUnorderedGroup_0(), 1);
	 				}
					({true}?=>(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getDefEventsDefinedEventParserRuleCall_0_1_0()); 
	    }
		lv_defEvents_3_0=ruleDefinedEvent		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"defEvents",
        		lv_defEvents_3_0, 
        		"DefinedEvent");
	        afterParserOrEnumRuleCall();
	    }

)
))+
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getModelAccess().getUnorderedGroup_0());
	 				}
 				)
			)  |

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getModelAccess().getUnorderedGroup_0(), 2)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getModelAccess().getUnorderedGroup_0(), 2);
	 				}
					({true}?=>(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getWindowSizeWindowParserRuleCall_0_2_0()); 
	    }
		lv_windowSize_4_0=ruleWindow		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		set(
       			$current, 
       			"windowSize",
        		lv_windowSize_4_0, 
        		"Window");
	        afterParserOrEnumRuleCall();
	    }

)
))
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getModelAccess().getUnorderedGroup_0());
	 				}
 				)
			)  |

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getModelAccess().getUnorderedGroup_0(), 3)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getModelAccess().getUnorderedGroup_0(), 3);
	 				}
					({true}?=>(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getTimeIntervallTimerParserRuleCall_0_3_0()); 
	    }
		lv_timeIntervall_5_0=ruleTimer		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		set(
       			$current, 
       			"timeIntervall",
        		lv_timeIntervall_5_0, 
        		"Timer");
	        afterParserOrEnumRuleCall();
	    }

)
))
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getModelAccess().getUnorderedGroup_0());
	 				}
 				)
			)  

		)*	
	)
)
	{ 
	  getUnorderedGroupHelper().leave(grammarAccess.getModelAccess().getUnorderedGroup_0());
	}

))
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getModelAccess().getUnorderedGroup());
	 				}
 				)
			)  |

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getModelAccess().getUnorderedGroup(), 1)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getModelAccess().getUnorderedGroup(), 1);
	 				}
					({true}?=>(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getRulesRuleParserRuleCall_1_0()); 
	    }
		lv_rules_6_0=ruleRule		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"rules",
        		lv_rules_6_0, 
        		"Rule");
	        afterParserOrEnumRuleCall();
	    }

)
))+
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getModelAccess().getUnorderedGroup());
	 				}
 				)
			)  

		)+
	  	{getUnorderedGroupHelper().canLeave(grammarAccess.getModelAccess().getUnorderedGroup())}?	
	)
)
	{ 
	  getUnorderedGroupHelper().leave(grammarAccess.getModelAccess().getUnorderedGroup());
	}

)
;





// Entry rule entryRuleConstant
entryRuleConstant returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConstantRule()); }
	 iv_ruleConstant=ruleConstant 
	 { $current=$iv_ruleConstant.current; } 
	 EOF 
;

// Rule Constant
ruleConstant returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='DEFINE CONSTANT' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getConstantAccess().getDEFINECONSTANTKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getConstantAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getConstantRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2=':' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getConstantAccess().getColonKeyword_2());
    }
(
(
		lv_constValue_3_0=RULE_INT
		{
			newLeafNode(lv_constValue_3_0, grammarAccess.getConstantAccess().getConstValueINTTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getConstantRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"constValue",
        		lv_constValue_3_0, 
        		"INT");
	    }

)
)	otherlv_4=';' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getConstantAccess().getSemicolonKeyword_4());
    }
)
;





// Entry rule entryRuleWindow
entryRuleWindow returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getWindowRule()); }
	 iv_ruleWindow=ruleWindow 
	 { $current=$iv_ruleWindow.current; } 
	 EOF 
;

// Rule Window
ruleWindow returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='DEFINE WINDOWSIZE' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getWindowAccess().getDEFINEWINDOWSIZEKeyword_0());
    }
	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getWindowAccess().getColonKeyword_1());
    }
(
(
		lv_windowValue_2_0=RULE_INT
		{
			newLeafNode(lv_windowValue_2_0, grammarAccess.getWindowAccess().getWindowValueINTTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getWindowRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"windowValue",
        		lv_windowValue_2_0, 
        		"INT");
	    }

)
)	otherlv_3=';' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getWindowAccess().getSemicolonKeyword_3());
    }
)
;





// Entry rule entryRuleTimer
entryRuleTimer returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTimerRule()); }
	 iv_ruleTimer=ruleTimer 
	 { $current=$iv_ruleTimer.current; } 
	 EOF 
;

// Rule Timer
ruleTimer returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='DEFINE TIMEINTERVALL' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getTimerAccess().getDEFINETIMEINTERVALLKeyword_0());
    }
	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getTimerAccess().getColonKeyword_1());
    }
(
(
		lv_timerIntervallValue_2_0=RULE_INT
		{
			newLeafNode(lv_timerIntervallValue_2_0, grammarAccess.getTimerAccess().getTimerIntervallValueINTTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTimerRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"timerIntervallValue",
        		lv_timerIntervallValue_2_0, 
        		"INT");
	    }

)
)	otherlv_3=';' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getTimerAccess().getSemicolonKeyword_3());
    }
)
;





// Entry rule entryRuleDefinedEvent
entryRuleDefinedEvent returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDefinedEventRule()); }
	 iv_ruleDefinedEvent=ruleDefinedEvent 
	 { $current=$iv_ruleDefinedEvent.current; } 
	 EOF 
;

// Rule DefinedEvent
ruleDefinedEvent returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='DEFINE EVENT' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getDefinedEventAccess().getDEFINEEVENTKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getDefinedEventAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDefinedEventRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2=':' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getDefinedEventAccess().getColonKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDefinedEventAccess().getDefinedSourceSourceParserRuleCall_3_0()); 
	    }
		lv_definedSource_3_0=ruleSource		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDefinedEventRule());
	        }
       		set(
       			$current, 
       			"definedSource",
        		lv_definedSource_3_0, 
        		"Source");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4='WITH' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getDefinedEventAccess().getWITHKeyword_4());
    }
(
(
		lv_definedAttribute_5_0=RULE_ID
		{
			newLeafNode(lv_definedAttribute_5_0, grammarAccess.getDefinedEventAccess().getDefinedAttributeIDTerminalRuleCall_5_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDefinedEventRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"definedAttribute",
        		lv_definedAttribute_5_0, 
        		"ID");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getDefinedEventAccess().getDefinedOperatorOperatorParserRuleCall_6_0()); 
	    }
		lv_definedOperator_6_0=ruleOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDefinedEventRule());
	        }
       		set(
       			$current, 
       			"definedOperator",
        		lv_definedOperator_6_0, 
        		"Operator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getDefinedEventAccess().getDefinedValueEcaValueParserRuleCall_7_0()); 
	    }
		lv_definedValue_7_0=ruleEcaValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDefinedEventRule());
	        }
       		set(
       			$current, 
       			"definedValue",
        		lv_definedValue_7_0, 
        		"EcaValue");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_8=';' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getDefinedEventAccess().getSemicolonKeyword_8());
    }
)
;





// Entry rule entryRuleRule
entryRuleRule returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRuleRule()); }
	 iv_ruleRule=ruleRule 
	 { $current=$iv_ruleRule.current; } 
	 EOF 
;

// Rule Rule
ruleRule returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='ON' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getRuleAccess().getONKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getRuleAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRuleRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getRuleAccess().getSourceRuleSourceParserRuleCall_2_0()); 
	    }
		lv_source_2_0=ruleRuleSource		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRuleRule());
	        }
       		set(
       			$current, 
       			"source",
        		lv_source_2_0, 
        		"RuleSource");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3='IF' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getRuleAccess().getIFKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRuleAccess().getRuleConditionsCONDITIONSParserRuleCall_4_0()); 
	    }
		lv_ruleConditions_4_0=ruleCONDITIONS		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRuleRule());
	        }
       		set(
       			$current, 
       			"ruleConditions",
        		lv_ruleConditions_4_0, 
        		"CONDITIONS");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5='THEN' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getRuleAccess().getTHENKeyword_5());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRuleAccess().getRuleActionsACTIONSParserRuleCall_6_0()); 
	    }
		lv_ruleActions_6_0=ruleACTIONS		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRuleRule());
	        }
       		set(
       			$current, 
       			"ruleActions",
        		lv_ruleActions_6_0, 
        		"ACTIONS");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_7=';' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getRuleAccess().getSemicolonKeyword_7());
    }
)
;





// Entry rule entryRuleCONDITIONS
entryRuleCONDITIONS returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCONDITIONSRule()); }
	 iv_ruleCONDITIONS=ruleCONDITIONS 
	 { $current=$iv_ruleCONDITIONS.current; } 
	 EOF 
;

// Rule CONDITIONS
ruleCONDITIONS returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getCONDITIONSAccess().getSUBCONDITIONParserRuleCall_0()); 
    }
    this_SUBCONDITION_0=ruleSUBCONDITION
    { 
        $current = $this_SUBCONDITION_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getCONDITIONSAccess().getCONDITIONSLeftAction_1_0(),
            $current);
    }
)	otherlv_2='AND' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getCONDITIONSAccess().getANDKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCONDITIONSAccess().getRightSUBCONDITIONParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleSUBCONDITION		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCONDITIONSRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"SUBCONDITION");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleSUBCONDITION
entryRuleSUBCONDITION returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSUBCONDITIONRule()); }
	 iv_ruleSUBCONDITION=ruleSUBCONDITION 
	 { $current=$iv_ruleSUBCONDITION.current; } 
	 EOF 
;

// Rule SUBCONDITION
ruleSUBCONDITION returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getSUBCONDITIONAccess().getSubsourceSOURCECONDITIONParserRuleCall_0_0()); 
	    }
		lv_subsource_0_0=ruleSOURCECONDITION		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSUBCONDITIONRule());
	        }
       		set(
       			$current, 
       			"subsource",
        		lv_subsource_0_0, 
        		"SOURCECONDITION");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getSUBCONDITIONAccess().getSubsysSYSTEMCONDITIONParserRuleCall_1_0()); 
	    }
		lv_subsys_1_0=ruleSYSTEMCONDITION		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSUBCONDITIONRule());
	        }
       		set(
       			$current, 
       			"subsys",
        		lv_subsys_1_0, 
        		"SYSTEMCONDITION");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getSUBCONDITIONAccess().getSUBCONDITIONAction_2_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSUBCONDITIONAccess().getSubfreeFREECONDITIONParserRuleCall_2_1_0()); 
	    }
		lv_subfree_3_0=ruleFREECONDITION		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSUBCONDITIONRule());
	        }
       		set(
       			$current, 
       			"subfree",
        		lv_subfree_3_0, 
        		"FREECONDITION");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getSUBCONDITIONAccess().getSUBCONDITIONAction_3_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSUBCONDITIONAccess().getSubmapMAPCONDITIONParserRuleCall_3_1_0()); 
	    }
		lv_submap_5_0=ruleMAPCONDITION		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSUBCONDITIONRule());
	        }
       		set(
       			$current, 
       			"submap",
        		lv_submap_5_0, 
        		"MAPCONDITION");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getSUBCONDITIONAccess().getSUBCONDITIONAction_4_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSUBCONDITIONAccess().getQueryCondQUERYCONDITIONParserRuleCall_4_1_0()); 
	    }
		lv_queryCond_7_0=ruleQUERYCONDITION		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSUBCONDITIONRule());
	        }
       		set(
       			$current, 
       			"queryCond",
        		lv_queryCond_7_0, 
        		"QUERYCONDITION");
	        afterParserOrEnumRuleCall();
	    }

)
)))
;





// Entry rule entryRuleRuleSource
entryRuleRuleSource returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRuleSourceRule()); }
	 iv_ruleRuleSource=ruleRuleSource 
	 { $current=$iv_ruleRuleSource.current; } 
	 EOF 
;

// Rule RuleSource
ruleRuleSource returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='${' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getRuleSourceAccess().getDollarSignLeftCurlyBracketKeyword_0_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getRuleSourceRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getRuleSourceAccess().getDefSourceDefinedEventCrossReference_0_1_0()); 
	}

)
)	otherlv_2='}' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getRuleSourceAccess().getRightCurlyBracketKeyword_0_2());
    }
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getRuleSourceAccess().getNewSourceSourceParserRuleCall_1_0()); 
	    }
		lv_newSource_3_0=ruleSource		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRuleSourceRule());
	        }
       		set(
       			$current, 
       			"newSource",
        		lv_newSource_3_0, 
        		"Source");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getRuleSourceAccess().getPreSourcePREDEFINEDSOURCEParserRuleCall_2_0()); 
	    }
		lv_preSource_4_0=rulePREDEFINEDSOURCE		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRuleSourceRule());
	        }
       		set(
       			$current, 
       			"preSource",
        		lv_preSource_4_0, 
        		"PREDEFINEDSOURCE");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleSOURCECONDITION
entryRuleSOURCECONDITION returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSOURCECONDITIONRule()); }
	 iv_ruleSOURCECONDITION=ruleSOURCECONDITION 
	 { $current=$iv_ruleSOURCECONDITION.current; } 
	 EOF 
;

// Rule SOURCECONDITION
ruleSOURCECONDITION returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_condAttribute_0_0=RULE_ID
		{
			newLeafNode(lv_condAttribute_0_0, grammarAccess.getSOURCECONDITIONAccess().getCondAttributeIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSOURCECONDITIONRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"condAttribute",
        		lv_condAttribute_0_0, 
        		"ID");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSOURCECONDITIONAccess().getOperatorOperatorParserRuleCall_1_0()); 
	    }
		lv_operator_1_0=ruleOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSOURCECONDITIONRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_1_0, 
        		"Operator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSOURCECONDITIONAccess().getValueEcaValueParserRuleCall_2_0()); 
	    }
		lv_value_2_0=ruleEcaValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSOURCECONDITIONRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_2_0, 
        		"EcaValue");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleQUERYCONDITION
entryRuleQUERYCONDITION returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getQUERYCONDITIONRule()); }
	 iv_ruleQUERYCONDITION=ruleQUERYCONDITION 
	 { $current=$iv_ruleQUERYCONDITION.current; } 
	 EOF 
;

// Rule QUERYCONDITION
ruleQUERYCONDITION returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_queryNot_0_0=	'!' 
    {
        newLeafNode(lv_queryNot_0_0, grammarAccess.getQUERYCONDITIONAccess().getQueryNotExclamationMarkKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getQUERYCONDITIONRule());
	        }
       		setWithLastConsumed($current, "queryNot", lv_queryNot_0_0, "!");
	    }

)
)?	otherlv_1='queryExists' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getQUERYCONDITIONAccess().getQueryExistsKeyword_1());
    }
	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getQUERYCONDITIONAccess().getLeftParenthesisKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getQUERYCONDITIONAccess().getQueryFunctRNDQUERYParserRuleCall_3_0()); 
	    }
		lv_queryFunct_3_0=ruleRNDQUERY		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getQUERYCONDITIONRule());
	        }
       		set(
       			$current, 
       			"queryFunct",
        		lv_queryFunct_3_0, 
        		"RNDQUERY");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=')' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getQUERYCONDITIONAccess().getRightParenthesisKeyword_4());
    }
)
;





// Entry rule entryRuleSYSTEMCONDITION
entryRuleSYSTEMCONDITION returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSYSTEMCONDITIONRule()); }
	 iv_ruleSYSTEMCONDITION=ruleSYSTEMCONDITION 
	 { $current=$iv_ruleSYSTEMCONDITION.current; } 
	 EOF 
;

// Rule SYSTEMCONDITION
ruleSYSTEMCONDITION returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='SYSTEM.' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSYSTEMCONDITIONAccess().getSYSTEMKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSYSTEMCONDITIONAccess().getSystemAttributeSYSTEMFUNCTIONParserRuleCall_1_0()); 
	    }
		lv_systemAttribute_1_0=ruleSYSTEMFUNCTION		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSYSTEMCONDITIONRule());
	        }
       		set(
       			$current, 
       			"systemAttribute",
        		lv_systemAttribute_1_0, 
        		"SYSTEMFUNCTION");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSYSTEMCONDITIONAccess().getOperatorOperatorParserRuleCall_2_0()); 
	    }
		lv_operator_2_0=ruleOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSYSTEMCONDITIONRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_2_0, 
        		"Operator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSYSTEMCONDITIONAccess().getValueEcaValueParserRuleCall_3_0()); 
	    }
		lv_value_3_0=ruleEcaValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSYSTEMCONDITIONRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_3_0, 
        		"EcaValue");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleFREECONDITION
entryRuleFREECONDITION returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFREECONDITIONRule()); }
	 iv_ruleFREECONDITION=ruleFREECONDITION 
	 { $current=$iv_ruleFREECONDITION.current; } 
	 EOF 
;

// Rule FREECONDITION
ruleFREECONDITION returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_freeCondition_0_0=RULE_STRING
		{
			newLeafNode(lv_freeCondition_0_0, grammarAccess.getFREECONDITIONAccess().getFreeConditionSTRINGTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFREECONDITIONRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"freeCondition",
        		lv_freeCondition_0_0, 
        		"STRING");
	    }

)
)
;





// Entry rule entryRuleMAPCONDITION
entryRuleMAPCONDITION returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMAPCONDITIONRule()); }
	 iv_ruleMAPCONDITION=ruleMAPCONDITION 
	 { $current=$iv_ruleMAPCONDITION.current; } 
	 EOF 
;

// Rule MAPCONDITION
ruleMAPCONDITION returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='GET' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getMAPCONDITIONAccess().getGETKeyword_0());
    }
(
(
		lv_mapCond_1_0=RULE_STRING
		{
			newLeafNode(lv_mapCond_1_0, grammarAccess.getMAPCONDITIONAccess().getMapCondSTRINGTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMAPCONDITIONRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"mapCond",
        		lv_mapCond_1_0, 
        		"STRING");
	    }

)
))
;





// Entry rule entryRuleACTIONS
entryRuleACTIONS returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getACTIONSRule()); }
	 iv_ruleACTIONS=ruleACTIONS 
	 { $current=$iv_ruleACTIONS.current; } 
	 EOF 
;

// Rule ACTIONS
ruleACTIONS returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getACTIONSAccess().getSUBACTIONSParserRuleCall_0()); 
    }
    this_SUBACTIONS_0=ruleSUBACTIONS
    { 
        $current = $this_SUBACTIONS_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getACTIONSAccess().getACTIONSLeftAction_1_0(),
            $current);
    }
)	otherlv_2='AND' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getACTIONSAccess().getANDKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getACTIONSAccess().getRightSUBACTIONSParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleSUBACTIONS		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getACTIONSRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"SUBACTIONS");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleSUBACTIONS
entryRuleSUBACTIONS returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSUBACTIONSRule()); }
	 iv_ruleSUBACTIONS=ruleSUBACTIONS 
	 { $current=$iv_ruleSUBACTIONS.current; } 
	 EOF 
;

// Rule SUBACTIONS
ruleSUBACTIONS returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getSUBACTIONSAccess().getComActionCOMMANDACTIONParserRuleCall_0()); 
	    }
		lv_comAction_0_0=ruleCOMMANDACTION		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSUBACTIONSRule());
	        }
       		set(
       			$current, 
       			"comAction",
        		lv_comAction_0_0, 
        		"COMMANDACTION");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleCOMMANDACTION
entryRuleCOMMANDACTION returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCOMMANDACTIONRule()); }
	 iv_ruleCOMMANDACTION=ruleCOMMANDACTION 
	 { $current=$iv_ruleCOMMANDACTION.current; } 
	 EOF 
;

// Rule COMMANDACTION
ruleCOMMANDACTION returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_subActname_0_0=RULE_ID
		{
			newLeafNode(lv_subActname_0_0, grammarAccess.getCOMMANDACTIONAccess().getSubActnameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getCOMMANDACTIONRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"subActname",
        		lv_subActname_0_0, 
        		"ID");
	    }

)
)	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getCOMMANDACTIONAccess().getLeftParenthesisKeyword_1());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getCOMMANDACTIONAccess().getFunctActionRNDQUERYParserRuleCall_2_0_0()); 
	    }
		lv_functAction_2_0=ruleRNDQUERY		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCOMMANDACTIONRule());
	        }
       		set(
       			$current, 
       			"functAction",
        		lv_functAction_2_0, 
        		"RNDQUERY");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getCOMMANDACTIONAccess().getActionValueEcaValueParserRuleCall_2_1_0()); 
	    }
		lv_actionValue_3_0=ruleEcaValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCOMMANDACTIONRule());
	        }
       		set(
       			$current, 
       			"actionValue",
        		lv_actionValue_3_0, 
        		"EcaValue");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getCOMMANDACTIONAccess().getInnerActionCOMMANDACTIONParserRuleCall_2_2_0()); 
	    }
		lv_innerAction_4_0=ruleCOMMANDACTION		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCOMMANDACTIONRule());
	        }
       		add(
       			$current, 
       			"innerAction",
        		lv_innerAction_4_0, 
        		"COMMANDACTION");
	        afterParserOrEnumRuleCall();
	    }

)
)*)	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getCOMMANDACTIONAccess().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRuleRNDQUERY
entryRuleRNDQUERY returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRNDQUERYRule()); }
	 iv_ruleRNDQUERY=ruleRNDQUERY 
	 { $current=$iv_ruleRNDQUERY.current; } 
	 EOF 
;

// Rule RNDQUERY
ruleRNDQUERY returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='prio' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getRNDQUERYAccess().getPrioKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRNDQUERYAccess().getPriOperatorOperatorParserRuleCall_1_0()); 
	    }
		lv_priOperator_1_0=ruleOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRNDQUERYRule());
	        }
       		set(
       			$current, 
       			"priOperator",
        		lv_priOperator_1_0, 
        		"Operator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_priVal_2_0=RULE_INT
		{
			newLeafNode(lv_priVal_2_0, grammarAccess.getRNDQUERYAccess().getPriValINTTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRNDQUERYRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"priVal",
        		lv_priVal_2_0, 
        		"INT");
	    }

)
)(	otherlv_3='(' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getRNDQUERYAccess().getLeftParenthesisKeyword_3_0());
    }
(
(
(
		lv_sel_4_1=	'MIN' 
    {
        newLeafNode(lv_sel_4_1, grammarAccess.getRNDQUERYAccess().getSelMINKeyword_3_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRNDQUERYRule());
	        }
       		setWithLastConsumed($current, "sel", lv_sel_4_1, null);
	    }

    |		lv_sel_4_2=	'MAX' 
    {
        newLeafNode(lv_sel_4_2, grammarAccess.getRNDQUERYAccess().getSelMAXKeyword_3_1_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRNDQUERYRule());
	        }
       		setWithLastConsumed($current, "sel", lv_sel_4_2, null);
	    }

)

)
)	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getRNDQUERYAccess().getRightParenthesisKeyword_3_2());
    }
)?	otherlv_6=',' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getRNDQUERYAccess().getCommaKeyword_4());
    }
	otherlv_7='state' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getRNDQUERYAccess().getStateKeyword_5());
    }
	otherlv_8='=' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getRNDQUERYAccess().getEqualsSignKeyword_6());
    }
(
(
		lv_stateName_9_0=RULE_ID
		{
			newLeafNode(lv_stateName_9_0, grammarAccess.getRNDQUERYAccess().getStateNameIDTerminalRuleCall_7_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRNDQUERYRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"stateName",
        		lv_stateName_9_0, 
        		"ID");
	    }

)
))
;





// Entry rule entryRuleSource
entryRuleSource returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSourceRule()); }
	 iv_ruleSource=ruleSource 
	 { $current=$iv_ruleSource.current; } 
	 EOF 
;

// Rule Source
ruleSource returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getSourceAccess().getNameIDTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSourceRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)
;





// Entry rule entryRuleEcaValue
entryRuleEcaValue returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEcaValueRule()); }
	 iv_ruleEcaValue=ruleEcaValue 
	 { $current=$iv_ruleEcaValue.current; } 
	 EOF 
;

// Rule EcaValue
ruleEcaValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_intValue_0_0=RULE_INT
		{
			newLeafNode(lv_intValue_0_0, grammarAccess.getEcaValueAccess().getIntValueINTTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEcaValueRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"intValue",
        		lv_intValue_0_0, 
        		"INT");
	    }

)
)
    |(
(
		lv_idValue_1_0=RULE_ID
		{
			newLeafNode(lv_idValue_1_0, grammarAccess.getEcaValueAccess().getIdValueIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEcaValueRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"idValue",
        		lv_idValue_1_0, 
        		"ID");
	    }

)
)
    |((	otherlv_2='${' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getEcaValueAccess().getDollarSignLeftCurlyBracketKeyword_2_0_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getEcaValueRule());
	        }
        }
	otherlv_3=RULE_ID
	{
		newLeafNode(otherlv_3, grammarAccess.getEcaValueAccess().getConstValueConstantCrossReference_2_0_1_0()); 
	}

)
))	otherlv_4='}' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getEcaValueAccess().getRightCurlyBracketKeyword_2_1());
    }
)
    |(
(
		lv_stringValue_5_0=RULE_STRING
		{
			newLeafNode(lv_stringValue_5_0, grammarAccess.getEcaValueAccess().getStringValueSTRINGTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEcaValueRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"stringValue",
        		lv_stringValue_5_0, 
        		"STRING");
	    }

)
)
    |(
(
		lv_doubleValue_6_0=RULE_DOUBLE
		{
			newLeafNode(lv_doubleValue_6_0, grammarAccess.getEcaValueAccess().getDoubleValueDOUBLETerminalRuleCall_4_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEcaValueRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"doubleValue",
        		lv_doubleValue_6_0, 
        		"DOUBLE");
	    }

)
))
;





// Entry rule entryRulePREDEFINEDSOURCE
entryRulePREDEFINEDSOURCE returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getPREDEFINEDSOURCERule()); } 
	 iv_rulePREDEFINEDSOURCE=rulePREDEFINEDSOURCE 
	 { $current=$iv_rulePREDEFINEDSOURCE.current.getText(); }  
	 EOF 
;

// Rule PREDEFINEDSOURCE
rulePREDEFINEDSOURCE returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='TimerEvent' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPREDEFINEDSOURCEAccess().getTimerEventKeyword_0()); 
    }

    |
	kw='QueryEvent' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPREDEFINEDSOURCEAccess().getQueryEventKeyword_1()); 
    }
)
    ;





// Entry rule entryRuleSYSTEMFUNCTION
entryRuleSYSTEMFUNCTION returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getSYSTEMFUNCTIONRule()); } 
	 iv_ruleSYSTEMFUNCTION=ruleSYSTEMFUNCTION 
	 { $current=$iv_ruleSYSTEMFUNCTION.current.getText(); }  
	 EOF 
;

// Rule SYSTEMFUNCTION
ruleSYSTEMFUNCTION returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='curCPULoad' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSYSTEMFUNCTIONAccess().getCurCPULoadKeyword_0()); 
    }

    |
	kw='curMEMLoad' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSYSTEMFUNCTIONAccess().getCurMEMLoadKeyword_1()); 
    }

    |
	kw='curNETLoad' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSYSTEMFUNCTIONAccess().getCurNETLoadKeyword_2()); 
    }
)
    ;





// Entry rule entryRuleOperator
entryRuleOperator returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getOperatorRule()); } 
	 iv_ruleOperator=ruleOperator 
	 { $current=$iv_ruleOperator.current.getText(); }  
	 EOF 
;

// Rule Operator
ruleOperator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='<' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOperatorAccess().getLessThanSignKeyword_0()); 
    }

    |
	kw='>' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOperatorAccess().getGreaterThanSignKeyword_1()); 
    }

    |
	kw='=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOperatorAccess().getEqualsSignKeyword_2()); 
    }

    |
	kw='<=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOperatorAccess().getLessThanSignEqualsSignKeyword_3()); 
    }

    |
	kw='>=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOperatorAccess().getGreaterThanSignEqualsSignKeyword_4()); 
    }
)
    ;





RULE_DOUBLE : '-'? ('0'..'9')+ '.' '0'..'9';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


