/*
 * generated by Xtext
 */
package de.uniol.inf.is.odysseus.eca.ui.quickfix

import de.uniol.inf.is.odysseus.eca.validation.ECAValidator
import org.eclipse.xtext.ui.editor.quickfix.Fix
import org.eclipse.xtext.ui.editor.quickfix.IssueResolutionAcceptor
import org.eclipse.xtext.validation.Issue

//import org.eclipse.xtext.ui.editor.quickfix.Fix
//import org.eclipse.xtext.ui.editor.quickfix.IssueResolutionAcceptor
//import org.eclipse.xtext.validation.Issue

/**
 * Custom quickfixes.
 *
 * See https://www.eclipse.org/Xtext/documentation/304_ide_concepts.html#quick-fixes
 */
class ECAQuickfixProvider extends org.eclipse.xtext.ui.editor.quickfix.DefaultQuickfixProvider {


	@Fix(ECAValidator::INVALID_START)
	def startQuery(Issue issue, IssueResolutionAcceptor acceptor) {
		acceptor.accept(issue, 'Change to INACTIVE !QuickFix not working!', 'Use compatible state.', 'upcase.png') [ context |
			val xtextDocument = context.xtextDocument
			val newState = "INACTIVE"
			xtextDocument.replace(issue.offset, issue.length, newState)
		]
	}

	@Fix(ECAValidator::INVALID_STOP)
	def stopQuery(Issue issue, IssueResolutionAcceptor acceptor) {
		acceptor.accept(issue, 'Change to RUNNING', 'Use compatible state.', 'upcase.png') [ context |
			val xtextDocument = context.xtextDocument
			val newState = "RUNNING"
			xtextDocument.replace(issue.offset, issue.length, newState)
		]
		acceptor.accept(issue, 'Change to PARTIAL', 'Use compatible state.', 'upcase.png') [ context |
			val xtextDocument = context.xtextDocument
			val newState = "PARTIAL"
			xtextDocument.replace(issue.offset, issue.length, newState)
		]
	}

//	@Fix(MyDslValidator::INVALID_NAME)
//	def capitalizeName(Issue issue, IssueResolutionAcceptor acceptor) {
//		acceptor.accept(issue, 'Capitalize name', 'Capitalize the name.', 'upcase.png') [
//			context |
//			val xtextDocument = context.xtextDocument
//			val firstLetter = xtextDocument.get(issue.offset, 1)
//			xtextDocument.replace(issue.offset, 1, firstLetter.toUpperCase)
//		]
//	}
}
