/*
 * generated by Xtext
 */
package de.uniol.inf.is.odysseus.eca.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import de.uniol.inf.is.odysseus.eca.services.ECAGrammarAccess;

public class ECAParser extends AbstractContentAssistParser {
	
	@Inject
	private ECAGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected de.uniol.inf.is.odysseus.eca.ui.contentassist.antlr.internal.InternalECAParser createParser() {
		de.uniol.inf.is.odysseus.eca.ui.contentassist.antlr.internal.InternalECAParser result = new de.uniol.inf.is.odysseus.eca.ui.contentassist.antlr.internal.InternalECAParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getSUBCONDITIONAccess().getAlternatives(), "rule__SUBCONDITION__Alternatives");
					put(grammarAccess.getRuleSourceAccess().getAlternatives(), "rule__RuleSource__Alternatives");
					put(grammarAccess.getCOMMANDACTIONAccess().getAlternatives_2(), "rule__COMMANDACTION__Alternatives_2");
					put(grammarAccess.getRNDQUERYAccess().getSelAlternatives_3_1_0(), "rule__RNDQUERY__SelAlternatives_3_1_0");
					put(grammarAccess.getEcaValueAccess().getAlternatives(), "rule__EcaValue__Alternatives");
					put(grammarAccess.getPREDEFINEDSOURCEAccess().getAlternatives(), "rule__PREDEFINEDSOURCE__Alternatives");
					put(grammarAccess.getSYSTEMFUNCTIONAccess().getAlternatives(), "rule__SYSTEMFUNCTION__Alternatives");
					put(grammarAccess.getOperatorAccess().getAlternatives(), "rule__Operator__Alternatives");
					put(grammarAccess.getConstantAccess().getGroup(), "rule__Constant__Group__0");
					put(grammarAccess.getWindowAccess().getGroup(), "rule__Window__Group__0");
					put(grammarAccess.getTimerAccess().getGroup(), "rule__Timer__Group__0");
					put(grammarAccess.getDefinedEventAccess().getGroup(), "rule__DefinedEvent__Group__0");
					put(grammarAccess.getRuleAccess().getGroup(), "rule__Rule__Group__0");
					put(grammarAccess.getCONDITIONSAccess().getGroup(), "rule__CONDITIONS__Group__0");
					put(grammarAccess.getCONDITIONSAccess().getGroup_1(), "rule__CONDITIONS__Group_1__0");
					put(grammarAccess.getSUBCONDITIONAccess().getGroup_2(), "rule__SUBCONDITION__Group_2__0");
					put(grammarAccess.getSUBCONDITIONAccess().getGroup_3(), "rule__SUBCONDITION__Group_3__0");
					put(grammarAccess.getSUBCONDITIONAccess().getGroup_4(), "rule__SUBCONDITION__Group_4__0");
					put(grammarAccess.getRuleSourceAccess().getGroup_0(), "rule__RuleSource__Group_0__0");
					put(grammarAccess.getSOURCECONDITIONAccess().getGroup(), "rule__SOURCECONDITION__Group__0");
					put(grammarAccess.getQUERYCONDITIONAccess().getGroup(), "rule__QUERYCONDITION__Group__0");
					put(grammarAccess.getSYSTEMCONDITIONAccess().getGroup(), "rule__SYSTEMCONDITION__Group__0");
					put(grammarAccess.getMAPCONDITIONAccess().getGroup(), "rule__MAPCONDITION__Group__0");
					put(grammarAccess.getACTIONSAccess().getGroup(), "rule__ACTIONS__Group__0");
					put(grammarAccess.getACTIONSAccess().getGroup_1(), "rule__ACTIONS__Group_1__0");
					put(grammarAccess.getCOMMANDACTIONAccess().getGroup(), "rule__COMMANDACTION__Group__0");
					put(grammarAccess.getRNDQUERYAccess().getGroup(), "rule__RNDQUERY__Group__0");
					put(grammarAccess.getRNDQUERYAccess().getGroup_3(), "rule__RNDQUERY__Group_3__0");
					put(grammarAccess.getEcaValueAccess().getGroup_2(), "rule__EcaValue__Group_2__0");
					put(grammarAccess.getEcaValueAccess().getGroup_2_0(), "rule__EcaValue__Group_2_0__0");
					put(grammarAccess.getModelAccess().getConstantsAssignment_0_0(), "rule__Model__ConstantsAssignment_0_0");
					put(grammarAccess.getModelAccess().getDefEventsAssignment_0_1(), "rule__Model__DefEventsAssignment_0_1");
					put(grammarAccess.getModelAccess().getWindowSizeAssignment_0_2(), "rule__Model__WindowSizeAssignment_0_2");
					put(grammarAccess.getModelAccess().getTimeIntervallAssignment_0_3(), "rule__Model__TimeIntervallAssignment_0_3");
					put(grammarAccess.getModelAccess().getRulesAssignment_1(), "rule__Model__RulesAssignment_1");
					put(grammarAccess.getConstantAccess().getNameAssignment_1(), "rule__Constant__NameAssignment_1");
					put(grammarAccess.getConstantAccess().getConstValueAssignment_3(), "rule__Constant__ConstValueAssignment_3");
					put(grammarAccess.getWindowAccess().getWindowValueAssignment_2(), "rule__Window__WindowValueAssignment_2");
					put(grammarAccess.getTimerAccess().getTimerIntervallValueAssignment_2(), "rule__Timer__TimerIntervallValueAssignment_2");
					put(grammarAccess.getDefinedEventAccess().getNameAssignment_1(), "rule__DefinedEvent__NameAssignment_1");
					put(grammarAccess.getDefinedEventAccess().getDefinedSourceAssignment_3(), "rule__DefinedEvent__DefinedSourceAssignment_3");
					put(grammarAccess.getDefinedEventAccess().getDefinedAttributeAssignment_5(), "rule__DefinedEvent__DefinedAttributeAssignment_5");
					put(grammarAccess.getDefinedEventAccess().getDefinedOperatorAssignment_6(), "rule__DefinedEvent__DefinedOperatorAssignment_6");
					put(grammarAccess.getDefinedEventAccess().getDefinedValueAssignment_7(), "rule__DefinedEvent__DefinedValueAssignment_7");
					put(grammarAccess.getRuleAccess().getNameAssignment_1(), "rule__Rule__NameAssignment_1");
					put(grammarAccess.getRuleAccess().getSourceAssignment_2(), "rule__Rule__SourceAssignment_2");
					put(grammarAccess.getRuleAccess().getRuleConditionsAssignment_4(), "rule__Rule__RuleConditionsAssignment_4");
					put(grammarAccess.getRuleAccess().getRuleActionsAssignment_6(), "rule__Rule__RuleActionsAssignment_6");
					put(grammarAccess.getCONDITIONSAccess().getRightAssignment_1_2(), "rule__CONDITIONS__RightAssignment_1_2");
					put(grammarAccess.getSUBCONDITIONAccess().getSubsourceAssignment_0(), "rule__SUBCONDITION__SubsourceAssignment_0");
					put(grammarAccess.getSUBCONDITIONAccess().getSubsysAssignment_1(), "rule__SUBCONDITION__SubsysAssignment_1");
					put(grammarAccess.getSUBCONDITIONAccess().getSubfreeAssignment_2_1(), "rule__SUBCONDITION__SubfreeAssignment_2_1");
					put(grammarAccess.getSUBCONDITIONAccess().getSubmapAssignment_3_1(), "rule__SUBCONDITION__SubmapAssignment_3_1");
					put(grammarAccess.getSUBCONDITIONAccess().getQueryCondAssignment_4_1(), "rule__SUBCONDITION__QueryCondAssignment_4_1");
					put(grammarAccess.getRuleSourceAccess().getDefSourceAssignment_0_1(), "rule__RuleSource__DefSourceAssignment_0_1");
					put(grammarAccess.getRuleSourceAccess().getNewSourceAssignment_1(), "rule__RuleSource__NewSourceAssignment_1");
					put(grammarAccess.getRuleSourceAccess().getPreSourceAssignment_2(), "rule__RuleSource__PreSourceAssignment_2");
					put(grammarAccess.getSOURCECONDITIONAccess().getCondAttributeAssignment_0(), "rule__SOURCECONDITION__CondAttributeAssignment_0");
					put(grammarAccess.getSOURCECONDITIONAccess().getOperatorAssignment_1(), "rule__SOURCECONDITION__OperatorAssignment_1");
					put(grammarAccess.getSOURCECONDITIONAccess().getValueAssignment_2(), "rule__SOURCECONDITION__ValueAssignment_2");
					put(grammarAccess.getQUERYCONDITIONAccess().getQueryNotAssignment_0(), "rule__QUERYCONDITION__QueryNotAssignment_0");
					put(grammarAccess.getQUERYCONDITIONAccess().getQueryFunctAssignment_3(), "rule__QUERYCONDITION__QueryFunctAssignment_3");
					put(grammarAccess.getSYSTEMCONDITIONAccess().getSystemAttributeAssignment_1(), "rule__SYSTEMCONDITION__SystemAttributeAssignment_1");
					put(grammarAccess.getSYSTEMCONDITIONAccess().getOperatorAssignment_2(), "rule__SYSTEMCONDITION__OperatorAssignment_2");
					put(grammarAccess.getSYSTEMCONDITIONAccess().getValueAssignment_3(), "rule__SYSTEMCONDITION__ValueAssignment_3");
					put(grammarAccess.getFREECONDITIONAccess().getFreeConditionAssignment(), "rule__FREECONDITION__FreeConditionAssignment");
					put(grammarAccess.getMAPCONDITIONAccess().getMapCondAssignment_1(), "rule__MAPCONDITION__MapCondAssignment_1");
					put(grammarAccess.getACTIONSAccess().getRightAssignment_1_2(), "rule__ACTIONS__RightAssignment_1_2");
					put(grammarAccess.getSUBACTIONSAccess().getComActionAssignment(), "rule__SUBACTIONS__ComActionAssignment");
					put(grammarAccess.getCOMMANDACTIONAccess().getSubActnameAssignment_0(), "rule__COMMANDACTION__SubActnameAssignment_0");
					put(grammarAccess.getCOMMANDACTIONAccess().getFunctActionAssignment_2_0(), "rule__COMMANDACTION__FunctActionAssignment_2_0");
					put(grammarAccess.getCOMMANDACTIONAccess().getActionValueAssignment_2_1(), "rule__COMMANDACTION__ActionValueAssignment_2_1");
					put(grammarAccess.getCOMMANDACTIONAccess().getInnerActionAssignment_2_2(), "rule__COMMANDACTION__InnerActionAssignment_2_2");
					put(grammarAccess.getRNDQUERYAccess().getPriOperatorAssignment_1(), "rule__RNDQUERY__PriOperatorAssignment_1");
					put(grammarAccess.getRNDQUERYAccess().getPriValAssignment_2(), "rule__RNDQUERY__PriValAssignment_2");
					put(grammarAccess.getRNDQUERYAccess().getSelAssignment_3_1(), "rule__RNDQUERY__SelAssignment_3_1");
					put(grammarAccess.getRNDQUERYAccess().getStateNameAssignment_7(), "rule__RNDQUERY__StateNameAssignment_7");
					put(grammarAccess.getSourceAccess().getNameAssignment(), "rule__Source__NameAssignment");
					put(grammarAccess.getEcaValueAccess().getIntValueAssignment_0(), "rule__EcaValue__IntValueAssignment_0");
					put(grammarAccess.getEcaValueAccess().getIdValueAssignment_1(), "rule__EcaValue__IdValueAssignment_1");
					put(grammarAccess.getEcaValueAccess().getConstValueAssignment_2_0_1(), "rule__EcaValue__ConstValueAssignment_2_0_1");
					put(grammarAccess.getEcaValueAccess().getStringValueAssignment_3(), "rule__EcaValue__StringValueAssignment_3");
					put(grammarAccess.getEcaValueAccess().getDoubleValueAssignment_4(), "rule__EcaValue__DoubleValueAssignment_4");
					put(grammarAccess.getModelAccess().getUnorderedGroup(), "rule__Model__UnorderedGroup");
					put(grammarAccess.getModelAccess().getUnorderedGroup_0(), "rule__Model__UnorderedGroup_0");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			de.uniol.inf.is.odysseus.eca.ui.contentassist.antlr.internal.InternalECAParser typedParser = (de.uniol.inf.is.odysseus.eca.ui.contentassist.antlr.internal.InternalECAParser) parser;
			typedParser.entryRuleModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public ECAGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(ECAGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
