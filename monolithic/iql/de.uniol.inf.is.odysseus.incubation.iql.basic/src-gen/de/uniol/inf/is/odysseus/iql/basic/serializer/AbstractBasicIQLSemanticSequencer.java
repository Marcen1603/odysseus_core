/*
 * generated by Xtext 2.12.0
 */
package de.uniol.inf.is.odysseus.iql.basic.serializer;

import com.google.inject.Inject;
import de.uniol.inf.is.odysseus.iql.basic.basicIQL.BasicIQLPackage;
import de.uniol.inf.is.odysseus.iql.basic.basicIQL.IQLAdditiveExpression;
import de.uniol.inf.is.odysseus.iql.basic.basicIQL.IQLArgumentsList;
import de.uniol.inf.is.odysseus.iql.basic.basicIQL.IQLArgumentsMap;
import de.uniol.inf.is.odysseus.iql.basic.basicIQL.IQLArgumentsMapKeyValue;
import de.uniol.inf.is.odysseus.iql.basic.basicIQL.IQLArrayExpression;
import de.uniol.inf.is.odysseus.iql.basic.basicIQL.IQLArrayType;
import de.uniol.inf.is.odysseus.iql.basic.basicIQL.IQLArrayTypeRef;
import de.uniol.inf.is.odysseus.iql.basic.basicIQL.IQLAssignmentExpression;
import de.uniol.inf.is.odysseus.iql.basic.basicIQL.IQLAttribute;
import de.uniol.inf.is.odysseus.iql.basic.basicIQL.IQLBooleanNotExpression;
import de.uniol.inf.is.odysseus.iql.basic.basicIQL.IQLBreakStatement;
import de.uniol.inf.is.odysseus.iql.basic.basicIQL.IQLCasePart;
import de.uniol.inf.is.odysseus.iql.basic.basicIQL.IQLClass;
import de.uniol.inf.is.odysseus.iql.basic.basicIQL.IQLConstructorCallStatement;
import de.uniol.inf.is.odysseus.iql.basic.basicIQL.IQLContinueStatement;
import de.uniol.inf.is.odysseus.iql.basic.basicIQL.IQLDoWhileStatement;
import de.uniol.inf.is.odysseus.iql.basic.basicIQL.IQLEqualityExpression;
import de.uniol.inf.is.odysseus.iql.basic.basicIQL.IQLExpressionStatement;
import de.uniol.inf.is.odysseus.iql.basic.basicIQL.IQLForEachStatement;
import de.uniol.inf.is.odysseus.iql.basic.basicIQL.IQLForStatement;
import de.uniol.inf.is.odysseus.iql.basic.basicIQL.IQLIfStatement;
import de.uniol.inf.is.odysseus.iql.basic.basicIQL.IQLInstanceOfExpression;
import de.uniol.inf.is.odysseus.iql.basic.basicIQL.IQLInterface;
import de.uniol.inf.is.odysseus.iql.basic.basicIQL.IQLJava;
import de.uniol.inf.is.odysseus.iql.basic.basicIQL.IQLJavaMember;
import de.uniol.inf.is.odysseus.iql.basic.basicIQL.IQLJavaMetadata;
import de.uniol.inf.is.odysseus.iql.basic.basicIQL.IQLJavaStatement;
import de.uniol.inf.is.odysseus.iql.basic.basicIQL.IQLJvmElementCallExpression;
import de.uniol.inf.is.odysseus.iql.basic.basicIQL.IQLLiteralExpressionBoolean;
import de.uniol.inf.is.odysseus.iql.basic.basicIQL.IQLLiteralExpressionDouble;
import de.uniol.inf.is.odysseus.iql.basic.basicIQL.IQLLiteralExpressionInt;
import de.uniol.inf.is.odysseus.iql.basic.basicIQL.IQLLiteralExpressionList;
import de.uniol.inf.is.odysseus.iql.basic.basicIQL.IQLLiteralExpressionMap;
import de.uniol.inf.is.odysseus.iql.basic.basicIQL.IQLLiteralExpressionMapKeyValue;
import de.uniol.inf.is.odysseus.iql.basic.basicIQL.IQLLiteralExpressionNull;
import de.uniol.inf.is.odysseus.iql.basic.basicIQL.IQLLiteralExpressionRange;
import de.uniol.inf.is.odysseus.iql.basic.basicIQL.IQLLiteralExpressionString;
import de.uniol.inf.is.odysseus.iql.basic.basicIQL.IQLLiteralExpressionType;
import de.uniol.inf.is.odysseus.iql.basic.basicIQL.IQLLogicalAndExpression;
import de.uniol.inf.is.odysseus.iql.basic.basicIQL.IQLLogicalOrExpression;
import de.uniol.inf.is.odysseus.iql.basic.basicIQL.IQLMemberSelection;
import de.uniol.inf.is.odysseus.iql.basic.basicIQL.IQLMemberSelectionExpression;
import de.uniol.inf.is.odysseus.iql.basic.basicIQL.IQLMetadata;
import de.uniol.inf.is.odysseus.iql.basic.basicIQL.IQLMetadataList;
import de.uniol.inf.is.odysseus.iql.basic.basicIQL.IQLMetadataValueList;
import de.uniol.inf.is.odysseus.iql.basic.basicIQL.IQLMetadataValueMap;
import de.uniol.inf.is.odysseus.iql.basic.basicIQL.IQLMetadataValueMapElement;
import de.uniol.inf.is.odysseus.iql.basic.basicIQL.IQLMetadataValueSingleBoolean;
import de.uniol.inf.is.odysseus.iql.basic.basicIQL.IQLMetadataValueSingleDouble;
import de.uniol.inf.is.odysseus.iql.basic.basicIQL.IQLMetadataValueSingleInt;
import de.uniol.inf.is.odysseus.iql.basic.basicIQL.IQLMetadataValueSingleNull;
import de.uniol.inf.is.odysseus.iql.basic.basicIQL.IQLMetadataValueSingleString;
import de.uniol.inf.is.odysseus.iql.basic.basicIQL.IQLMetadataValueSingleTypeRef;
import de.uniol.inf.is.odysseus.iql.basic.basicIQL.IQLMethod;
import de.uniol.inf.is.odysseus.iql.basic.basicIQL.IQLMethodDeclaration;
import de.uniol.inf.is.odysseus.iql.basic.basicIQL.IQLModel;
import de.uniol.inf.is.odysseus.iql.basic.basicIQL.IQLModelElement;
import de.uniol.inf.is.odysseus.iql.basic.basicIQL.IQLMultiplicativeExpression;
import de.uniol.inf.is.odysseus.iql.basic.basicIQL.IQLNamespace;
import de.uniol.inf.is.odysseus.iql.basic.basicIQL.IQLNewExpression;
import de.uniol.inf.is.odysseus.iql.basic.basicIQL.IQLParenthesisExpression;
import de.uniol.inf.is.odysseus.iql.basic.basicIQL.IQLPlusMinusExpression;
import de.uniol.inf.is.odysseus.iql.basic.basicIQL.IQLPostfixExpression;
import de.uniol.inf.is.odysseus.iql.basic.basicIQL.IQLPrefixExpression;
import de.uniol.inf.is.odysseus.iql.basic.basicIQL.IQLRelationalExpression;
import de.uniol.inf.is.odysseus.iql.basic.basicIQL.IQLReturnStatement;
import de.uniol.inf.is.odysseus.iql.basic.basicIQL.IQLSimpleTypeRef;
import de.uniol.inf.is.odysseus.iql.basic.basicIQL.IQLStatementBlock;
import de.uniol.inf.is.odysseus.iql.basic.basicIQL.IQLSuperExpression;
import de.uniol.inf.is.odysseus.iql.basic.basicIQL.IQLSwitchStatement;
import de.uniol.inf.is.odysseus.iql.basic.basicIQL.IQLThisExpression;
import de.uniol.inf.is.odysseus.iql.basic.basicIQL.IQLTypeCastExpression;
import de.uniol.inf.is.odysseus.iql.basic.basicIQL.IQLVariableDeclaration;
import de.uniol.inf.is.odysseus.iql.basic.basicIQL.IQLVariableInitialization;
import de.uniol.inf.is.odysseus.iql.basic.basicIQL.IQLVariableStatement;
import de.uniol.inf.is.odysseus.iql.basic.basicIQL.IQLWhileStatement;
import de.uniol.inf.is.odysseus.iql.basic.services.BasicIQLGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.common.types.JvmFormalParameter;
import org.eclipse.xtext.common.types.TypesPackage;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public abstract class AbstractBasicIQLSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private BasicIQLGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == BasicIQLPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case BasicIQLPackage.IQL_ADDITIVE_EXPRESSION:
				sequence_IQLAdditiveExpression(context, (IQLAdditiveExpression) semanticObject); 
				return; 
			case BasicIQLPackage.IQL_ARGUMENTS_LIST:
				sequence_IQLArgumentsList(context, (IQLArgumentsList) semanticObject); 
				return; 
			case BasicIQLPackage.IQL_ARGUMENTS_MAP:
				sequence_IQLArgumentsMap(context, (IQLArgumentsMap) semanticObject); 
				return; 
			case BasicIQLPackage.IQL_ARGUMENTS_MAP_KEY_VALUE:
				sequence_IQLArgumentsMapKeyValue(context, (IQLArgumentsMapKeyValue) semanticObject); 
				return; 
			case BasicIQLPackage.IQL_ARRAY_EXPRESSION:
				sequence_IQLMemberCallExpression(context, (IQLArrayExpression) semanticObject); 
				return; 
			case BasicIQLPackage.IQL_ARRAY_TYPE:
				sequence_IQLArrayType(context, (IQLArrayType) semanticObject); 
				return; 
			case BasicIQLPackage.IQL_ARRAY_TYPE_REF:
				sequence_IQLArrayTypeRef(context, (IQLArrayTypeRef) semanticObject); 
				return; 
			case BasicIQLPackage.IQL_ASSIGNMENT_EXPRESSION:
				sequence_IQLAssignmentExpression(context, (IQLAssignmentExpression) semanticObject); 
				return; 
			case BasicIQLPackage.IQL_ATTRIBUTE:
				sequence_IQLAttribute(context, (IQLAttribute) semanticObject); 
				return; 
			case BasicIQLPackage.IQL_BOOLEAN_NOT_EXPRESSION:
				sequence_IQLUnaryExpression(context, (IQLBooleanNotExpression) semanticObject); 
				return; 
			case BasicIQLPackage.IQL_BREAK_STATEMENT:
				sequence_IQLBreakStatement(context, (IQLBreakStatement) semanticObject); 
				return; 
			case BasicIQLPackage.IQL_CASE_PART:
				sequence_IQLCasePart(context, (IQLCasePart) semanticObject); 
				return; 
			case BasicIQLPackage.IQL_CLASS:
				sequence_IQLClass(context, (IQLClass) semanticObject); 
				return; 
			case BasicIQLPackage.IQL_CONSTRUCTOR_CALL_STATEMENT:
				sequence_IQLConstructorCallStatement(context, (IQLConstructorCallStatement) semanticObject); 
				return; 
			case BasicIQLPackage.IQL_CONTINUE_STATEMENT:
				sequence_IQLContinueStatement(context, (IQLContinueStatement) semanticObject); 
				return; 
			case BasicIQLPackage.IQL_DO_WHILE_STATEMENT:
				sequence_IQLDoWhileStatement(context, (IQLDoWhileStatement) semanticObject); 
				return; 
			case BasicIQLPackage.IQL_EQUALITY_EXPRESSION:
				sequence_IQLEqualityExpression(context, (IQLEqualityExpression) semanticObject); 
				return; 
			case BasicIQLPackage.IQL_EXPRESSION_STATEMENT:
				sequence_IQLExpressionStatement(context, (IQLExpressionStatement) semanticObject); 
				return; 
			case BasicIQLPackage.IQL_FOR_EACH_STATEMENT:
				sequence_IQLForEachStatement(context, (IQLForEachStatement) semanticObject); 
				return; 
			case BasicIQLPackage.IQL_FOR_STATEMENT:
				sequence_IQLForStatement(context, (IQLForStatement) semanticObject); 
				return; 
			case BasicIQLPackage.IQL_IF_STATEMENT:
				sequence_IQLIfStatement(context, (IQLIfStatement) semanticObject); 
				return; 
			case BasicIQLPackage.IQL_INSTANCE_OF_EXPRESSION:
				sequence_IQLRelationalExpression(context, (IQLInstanceOfExpression) semanticObject); 
				return; 
			case BasicIQLPackage.IQL_INTERFACE:
				sequence_IQLInterface(context, (IQLInterface) semanticObject); 
				return; 
			case BasicIQLPackage.IQL_JAVA:
				sequence_IQLJava(context, (IQLJava) semanticObject); 
				return; 
			case BasicIQLPackage.IQL_JAVA_MEMBER:
				sequence_IQLJavaMember(context, (IQLJavaMember) semanticObject); 
				return; 
			case BasicIQLPackage.IQL_JAVA_METADATA:
				sequence_IQLJavaMetadata(context, (IQLJavaMetadata) semanticObject); 
				return; 
			case BasicIQLPackage.IQL_JAVA_STATEMENT:
				sequence_IQLJavaStatement(context, (IQLJavaStatement) semanticObject); 
				return; 
			case BasicIQLPackage.IQL_JVM_ELEMENT_CALL_EXPRESSION:
				sequence_IQLOtherExpressions(context, (IQLJvmElementCallExpression) semanticObject); 
				return; 
			case BasicIQLPackage.IQL_LITERAL_EXPRESSION_BOOLEAN:
				sequence_IQLLiteralExpression(context, (IQLLiteralExpressionBoolean) semanticObject); 
				return; 
			case BasicIQLPackage.IQL_LITERAL_EXPRESSION_DOUBLE:
				sequence_IQLLiteralExpression(context, (IQLLiteralExpressionDouble) semanticObject); 
				return; 
			case BasicIQLPackage.IQL_LITERAL_EXPRESSION_INT:
				sequence_IQLLiteralExpression(context, (IQLLiteralExpressionInt) semanticObject); 
				return; 
			case BasicIQLPackage.IQL_LITERAL_EXPRESSION_LIST:
				sequence_IQLLiteralExpressionList(context, (IQLLiteralExpressionList) semanticObject); 
				return; 
			case BasicIQLPackage.IQL_LITERAL_EXPRESSION_MAP:
				sequence_IQLLiteralExpressionMap(context, (IQLLiteralExpressionMap) semanticObject); 
				return; 
			case BasicIQLPackage.IQL_LITERAL_EXPRESSION_MAP_KEY_VALUE:
				sequence_IQLLiteralExpressionMapKeyValue(context, (IQLLiteralExpressionMapKeyValue) semanticObject); 
				return; 
			case BasicIQLPackage.IQL_LITERAL_EXPRESSION_NULL:
				sequence_IQLLiteralExpression(context, (IQLLiteralExpressionNull) semanticObject); 
				return; 
			case BasicIQLPackage.IQL_LITERAL_EXPRESSION_RANGE:
				sequence_IQLLiteralExpression(context, (IQLLiteralExpressionRange) semanticObject); 
				return; 
			case BasicIQLPackage.IQL_LITERAL_EXPRESSION_STRING:
				sequence_IQLLiteralExpression(context, (IQLLiteralExpressionString) semanticObject); 
				return; 
			case BasicIQLPackage.IQL_LITERAL_EXPRESSION_TYPE:
				sequence_IQLLiteralExpression(context, (IQLLiteralExpressionType) semanticObject); 
				return; 
			case BasicIQLPackage.IQL_LOGICAL_AND_EXPRESSION:
				sequence_IQLLogicalAndExpression(context, (IQLLogicalAndExpression) semanticObject); 
				return; 
			case BasicIQLPackage.IQL_LOGICAL_OR_EXPRESSION:
				sequence_IQLLogicalOrExpression(context, (IQLLogicalOrExpression) semanticObject); 
				return; 
			case BasicIQLPackage.IQL_MEMBER_SELECTION:
				sequence_IQLMemberSelection(context, (IQLMemberSelection) semanticObject); 
				return; 
			case BasicIQLPackage.IQL_MEMBER_SELECTION_EXPRESSION:
				sequence_IQLMemberCallExpression(context, (IQLMemberSelectionExpression) semanticObject); 
				return; 
			case BasicIQLPackage.IQL_METADATA:
				sequence_IQLMetadata(context, (IQLMetadata) semanticObject); 
				return; 
			case BasicIQLPackage.IQL_METADATA_LIST:
				sequence_IQLMetadataList(context, (IQLMetadataList) semanticObject); 
				return; 
			case BasicIQLPackage.IQL_METADATA_VALUE_LIST:
				sequence_IQLMetadataValueList(context, (IQLMetadataValueList) semanticObject); 
				return; 
			case BasicIQLPackage.IQL_METADATA_VALUE_MAP:
				sequence_IQLMetadataValueMap(context, (IQLMetadataValueMap) semanticObject); 
				return; 
			case BasicIQLPackage.IQL_METADATA_VALUE_MAP_ELEMENT:
				sequence_IQLMetadataValueMapElement(context, (IQLMetadataValueMapElement) semanticObject); 
				return; 
			case BasicIQLPackage.IQL_METADATA_VALUE_SINGLE_BOOLEAN:
				sequence_IQLMetadataValueSingle(context, (IQLMetadataValueSingleBoolean) semanticObject); 
				return; 
			case BasicIQLPackage.IQL_METADATA_VALUE_SINGLE_DOUBLE:
				sequence_IQLMetadataValueSingle(context, (IQLMetadataValueSingleDouble) semanticObject); 
				return; 
			case BasicIQLPackage.IQL_METADATA_VALUE_SINGLE_INT:
				sequence_IQLMetadataValueSingle(context, (IQLMetadataValueSingleInt) semanticObject); 
				return; 
			case BasicIQLPackage.IQL_METADATA_VALUE_SINGLE_NULL:
				sequence_IQLMetadataValueSingle(context, (IQLMetadataValueSingleNull) semanticObject); 
				return; 
			case BasicIQLPackage.IQL_METADATA_VALUE_SINGLE_STRING:
				sequence_IQLMetadataValueSingle(context, (IQLMetadataValueSingleString) semanticObject); 
				return; 
			case BasicIQLPackage.IQL_METADATA_VALUE_SINGLE_TYPE_REF:
				sequence_IQLMetadataValueSingle(context, (IQLMetadataValueSingleTypeRef) semanticObject); 
				return; 
			case BasicIQLPackage.IQL_METHOD:
				sequence_IQLMethod(context, (IQLMethod) semanticObject); 
				return; 
			case BasicIQLPackage.IQL_METHOD_DECLARATION:
				sequence_IQLMethodDeclaration(context, (IQLMethodDeclaration) semanticObject); 
				return; 
			case BasicIQLPackage.IQL_MODEL:
				sequence_IQLModel(context, (IQLModel) semanticObject); 
				return; 
			case BasicIQLPackage.IQL_MODEL_ELEMENT:
				sequence_IQLModelElement(context, (IQLModelElement) semanticObject); 
				return; 
			case BasicIQLPackage.IQL_MULTIPLICATIVE_EXPRESSION:
				sequence_IQLMultiplicativeExpression(context, (IQLMultiplicativeExpression) semanticObject); 
				return; 
			case BasicIQLPackage.IQL_NAMESPACE:
				sequence_IQLNamespace(context, (IQLNamespace) semanticObject); 
				return; 
			case BasicIQLPackage.IQL_NEW_EXPRESSION:
				sequence_IQLOtherExpressions(context, (IQLNewExpression) semanticObject); 
				return; 
			case BasicIQLPackage.IQL_PARENTHESIS_EXPRESSION:
				sequence_IQLOtherExpressions(context, (IQLParenthesisExpression) semanticObject); 
				return; 
			case BasicIQLPackage.IQL_PLUS_MINUS_EXPRESSION:
				sequence_IQLUnaryExpression(context, (IQLPlusMinusExpression) semanticObject); 
				return; 
			case BasicIQLPackage.IQL_POSTFIX_EXPRESSION:
				sequence_IQLUnaryExpression(context, (IQLPostfixExpression) semanticObject); 
				return; 
			case BasicIQLPackage.IQL_PREFIX_EXPRESSION:
				sequence_IQLUnaryExpression(context, (IQLPrefixExpression) semanticObject); 
				return; 
			case BasicIQLPackage.IQL_RELATIONAL_EXPRESSION:
				sequence_IQLRelationalExpression(context, (IQLRelationalExpression) semanticObject); 
				return; 
			case BasicIQLPackage.IQL_RETURN_STATEMENT:
				sequence_IQLReturnStatement(context, (IQLReturnStatement) semanticObject); 
				return; 
			case BasicIQLPackage.IQL_SIMPLE_TYPE_REF:
				sequence_IQLSimpleTypeRef(context, (IQLSimpleTypeRef) semanticObject); 
				return; 
			case BasicIQLPackage.IQL_STATEMENT_BLOCK:
				sequence_IQLStatementBlock(context, (IQLStatementBlock) semanticObject); 
				return; 
			case BasicIQLPackage.IQL_SUPER_EXPRESSION:
				sequence_IQLOtherExpressions(context, (IQLSuperExpression) semanticObject); 
				return; 
			case BasicIQLPackage.IQL_SWITCH_STATEMENT:
				sequence_IQLSwitchStatement(context, (IQLSwitchStatement) semanticObject); 
				return; 
			case BasicIQLPackage.IQL_THIS_EXPRESSION:
				sequence_IQLOtherExpressions(context, (IQLThisExpression) semanticObject); 
				return; 
			case BasicIQLPackage.IQL_TYPE_CAST_EXPRESSION:
				sequence_IQLUnaryExpression(context, (IQLTypeCastExpression) semanticObject); 
				return; 
			case BasicIQLPackage.IQL_VARIABLE_DECLARATION:
				sequence_IQLVariableDeclaration(context, (IQLVariableDeclaration) semanticObject); 
				return; 
			case BasicIQLPackage.IQL_VARIABLE_INITIALIZATION:
				sequence_IQLVariableInitialization(context, (IQLVariableInitialization) semanticObject); 
				return; 
			case BasicIQLPackage.IQL_VARIABLE_STATEMENT:
				sequence_IQLVariableStatement(context, (IQLVariableStatement) semanticObject); 
				return; 
			case BasicIQLPackage.IQL_WHILE_STATEMENT:
				sequence_IQLWhileStatement(context, (IQLWhileStatement) semanticObject); 
				return; 
			}
		else if (epackage == TypesPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case TypesPackage.JVM_FORMAL_PARAMETER:
				sequence_JvmFormalParameter(context, (JvmFormalParameter) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     IQLExpression returns IQLAdditiveExpression
	 *     IQLAssignmentExpression returns IQLAdditiveExpression
	 *     IQLAssignmentExpression.IQLAssignmentExpression_1_0_0_0 returns IQLAdditiveExpression
	 *     IQLLogicalOrExpression returns IQLAdditiveExpression
	 *     IQLLogicalOrExpression.IQLLogicalOrExpression_1_0_0_0 returns IQLAdditiveExpression
	 *     IQLLogicalAndExpression returns IQLAdditiveExpression
	 *     IQLLogicalAndExpression.IQLLogicalAndExpression_1_0_0_0 returns IQLAdditiveExpression
	 *     IQLEqualityExpression returns IQLAdditiveExpression
	 *     IQLEqualityExpression.IQLEqualityExpression_1_0_0_0 returns IQLAdditiveExpression
	 *     IQLRelationalExpression returns IQLAdditiveExpression
	 *     IQLRelationalExpression.IQLInstanceOfExpression_1_0_0_0_0 returns IQLAdditiveExpression
	 *     IQLRelationalExpression.IQLRelationalExpression_1_1_0_0_0 returns IQLAdditiveExpression
	 *     IQLAdditiveExpression returns IQLAdditiveExpression
	 *     IQLAdditiveExpression.IQLAdditiveExpression_1_0_0_0 returns IQLAdditiveExpression
	 *
	 * Constraint:
	 *     (leftOperand=IQLAdditiveExpression_IQLAdditiveExpression_1_0_0_0 op=OpAdd rightOperand=IQLMultiplicativeExpression)
	 */
	protected void sequence_IQLAdditiveExpression(ISerializationContext context, IQLAdditiveExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BasicIQLPackage.Literals.IQL_ADDITIVE_EXPRESSION__LEFT_OPERAND) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BasicIQLPackage.Literals.IQL_ADDITIVE_EXPRESSION__LEFT_OPERAND));
			if (transientValues.isValueTransient(semanticObject, BasicIQLPackage.Literals.IQL_ADDITIVE_EXPRESSION__OP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BasicIQLPackage.Literals.IQL_ADDITIVE_EXPRESSION__OP));
			if (transientValues.isValueTransient(semanticObject, BasicIQLPackage.Literals.IQL_ADDITIVE_EXPRESSION__RIGHT_OPERAND) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BasicIQLPackage.Literals.IQL_ADDITIVE_EXPRESSION__RIGHT_OPERAND));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getIQLAdditiveExpressionAccess().getIQLAdditiveExpressionLeftOperandAction_1_0_0_0(), semanticObject.getLeftOperand());
		feeder.accept(grammarAccess.getIQLAdditiveExpressionAccess().getOpOpAddParserRuleCall_1_0_0_1_0(), semanticObject.getOp());
		feeder.accept(grammarAccess.getIQLAdditiveExpressionAccess().getRightOperandIQLMultiplicativeExpressionParserRuleCall_1_1_0(), semanticObject.getRightOperand());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     IQLArgumentsList returns IQLArgumentsList
	 *
	 * Constraint:
	 *     (elements+=IQLExpression elements+=IQLExpression*)?
	 */
	protected void sequence_IQLArgumentsList(ISerializationContext context, IQLArgumentsList semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     IQLArgumentsMapKeyValue returns IQLArgumentsMapKeyValue
	 *
	 * Constraint:
	 *     (key=[JvmIdentifiableElement|QualifiedName] value=IQLExpression)
	 */
	protected void sequence_IQLArgumentsMapKeyValue(ISerializationContext context, IQLArgumentsMapKeyValue semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BasicIQLPackage.Literals.IQL_ARGUMENTS_MAP_KEY_VALUE__KEY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BasicIQLPackage.Literals.IQL_ARGUMENTS_MAP_KEY_VALUE__KEY));
			if (transientValues.isValueTransient(semanticObject, BasicIQLPackage.Literals.IQL_ARGUMENTS_MAP_KEY_VALUE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BasicIQLPackage.Literals.IQL_ARGUMENTS_MAP_KEY_VALUE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getIQLArgumentsMapKeyValueAccess().getKeyJvmIdentifiableElementQualifiedNameParserRuleCall_0_0_1(), semanticObject.eGet(BasicIQLPackage.Literals.IQL_ARGUMENTS_MAP_KEY_VALUE__KEY, false));
		feeder.accept(grammarAccess.getIQLArgumentsMapKeyValueAccess().getValueIQLExpressionParserRuleCall_2_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     IQLArgumentsMap returns IQLArgumentsMap
	 *
	 * Constraint:
	 *     (elements+=IQLArgumentsMapKeyValue elements+=IQLArgumentsMapKeyValue*)?
	 */
	protected void sequence_IQLArgumentsMap(ISerializationContext context, IQLArgumentsMap semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     JvmTypeReference returns IQLArrayTypeRef
	 *     IQLArrayTypeRef returns IQLArrayTypeRef
	 *
	 * Constraint:
	 *     type=IQLArrayType
	 */
	protected void sequence_IQLArrayTypeRef(ISerializationContext context, IQLArrayTypeRef semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BasicIQLPackage.Literals.IQL_ARRAY_TYPE_REF__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BasicIQLPackage.Literals.IQL_ARRAY_TYPE_REF__TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getIQLArrayTypeRefAccess().getTypeIQLArrayTypeParserRuleCall_1_0(), semanticObject.getType());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     IQLArrayType returns IQLArrayType
	 *
	 * Constraint:
	 *     (componentType=[JvmType|QualifiedName] dimensions+=ArrayBrackets+)
	 */
	protected void sequence_IQLArrayType(ISerializationContext context, IQLArrayType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     IQLExpression returns IQLAssignmentExpression
	 *     IQLAssignmentExpression returns IQLAssignmentExpression
	 *
	 * Constraint:
	 *     (leftOperand=IQLAssignmentExpression_IQLAssignmentExpression_1_0_0_0 op=OpAssign rightOperand=IQLAssignmentExpression)
	 */
	protected void sequence_IQLAssignmentExpression(ISerializationContext context, IQLAssignmentExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BasicIQLPackage.Literals.IQL_ASSIGNMENT_EXPRESSION__LEFT_OPERAND) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BasicIQLPackage.Literals.IQL_ASSIGNMENT_EXPRESSION__LEFT_OPERAND));
			if (transientValues.isValueTransient(semanticObject, BasicIQLPackage.Literals.IQL_ASSIGNMENT_EXPRESSION__OP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BasicIQLPackage.Literals.IQL_ASSIGNMENT_EXPRESSION__OP));
			if (transientValues.isValueTransient(semanticObject, BasicIQLPackage.Literals.IQL_ASSIGNMENT_EXPRESSION__RIGHT_OPERAND) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BasicIQLPackage.Literals.IQL_ASSIGNMENT_EXPRESSION__RIGHT_OPERAND));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getIQLAssignmentExpressionAccess().getIQLAssignmentExpressionLeftOperandAction_1_0_0_0(), semanticObject.getLeftOperand());
		feeder.accept(grammarAccess.getIQLAssignmentExpressionAccess().getOpOpAssignParserRuleCall_1_0_0_1_0(), semanticObject.getOp());
		feeder.accept(grammarAccess.getIQLAssignmentExpressionAccess().getRightOperandIQLAssignmentExpressionParserRuleCall_1_1_0(), semanticObject.getRightOperand());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     IQLAttribute returns IQLAttribute
	 *
	 * Constraint:
	 *     (type=JvmTypeReference simpleName=ID init=IQLVariableInitialization?)
	 */
	protected void sequence_IQLAttribute(ISerializationContext context, IQLAttribute semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     IQLStatement returns IQLBreakStatement
	 *     IQLBreakStatement returns IQLBreakStatement
	 *
	 * Constraint:
	 *     {IQLBreakStatement}
	 */
	protected void sequence_IQLBreakStatement(ISerializationContext context, IQLBreakStatement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     IQLCasePart returns IQLCasePart
	 *
	 * Constraint:
	 *     (expr=IQLLiteralExpression statements+=IQLStatement*)
	 */
	protected void sequence_IQLCasePart(ISerializationContext context, IQLCasePart semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     IQLClass returns IQLClass
	 *
	 * Constraint:
	 *     (
	 *         simpleName=ID 
	 *         extendedClass=JvmTypeReference? 
	 *         (extendedInterfaces+=JvmTypeReference extendedInterfaces+=JvmTypeReference*)? 
	 *         (members+=IQLAttribute | members+=IQLMethod | members+=IQLJavaMember)*
	 *     )
	 */
	protected void sequence_IQLClass(ISerializationContext context, IQLClass semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     IQLStatement returns IQLConstructorCallStatement
	 *     IQLConstructorCallStatement returns IQLConstructorCallStatement
	 *
	 * Constraint:
	 *     ((this?='this' | super?='super') args=IQLArgumentsList)
	 */
	protected void sequence_IQLConstructorCallStatement(ISerializationContext context, IQLConstructorCallStatement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     IQLStatement returns IQLContinueStatement
	 *     IQLContinueStatement returns IQLContinueStatement
	 *
	 * Constraint:
	 *     {IQLContinueStatement}
	 */
	protected void sequence_IQLContinueStatement(ISerializationContext context, IQLContinueStatement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     IQLStatement returns IQLDoWhileStatement
	 *     IQLDoWhileStatement returns IQLDoWhileStatement
	 *
	 * Constraint:
	 *     (body=IQLStatement predicate=IQLExpression)
	 */
	protected void sequence_IQLDoWhileStatement(ISerializationContext context, IQLDoWhileStatement semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BasicIQLPackage.Literals.IQL_DO_WHILE_STATEMENT__BODY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BasicIQLPackage.Literals.IQL_DO_WHILE_STATEMENT__BODY));
			if (transientValues.isValueTransient(semanticObject, BasicIQLPackage.Literals.IQL_DO_WHILE_STATEMENT__PREDICATE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BasicIQLPackage.Literals.IQL_DO_WHILE_STATEMENT__PREDICATE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getIQLDoWhileStatementAccess().getBodyIQLStatementParserRuleCall_2_0(), semanticObject.getBody());
		feeder.accept(grammarAccess.getIQLDoWhileStatementAccess().getPredicateIQLExpressionParserRuleCall_5_0(), semanticObject.getPredicate());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     IQLExpression returns IQLEqualityExpression
	 *     IQLAssignmentExpression returns IQLEqualityExpression
	 *     IQLAssignmentExpression.IQLAssignmentExpression_1_0_0_0 returns IQLEqualityExpression
	 *     IQLLogicalOrExpression returns IQLEqualityExpression
	 *     IQLLogicalOrExpression.IQLLogicalOrExpression_1_0_0_0 returns IQLEqualityExpression
	 *     IQLLogicalAndExpression returns IQLEqualityExpression
	 *     IQLLogicalAndExpression.IQLLogicalAndExpression_1_0_0_0 returns IQLEqualityExpression
	 *     IQLEqualityExpression returns IQLEqualityExpression
	 *     IQLEqualityExpression.IQLEqualityExpression_1_0_0_0 returns IQLEqualityExpression
	 *
	 * Constraint:
	 *     (leftOperand=IQLEqualityExpression_IQLEqualityExpression_1_0_0_0 op=OpEquality rightOperand=IQLRelationalExpression)
	 */
	protected void sequence_IQLEqualityExpression(ISerializationContext context, IQLEqualityExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BasicIQLPackage.Literals.IQL_EQUALITY_EXPRESSION__LEFT_OPERAND) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BasicIQLPackage.Literals.IQL_EQUALITY_EXPRESSION__LEFT_OPERAND));
			if (transientValues.isValueTransient(semanticObject, BasicIQLPackage.Literals.IQL_EQUALITY_EXPRESSION__OP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BasicIQLPackage.Literals.IQL_EQUALITY_EXPRESSION__OP));
			if (transientValues.isValueTransient(semanticObject, BasicIQLPackage.Literals.IQL_EQUALITY_EXPRESSION__RIGHT_OPERAND) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BasicIQLPackage.Literals.IQL_EQUALITY_EXPRESSION__RIGHT_OPERAND));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getIQLEqualityExpressionAccess().getIQLEqualityExpressionLeftOperandAction_1_0_0_0(), semanticObject.getLeftOperand());
		feeder.accept(grammarAccess.getIQLEqualityExpressionAccess().getOpOpEqualityParserRuleCall_1_0_0_1_0(), semanticObject.getOp());
		feeder.accept(grammarAccess.getIQLEqualityExpressionAccess().getRightOperandIQLRelationalExpressionParserRuleCall_1_1_0(), semanticObject.getRightOperand());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     IQLStatement returns IQLExpressionStatement
	 *     IQLExpressionStatement returns IQLExpressionStatement
	 *
	 * Constraint:
	 *     expression=IQLExpression
	 */
	protected void sequence_IQLExpressionStatement(ISerializationContext context, IQLExpressionStatement semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BasicIQLPackage.Literals.IQL_EXPRESSION_STATEMENT__EXPRESSION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BasicIQLPackage.Literals.IQL_EXPRESSION_STATEMENT__EXPRESSION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getIQLExpressionStatementAccess().getExpressionIQLExpressionParserRuleCall_1_0(), semanticObject.getExpression());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     IQLStatement returns IQLForEachStatement
	 *     IQLForEachStatement returns IQLForEachStatement
	 *
	 * Constraint:
	 *     (var=IQLVariableDeclaration forExpression=IQLExpression body=IQLStatement)
	 */
	protected void sequence_IQLForEachStatement(ISerializationContext context, IQLForEachStatement semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BasicIQLPackage.Literals.IQL_FOR_EACH_STATEMENT__VAR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BasicIQLPackage.Literals.IQL_FOR_EACH_STATEMENT__VAR));
			if (transientValues.isValueTransient(semanticObject, BasicIQLPackage.Literals.IQL_FOR_EACH_STATEMENT__FOR_EXPRESSION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BasicIQLPackage.Literals.IQL_FOR_EACH_STATEMENT__FOR_EXPRESSION));
			if (transientValues.isValueTransient(semanticObject, BasicIQLPackage.Literals.IQL_FOR_EACH_STATEMENT__BODY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BasicIQLPackage.Literals.IQL_FOR_EACH_STATEMENT__BODY));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getIQLForEachStatementAccess().getVarIQLVariableDeclarationParserRuleCall_3_0(), semanticObject.getVar());
		feeder.accept(grammarAccess.getIQLForEachStatementAccess().getForExpressionIQLExpressionParserRuleCall_5_0(), semanticObject.getForExpression());
		feeder.accept(grammarAccess.getIQLForEachStatementAccess().getBodyIQLStatementParserRuleCall_7_0(), semanticObject.getBody());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     IQLStatement returns IQLForStatement
	 *     IQLForStatement returns IQLForStatement
	 *
	 * Constraint:
	 *     (var=IQLVariableDeclaration value=IQLExpression predicate=IQLExpression updateExpr=IQLExpression body=IQLStatement)
	 */
	protected void sequence_IQLForStatement(ISerializationContext context, IQLForStatement semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BasicIQLPackage.Literals.IQL_FOR_STATEMENT__VAR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BasicIQLPackage.Literals.IQL_FOR_STATEMENT__VAR));
			if (transientValues.isValueTransient(semanticObject, BasicIQLPackage.Literals.IQL_FOR_STATEMENT__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BasicIQLPackage.Literals.IQL_FOR_STATEMENT__VALUE));
			if (transientValues.isValueTransient(semanticObject, BasicIQLPackage.Literals.IQL_FOR_STATEMENT__PREDICATE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BasicIQLPackage.Literals.IQL_FOR_STATEMENT__PREDICATE));
			if (transientValues.isValueTransient(semanticObject, BasicIQLPackage.Literals.IQL_FOR_STATEMENT__UPDATE_EXPR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BasicIQLPackage.Literals.IQL_FOR_STATEMENT__UPDATE_EXPR));
			if (transientValues.isValueTransient(semanticObject, BasicIQLPackage.Literals.IQL_FOR_STATEMENT__BODY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BasicIQLPackage.Literals.IQL_FOR_STATEMENT__BODY));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getIQLForStatementAccess().getVarIQLVariableDeclarationParserRuleCall_3_0(), semanticObject.getVar());
		feeder.accept(grammarAccess.getIQLForStatementAccess().getValueIQLExpressionParserRuleCall_5_0(), semanticObject.getValue());
		feeder.accept(grammarAccess.getIQLForStatementAccess().getPredicateIQLExpressionParserRuleCall_7_0(), semanticObject.getPredicate());
		feeder.accept(grammarAccess.getIQLForStatementAccess().getUpdateExprIQLExpressionParserRuleCall_9_0(), semanticObject.getUpdateExpr());
		feeder.accept(grammarAccess.getIQLForStatementAccess().getBodyIQLStatementParserRuleCall_11_0(), semanticObject.getBody());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     IQLStatement returns IQLIfStatement
	 *     IQLIfStatement returns IQLIfStatement
	 *
	 * Constraint:
	 *     (predicate=IQLExpression thenBody=IQLStatement elseBody=IQLStatement?)
	 */
	protected void sequence_IQLIfStatement(ISerializationContext context, IQLIfStatement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     IQLInterface returns IQLInterface
	 *
	 * Constraint:
	 *     (
	 *         simpleName=ID 
	 *         (extendedInterfaces+=JvmTypeReference extendedInterfaces+=JvmTypeReference?)? 
	 *         (members+=IQLMethodDeclaration | members+=IQLJavaMember)*
	 *     )
	 */
	protected void sequence_IQLInterface(ISerializationContext context, IQLInterface semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     IQLJavaMember returns IQLJavaMember
	 *
	 * Constraint:
	 *     java=IQLJava
	 */
	protected void sequence_IQLJavaMember(ISerializationContext context, IQLJavaMember semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BasicIQLPackage.Literals.IQL_JAVA_MEMBER__JAVA) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BasicIQLPackage.Literals.IQL_JAVA_MEMBER__JAVA));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getIQLJavaMemberAccess().getJavaIQLJavaParserRuleCall_1_0(), semanticObject.getJava());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     IQLJavaMetadata returns IQLJavaMetadata
	 *
	 * Constraint:
	 *     java=IQLJava
	 */
	protected void sequence_IQLJavaMetadata(ISerializationContext context, IQLJavaMetadata semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BasicIQLPackage.Literals.IQL_JAVA_METADATA__JAVA) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BasicIQLPackage.Literals.IQL_JAVA_METADATA__JAVA));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getIQLJavaMetadataAccess().getJavaIQLJavaParserRuleCall_0(), semanticObject.getJava());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     IQLStatement returns IQLJavaStatement
	 *     IQLJavaStatement returns IQLJavaStatement
	 *
	 * Constraint:
	 *     java=IQLJava
	 */
	protected void sequence_IQLJavaStatement(ISerializationContext context, IQLJavaStatement semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BasicIQLPackage.Literals.IQL_JAVA_STATEMENT__JAVA) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BasicIQLPackage.Literals.IQL_JAVA_STATEMENT__JAVA));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getIQLJavaStatementAccess().getJavaIQLJavaParserRuleCall_1_0(), semanticObject.getJava());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     IQLJava returns IQLJava
	 *
	 * Constraint:
	 *     text=IQLJavaText
	 */
	protected void sequence_IQLJava(ISerializationContext context, IQLJava semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BasicIQLPackage.Literals.IQL_JAVA__TEXT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BasicIQLPackage.Literals.IQL_JAVA__TEXT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getIQLJavaAccess().getTextIQLJavaTextParserRuleCall_1_0(), semanticObject.getText());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     IQLExpression returns IQLLiteralExpressionList
	 *     IQLAssignmentExpression returns IQLLiteralExpressionList
	 *     IQLAssignmentExpression.IQLAssignmentExpression_1_0_0_0 returns IQLLiteralExpressionList
	 *     IQLLogicalOrExpression returns IQLLiteralExpressionList
	 *     IQLLogicalOrExpression.IQLLogicalOrExpression_1_0_0_0 returns IQLLiteralExpressionList
	 *     IQLLogicalAndExpression returns IQLLiteralExpressionList
	 *     IQLLogicalAndExpression.IQLLogicalAndExpression_1_0_0_0 returns IQLLiteralExpressionList
	 *     IQLEqualityExpression returns IQLLiteralExpressionList
	 *     IQLEqualityExpression.IQLEqualityExpression_1_0_0_0 returns IQLLiteralExpressionList
	 *     IQLRelationalExpression returns IQLLiteralExpressionList
	 *     IQLRelationalExpression.IQLInstanceOfExpression_1_0_0_0_0 returns IQLLiteralExpressionList
	 *     IQLRelationalExpression.IQLRelationalExpression_1_1_0_0_0 returns IQLLiteralExpressionList
	 *     IQLAdditiveExpression returns IQLLiteralExpressionList
	 *     IQLAdditiveExpression.IQLAdditiveExpression_1_0_0_0 returns IQLLiteralExpressionList
	 *     IQLMultiplicativeExpression returns IQLLiteralExpressionList
	 *     IQLMultiplicativeExpression.IQLMultiplicativeExpression_1_0_0_0 returns IQLLiteralExpressionList
	 *     IQLUnaryExpression returns IQLLiteralExpressionList
	 *     IQLUnaryExpression.IQLPostfixExpression_4_1_0_0 returns IQLLiteralExpressionList
	 *     IQLMemberCallExpression returns IQLLiteralExpressionList
	 *     IQLMemberCallExpression.IQLArrayExpression_1_0_0_0 returns IQLLiteralExpressionList
	 *     IQLMemberCallExpression.IQLMemberSelectionExpression_1_1_0_0_0 returns IQLLiteralExpressionList
	 *     IQLOtherExpressions returns IQLLiteralExpressionList
	 *     IQLLiteralExpression returns IQLLiteralExpressionList
	 *     IQLLiteralExpressionList returns IQLLiteralExpressionList
	 *
	 * Constraint:
	 *     (elements+=IQLExpression elements+=IQLExpression*)?
	 */
	protected void sequence_IQLLiteralExpressionList(ISerializationContext context, IQLLiteralExpressionList semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     IQLLiteralExpressionMapKeyValue returns IQLLiteralExpressionMapKeyValue
	 *
	 * Constraint:
	 *     (key=IQLExpression value=IQLExpression)
	 */
	protected void sequence_IQLLiteralExpressionMapKeyValue(ISerializationContext context, IQLLiteralExpressionMapKeyValue semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BasicIQLPackage.Literals.IQL_LITERAL_EXPRESSION_MAP_KEY_VALUE__KEY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BasicIQLPackage.Literals.IQL_LITERAL_EXPRESSION_MAP_KEY_VALUE__KEY));
			if (transientValues.isValueTransient(semanticObject, BasicIQLPackage.Literals.IQL_LITERAL_EXPRESSION_MAP_KEY_VALUE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BasicIQLPackage.Literals.IQL_LITERAL_EXPRESSION_MAP_KEY_VALUE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getIQLLiteralExpressionMapKeyValueAccess().getKeyIQLExpressionParserRuleCall_0_0(), semanticObject.getKey());
		feeder.accept(grammarAccess.getIQLLiteralExpressionMapKeyValueAccess().getValueIQLExpressionParserRuleCall_2_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     IQLExpression returns IQLLiteralExpressionMap
	 *     IQLAssignmentExpression returns IQLLiteralExpressionMap
	 *     IQLAssignmentExpression.IQLAssignmentExpression_1_0_0_0 returns IQLLiteralExpressionMap
	 *     IQLLogicalOrExpression returns IQLLiteralExpressionMap
	 *     IQLLogicalOrExpression.IQLLogicalOrExpression_1_0_0_0 returns IQLLiteralExpressionMap
	 *     IQLLogicalAndExpression returns IQLLiteralExpressionMap
	 *     IQLLogicalAndExpression.IQLLogicalAndExpression_1_0_0_0 returns IQLLiteralExpressionMap
	 *     IQLEqualityExpression returns IQLLiteralExpressionMap
	 *     IQLEqualityExpression.IQLEqualityExpression_1_0_0_0 returns IQLLiteralExpressionMap
	 *     IQLRelationalExpression returns IQLLiteralExpressionMap
	 *     IQLRelationalExpression.IQLInstanceOfExpression_1_0_0_0_0 returns IQLLiteralExpressionMap
	 *     IQLRelationalExpression.IQLRelationalExpression_1_1_0_0_0 returns IQLLiteralExpressionMap
	 *     IQLAdditiveExpression returns IQLLiteralExpressionMap
	 *     IQLAdditiveExpression.IQLAdditiveExpression_1_0_0_0 returns IQLLiteralExpressionMap
	 *     IQLMultiplicativeExpression returns IQLLiteralExpressionMap
	 *     IQLMultiplicativeExpression.IQLMultiplicativeExpression_1_0_0_0 returns IQLLiteralExpressionMap
	 *     IQLUnaryExpression returns IQLLiteralExpressionMap
	 *     IQLUnaryExpression.IQLPostfixExpression_4_1_0_0 returns IQLLiteralExpressionMap
	 *     IQLMemberCallExpression returns IQLLiteralExpressionMap
	 *     IQLMemberCallExpression.IQLArrayExpression_1_0_0_0 returns IQLLiteralExpressionMap
	 *     IQLMemberCallExpression.IQLMemberSelectionExpression_1_1_0_0_0 returns IQLLiteralExpressionMap
	 *     IQLOtherExpressions returns IQLLiteralExpressionMap
	 *     IQLLiteralExpression returns IQLLiteralExpressionMap
	 *     IQLLiteralExpressionMap returns IQLLiteralExpressionMap
	 *
	 * Constraint:
	 *     (elements+=IQLLiteralExpressionMapKeyValue elements+=IQLLiteralExpressionMapKeyValue*)?
	 */
	protected void sequence_IQLLiteralExpressionMap(ISerializationContext context, IQLLiteralExpressionMap semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     IQLExpression returns IQLLiteralExpressionBoolean
	 *     IQLAssignmentExpression returns IQLLiteralExpressionBoolean
	 *     IQLAssignmentExpression.IQLAssignmentExpression_1_0_0_0 returns IQLLiteralExpressionBoolean
	 *     IQLLogicalOrExpression returns IQLLiteralExpressionBoolean
	 *     IQLLogicalOrExpression.IQLLogicalOrExpression_1_0_0_0 returns IQLLiteralExpressionBoolean
	 *     IQLLogicalAndExpression returns IQLLiteralExpressionBoolean
	 *     IQLLogicalAndExpression.IQLLogicalAndExpression_1_0_0_0 returns IQLLiteralExpressionBoolean
	 *     IQLEqualityExpression returns IQLLiteralExpressionBoolean
	 *     IQLEqualityExpression.IQLEqualityExpression_1_0_0_0 returns IQLLiteralExpressionBoolean
	 *     IQLRelationalExpression returns IQLLiteralExpressionBoolean
	 *     IQLRelationalExpression.IQLInstanceOfExpression_1_0_0_0_0 returns IQLLiteralExpressionBoolean
	 *     IQLRelationalExpression.IQLRelationalExpression_1_1_0_0_0 returns IQLLiteralExpressionBoolean
	 *     IQLAdditiveExpression returns IQLLiteralExpressionBoolean
	 *     IQLAdditiveExpression.IQLAdditiveExpression_1_0_0_0 returns IQLLiteralExpressionBoolean
	 *     IQLMultiplicativeExpression returns IQLLiteralExpressionBoolean
	 *     IQLMultiplicativeExpression.IQLMultiplicativeExpression_1_0_0_0 returns IQLLiteralExpressionBoolean
	 *     IQLUnaryExpression returns IQLLiteralExpressionBoolean
	 *     IQLUnaryExpression.IQLPostfixExpression_4_1_0_0 returns IQLLiteralExpressionBoolean
	 *     IQLMemberCallExpression returns IQLLiteralExpressionBoolean
	 *     IQLMemberCallExpression.IQLArrayExpression_1_0_0_0 returns IQLLiteralExpressionBoolean
	 *     IQLMemberCallExpression.IQLMemberSelectionExpression_1_1_0_0_0 returns IQLLiteralExpressionBoolean
	 *     IQLOtherExpressions returns IQLLiteralExpressionBoolean
	 *     IQLLiteralExpression returns IQLLiteralExpressionBoolean
	 *
	 * Constraint:
	 *     value=BOOLEAN
	 */
	protected void sequence_IQLLiteralExpression(ISerializationContext context, IQLLiteralExpressionBoolean semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BasicIQLPackage.Literals.IQL_LITERAL_EXPRESSION_BOOLEAN__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BasicIQLPackage.Literals.IQL_LITERAL_EXPRESSION_BOOLEAN__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getIQLLiteralExpressionAccess().getValueBOOLEANParserRuleCall_3_1_0(), semanticObject.isValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     IQLExpression returns IQLLiteralExpressionDouble
	 *     IQLAssignmentExpression returns IQLLiteralExpressionDouble
	 *     IQLAssignmentExpression.IQLAssignmentExpression_1_0_0_0 returns IQLLiteralExpressionDouble
	 *     IQLLogicalOrExpression returns IQLLiteralExpressionDouble
	 *     IQLLogicalOrExpression.IQLLogicalOrExpression_1_0_0_0 returns IQLLiteralExpressionDouble
	 *     IQLLogicalAndExpression returns IQLLiteralExpressionDouble
	 *     IQLLogicalAndExpression.IQLLogicalAndExpression_1_0_0_0 returns IQLLiteralExpressionDouble
	 *     IQLEqualityExpression returns IQLLiteralExpressionDouble
	 *     IQLEqualityExpression.IQLEqualityExpression_1_0_0_0 returns IQLLiteralExpressionDouble
	 *     IQLRelationalExpression returns IQLLiteralExpressionDouble
	 *     IQLRelationalExpression.IQLInstanceOfExpression_1_0_0_0_0 returns IQLLiteralExpressionDouble
	 *     IQLRelationalExpression.IQLRelationalExpression_1_1_0_0_0 returns IQLLiteralExpressionDouble
	 *     IQLAdditiveExpression returns IQLLiteralExpressionDouble
	 *     IQLAdditiveExpression.IQLAdditiveExpression_1_0_0_0 returns IQLLiteralExpressionDouble
	 *     IQLMultiplicativeExpression returns IQLLiteralExpressionDouble
	 *     IQLMultiplicativeExpression.IQLMultiplicativeExpression_1_0_0_0 returns IQLLiteralExpressionDouble
	 *     IQLUnaryExpression returns IQLLiteralExpressionDouble
	 *     IQLUnaryExpression.IQLPostfixExpression_4_1_0_0 returns IQLLiteralExpressionDouble
	 *     IQLMemberCallExpression returns IQLLiteralExpressionDouble
	 *     IQLMemberCallExpression.IQLArrayExpression_1_0_0_0 returns IQLLiteralExpressionDouble
	 *     IQLMemberCallExpression.IQLMemberSelectionExpression_1_1_0_0_0 returns IQLLiteralExpressionDouble
	 *     IQLOtherExpressions returns IQLLiteralExpressionDouble
	 *     IQLLiteralExpression returns IQLLiteralExpressionDouble
	 *
	 * Constraint:
	 *     value=DOUBLE
	 */
	protected void sequence_IQLLiteralExpression(ISerializationContext context, IQLLiteralExpressionDouble semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BasicIQLPackage.Literals.IQL_LITERAL_EXPRESSION_DOUBLE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BasicIQLPackage.Literals.IQL_LITERAL_EXPRESSION_DOUBLE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getIQLLiteralExpressionAccess().getValueDOUBLETerminalRuleCall_1_1_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     IQLExpression returns IQLLiteralExpressionInt
	 *     IQLAssignmentExpression returns IQLLiteralExpressionInt
	 *     IQLAssignmentExpression.IQLAssignmentExpression_1_0_0_0 returns IQLLiteralExpressionInt
	 *     IQLLogicalOrExpression returns IQLLiteralExpressionInt
	 *     IQLLogicalOrExpression.IQLLogicalOrExpression_1_0_0_0 returns IQLLiteralExpressionInt
	 *     IQLLogicalAndExpression returns IQLLiteralExpressionInt
	 *     IQLLogicalAndExpression.IQLLogicalAndExpression_1_0_0_0 returns IQLLiteralExpressionInt
	 *     IQLEqualityExpression returns IQLLiteralExpressionInt
	 *     IQLEqualityExpression.IQLEqualityExpression_1_0_0_0 returns IQLLiteralExpressionInt
	 *     IQLRelationalExpression returns IQLLiteralExpressionInt
	 *     IQLRelationalExpression.IQLInstanceOfExpression_1_0_0_0_0 returns IQLLiteralExpressionInt
	 *     IQLRelationalExpression.IQLRelationalExpression_1_1_0_0_0 returns IQLLiteralExpressionInt
	 *     IQLAdditiveExpression returns IQLLiteralExpressionInt
	 *     IQLAdditiveExpression.IQLAdditiveExpression_1_0_0_0 returns IQLLiteralExpressionInt
	 *     IQLMultiplicativeExpression returns IQLLiteralExpressionInt
	 *     IQLMultiplicativeExpression.IQLMultiplicativeExpression_1_0_0_0 returns IQLLiteralExpressionInt
	 *     IQLUnaryExpression returns IQLLiteralExpressionInt
	 *     IQLUnaryExpression.IQLPostfixExpression_4_1_0_0 returns IQLLiteralExpressionInt
	 *     IQLMemberCallExpression returns IQLLiteralExpressionInt
	 *     IQLMemberCallExpression.IQLArrayExpression_1_0_0_0 returns IQLLiteralExpressionInt
	 *     IQLMemberCallExpression.IQLMemberSelectionExpression_1_1_0_0_0 returns IQLLiteralExpressionInt
	 *     IQLOtherExpressions returns IQLLiteralExpressionInt
	 *     IQLLiteralExpression returns IQLLiteralExpressionInt
	 *
	 * Constraint:
	 *     value=INT
	 */
	protected void sequence_IQLLiteralExpression(ISerializationContext context, IQLLiteralExpressionInt semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BasicIQLPackage.Literals.IQL_LITERAL_EXPRESSION_INT__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BasicIQLPackage.Literals.IQL_LITERAL_EXPRESSION_INT__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getIQLLiteralExpressionAccess().getValueINTTerminalRuleCall_0_1_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     IQLExpression returns IQLLiteralExpressionNull
	 *     IQLAssignmentExpression returns IQLLiteralExpressionNull
	 *     IQLAssignmentExpression.IQLAssignmentExpression_1_0_0_0 returns IQLLiteralExpressionNull
	 *     IQLLogicalOrExpression returns IQLLiteralExpressionNull
	 *     IQLLogicalOrExpression.IQLLogicalOrExpression_1_0_0_0 returns IQLLiteralExpressionNull
	 *     IQLLogicalAndExpression returns IQLLiteralExpressionNull
	 *     IQLLogicalAndExpression.IQLLogicalAndExpression_1_0_0_0 returns IQLLiteralExpressionNull
	 *     IQLEqualityExpression returns IQLLiteralExpressionNull
	 *     IQLEqualityExpression.IQLEqualityExpression_1_0_0_0 returns IQLLiteralExpressionNull
	 *     IQLRelationalExpression returns IQLLiteralExpressionNull
	 *     IQLRelationalExpression.IQLInstanceOfExpression_1_0_0_0_0 returns IQLLiteralExpressionNull
	 *     IQLRelationalExpression.IQLRelationalExpression_1_1_0_0_0 returns IQLLiteralExpressionNull
	 *     IQLAdditiveExpression returns IQLLiteralExpressionNull
	 *     IQLAdditiveExpression.IQLAdditiveExpression_1_0_0_0 returns IQLLiteralExpressionNull
	 *     IQLMultiplicativeExpression returns IQLLiteralExpressionNull
	 *     IQLMultiplicativeExpression.IQLMultiplicativeExpression_1_0_0_0 returns IQLLiteralExpressionNull
	 *     IQLUnaryExpression returns IQLLiteralExpressionNull
	 *     IQLUnaryExpression.IQLPostfixExpression_4_1_0_0 returns IQLLiteralExpressionNull
	 *     IQLMemberCallExpression returns IQLLiteralExpressionNull
	 *     IQLMemberCallExpression.IQLArrayExpression_1_0_0_0 returns IQLLiteralExpressionNull
	 *     IQLMemberCallExpression.IQLMemberSelectionExpression_1_1_0_0_0 returns IQLLiteralExpressionNull
	 *     IQLOtherExpressions returns IQLLiteralExpressionNull
	 *     IQLLiteralExpression returns IQLLiteralExpressionNull
	 *
	 * Constraint:
	 *     {IQLLiteralExpressionNull}
	 */
	protected void sequence_IQLLiteralExpression(ISerializationContext context, IQLLiteralExpressionNull semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     IQLExpression returns IQLLiteralExpressionRange
	 *     IQLAssignmentExpression returns IQLLiteralExpressionRange
	 *     IQLAssignmentExpression.IQLAssignmentExpression_1_0_0_0 returns IQLLiteralExpressionRange
	 *     IQLLogicalOrExpression returns IQLLiteralExpressionRange
	 *     IQLLogicalOrExpression.IQLLogicalOrExpression_1_0_0_0 returns IQLLiteralExpressionRange
	 *     IQLLogicalAndExpression returns IQLLiteralExpressionRange
	 *     IQLLogicalAndExpression.IQLLogicalAndExpression_1_0_0_0 returns IQLLiteralExpressionRange
	 *     IQLEqualityExpression returns IQLLiteralExpressionRange
	 *     IQLEqualityExpression.IQLEqualityExpression_1_0_0_0 returns IQLLiteralExpressionRange
	 *     IQLRelationalExpression returns IQLLiteralExpressionRange
	 *     IQLRelationalExpression.IQLInstanceOfExpression_1_0_0_0_0 returns IQLLiteralExpressionRange
	 *     IQLRelationalExpression.IQLRelationalExpression_1_1_0_0_0 returns IQLLiteralExpressionRange
	 *     IQLAdditiveExpression returns IQLLiteralExpressionRange
	 *     IQLAdditiveExpression.IQLAdditiveExpression_1_0_0_0 returns IQLLiteralExpressionRange
	 *     IQLMultiplicativeExpression returns IQLLiteralExpressionRange
	 *     IQLMultiplicativeExpression.IQLMultiplicativeExpression_1_0_0_0 returns IQLLiteralExpressionRange
	 *     IQLUnaryExpression returns IQLLiteralExpressionRange
	 *     IQLUnaryExpression.IQLPostfixExpression_4_1_0_0 returns IQLLiteralExpressionRange
	 *     IQLMemberCallExpression returns IQLLiteralExpressionRange
	 *     IQLMemberCallExpression.IQLArrayExpression_1_0_0_0 returns IQLLiteralExpressionRange
	 *     IQLMemberCallExpression.IQLMemberSelectionExpression_1_1_0_0_0 returns IQLLiteralExpressionRange
	 *     IQLOtherExpressions returns IQLLiteralExpressionRange
	 *     IQLLiteralExpression returns IQLLiteralExpressionRange
	 *
	 * Constraint:
	 *     value=RANGE
	 */
	protected void sequence_IQLLiteralExpression(ISerializationContext context, IQLLiteralExpressionRange semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BasicIQLPackage.Literals.IQL_LITERAL_EXPRESSION_RANGE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BasicIQLPackage.Literals.IQL_LITERAL_EXPRESSION_RANGE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getIQLLiteralExpressionAccess().getValueRANGETerminalRuleCall_4_1_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     IQLExpression returns IQLLiteralExpressionString
	 *     IQLAssignmentExpression returns IQLLiteralExpressionString
	 *     IQLAssignmentExpression.IQLAssignmentExpression_1_0_0_0 returns IQLLiteralExpressionString
	 *     IQLLogicalOrExpression returns IQLLiteralExpressionString
	 *     IQLLogicalOrExpression.IQLLogicalOrExpression_1_0_0_0 returns IQLLiteralExpressionString
	 *     IQLLogicalAndExpression returns IQLLiteralExpressionString
	 *     IQLLogicalAndExpression.IQLLogicalAndExpression_1_0_0_0 returns IQLLiteralExpressionString
	 *     IQLEqualityExpression returns IQLLiteralExpressionString
	 *     IQLEqualityExpression.IQLEqualityExpression_1_0_0_0 returns IQLLiteralExpressionString
	 *     IQLRelationalExpression returns IQLLiteralExpressionString
	 *     IQLRelationalExpression.IQLInstanceOfExpression_1_0_0_0_0 returns IQLLiteralExpressionString
	 *     IQLRelationalExpression.IQLRelationalExpression_1_1_0_0_0 returns IQLLiteralExpressionString
	 *     IQLAdditiveExpression returns IQLLiteralExpressionString
	 *     IQLAdditiveExpression.IQLAdditiveExpression_1_0_0_0 returns IQLLiteralExpressionString
	 *     IQLMultiplicativeExpression returns IQLLiteralExpressionString
	 *     IQLMultiplicativeExpression.IQLMultiplicativeExpression_1_0_0_0 returns IQLLiteralExpressionString
	 *     IQLUnaryExpression returns IQLLiteralExpressionString
	 *     IQLUnaryExpression.IQLPostfixExpression_4_1_0_0 returns IQLLiteralExpressionString
	 *     IQLMemberCallExpression returns IQLLiteralExpressionString
	 *     IQLMemberCallExpression.IQLArrayExpression_1_0_0_0 returns IQLLiteralExpressionString
	 *     IQLMemberCallExpression.IQLMemberSelectionExpression_1_1_0_0_0 returns IQLLiteralExpressionString
	 *     IQLOtherExpressions returns IQLLiteralExpressionString
	 *     IQLLiteralExpression returns IQLLiteralExpressionString
	 *
	 * Constraint:
	 *     value=STRING
	 */
	protected void sequence_IQLLiteralExpression(ISerializationContext context, IQLLiteralExpressionString semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BasicIQLPackage.Literals.IQL_LITERAL_EXPRESSION_STRING__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BasicIQLPackage.Literals.IQL_LITERAL_EXPRESSION_STRING__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getIQLLiteralExpressionAccess().getValueSTRINGTerminalRuleCall_2_1_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     IQLExpression returns IQLLiteralExpressionType
	 *     IQLAssignmentExpression returns IQLLiteralExpressionType
	 *     IQLAssignmentExpression.IQLAssignmentExpression_1_0_0_0 returns IQLLiteralExpressionType
	 *     IQLLogicalOrExpression returns IQLLiteralExpressionType
	 *     IQLLogicalOrExpression.IQLLogicalOrExpression_1_0_0_0 returns IQLLiteralExpressionType
	 *     IQLLogicalAndExpression returns IQLLiteralExpressionType
	 *     IQLLogicalAndExpression.IQLLogicalAndExpression_1_0_0_0 returns IQLLiteralExpressionType
	 *     IQLEqualityExpression returns IQLLiteralExpressionType
	 *     IQLEqualityExpression.IQLEqualityExpression_1_0_0_0 returns IQLLiteralExpressionType
	 *     IQLRelationalExpression returns IQLLiteralExpressionType
	 *     IQLRelationalExpression.IQLInstanceOfExpression_1_0_0_0_0 returns IQLLiteralExpressionType
	 *     IQLRelationalExpression.IQLRelationalExpression_1_1_0_0_0 returns IQLLiteralExpressionType
	 *     IQLAdditiveExpression returns IQLLiteralExpressionType
	 *     IQLAdditiveExpression.IQLAdditiveExpression_1_0_0_0 returns IQLLiteralExpressionType
	 *     IQLMultiplicativeExpression returns IQLLiteralExpressionType
	 *     IQLMultiplicativeExpression.IQLMultiplicativeExpression_1_0_0_0 returns IQLLiteralExpressionType
	 *     IQLUnaryExpression returns IQLLiteralExpressionType
	 *     IQLUnaryExpression.IQLPostfixExpression_4_1_0_0 returns IQLLiteralExpressionType
	 *     IQLMemberCallExpression returns IQLLiteralExpressionType
	 *     IQLMemberCallExpression.IQLArrayExpression_1_0_0_0 returns IQLLiteralExpressionType
	 *     IQLMemberCallExpression.IQLMemberSelectionExpression_1_1_0_0_0 returns IQLLiteralExpressionType
	 *     IQLOtherExpressions returns IQLLiteralExpressionType
	 *     IQLLiteralExpression returns IQLLiteralExpressionType
	 *
	 * Constraint:
	 *     value=JvmTypeReference
	 */
	protected void sequence_IQLLiteralExpression(ISerializationContext context, IQLLiteralExpressionType semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BasicIQLPackage.Literals.IQL_LITERAL_EXPRESSION_TYPE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BasicIQLPackage.Literals.IQL_LITERAL_EXPRESSION_TYPE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getIQLLiteralExpressionAccess().getValueJvmTypeReferenceParserRuleCall_5_2_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     IQLExpression returns IQLLogicalAndExpression
	 *     IQLAssignmentExpression returns IQLLogicalAndExpression
	 *     IQLAssignmentExpression.IQLAssignmentExpression_1_0_0_0 returns IQLLogicalAndExpression
	 *     IQLLogicalOrExpression returns IQLLogicalAndExpression
	 *     IQLLogicalOrExpression.IQLLogicalOrExpression_1_0_0_0 returns IQLLogicalAndExpression
	 *     IQLLogicalAndExpression returns IQLLogicalAndExpression
	 *     IQLLogicalAndExpression.IQLLogicalAndExpression_1_0_0_0 returns IQLLogicalAndExpression
	 *
	 * Constraint:
	 *     (leftOperand=IQLLogicalAndExpression_IQLLogicalAndExpression_1_0_0_0 op=OpLogicalAnd rightOperand=IQLEqualityExpression)
	 */
	protected void sequence_IQLLogicalAndExpression(ISerializationContext context, IQLLogicalAndExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BasicIQLPackage.Literals.IQL_LOGICAL_AND_EXPRESSION__LEFT_OPERAND) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BasicIQLPackage.Literals.IQL_LOGICAL_AND_EXPRESSION__LEFT_OPERAND));
			if (transientValues.isValueTransient(semanticObject, BasicIQLPackage.Literals.IQL_LOGICAL_AND_EXPRESSION__OP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BasicIQLPackage.Literals.IQL_LOGICAL_AND_EXPRESSION__OP));
			if (transientValues.isValueTransient(semanticObject, BasicIQLPackage.Literals.IQL_LOGICAL_AND_EXPRESSION__RIGHT_OPERAND) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BasicIQLPackage.Literals.IQL_LOGICAL_AND_EXPRESSION__RIGHT_OPERAND));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getIQLLogicalAndExpressionAccess().getIQLLogicalAndExpressionLeftOperandAction_1_0_0_0(), semanticObject.getLeftOperand());
		feeder.accept(grammarAccess.getIQLLogicalAndExpressionAccess().getOpOpLogicalAndParserRuleCall_1_0_0_1_0(), semanticObject.getOp());
		feeder.accept(grammarAccess.getIQLLogicalAndExpressionAccess().getRightOperandIQLEqualityExpressionParserRuleCall_1_1_0(), semanticObject.getRightOperand());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     IQLExpression returns IQLLogicalOrExpression
	 *     IQLAssignmentExpression returns IQLLogicalOrExpression
	 *     IQLAssignmentExpression.IQLAssignmentExpression_1_0_0_0 returns IQLLogicalOrExpression
	 *     IQLLogicalOrExpression returns IQLLogicalOrExpression
	 *     IQLLogicalOrExpression.IQLLogicalOrExpression_1_0_0_0 returns IQLLogicalOrExpression
	 *
	 * Constraint:
	 *     (leftOperand=IQLLogicalOrExpression_IQLLogicalOrExpression_1_0_0_0 op=OpLogicalOr rightOperand=IQLLogicalAndExpression)
	 */
	protected void sequence_IQLLogicalOrExpression(ISerializationContext context, IQLLogicalOrExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BasicIQLPackage.Literals.IQL_LOGICAL_OR_EXPRESSION__LEFT_OPERAND) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BasicIQLPackage.Literals.IQL_LOGICAL_OR_EXPRESSION__LEFT_OPERAND));
			if (transientValues.isValueTransient(semanticObject, BasicIQLPackage.Literals.IQL_LOGICAL_OR_EXPRESSION__OP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BasicIQLPackage.Literals.IQL_LOGICAL_OR_EXPRESSION__OP));
			if (transientValues.isValueTransient(semanticObject, BasicIQLPackage.Literals.IQL_LOGICAL_OR_EXPRESSION__RIGHT_OPERAND) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BasicIQLPackage.Literals.IQL_LOGICAL_OR_EXPRESSION__RIGHT_OPERAND));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getIQLLogicalOrExpressionAccess().getIQLLogicalOrExpressionLeftOperandAction_1_0_0_0(), semanticObject.getLeftOperand());
		feeder.accept(grammarAccess.getIQLLogicalOrExpressionAccess().getOpOpLogicalOrParserRuleCall_1_0_0_1_0(), semanticObject.getOp());
		feeder.accept(grammarAccess.getIQLLogicalOrExpressionAccess().getRightOperandIQLLogicalAndExpressionParserRuleCall_1_1_0(), semanticObject.getRightOperand());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     IQLExpression returns IQLArrayExpression
	 *     IQLAssignmentExpression returns IQLArrayExpression
	 *     IQLAssignmentExpression.IQLAssignmentExpression_1_0_0_0 returns IQLArrayExpression
	 *     IQLLogicalOrExpression returns IQLArrayExpression
	 *     IQLLogicalOrExpression.IQLLogicalOrExpression_1_0_0_0 returns IQLArrayExpression
	 *     IQLLogicalAndExpression returns IQLArrayExpression
	 *     IQLLogicalAndExpression.IQLLogicalAndExpression_1_0_0_0 returns IQLArrayExpression
	 *     IQLEqualityExpression returns IQLArrayExpression
	 *     IQLEqualityExpression.IQLEqualityExpression_1_0_0_0 returns IQLArrayExpression
	 *     IQLRelationalExpression returns IQLArrayExpression
	 *     IQLRelationalExpression.IQLInstanceOfExpression_1_0_0_0_0 returns IQLArrayExpression
	 *     IQLRelationalExpression.IQLRelationalExpression_1_1_0_0_0 returns IQLArrayExpression
	 *     IQLAdditiveExpression returns IQLArrayExpression
	 *     IQLAdditiveExpression.IQLAdditiveExpression_1_0_0_0 returns IQLArrayExpression
	 *     IQLMultiplicativeExpression returns IQLArrayExpression
	 *     IQLMultiplicativeExpression.IQLMultiplicativeExpression_1_0_0_0 returns IQLArrayExpression
	 *     IQLUnaryExpression returns IQLArrayExpression
	 *     IQLUnaryExpression.IQLPostfixExpression_4_1_0_0 returns IQLArrayExpression
	 *     IQLMemberCallExpression returns IQLArrayExpression
	 *     IQLMemberCallExpression.IQLArrayExpression_1_0_0_0 returns IQLArrayExpression
	 *     IQLMemberCallExpression.IQLMemberSelectionExpression_1_1_0_0_0 returns IQLArrayExpression
	 *
	 * Constraint:
	 *     (leftOperand=IQLMemberCallExpression_IQLArrayExpression_1_0_0_0 expressions+=IQLExpression expressions+=IQLExpression*)
	 */
	protected void sequence_IQLMemberCallExpression(ISerializationContext context, IQLArrayExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     IQLExpression returns IQLMemberSelectionExpression
	 *     IQLAssignmentExpression returns IQLMemberSelectionExpression
	 *     IQLAssignmentExpression.IQLAssignmentExpression_1_0_0_0 returns IQLMemberSelectionExpression
	 *     IQLLogicalOrExpression returns IQLMemberSelectionExpression
	 *     IQLLogicalOrExpression.IQLLogicalOrExpression_1_0_0_0 returns IQLMemberSelectionExpression
	 *     IQLLogicalAndExpression returns IQLMemberSelectionExpression
	 *     IQLLogicalAndExpression.IQLLogicalAndExpression_1_0_0_0 returns IQLMemberSelectionExpression
	 *     IQLEqualityExpression returns IQLMemberSelectionExpression
	 *     IQLEqualityExpression.IQLEqualityExpression_1_0_0_0 returns IQLMemberSelectionExpression
	 *     IQLRelationalExpression returns IQLMemberSelectionExpression
	 *     IQLRelationalExpression.IQLInstanceOfExpression_1_0_0_0_0 returns IQLMemberSelectionExpression
	 *     IQLRelationalExpression.IQLRelationalExpression_1_1_0_0_0 returns IQLMemberSelectionExpression
	 *     IQLAdditiveExpression returns IQLMemberSelectionExpression
	 *     IQLAdditiveExpression.IQLAdditiveExpression_1_0_0_0 returns IQLMemberSelectionExpression
	 *     IQLMultiplicativeExpression returns IQLMemberSelectionExpression
	 *     IQLMultiplicativeExpression.IQLMultiplicativeExpression_1_0_0_0 returns IQLMemberSelectionExpression
	 *     IQLUnaryExpression returns IQLMemberSelectionExpression
	 *     IQLUnaryExpression.IQLPostfixExpression_4_1_0_0 returns IQLMemberSelectionExpression
	 *     IQLMemberCallExpression returns IQLMemberSelectionExpression
	 *     IQLMemberCallExpression.IQLArrayExpression_1_0_0_0 returns IQLMemberSelectionExpression
	 *     IQLMemberCallExpression.IQLMemberSelectionExpression_1_1_0_0_0 returns IQLMemberSelectionExpression
	 *
	 * Constraint:
	 *     (leftOperand=IQLMemberCallExpression_IQLMemberSelectionExpression_1_1_0_0_0 sel=IQLMemberSelection)
	 */
	protected void sequence_IQLMemberCallExpression(ISerializationContext context, IQLMemberSelectionExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BasicIQLPackage.Literals.IQL_MEMBER_SELECTION_EXPRESSION__LEFT_OPERAND) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BasicIQLPackage.Literals.IQL_MEMBER_SELECTION_EXPRESSION__LEFT_OPERAND));
			if (transientValues.isValueTransient(semanticObject, BasicIQLPackage.Literals.IQL_MEMBER_SELECTION_EXPRESSION__SEL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BasicIQLPackage.Literals.IQL_MEMBER_SELECTION_EXPRESSION__SEL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getIQLMemberCallExpressionAccess().getIQLMemberSelectionExpressionLeftOperandAction_1_1_0_0_0(), semanticObject.getLeftOperand());
		feeder.accept(grammarAccess.getIQLMemberCallExpressionAccess().getSelIQLMemberSelectionParserRuleCall_1_1_1_0(), semanticObject.getSel());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     IQLMemberSelection returns IQLMemberSelection
	 *
	 * Constraint:
	 *     (member=[JvmMember|ID] args=IQLArgumentsList?)
	 */
	protected void sequence_IQLMemberSelection(ISerializationContext context, IQLMemberSelection semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     IQLMetadataList returns IQLMetadataList
	 *
	 * Constraint:
	 *     (elements+=IQLMetadata elements+=IQLMetadata*)
	 */
	protected void sequence_IQLMetadataList(ISerializationContext context, IQLMetadataList semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     IQLMetadataValue returns IQLMetadataValueList
	 *     IQLMetadataValueList returns IQLMetadataValueList
	 *
	 * Constraint:
	 *     (elements+=IQLMetadataValue elements+=IQLMetadataValue*)?
	 */
	protected void sequence_IQLMetadataValueList(ISerializationContext context, IQLMetadataValueList semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     IQLMetadataValueMapElement returns IQLMetadataValueMapElement
	 *
	 * Constraint:
	 *     (key=IQLMetadataValue value=IQLMetadataValue)
	 */
	protected void sequence_IQLMetadataValueMapElement(ISerializationContext context, IQLMetadataValueMapElement semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BasicIQLPackage.Literals.IQL_METADATA_VALUE_MAP_ELEMENT__KEY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BasicIQLPackage.Literals.IQL_METADATA_VALUE_MAP_ELEMENT__KEY));
			if (transientValues.isValueTransient(semanticObject, BasicIQLPackage.Literals.IQL_METADATA_VALUE_MAP_ELEMENT__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BasicIQLPackage.Literals.IQL_METADATA_VALUE_MAP_ELEMENT__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getIQLMetadataValueMapElementAccess().getKeyIQLMetadataValueParserRuleCall_0_0(), semanticObject.getKey());
		feeder.accept(grammarAccess.getIQLMetadataValueMapElementAccess().getValueIQLMetadataValueParserRuleCall_2_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     IQLMetadataValue returns IQLMetadataValueMap
	 *     IQLMetadataValueMap returns IQLMetadataValueMap
	 *
	 * Constraint:
	 *     (elements+=IQLMetadataValueMapElement elements+=IQLMetadataValueMapElement*)?
	 */
	protected void sequence_IQLMetadataValueMap(ISerializationContext context, IQLMetadataValueMap semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     IQLMetadataValue returns IQLMetadataValueSingleBoolean
	 *     IQLMetadataValueSingle returns IQLMetadataValueSingleBoolean
	 *
	 * Constraint:
	 *     value=BOOLEAN
	 */
	protected void sequence_IQLMetadataValueSingle(ISerializationContext context, IQLMetadataValueSingleBoolean semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BasicIQLPackage.Literals.IQL_METADATA_VALUE_SINGLE_BOOLEAN__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BasicIQLPackage.Literals.IQL_METADATA_VALUE_SINGLE_BOOLEAN__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getIQLMetadataValueSingleAccess().getValueBOOLEANParserRuleCall_3_1_0(), semanticObject.isValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     IQLMetadataValue returns IQLMetadataValueSingleDouble
	 *     IQLMetadataValueSingle returns IQLMetadataValueSingleDouble
	 *
	 * Constraint:
	 *     value=DOUBLE
	 */
	protected void sequence_IQLMetadataValueSingle(ISerializationContext context, IQLMetadataValueSingleDouble semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BasicIQLPackage.Literals.IQL_METADATA_VALUE_SINGLE_DOUBLE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BasicIQLPackage.Literals.IQL_METADATA_VALUE_SINGLE_DOUBLE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getIQLMetadataValueSingleAccess().getValueDOUBLETerminalRuleCall_1_1_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     IQLMetadataValue returns IQLMetadataValueSingleInt
	 *     IQLMetadataValueSingle returns IQLMetadataValueSingleInt
	 *
	 * Constraint:
	 *     value=INT
	 */
	protected void sequence_IQLMetadataValueSingle(ISerializationContext context, IQLMetadataValueSingleInt semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BasicIQLPackage.Literals.IQL_METADATA_VALUE_SINGLE_INT__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BasicIQLPackage.Literals.IQL_METADATA_VALUE_SINGLE_INT__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getIQLMetadataValueSingleAccess().getValueINTTerminalRuleCall_0_1_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     IQLMetadataValue returns IQLMetadataValueSingleNull
	 *     IQLMetadataValueSingle returns IQLMetadataValueSingleNull
	 *
	 * Constraint:
	 *     {IQLMetadataValueSingleNull}
	 */
	protected void sequence_IQLMetadataValueSingle(ISerializationContext context, IQLMetadataValueSingleNull semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     IQLMetadataValue returns IQLMetadataValueSingleString
	 *     IQLMetadataValueSingle returns IQLMetadataValueSingleString
	 *
	 * Constraint:
	 *     value=STRING
	 */
	protected void sequence_IQLMetadataValueSingle(ISerializationContext context, IQLMetadataValueSingleString semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BasicIQLPackage.Literals.IQL_METADATA_VALUE_SINGLE_STRING__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BasicIQLPackage.Literals.IQL_METADATA_VALUE_SINGLE_STRING__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getIQLMetadataValueSingleAccess().getValueSTRINGTerminalRuleCall_2_1_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     IQLMetadataValue returns IQLMetadataValueSingleTypeRef
	 *     IQLMetadataValueSingle returns IQLMetadataValueSingleTypeRef
	 *
	 * Constraint:
	 *     value=JvmTypeReference
	 */
	protected void sequence_IQLMetadataValueSingle(ISerializationContext context, IQLMetadataValueSingleTypeRef semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BasicIQLPackage.Literals.IQL_METADATA_VALUE_SINGLE_TYPE_REF__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BasicIQLPackage.Literals.IQL_METADATA_VALUE_SINGLE_TYPE_REF__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getIQLMetadataValueSingleAccess().getValueJvmTypeReferenceParserRuleCall_4_1_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     IQLMetadata returns IQLMetadata
	 *
	 * Constraint:
	 *     (name=ID value=IQLMetadataValue?)
	 */
	protected void sequence_IQLMetadata(ISerializationContext context, IQLMetadata semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     IQLMethodDeclaration returns IQLMethodDeclaration
	 *
	 * Constraint:
	 *     (simpleName=ID (parameters+=JvmFormalParameter parameters+=JvmFormalParameter*)? returnType=JvmTypeReference?)
	 */
	protected void sequence_IQLMethodDeclaration(ISerializationContext context, IQLMethodDeclaration semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     IQLMethod returns IQLMethod
	 *
	 * Constraint:
	 *     (
	 *         override?='override'? 
	 *         simpleName=ID 
	 *         (parameters+=JvmFormalParameter parameters+=JvmFormalParameter*)? 
	 *         returnType=JvmTypeReference? 
	 *         body=IQLStatementBlock
	 *     )
	 */
	protected void sequence_IQLMethod(ISerializationContext context, IQLMethod semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     IQLModelElement returns IQLModelElement
	 *
	 * Constraint:
	 *     (javametadata+=IQLJavaMetadata* (inner=IQLClass | inner=IQLInterface))
	 */
	protected void sequence_IQLModelElement(ISerializationContext context, IQLModelElement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     IQLModel returns IQLModel
	 *
	 * Constraint:
	 *     (
	 *         (name=QualifiedName? namespaces+=IQLNamespace+ elements+=IQLModelElement+) | 
	 *         (name=QualifiedName? elements+=IQLModelElement+) | 
	 *         elements+=IQLModelElement+
	 *     )?
	 */
	protected void sequence_IQLModel(ISerializationContext context, IQLModel semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     IQLExpression returns IQLMultiplicativeExpression
	 *     IQLAssignmentExpression returns IQLMultiplicativeExpression
	 *     IQLAssignmentExpression.IQLAssignmentExpression_1_0_0_0 returns IQLMultiplicativeExpression
	 *     IQLLogicalOrExpression returns IQLMultiplicativeExpression
	 *     IQLLogicalOrExpression.IQLLogicalOrExpression_1_0_0_0 returns IQLMultiplicativeExpression
	 *     IQLLogicalAndExpression returns IQLMultiplicativeExpression
	 *     IQLLogicalAndExpression.IQLLogicalAndExpression_1_0_0_0 returns IQLMultiplicativeExpression
	 *     IQLEqualityExpression returns IQLMultiplicativeExpression
	 *     IQLEqualityExpression.IQLEqualityExpression_1_0_0_0 returns IQLMultiplicativeExpression
	 *     IQLRelationalExpression returns IQLMultiplicativeExpression
	 *     IQLRelationalExpression.IQLInstanceOfExpression_1_0_0_0_0 returns IQLMultiplicativeExpression
	 *     IQLRelationalExpression.IQLRelationalExpression_1_1_0_0_0 returns IQLMultiplicativeExpression
	 *     IQLAdditiveExpression returns IQLMultiplicativeExpression
	 *     IQLAdditiveExpression.IQLAdditiveExpression_1_0_0_0 returns IQLMultiplicativeExpression
	 *     IQLMultiplicativeExpression returns IQLMultiplicativeExpression
	 *     IQLMultiplicativeExpression.IQLMultiplicativeExpression_1_0_0_0 returns IQLMultiplicativeExpression
	 *
	 * Constraint:
	 *     (leftOperand=IQLMultiplicativeExpression_IQLMultiplicativeExpression_1_0_0_0 op=OpMulti rightOperand=IQLUnaryExpression)
	 */
	protected void sequence_IQLMultiplicativeExpression(ISerializationContext context, IQLMultiplicativeExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BasicIQLPackage.Literals.IQL_MULTIPLICATIVE_EXPRESSION__LEFT_OPERAND) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BasicIQLPackage.Literals.IQL_MULTIPLICATIVE_EXPRESSION__LEFT_OPERAND));
			if (transientValues.isValueTransient(semanticObject, BasicIQLPackage.Literals.IQL_MULTIPLICATIVE_EXPRESSION__OP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BasicIQLPackage.Literals.IQL_MULTIPLICATIVE_EXPRESSION__OP));
			if (transientValues.isValueTransient(semanticObject, BasicIQLPackage.Literals.IQL_MULTIPLICATIVE_EXPRESSION__RIGHT_OPERAND) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BasicIQLPackage.Literals.IQL_MULTIPLICATIVE_EXPRESSION__RIGHT_OPERAND));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getIQLMultiplicativeExpressionAccess().getIQLMultiplicativeExpressionLeftOperandAction_1_0_0_0(), semanticObject.getLeftOperand());
		feeder.accept(grammarAccess.getIQLMultiplicativeExpressionAccess().getOpOpMultiParserRuleCall_1_0_0_1_0(), semanticObject.getOp());
		feeder.accept(grammarAccess.getIQLMultiplicativeExpressionAccess().getRightOperandIQLUnaryExpressionParserRuleCall_1_1_0(), semanticObject.getRightOperand());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     IQLNamespace returns IQLNamespace
	 *
	 * Constraint:
	 *     (static?='static'? importedNamespace=QualifiedNameWithWildcard)
	 */
	protected void sequence_IQLNamespace(ISerializationContext context, IQLNamespace semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     IQLExpression returns IQLJvmElementCallExpression
	 *     IQLAssignmentExpression returns IQLJvmElementCallExpression
	 *     IQLAssignmentExpression.IQLAssignmentExpression_1_0_0_0 returns IQLJvmElementCallExpression
	 *     IQLLogicalOrExpression returns IQLJvmElementCallExpression
	 *     IQLLogicalOrExpression.IQLLogicalOrExpression_1_0_0_0 returns IQLJvmElementCallExpression
	 *     IQLLogicalAndExpression returns IQLJvmElementCallExpression
	 *     IQLLogicalAndExpression.IQLLogicalAndExpression_1_0_0_0 returns IQLJvmElementCallExpression
	 *     IQLEqualityExpression returns IQLJvmElementCallExpression
	 *     IQLEqualityExpression.IQLEqualityExpression_1_0_0_0 returns IQLJvmElementCallExpression
	 *     IQLRelationalExpression returns IQLJvmElementCallExpression
	 *     IQLRelationalExpression.IQLInstanceOfExpression_1_0_0_0_0 returns IQLJvmElementCallExpression
	 *     IQLRelationalExpression.IQLRelationalExpression_1_1_0_0_0 returns IQLJvmElementCallExpression
	 *     IQLAdditiveExpression returns IQLJvmElementCallExpression
	 *     IQLAdditiveExpression.IQLAdditiveExpression_1_0_0_0 returns IQLJvmElementCallExpression
	 *     IQLMultiplicativeExpression returns IQLJvmElementCallExpression
	 *     IQLMultiplicativeExpression.IQLMultiplicativeExpression_1_0_0_0 returns IQLJvmElementCallExpression
	 *     IQLUnaryExpression returns IQLJvmElementCallExpression
	 *     IQLUnaryExpression.IQLPostfixExpression_4_1_0_0 returns IQLJvmElementCallExpression
	 *     IQLMemberCallExpression returns IQLJvmElementCallExpression
	 *     IQLMemberCallExpression.IQLArrayExpression_1_0_0_0 returns IQLJvmElementCallExpression
	 *     IQLMemberCallExpression.IQLMemberSelectionExpression_1_1_0_0_0 returns IQLJvmElementCallExpression
	 *     IQLOtherExpressions returns IQLJvmElementCallExpression
	 *
	 * Constraint:
	 *     (element=[JvmIdentifiableElement|QualifiedName] args=IQLArgumentsList?)
	 */
	protected void sequence_IQLOtherExpressions(ISerializationContext context, IQLJvmElementCallExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     IQLExpression returns IQLNewExpression
	 *     IQLAssignmentExpression returns IQLNewExpression
	 *     IQLAssignmentExpression.IQLAssignmentExpression_1_0_0_0 returns IQLNewExpression
	 *     IQLLogicalOrExpression returns IQLNewExpression
	 *     IQLLogicalOrExpression.IQLLogicalOrExpression_1_0_0_0 returns IQLNewExpression
	 *     IQLLogicalAndExpression returns IQLNewExpression
	 *     IQLLogicalAndExpression.IQLLogicalAndExpression_1_0_0_0 returns IQLNewExpression
	 *     IQLEqualityExpression returns IQLNewExpression
	 *     IQLEqualityExpression.IQLEqualityExpression_1_0_0_0 returns IQLNewExpression
	 *     IQLRelationalExpression returns IQLNewExpression
	 *     IQLRelationalExpression.IQLInstanceOfExpression_1_0_0_0_0 returns IQLNewExpression
	 *     IQLRelationalExpression.IQLRelationalExpression_1_1_0_0_0 returns IQLNewExpression
	 *     IQLAdditiveExpression returns IQLNewExpression
	 *     IQLAdditiveExpression.IQLAdditiveExpression_1_0_0_0 returns IQLNewExpression
	 *     IQLMultiplicativeExpression returns IQLNewExpression
	 *     IQLMultiplicativeExpression.IQLMultiplicativeExpression_1_0_0_0 returns IQLNewExpression
	 *     IQLUnaryExpression returns IQLNewExpression
	 *     IQLUnaryExpression.IQLPostfixExpression_4_1_0_0 returns IQLNewExpression
	 *     IQLMemberCallExpression returns IQLNewExpression
	 *     IQLMemberCallExpression.IQLArrayExpression_1_0_0_0 returns IQLNewExpression
	 *     IQLMemberCallExpression.IQLMemberSelectionExpression_1_1_0_0_0 returns IQLNewExpression
	 *     IQLOtherExpressions returns IQLNewExpression
	 *
	 * Constraint:
	 *     (ref=IQLArrayTypeRef | (ref=IQLSimpleTypeRef ((argsList=IQLArgumentsList argsMap=IQLArgumentsMap?) | argsMap=IQLArgumentsMap)))
	 */
	protected void sequence_IQLOtherExpressions(ISerializationContext context, IQLNewExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     IQLExpression returns IQLParenthesisExpression
	 *     IQLAssignmentExpression returns IQLParenthesisExpression
	 *     IQLAssignmentExpression.IQLAssignmentExpression_1_0_0_0 returns IQLParenthesisExpression
	 *     IQLLogicalOrExpression returns IQLParenthesisExpression
	 *     IQLLogicalOrExpression.IQLLogicalOrExpression_1_0_0_0 returns IQLParenthesisExpression
	 *     IQLLogicalAndExpression returns IQLParenthesisExpression
	 *     IQLLogicalAndExpression.IQLLogicalAndExpression_1_0_0_0 returns IQLParenthesisExpression
	 *     IQLEqualityExpression returns IQLParenthesisExpression
	 *     IQLEqualityExpression.IQLEqualityExpression_1_0_0_0 returns IQLParenthesisExpression
	 *     IQLRelationalExpression returns IQLParenthesisExpression
	 *     IQLRelationalExpression.IQLInstanceOfExpression_1_0_0_0_0 returns IQLParenthesisExpression
	 *     IQLRelationalExpression.IQLRelationalExpression_1_1_0_0_0 returns IQLParenthesisExpression
	 *     IQLAdditiveExpression returns IQLParenthesisExpression
	 *     IQLAdditiveExpression.IQLAdditiveExpression_1_0_0_0 returns IQLParenthesisExpression
	 *     IQLMultiplicativeExpression returns IQLParenthesisExpression
	 *     IQLMultiplicativeExpression.IQLMultiplicativeExpression_1_0_0_0 returns IQLParenthesisExpression
	 *     IQLUnaryExpression returns IQLParenthesisExpression
	 *     IQLUnaryExpression.IQLPostfixExpression_4_1_0_0 returns IQLParenthesisExpression
	 *     IQLMemberCallExpression returns IQLParenthesisExpression
	 *     IQLMemberCallExpression.IQLArrayExpression_1_0_0_0 returns IQLParenthesisExpression
	 *     IQLMemberCallExpression.IQLMemberSelectionExpression_1_1_0_0_0 returns IQLParenthesisExpression
	 *     IQLOtherExpressions returns IQLParenthesisExpression
	 *
	 * Constraint:
	 *     expr=IQLExpression
	 */
	protected void sequence_IQLOtherExpressions(ISerializationContext context, IQLParenthesisExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BasicIQLPackage.Literals.IQL_PARENTHESIS_EXPRESSION__EXPR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BasicIQLPackage.Literals.IQL_PARENTHESIS_EXPRESSION__EXPR));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getIQLOtherExpressionsAccess().getExprIQLExpressionParserRuleCall_3_2_0(), semanticObject.getExpr());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     IQLExpression returns IQLSuperExpression
	 *     IQLAssignmentExpression returns IQLSuperExpression
	 *     IQLAssignmentExpression.IQLAssignmentExpression_1_0_0_0 returns IQLSuperExpression
	 *     IQLLogicalOrExpression returns IQLSuperExpression
	 *     IQLLogicalOrExpression.IQLLogicalOrExpression_1_0_0_0 returns IQLSuperExpression
	 *     IQLLogicalAndExpression returns IQLSuperExpression
	 *     IQLLogicalAndExpression.IQLLogicalAndExpression_1_0_0_0 returns IQLSuperExpression
	 *     IQLEqualityExpression returns IQLSuperExpression
	 *     IQLEqualityExpression.IQLEqualityExpression_1_0_0_0 returns IQLSuperExpression
	 *     IQLRelationalExpression returns IQLSuperExpression
	 *     IQLRelationalExpression.IQLInstanceOfExpression_1_0_0_0_0 returns IQLSuperExpression
	 *     IQLRelationalExpression.IQLRelationalExpression_1_1_0_0_0 returns IQLSuperExpression
	 *     IQLAdditiveExpression returns IQLSuperExpression
	 *     IQLAdditiveExpression.IQLAdditiveExpression_1_0_0_0 returns IQLSuperExpression
	 *     IQLMultiplicativeExpression returns IQLSuperExpression
	 *     IQLMultiplicativeExpression.IQLMultiplicativeExpression_1_0_0_0 returns IQLSuperExpression
	 *     IQLUnaryExpression returns IQLSuperExpression
	 *     IQLUnaryExpression.IQLPostfixExpression_4_1_0_0 returns IQLSuperExpression
	 *     IQLMemberCallExpression returns IQLSuperExpression
	 *     IQLMemberCallExpression.IQLArrayExpression_1_0_0_0 returns IQLSuperExpression
	 *     IQLMemberCallExpression.IQLMemberSelectionExpression_1_1_0_0_0 returns IQLSuperExpression
	 *     IQLOtherExpressions returns IQLSuperExpression
	 *
	 * Constraint:
	 *     {IQLSuperExpression}
	 */
	protected void sequence_IQLOtherExpressions(ISerializationContext context, IQLSuperExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     IQLExpression returns IQLThisExpression
	 *     IQLAssignmentExpression returns IQLThisExpression
	 *     IQLAssignmentExpression.IQLAssignmentExpression_1_0_0_0 returns IQLThisExpression
	 *     IQLLogicalOrExpression returns IQLThisExpression
	 *     IQLLogicalOrExpression.IQLLogicalOrExpression_1_0_0_0 returns IQLThisExpression
	 *     IQLLogicalAndExpression returns IQLThisExpression
	 *     IQLLogicalAndExpression.IQLLogicalAndExpression_1_0_0_0 returns IQLThisExpression
	 *     IQLEqualityExpression returns IQLThisExpression
	 *     IQLEqualityExpression.IQLEqualityExpression_1_0_0_0 returns IQLThisExpression
	 *     IQLRelationalExpression returns IQLThisExpression
	 *     IQLRelationalExpression.IQLInstanceOfExpression_1_0_0_0_0 returns IQLThisExpression
	 *     IQLRelationalExpression.IQLRelationalExpression_1_1_0_0_0 returns IQLThisExpression
	 *     IQLAdditiveExpression returns IQLThisExpression
	 *     IQLAdditiveExpression.IQLAdditiveExpression_1_0_0_0 returns IQLThisExpression
	 *     IQLMultiplicativeExpression returns IQLThisExpression
	 *     IQLMultiplicativeExpression.IQLMultiplicativeExpression_1_0_0_0 returns IQLThisExpression
	 *     IQLUnaryExpression returns IQLThisExpression
	 *     IQLUnaryExpression.IQLPostfixExpression_4_1_0_0 returns IQLThisExpression
	 *     IQLMemberCallExpression returns IQLThisExpression
	 *     IQLMemberCallExpression.IQLArrayExpression_1_0_0_0 returns IQLThisExpression
	 *     IQLMemberCallExpression.IQLMemberSelectionExpression_1_1_0_0_0 returns IQLThisExpression
	 *     IQLOtherExpressions returns IQLThisExpression
	 *
	 * Constraint:
	 *     {IQLThisExpression}
	 */
	protected void sequence_IQLOtherExpressions(ISerializationContext context, IQLThisExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     IQLExpression returns IQLInstanceOfExpression
	 *     IQLAssignmentExpression returns IQLInstanceOfExpression
	 *     IQLAssignmentExpression.IQLAssignmentExpression_1_0_0_0 returns IQLInstanceOfExpression
	 *     IQLLogicalOrExpression returns IQLInstanceOfExpression
	 *     IQLLogicalOrExpression.IQLLogicalOrExpression_1_0_0_0 returns IQLInstanceOfExpression
	 *     IQLLogicalAndExpression returns IQLInstanceOfExpression
	 *     IQLLogicalAndExpression.IQLLogicalAndExpression_1_0_0_0 returns IQLInstanceOfExpression
	 *     IQLEqualityExpression returns IQLInstanceOfExpression
	 *     IQLEqualityExpression.IQLEqualityExpression_1_0_0_0 returns IQLInstanceOfExpression
	 *     IQLRelationalExpression returns IQLInstanceOfExpression
	 *     IQLRelationalExpression.IQLInstanceOfExpression_1_0_0_0_0 returns IQLInstanceOfExpression
	 *     IQLRelationalExpression.IQLRelationalExpression_1_1_0_0_0 returns IQLInstanceOfExpression
	 *
	 * Constraint:
	 *     (leftOperand=IQLRelationalExpression_IQLInstanceOfExpression_1_0_0_0_0 targetRef=JvmTypeReference)
	 */
	protected void sequence_IQLRelationalExpression(ISerializationContext context, IQLInstanceOfExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BasicIQLPackage.Literals.IQL_INSTANCE_OF_EXPRESSION__LEFT_OPERAND) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BasicIQLPackage.Literals.IQL_INSTANCE_OF_EXPRESSION__LEFT_OPERAND));
			if (transientValues.isValueTransient(semanticObject, BasicIQLPackage.Literals.IQL_INSTANCE_OF_EXPRESSION__TARGET_REF) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BasicIQLPackage.Literals.IQL_INSTANCE_OF_EXPRESSION__TARGET_REF));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getIQLRelationalExpressionAccess().getIQLInstanceOfExpressionLeftOperandAction_1_0_0_0_0(), semanticObject.getLeftOperand());
		feeder.accept(grammarAccess.getIQLRelationalExpressionAccess().getTargetRefJvmTypeReferenceParserRuleCall_1_0_1_0(), semanticObject.getTargetRef());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     IQLExpression returns IQLRelationalExpression
	 *     IQLAssignmentExpression returns IQLRelationalExpression
	 *     IQLAssignmentExpression.IQLAssignmentExpression_1_0_0_0 returns IQLRelationalExpression
	 *     IQLLogicalOrExpression returns IQLRelationalExpression
	 *     IQLLogicalOrExpression.IQLLogicalOrExpression_1_0_0_0 returns IQLRelationalExpression
	 *     IQLLogicalAndExpression returns IQLRelationalExpression
	 *     IQLLogicalAndExpression.IQLLogicalAndExpression_1_0_0_0 returns IQLRelationalExpression
	 *     IQLEqualityExpression returns IQLRelationalExpression
	 *     IQLEqualityExpression.IQLEqualityExpression_1_0_0_0 returns IQLRelationalExpression
	 *     IQLRelationalExpression returns IQLRelationalExpression
	 *     IQLRelationalExpression.IQLInstanceOfExpression_1_0_0_0_0 returns IQLRelationalExpression
	 *     IQLRelationalExpression.IQLRelationalExpression_1_1_0_0_0 returns IQLRelationalExpression
	 *
	 * Constraint:
	 *     (leftOperand=IQLRelationalExpression_IQLRelationalExpression_1_1_0_0_0 op=OpRelational rightOperand=IQLAdditiveExpression)
	 */
	protected void sequence_IQLRelationalExpression(ISerializationContext context, IQLRelationalExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BasicIQLPackage.Literals.IQL_RELATIONAL_EXPRESSION__LEFT_OPERAND) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BasicIQLPackage.Literals.IQL_RELATIONAL_EXPRESSION__LEFT_OPERAND));
			if (transientValues.isValueTransient(semanticObject, BasicIQLPackage.Literals.IQL_RELATIONAL_EXPRESSION__OP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BasicIQLPackage.Literals.IQL_RELATIONAL_EXPRESSION__OP));
			if (transientValues.isValueTransient(semanticObject, BasicIQLPackage.Literals.IQL_RELATIONAL_EXPRESSION__RIGHT_OPERAND) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BasicIQLPackage.Literals.IQL_RELATIONAL_EXPRESSION__RIGHT_OPERAND));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getIQLRelationalExpressionAccess().getIQLRelationalExpressionLeftOperandAction_1_1_0_0_0(), semanticObject.getLeftOperand());
		feeder.accept(grammarAccess.getIQLRelationalExpressionAccess().getOpOpRelationalParserRuleCall_1_1_0_0_1_0(), semanticObject.getOp());
		feeder.accept(grammarAccess.getIQLRelationalExpressionAccess().getRightOperandIQLAdditiveExpressionParserRuleCall_1_1_1_0(), semanticObject.getRightOperand());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     IQLStatement returns IQLReturnStatement
	 *     IQLReturnStatement returns IQLReturnStatement
	 *
	 * Constraint:
	 *     expression=IQLExpression?
	 */
	protected void sequence_IQLReturnStatement(ISerializationContext context, IQLReturnStatement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     JvmTypeReference returns IQLSimpleTypeRef
	 *     IQLSimpleTypeRef returns IQLSimpleTypeRef
	 *
	 * Constraint:
	 *     type=[JvmType|QualifiedName]
	 */
	protected void sequence_IQLSimpleTypeRef(ISerializationContext context, IQLSimpleTypeRef semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BasicIQLPackage.Literals.IQL_SIMPLE_TYPE_REF__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BasicIQLPackage.Literals.IQL_SIMPLE_TYPE_REF__TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getIQLSimpleTypeRefAccess().getTypeJvmTypeQualifiedNameParserRuleCall_1_0_1(), semanticObject.eGet(BasicIQLPackage.Literals.IQL_SIMPLE_TYPE_REF__TYPE, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     IQLStatement returns IQLStatementBlock
	 *     IQLStatementBlock returns IQLStatementBlock
	 *
	 * Constraint:
	 *     statements+=IQLStatement*
	 */
	protected void sequence_IQLStatementBlock(ISerializationContext context, IQLStatementBlock semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     IQLStatement returns IQLSwitchStatement
	 *     IQLSwitchStatement returns IQLSwitchStatement
	 *
	 * Constraint:
	 *     (expr=IQLExpression cases+=IQLCasePart* statements+=IQLStatement*)
	 */
	protected void sequence_IQLSwitchStatement(ISerializationContext context, IQLSwitchStatement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     IQLExpression returns IQLBooleanNotExpression
	 *     IQLAssignmentExpression returns IQLBooleanNotExpression
	 *     IQLAssignmentExpression.IQLAssignmentExpression_1_0_0_0 returns IQLBooleanNotExpression
	 *     IQLLogicalOrExpression returns IQLBooleanNotExpression
	 *     IQLLogicalOrExpression.IQLLogicalOrExpression_1_0_0_0 returns IQLBooleanNotExpression
	 *     IQLLogicalAndExpression returns IQLBooleanNotExpression
	 *     IQLLogicalAndExpression.IQLLogicalAndExpression_1_0_0_0 returns IQLBooleanNotExpression
	 *     IQLEqualityExpression returns IQLBooleanNotExpression
	 *     IQLEqualityExpression.IQLEqualityExpression_1_0_0_0 returns IQLBooleanNotExpression
	 *     IQLRelationalExpression returns IQLBooleanNotExpression
	 *     IQLRelationalExpression.IQLInstanceOfExpression_1_0_0_0_0 returns IQLBooleanNotExpression
	 *     IQLRelationalExpression.IQLRelationalExpression_1_1_0_0_0 returns IQLBooleanNotExpression
	 *     IQLAdditiveExpression returns IQLBooleanNotExpression
	 *     IQLAdditiveExpression.IQLAdditiveExpression_1_0_0_0 returns IQLBooleanNotExpression
	 *     IQLMultiplicativeExpression returns IQLBooleanNotExpression
	 *     IQLMultiplicativeExpression.IQLMultiplicativeExpression_1_0_0_0 returns IQLBooleanNotExpression
	 *     IQLUnaryExpression returns IQLBooleanNotExpression
	 *
	 * Constraint:
	 *     (op=OpUnaryBooleanNot operand=IQLMemberCallExpression)
	 */
	protected void sequence_IQLUnaryExpression(ISerializationContext context, IQLBooleanNotExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BasicIQLPackage.Literals.IQL_BOOLEAN_NOT_EXPRESSION__OP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BasicIQLPackage.Literals.IQL_BOOLEAN_NOT_EXPRESSION__OP));
			if (transientValues.isValueTransient(semanticObject, BasicIQLPackage.Literals.IQL_BOOLEAN_NOT_EXPRESSION__OPERAND) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BasicIQLPackage.Literals.IQL_BOOLEAN_NOT_EXPRESSION__OPERAND));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getIQLUnaryExpressionAccess().getOpOpUnaryBooleanNotParserRuleCall_1_0_1_0(), semanticObject.getOp());
		feeder.accept(grammarAccess.getIQLUnaryExpressionAccess().getOperandIQLMemberCallExpressionParserRuleCall_1_1_0(), semanticObject.getOperand());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     IQLExpression returns IQLPlusMinusExpression
	 *     IQLAssignmentExpression returns IQLPlusMinusExpression
	 *     IQLAssignmentExpression.IQLAssignmentExpression_1_0_0_0 returns IQLPlusMinusExpression
	 *     IQLLogicalOrExpression returns IQLPlusMinusExpression
	 *     IQLLogicalOrExpression.IQLLogicalOrExpression_1_0_0_0 returns IQLPlusMinusExpression
	 *     IQLLogicalAndExpression returns IQLPlusMinusExpression
	 *     IQLLogicalAndExpression.IQLLogicalAndExpression_1_0_0_0 returns IQLPlusMinusExpression
	 *     IQLEqualityExpression returns IQLPlusMinusExpression
	 *     IQLEqualityExpression.IQLEqualityExpression_1_0_0_0 returns IQLPlusMinusExpression
	 *     IQLRelationalExpression returns IQLPlusMinusExpression
	 *     IQLRelationalExpression.IQLInstanceOfExpression_1_0_0_0_0 returns IQLPlusMinusExpression
	 *     IQLRelationalExpression.IQLRelationalExpression_1_1_0_0_0 returns IQLPlusMinusExpression
	 *     IQLAdditiveExpression returns IQLPlusMinusExpression
	 *     IQLAdditiveExpression.IQLAdditiveExpression_1_0_0_0 returns IQLPlusMinusExpression
	 *     IQLMultiplicativeExpression returns IQLPlusMinusExpression
	 *     IQLMultiplicativeExpression.IQLMultiplicativeExpression_1_0_0_0 returns IQLPlusMinusExpression
	 *     IQLUnaryExpression returns IQLPlusMinusExpression
	 *
	 * Constraint:
	 *     (op=OpUnaryPlusMinus operand=IQLMemberCallExpression)
	 */
	protected void sequence_IQLUnaryExpression(ISerializationContext context, IQLPlusMinusExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BasicIQLPackage.Literals.IQL_PLUS_MINUS_EXPRESSION__OP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BasicIQLPackage.Literals.IQL_PLUS_MINUS_EXPRESSION__OP));
			if (transientValues.isValueTransient(semanticObject, BasicIQLPackage.Literals.IQL_PLUS_MINUS_EXPRESSION__OPERAND) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BasicIQLPackage.Literals.IQL_PLUS_MINUS_EXPRESSION__OPERAND));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getIQLUnaryExpressionAccess().getOpOpUnaryPlusMinusParserRuleCall_0_0_1_0(), semanticObject.getOp());
		feeder.accept(grammarAccess.getIQLUnaryExpressionAccess().getOperandIQLMemberCallExpressionParserRuleCall_0_1_0(), semanticObject.getOperand());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     IQLExpression returns IQLPostfixExpression
	 *     IQLAssignmentExpression returns IQLPostfixExpression
	 *     IQLAssignmentExpression.IQLAssignmentExpression_1_0_0_0 returns IQLPostfixExpression
	 *     IQLLogicalOrExpression returns IQLPostfixExpression
	 *     IQLLogicalOrExpression.IQLLogicalOrExpression_1_0_0_0 returns IQLPostfixExpression
	 *     IQLLogicalAndExpression returns IQLPostfixExpression
	 *     IQLLogicalAndExpression.IQLLogicalAndExpression_1_0_0_0 returns IQLPostfixExpression
	 *     IQLEqualityExpression returns IQLPostfixExpression
	 *     IQLEqualityExpression.IQLEqualityExpression_1_0_0_0 returns IQLPostfixExpression
	 *     IQLRelationalExpression returns IQLPostfixExpression
	 *     IQLRelationalExpression.IQLInstanceOfExpression_1_0_0_0_0 returns IQLPostfixExpression
	 *     IQLRelationalExpression.IQLRelationalExpression_1_1_0_0_0 returns IQLPostfixExpression
	 *     IQLAdditiveExpression returns IQLPostfixExpression
	 *     IQLAdditiveExpression.IQLAdditiveExpression_1_0_0_0 returns IQLPostfixExpression
	 *     IQLMultiplicativeExpression returns IQLPostfixExpression
	 *     IQLMultiplicativeExpression.IQLMultiplicativeExpression_1_0_0_0 returns IQLPostfixExpression
	 *     IQLUnaryExpression returns IQLPostfixExpression
	 *
	 * Constraint:
	 *     (operand=IQLUnaryExpression_IQLPostfixExpression_4_1_0_0 op=OpPostfix)
	 */
	protected void sequence_IQLUnaryExpression(ISerializationContext context, IQLPostfixExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BasicIQLPackage.Literals.IQL_POSTFIX_EXPRESSION__OPERAND) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BasicIQLPackage.Literals.IQL_POSTFIX_EXPRESSION__OPERAND));
			if (transientValues.isValueTransient(semanticObject, BasicIQLPackage.Literals.IQL_POSTFIX_EXPRESSION__OP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BasicIQLPackage.Literals.IQL_POSTFIX_EXPRESSION__OP));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getIQLUnaryExpressionAccess().getIQLPostfixExpressionOperandAction_4_1_0_0(), semanticObject.getOperand());
		feeder.accept(grammarAccess.getIQLUnaryExpressionAccess().getOpOpPostfixParserRuleCall_4_1_0_1_0(), semanticObject.getOp());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     IQLExpression returns IQLPrefixExpression
	 *     IQLAssignmentExpression returns IQLPrefixExpression
	 *     IQLAssignmentExpression.IQLAssignmentExpression_1_0_0_0 returns IQLPrefixExpression
	 *     IQLLogicalOrExpression returns IQLPrefixExpression
	 *     IQLLogicalOrExpression.IQLLogicalOrExpression_1_0_0_0 returns IQLPrefixExpression
	 *     IQLLogicalAndExpression returns IQLPrefixExpression
	 *     IQLLogicalAndExpression.IQLLogicalAndExpression_1_0_0_0 returns IQLPrefixExpression
	 *     IQLEqualityExpression returns IQLPrefixExpression
	 *     IQLEqualityExpression.IQLEqualityExpression_1_0_0_0 returns IQLPrefixExpression
	 *     IQLRelationalExpression returns IQLPrefixExpression
	 *     IQLRelationalExpression.IQLInstanceOfExpression_1_0_0_0_0 returns IQLPrefixExpression
	 *     IQLRelationalExpression.IQLRelationalExpression_1_1_0_0_0 returns IQLPrefixExpression
	 *     IQLAdditiveExpression returns IQLPrefixExpression
	 *     IQLAdditiveExpression.IQLAdditiveExpression_1_0_0_0 returns IQLPrefixExpression
	 *     IQLMultiplicativeExpression returns IQLPrefixExpression
	 *     IQLMultiplicativeExpression.IQLMultiplicativeExpression_1_0_0_0 returns IQLPrefixExpression
	 *     IQLUnaryExpression returns IQLPrefixExpression
	 *
	 * Constraint:
	 *     (op=OpPrefix operand=IQLMemberCallExpression)
	 */
	protected void sequence_IQLUnaryExpression(ISerializationContext context, IQLPrefixExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BasicIQLPackage.Literals.IQL_PREFIX_EXPRESSION__OP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BasicIQLPackage.Literals.IQL_PREFIX_EXPRESSION__OP));
			if (transientValues.isValueTransient(semanticObject, BasicIQLPackage.Literals.IQL_PREFIX_EXPRESSION__OPERAND) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BasicIQLPackage.Literals.IQL_PREFIX_EXPRESSION__OPERAND));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getIQLUnaryExpressionAccess().getOpOpPrefixParserRuleCall_2_0_1_0(), semanticObject.getOp());
		feeder.accept(grammarAccess.getIQLUnaryExpressionAccess().getOperandIQLMemberCallExpressionParserRuleCall_2_1_0(), semanticObject.getOperand());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     IQLExpression returns IQLTypeCastExpression
	 *     IQLAssignmentExpression returns IQLTypeCastExpression
	 *     IQLAssignmentExpression.IQLAssignmentExpression_1_0_0_0 returns IQLTypeCastExpression
	 *     IQLLogicalOrExpression returns IQLTypeCastExpression
	 *     IQLLogicalOrExpression.IQLLogicalOrExpression_1_0_0_0 returns IQLTypeCastExpression
	 *     IQLLogicalAndExpression returns IQLTypeCastExpression
	 *     IQLLogicalAndExpression.IQLLogicalAndExpression_1_0_0_0 returns IQLTypeCastExpression
	 *     IQLEqualityExpression returns IQLTypeCastExpression
	 *     IQLEqualityExpression.IQLEqualityExpression_1_0_0_0 returns IQLTypeCastExpression
	 *     IQLRelationalExpression returns IQLTypeCastExpression
	 *     IQLRelationalExpression.IQLInstanceOfExpression_1_0_0_0_0 returns IQLTypeCastExpression
	 *     IQLRelationalExpression.IQLRelationalExpression_1_1_0_0_0 returns IQLTypeCastExpression
	 *     IQLAdditiveExpression returns IQLTypeCastExpression
	 *     IQLAdditiveExpression.IQLAdditiveExpression_1_0_0_0 returns IQLTypeCastExpression
	 *     IQLMultiplicativeExpression returns IQLTypeCastExpression
	 *     IQLMultiplicativeExpression.IQLMultiplicativeExpression_1_0_0_0 returns IQLTypeCastExpression
	 *     IQLUnaryExpression returns IQLTypeCastExpression
	 *
	 * Constraint:
	 *     (targetRef=JvmTypeReference operand=IQLMemberCallExpression)
	 */
	protected void sequence_IQLUnaryExpression(ISerializationContext context, IQLTypeCastExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BasicIQLPackage.Literals.IQL_TYPE_CAST_EXPRESSION__TARGET_REF) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BasicIQLPackage.Literals.IQL_TYPE_CAST_EXPRESSION__TARGET_REF));
			if (transientValues.isValueTransient(semanticObject, BasicIQLPackage.Literals.IQL_TYPE_CAST_EXPRESSION__OPERAND) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BasicIQLPackage.Literals.IQL_TYPE_CAST_EXPRESSION__OPERAND));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getIQLUnaryExpressionAccess().getTargetRefJvmTypeReferenceParserRuleCall_3_0_0_2_0(), semanticObject.getTargetRef());
		feeder.accept(grammarAccess.getIQLUnaryExpressionAccess().getOperandIQLMemberCallExpressionParserRuleCall_3_1_0(), semanticObject.getOperand());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     IQLVariableDeclaration returns IQLVariableDeclaration
	 *
	 * Constraint:
	 *     (ref=JvmTypeReference name=ID)
	 */
	protected void sequence_IQLVariableDeclaration(ISerializationContext context, IQLVariableDeclaration semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BasicIQLPackage.Literals.IQL_VARIABLE_DECLARATION__REF) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BasicIQLPackage.Literals.IQL_VARIABLE_DECLARATION__REF));
			if (transientValues.isValueTransient(semanticObject, BasicIQLPackage.Literals.IQL_VARIABLE_DECLARATION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BasicIQLPackage.Literals.IQL_VARIABLE_DECLARATION__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getIQLVariableDeclarationAccess().getRefJvmTypeReferenceParserRuleCall_1_0(), semanticObject.getRef());
		feeder.accept(grammarAccess.getIQLVariableDeclarationAccess().getNameIDTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     IQLVariableInitialization returns IQLVariableInitialization
	 *
	 * Constraint:
	 *     ((argsList=IQLArgumentsList argsMap=IQLArgumentsMap?) | argsMap=IQLArgumentsMap | value=IQLExpression)
	 */
	protected void sequence_IQLVariableInitialization(ISerializationContext context, IQLVariableInitialization semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     IQLStatement returns IQLVariableStatement
	 *     IQLVariableStatement returns IQLVariableStatement
	 *
	 * Constraint:
	 *     (var=IQLVariableDeclaration init=IQLVariableInitialization)
	 */
	protected void sequence_IQLVariableStatement(ISerializationContext context, IQLVariableStatement semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BasicIQLPackage.Literals.IQL_VARIABLE_STATEMENT__VAR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BasicIQLPackage.Literals.IQL_VARIABLE_STATEMENT__VAR));
			if (transientValues.isValueTransient(semanticObject, BasicIQLPackage.Literals.IQL_VARIABLE_STATEMENT__INIT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BasicIQLPackage.Literals.IQL_VARIABLE_STATEMENT__INIT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getIQLVariableStatementAccess().getVarIQLVariableDeclarationParserRuleCall_1_0(), semanticObject.getVar());
		feeder.accept(grammarAccess.getIQLVariableStatementAccess().getInitIQLVariableInitializationParserRuleCall_2_0(), semanticObject.getInit());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     IQLStatement returns IQLWhileStatement
	 *     IQLWhileStatement returns IQLWhileStatement
	 *
	 * Constraint:
	 *     (predicate=IQLExpression body=IQLStatement)
	 */
	protected void sequence_IQLWhileStatement(ISerializationContext context, IQLWhileStatement semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BasicIQLPackage.Literals.IQL_WHILE_STATEMENT__PREDICATE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BasicIQLPackage.Literals.IQL_WHILE_STATEMENT__PREDICATE));
			if (transientValues.isValueTransient(semanticObject, BasicIQLPackage.Literals.IQL_WHILE_STATEMENT__BODY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BasicIQLPackage.Literals.IQL_WHILE_STATEMENT__BODY));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getIQLWhileStatementAccess().getPredicateIQLExpressionParserRuleCall_3_0(), semanticObject.getPredicate());
		feeder.accept(grammarAccess.getIQLWhileStatementAccess().getBodyIQLStatementParserRuleCall_5_0(), semanticObject.getBody());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     JvmFormalParameter returns JvmFormalParameter
	 *
	 * Constraint:
	 *     (parameterType=JvmTypeReference name=ID)
	 */
	protected void sequence_JvmFormalParameter(ISerializationContext context, JvmFormalParameter semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TypesPackage.Literals.JVM_FORMAL_PARAMETER__PARAMETER_TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TypesPackage.Literals.JVM_FORMAL_PARAMETER__PARAMETER_TYPE));
			if (transientValues.isValueTransient(semanticObject, TypesPackage.Literals.JVM_FORMAL_PARAMETER__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TypesPackage.Literals.JVM_FORMAL_PARAMETER__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getJvmFormalParameterAccess().getParameterTypeJvmTypeReferenceParserRuleCall_0_0(), semanticObject.getParameterType());
		feeder.accept(grammarAccess.getJvmFormalParameterAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
}
