module de.uniol.inf.is.odysseus.iql.basic.GenerateBasicIQL

import org.eclipse.emf.mwe.utils.*
import org.eclipse.xtext.generator.*
import org.eclipse.xtext.ui.generator.*

var grammarURI = "classpath:/de/uniol/inf/is/odysseus/iql/basic/BasicIQL.xtext"
var fileExtensions = "basiciql"
var projectName = "de.uniol.inf.is.odysseus.incubation.iql.basic"//var generateXtendStub = false
var encoding = "UTF-8"

Workflow {
	bean = StandaloneSetup {
		scanClassPath = true
		platformUri = "../${projectName}/.."
		registerGenModelFile = "platform:/resource/org.eclipse.xtext.common.types/model/JavaVMTypes.genmodel"
	}

	//    component = DirectoryCleaner {
	//    	directory = "${runtimeProject}/src-gen"
	//    }
	//    
	//    component = DirectoryCleaner {
	//    	directory = "${runtimeProject}/model/generated"
	//    }
	//    
	//    component = DirectoryCleaner {
	//    	directory = "${runtimeProject}.ui/src-gen"
	//    }
	//    
	//    component = DirectoryCleaner {
	//    	//directory = "${runtimeProject}.tests/src-gen"
	//    }
	//    
	component = org.eclipse.xtext.xtext.generator.XtextGenerator {
		configuration = {
			project = org.eclipse.xtext.xtext.generator.model.project.StandardProjectConfig {
				baseName = projectName
				rootPath = "../"
				eclipsePlugin = {
					name = "${projectName}.ui"
					root = "../${projectName}.ui"
					enabled = true
				}
				genericIde = {
					name = "${projectName}.ide"
					root = "../${projectName}.ide"
					enabled = true
				}
			}
			code = {
				encoding = encoding
				fileHeader = "/*\n * generated by Xtext \${version}\n */"
			}
		}
		language = org.eclipse.xtext.xtext.generator.StandardLanguage {
			grammarUri = grammarURI
			fileExtensions = fileExtensions

			// Java API to access grammar elements (required by several other fragments)
			fragment = org.eclipse.xtext.xtext.generator.grammarAccess.GrammarAccessFragment2 auto-inject {}
			// generates Java API for the generated EPackages
			fragment = org.eclipse.xtext.xtext.generator.ecore.EMFGeneratorFragment2 auto-inject {}

			// Xtend-based API for validation
			//			fragment = org.eclipse.xtext.xtext.generator.validation.ValidatorFragment2 auto-inject {
			//    composedCheck = "org.eclipse.xtext.validation.ImportUriValidator"
			//    composedCheck = "org.eclipse.xtext.validation.NamesAreUniqueValidator"
			//			}
			// old scoping and exporting API
			//			 fragment = ImportURIScopingFragment auto-inject {}
			//			 fragment = org.eclipse.xtext.xtext.generator.exporting.SimpleNamesFragment2 auto-inject {}
			// scoping and exporting API
			//			fragment = org.eclipse.xtext.xtext.generator.scoping.ImportNamespacesScopingFragment2 auto-inject {}
			fragment = org.eclipse.xtext.xtext.generator.exporting.QualifiedNamesFragment2 auto-inject {}
			fragment = org.eclipse.xtext.xtext.generator.builder.BuilderIntegrationFragment2 auto-inject {}
			// generator API
			//			fragment = org.eclipse.xtext.xtext.generator.generator.GeneratorFragment2 auto-inject {}
			// formatter API
			//			fragment = org.eclipse.xtext.xtext.generator.formatting.Formatter2Fragment2 auto-inject {}
			// labeling API
			//			fragment = org.eclipse.xtext.xtext.generator.ui.labeling.LabelProviderFragment2 auto-inject {}
			// outline API
			//			fragment = org.eclipse.xtext.xtext.generator.ui.outline.OutlineTreeProviderFragment2 auto-inject {}
			fragment = org.eclipse.xtext.xtext.generator.ui.outline.QuickOutlineFragment2 auto-inject {}
			// quickfix API
			//			fragment = org.eclipse.xtext.xtext.generator.ui.quickfix.QuickfixProviderFragment2 auto-inject {}
			// content assist API
			//			fragment = org.eclipse.xtext.xtext.generator.ui.contentAssist.ContentAssistFragment2 auto-inject {}
			// generates a more lightweight Antlr parser and lexer tailored for content assist
			//			fragment = XtextAntlrUiGeneratorFragment auto-inject {}
			// generates junit test support classes into Generator#pathTestProject
			//			fragment = org.eclipse.xtext.xtext.generator.junit.Junit4Fragment2 auto-inject {}
			// rename refactoring
			fragment = org.eclipse.xtext.xtext.generator.ui.refactoring.RefactorElementNameFragment2 auto-inject {}
			// provides the necessary bindings for java types integration
			fragment = org.eclipse.xtext.xtext.generator.types.TypesGeneratorFragment2 auto-inject {}
			// generates the required bindings only if the grammar inherits from Xbase
			fragment = org.eclipse.xtext.xtext.generator.xbase.XbaseGeneratorFragment2 auto-inject {}
			// generates the required bindings only if the grammar inherits from Xtype
			fragment = org.eclipse.xtext.xtext.generator.xbase.XtypeGeneratorFragment2 auto-inject {}
			// provides a preference page for template proposals
			//			fragment = org.eclipse.xtext.xtext.generator.ui.templates.CodetemplatesGeneratorFragment2 auto-inject {}
			// provides a compare view
			fragment = org.eclipse.xtext.xtext.generator.ui.compare.CompareFragment2 auto-inject {}

		}
	}

	//    component = Generator {
	//    	pathRtProject = runtimeProject
	//    	pathUiProject = "${runtimeProject}.ui"
	//    	//pathTestProject = "${runtimeProject}.tests"
	//    	projectNameRt = projectName
	//    	projectNameUi = "${projectName}.ui"
	//    	encoding = encoding
	//    	language = auto-inject {
	//    		uri = grammarURI
	//    
	//    		// Java API to access grammar elements (required by several other fragments)
	//    		fragment = grammarAccess.GrammarAccessFragment auto-inject {}
	//    
	//    		// generates Java API for the generated EPackages
	//    		fragment = ecore.EMFGeneratorFragment auto-inject {}
	//    
	//    		// the old serialization component
	//    		// fragment = parseTreeConstructor.ParseTreeConstructorFragment auto-inject {}    
	//    
	//    		// serializer 2.0
	//    		fragment = serializer.SerializerFragment auto-inject {
	//    			generateStub = false
	//    		}
	//    
	//    		// a custom ResourceFactory for use with EMF
	//    		fragment = resourceFactory.ResourceFactoryFragment auto-inject {}
	//    
	//    		// The antlr parser generator fragment.
	//    		fragment = parser.antlr.XtextAntlrGeneratorFragment auto-inject {
	//    		//  options = {
	//    		//      backtrack = true
	//    		//  }
	//    		}
	//    
	//    		// Xtend-based API for validation
	//    		fragment = validation.ValidatorFragment auto-inject {
	//    		//    composedCheck = "org.eclipse.xtext.validation.ImportUriValidator"
	//    		//    composedCheck = "org.eclipse.xtext.validation.NamesAreUniqueValidator"
	//    		}
	//    
	//    		// old scoping and exporting API
	//    		// fragment = scoping.ImportURIScopingFragment auto-inject {}
	//    		// fragment = exporting.SimpleNamesFragment auto-inject {}
	//    
	//    		// scoping and exporting API
	//    		fragment = scoping.ImportNamespacesScopingFragment auto-inject {}
	//    		fragment = exporting.QualifiedNamesFragment auto-inject {}
	//    		fragment = builder.BuilderIntegrationFragment auto-inject {}
	//    
	//    		// generator API
	//    		fragment = generator.GeneratorFragment auto-inject {
	//    			generateStub = false
	//    		}
	//    
	//    		// formatter API
	//    		fragment = formatting.FormatterFragment auto-inject {}
	//    
	//    		// labeling API
	//    		fragment = labeling.LabelProviderFragment auto-inject {}
	//    
	//    		// outline API
	//    		fragment = outline.OutlineTreeProviderFragment auto-inject {}
	//    		fragment = outline.QuickOutlineFragment auto-inject {}
	//    
	//    		// quickfix API
	//    		fragment = quickfix.QuickfixProviderFragment auto-inject {}
	//    
	//    		// content assist API
	//    		fragment = contentAssist.ContentAssistFragment auto-inject {
	//    			generateStub = false
	//    		}
	//    
	//    		// generates a more lightweight Antlr parser and lexer tailored for content assist
	//    		fragment = parser.antlr.XtextAntlrUiGeneratorFragment auto-inject {}
	//    
	//    		// generates junit test support classes into Generator#pathTestProject
	//    		fragment = junit.Junit4Fragment auto-inject {}
	//    
	//    		// rename refactoring
	//    		fragment = refactoring.RefactorElementNameFragment auto-inject {}
	//    
	//    		// provides the necessary bindings for java types integration
	//    		fragment = types.TypesGeneratorFragment auto-inject {}
	//    
	//    		// generates the required bindings only if the grammar inherits from Xbase
	//    		fragment = xbase.XbaseGeneratorFragment auto-inject {}
	//    		
	//    		// generates the required bindings only if the grammar inherits from Xtype
	//    		fragment = xbase.XtypeGeneratorFragment auto-inject {}
	//    
	//    		// provides a preference page for template proposals
	//    		fragment = templates.CodetemplatesGeneratorFragment auto-inject {}
	//    
	//    		// provides a compare view
	//    		fragment = compare.CompareFragment auto-inject {}
	//    	}
	//    }
}

