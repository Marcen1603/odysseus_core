/*
 * generated by Xtext 2.12.0
 */
package de.uniol.inf.is.odysseus.iql.odl.scoping

import de.uniol.inf.is.odysseus.iql.basic.basicIQL.IQLAttribute
import de.uniol.inf.is.odysseus.iql.basic.basicIQL.IQLMemberSelectionExpression
import de.uniol.inf.is.odysseus.iql.basic.basicIQL.IQLMethod
import de.uniol.inf.is.odysseus.iql.basic.scoping.AbstractIQLScopeProvider
import de.uniol.inf.is.odysseus.iql.basic.scoping.IIQLJdtTypeProvider
import de.uniol.inf.is.odysseus.iql.odl.exprevaluator.IODLExpressionEvaluator
import de.uniol.inf.is.odysseus.iql.odl.lookup.IODLLookUp
import de.uniol.inf.is.odysseus.iql.odl.oDL.ODLMethod
import de.uniol.inf.is.odysseus.iql.odl.oDL.ODLOperator
import de.uniol.inf.is.odysseus.iql.odl.typing.dictionary.IODLTypeDictionary
import de.uniol.inf.is.odysseus.iql.odl.typing.eventmethods.EventMethodsFactory
import de.uniol.inf.is.odysseus.iql.odl.typing.utils.IODLTypeUtils
import java.util.Collection
import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.resource.ResourceSet
import org.eclipse.xtext.EcoreUtil2
import org.eclipse.xtext.common.types.JvmField
import org.eclipse.xtext.common.types.JvmIdentifiableElement
import org.eclipse.xtext.common.types.JvmOperation
import org.eclipse.xtext.common.types.JvmTypeReference
import org.eclipse.xtext.scoping.IScope

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
class ODLScopeProvider extends AbstractIQLScopeProvider<IODLTypeDictionary, IODLLookUp, IODLExpressionEvaluator, IODLTypeUtils> implements IODLScopeProvider {

	new(IODLTypeDictionary typeDictionary, IODLLookUp lookUp, IODLExpressionEvaluator exprEvaluator, IODLTypeUtils typeUtils) {
		super(typeDictionary, lookUp, exprEvaluator, typeUtils)
	}
	
//	@Inject 
//	def void ODLScopeProvider(IODLTypeDictionary typeDictionary, IODLLookUp lookUp, IODLExpressionEvaluator exprEvaluator, IODLTypeUtils typeUtils) {
//		super(typeDictionary, lookUp, exprEvaluator, typeUtils)
//	}

	override protected Collection<JvmField> getIQLMemberSelectionAttributes(IQLMemberSelectionExpression expr, JvmTypeReference typeRef, boolean isThis, boolean isSuper) {
		var Collection<JvmField> attributes = super.getIQLMemberSelectionAttributes(expr, typeRef, isThis, isSuper)
		var ODLOperator operator = EcoreUtil2.getContainerOfType(expr, ODLOperator)
		if (isThis && operator !== null) {
			attributes.addAll(EcoreUtil2.getAllContentsOfType(operator, IQLAttribute))
		}
		return attributes
	}

	override protected Collection<JvmOperation> getIQLMemberSelectionMethods(IQLMemberSelectionExpression expr,
		JvmTypeReference typeRef, boolean isThis, boolean isSuper) {
		var Collection<JvmOperation> methods = super.getIQLMemberSelectionMethods(expr, typeRef, isThis, isSuper)
		var ODLOperator operator = EcoreUtil2.getContainerOfType(expr, ODLOperator)
		if (isThis && operator !== null) {
			for (IQLMethod method : EcoreUtil2.getAllContentsOfType(operator, IQLMethod)) {
				if (method.getSimpleName() !== null) {
					/* FIXME Unsupported continue statement */ 
//					continue;
				}
				if (isAOContext(expr) && isAOContext(method)) {
					methods.add(method)
				} else if (isPOContext(expr) && isPOContext(method)) {
					methods.add(method)
				} else if (!isAOContext(method) && !isPOContext(method)) {
					methods.add(method)
				}
			}
		}
		return methods
	}

	override protected Collection<JvmIdentifiableElement> getAttributesIQLJvmElementCallExpression(EObject node,
		JvmTypeReference thisType, Collection<JvmTypeReference> importedTypes) {
		var Collection<JvmIdentifiableElement> elements = super.
			getAttributesIQLJvmElementCallExpression(node, thisType, importedTypes)
		var ODLOperator operator = EcoreUtil2.getContainerOfType(node, ODLOperator)
		if (node instanceof ODLOperator || operator !== null) {
			elements.addAll(EcoreUtil2.getAllContentsOfType(operator, IQLAttribute))
		}
		return elements
	}

	override protected Collection<JvmIdentifiableElement> getMethodsIQLJvmElementCallExpression(EObject node,
		JvmTypeReference thisType, Collection<JvmTypeReference> importedTypes) {
		var Collection<JvmIdentifiableElement> elements = super.
			getMethodsIQLJvmElementCallExpression(node, thisType, importedTypes)
		var ODLOperator operator = EcoreUtil2.getContainerOfType(node, ODLOperator)
		if (node instanceof ODLOperator || operator !== null) {
			for (IQLMethod method : EcoreUtil2.getAllContentsOfType(operator, IQLMethod)) {
				if (method.getSimpleName() !== null) {
					/* FIXME Unsupported continue statement */ 
//					continue;
				}
				if (isAOContext(node) && isAOContext(method)) {
					elements.add(method)
				} else if (isPOContext(node) && isPOContext(method)) {
					elements.add(method)
				} else if (!isAOContext(method) && !isPOContext(method)) {
					elements.add(method)
				}
			}
		}
		return elements
	}

	def private boolean isAOContext(EObject node) {
		var ODLMethod method = null
		if (node instanceof ODLMethod) {
			method = node as ODLMethod
		} else {
			method = EcoreUtil2.getContainerOfType(node, ODLMethod)
		}
		if (method !== null) {
			if (method.isAo() || method.isValidate()) {
				return true
			} else if (method.isOn() &&
				EventMethodsFactory.getInstance().hasEventMethod(true, method.getSimpleName(),
					method.getParameters())) {
					return true
				}
			}
			return false
		}

		def private boolean isPOContext(EObject node) {
			var ODLMethod method = null
			if (node instanceof ODLMethod) {
				method = node as ODLMethod
			} else {
				method = EcoreUtil2.getContainerOfType(node, ODLMethod)
			}
			if (method !== null) {
				if (method.isPo()) {
					return true
				} else if (method.isOn() &&
					EventMethodsFactory.getInstance().hasEventMethod(false, method.getSimpleName(),
						method.getParameters())) {
					return true
				}
			}
			return false
		}
		
		override protected IScope getJdtScope(ResourceSet set, IIQLJdtTypeProvider typeProvider) {
		return IScope.NULLSCOPE
	}
}