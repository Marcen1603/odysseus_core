/*
 * generated by Xtext 2.12.0
 */
package de.uniol.inf.is.odysseus.iql.odl.serializer;

import com.google.inject.Inject;
import de.uniol.inf.is.odysseus.iql.basic.basicIQL.BasicIQLPackage;
import de.uniol.inf.is.odysseus.iql.basic.basicIQL.IQLAdditiveExpression;
import de.uniol.inf.is.odysseus.iql.basic.basicIQL.IQLArgumentsList;
import de.uniol.inf.is.odysseus.iql.basic.basicIQL.IQLArgumentsMap;
import de.uniol.inf.is.odysseus.iql.basic.basicIQL.IQLArgumentsMapKeyValue;
import de.uniol.inf.is.odysseus.iql.basic.basicIQL.IQLArrayExpression;
import de.uniol.inf.is.odysseus.iql.basic.basicIQL.IQLArrayType;
import de.uniol.inf.is.odysseus.iql.basic.basicIQL.IQLArrayTypeRef;
import de.uniol.inf.is.odysseus.iql.basic.basicIQL.IQLAssignmentExpression;
import de.uniol.inf.is.odysseus.iql.basic.basicIQL.IQLAttribute;
import de.uniol.inf.is.odysseus.iql.basic.basicIQL.IQLBooleanNotExpression;
import de.uniol.inf.is.odysseus.iql.basic.basicIQL.IQLBreakStatement;
import de.uniol.inf.is.odysseus.iql.basic.basicIQL.IQLCasePart;
import de.uniol.inf.is.odysseus.iql.basic.basicIQL.IQLClass;
import de.uniol.inf.is.odysseus.iql.basic.basicIQL.IQLConstructorCallStatement;
import de.uniol.inf.is.odysseus.iql.basic.basicIQL.IQLContinueStatement;
import de.uniol.inf.is.odysseus.iql.basic.basicIQL.IQLDoWhileStatement;
import de.uniol.inf.is.odysseus.iql.basic.basicIQL.IQLEqualityExpression;
import de.uniol.inf.is.odysseus.iql.basic.basicIQL.IQLExpressionStatement;
import de.uniol.inf.is.odysseus.iql.basic.basicIQL.IQLForEachStatement;
import de.uniol.inf.is.odysseus.iql.basic.basicIQL.IQLForStatement;
import de.uniol.inf.is.odysseus.iql.basic.basicIQL.IQLIfStatement;
import de.uniol.inf.is.odysseus.iql.basic.basicIQL.IQLInstanceOfExpression;
import de.uniol.inf.is.odysseus.iql.basic.basicIQL.IQLInterface;
import de.uniol.inf.is.odysseus.iql.basic.basicIQL.IQLJava;
import de.uniol.inf.is.odysseus.iql.basic.basicIQL.IQLJavaMember;
import de.uniol.inf.is.odysseus.iql.basic.basicIQL.IQLJavaMetadata;
import de.uniol.inf.is.odysseus.iql.basic.basicIQL.IQLJavaStatement;
import de.uniol.inf.is.odysseus.iql.basic.basicIQL.IQLJvmElementCallExpression;
import de.uniol.inf.is.odysseus.iql.basic.basicIQL.IQLLiteralExpressionBoolean;
import de.uniol.inf.is.odysseus.iql.basic.basicIQL.IQLLiteralExpressionDouble;
import de.uniol.inf.is.odysseus.iql.basic.basicIQL.IQLLiteralExpressionInt;
import de.uniol.inf.is.odysseus.iql.basic.basicIQL.IQLLiteralExpressionList;
import de.uniol.inf.is.odysseus.iql.basic.basicIQL.IQLLiteralExpressionMap;
import de.uniol.inf.is.odysseus.iql.basic.basicIQL.IQLLiteralExpressionMapKeyValue;
import de.uniol.inf.is.odysseus.iql.basic.basicIQL.IQLLiteralExpressionNull;
import de.uniol.inf.is.odysseus.iql.basic.basicIQL.IQLLiteralExpressionRange;
import de.uniol.inf.is.odysseus.iql.basic.basicIQL.IQLLiteralExpressionString;
import de.uniol.inf.is.odysseus.iql.basic.basicIQL.IQLLiteralExpressionType;
import de.uniol.inf.is.odysseus.iql.basic.basicIQL.IQLLogicalAndExpression;
import de.uniol.inf.is.odysseus.iql.basic.basicIQL.IQLLogicalOrExpression;
import de.uniol.inf.is.odysseus.iql.basic.basicIQL.IQLMemberSelection;
import de.uniol.inf.is.odysseus.iql.basic.basicIQL.IQLMemberSelectionExpression;
import de.uniol.inf.is.odysseus.iql.basic.basicIQL.IQLMetadata;
import de.uniol.inf.is.odysseus.iql.basic.basicIQL.IQLMetadataList;
import de.uniol.inf.is.odysseus.iql.basic.basicIQL.IQLMetadataValueList;
import de.uniol.inf.is.odysseus.iql.basic.basicIQL.IQLMetadataValueMap;
import de.uniol.inf.is.odysseus.iql.basic.basicIQL.IQLMetadataValueMapElement;
import de.uniol.inf.is.odysseus.iql.basic.basicIQL.IQLMetadataValueSingleBoolean;
import de.uniol.inf.is.odysseus.iql.basic.basicIQL.IQLMetadataValueSingleDouble;
import de.uniol.inf.is.odysseus.iql.basic.basicIQL.IQLMetadataValueSingleInt;
import de.uniol.inf.is.odysseus.iql.basic.basicIQL.IQLMetadataValueSingleNull;
import de.uniol.inf.is.odysseus.iql.basic.basicIQL.IQLMetadataValueSingleString;
import de.uniol.inf.is.odysseus.iql.basic.basicIQL.IQLMetadataValueSingleTypeRef;
import de.uniol.inf.is.odysseus.iql.basic.basicIQL.IQLMethod;
import de.uniol.inf.is.odysseus.iql.basic.basicIQL.IQLMethodDeclaration;
import de.uniol.inf.is.odysseus.iql.basic.basicIQL.IQLModel;
import de.uniol.inf.is.odysseus.iql.basic.basicIQL.IQLModelElement;
import de.uniol.inf.is.odysseus.iql.basic.basicIQL.IQLMultiplicativeExpression;
import de.uniol.inf.is.odysseus.iql.basic.basicIQL.IQLNamespace;
import de.uniol.inf.is.odysseus.iql.basic.basicIQL.IQLNewExpression;
import de.uniol.inf.is.odysseus.iql.basic.basicIQL.IQLParenthesisExpression;
import de.uniol.inf.is.odysseus.iql.basic.basicIQL.IQLPlusMinusExpression;
import de.uniol.inf.is.odysseus.iql.basic.basicIQL.IQLPostfixExpression;
import de.uniol.inf.is.odysseus.iql.basic.basicIQL.IQLPrefixExpression;
import de.uniol.inf.is.odysseus.iql.basic.basicIQL.IQLRelationalExpression;
import de.uniol.inf.is.odysseus.iql.basic.basicIQL.IQLReturnStatement;
import de.uniol.inf.is.odysseus.iql.basic.basicIQL.IQLSimpleTypeRef;
import de.uniol.inf.is.odysseus.iql.basic.basicIQL.IQLStatementBlock;
import de.uniol.inf.is.odysseus.iql.basic.basicIQL.IQLSuperExpression;
import de.uniol.inf.is.odysseus.iql.basic.basicIQL.IQLSwitchStatement;
import de.uniol.inf.is.odysseus.iql.basic.basicIQL.IQLThisExpression;
import de.uniol.inf.is.odysseus.iql.basic.basicIQL.IQLTypeCastExpression;
import de.uniol.inf.is.odysseus.iql.basic.basicIQL.IQLVariableDeclaration;
import de.uniol.inf.is.odysseus.iql.basic.basicIQL.IQLVariableInitialization;
import de.uniol.inf.is.odysseus.iql.basic.basicIQL.IQLVariableStatement;
import de.uniol.inf.is.odysseus.iql.basic.basicIQL.IQLWhileStatement;
import de.uniol.inf.is.odysseus.iql.basic.serializer.BasicIQLSemanticSequencer;
import de.uniol.inf.is.odysseus.iql.odl.oDL.ODLMethod;
import de.uniol.inf.is.odysseus.iql.odl.oDL.ODLOperator;
import de.uniol.inf.is.odysseus.iql.odl.oDL.ODLPackage;
import de.uniol.inf.is.odysseus.iql.odl.oDL.ODLParameter;
import de.uniol.inf.is.odysseus.iql.odl.services.ODLGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.common.types.JvmFormalParameter;
import org.eclipse.xtext.common.types.TypesPackage;
import org.eclipse.xtext.serializer.ISerializationContext;

@SuppressWarnings("all")
public abstract class AbstractODLSemanticSequencer extends BasicIQLSemanticSequencer {

	@Inject
	private ODLGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == BasicIQLPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case BasicIQLPackage.IQL_ADDITIVE_EXPRESSION:
				sequence_IQLAdditiveExpression(context, (IQLAdditiveExpression) semanticObject); 
				return; 
			case BasicIQLPackage.IQL_ARGUMENTS_LIST:
				sequence_IQLArgumentsList(context, (IQLArgumentsList) semanticObject); 
				return; 
			case BasicIQLPackage.IQL_ARGUMENTS_MAP:
				sequence_IQLArgumentsMap(context, (IQLArgumentsMap) semanticObject); 
				return; 
			case BasicIQLPackage.IQL_ARGUMENTS_MAP_KEY_VALUE:
				sequence_IQLArgumentsMapKeyValue(context, (IQLArgumentsMapKeyValue) semanticObject); 
				return; 
			case BasicIQLPackage.IQL_ARRAY_EXPRESSION:
				sequence_IQLMemberCallExpression(context, (IQLArrayExpression) semanticObject); 
				return; 
			case BasicIQLPackage.IQL_ARRAY_TYPE:
				sequence_IQLArrayType(context, (IQLArrayType) semanticObject); 
				return; 
			case BasicIQLPackage.IQL_ARRAY_TYPE_REF:
				sequence_IQLArrayTypeRef(context, (IQLArrayTypeRef) semanticObject); 
				return; 
			case BasicIQLPackage.IQL_ASSIGNMENT_EXPRESSION:
				sequence_IQLAssignmentExpression(context, (IQLAssignmentExpression) semanticObject); 
				return; 
			case BasicIQLPackage.IQL_ATTRIBUTE:
				sequence_IQLAttribute(context, (IQLAttribute) semanticObject); 
				return; 
			case BasicIQLPackage.IQL_BOOLEAN_NOT_EXPRESSION:
				sequence_IQLUnaryExpression(context, (IQLBooleanNotExpression) semanticObject); 
				return; 
			case BasicIQLPackage.IQL_BREAK_STATEMENT:
				sequence_IQLBreakStatement(context, (IQLBreakStatement) semanticObject); 
				return; 
			case BasicIQLPackage.IQL_CASE_PART:
				sequence_IQLCasePart(context, (IQLCasePart) semanticObject); 
				return; 
			case BasicIQLPackage.IQL_CLASS:
				sequence_IQLClass(context, (IQLClass) semanticObject); 
				return; 
			case BasicIQLPackage.IQL_CONSTRUCTOR_CALL_STATEMENT:
				sequence_IQLConstructorCallStatement(context, (IQLConstructorCallStatement) semanticObject); 
				return; 
			case BasicIQLPackage.IQL_CONTINUE_STATEMENT:
				sequence_IQLContinueStatement(context, (IQLContinueStatement) semanticObject); 
				return; 
			case BasicIQLPackage.IQL_DO_WHILE_STATEMENT:
				sequence_IQLDoWhileStatement(context, (IQLDoWhileStatement) semanticObject); 
				return; 
			case BasicIQLPackage.IQL_EQUALITY_EXPRESSION:
				sequence_IQLEqualityExpression(context, (IQLEqualityExpression) semanticObject); 
				return; 
			case BasicIQLPackage.IQL_EXPRESSION_STATEMENT:
				sequence_IQLExpressionStatement(context, (IQLExpressionStatement) semanticObject); 
				return; 
			case BasicIQLPackage.IQL_FOR_EACH_STATEMENT:
				sequence_IQLForEachStatement(context, (IQLForEachStatement) semanticObject); 
				return; 
			case BasicIQLPackage.IQL_FOR_STATEMENT:
				sequence_IQLForStatement(context, (IQLForStatement) semanticObject); 
				return; 
			case BasicIQLPackage.IQL_IF_STATEMENT:
				sequence_IQLIfStatement(context, (IQLIfStatement) semanticObject); 
				return; 
			case BasicIQLPackage.IQL_INSTANCE_OF_EXPRESSION:
				sequence_IQLRelationalExpression(context, (IQLInstanceOfExpression) semanticObject); 
				return; 
			case BasicIQLPackage.IQL_INTERFACE:
				sequence_IQLInterface(context, (IQLInterface) semanticObject); 
				return; 
			case BasicIQLPackage.IQL_JAVA:
				sequence_IQLJava(context, (IQLJava) semanticObject); 
				return; 
			case BasicIQLPackage.IQL_JAVA_MEMBER:
				sequence_IQLJavaMember(context, (IQLJavaMember) semanticObject); 
				return; 
			case BasicIQLPackage.IQL_JAVA_METADATA:
				sequence_IQLJavaMetadata(context, (IQLJavaMetadata) semanticObject); 
				return; 
			case BasicIQLPackage.IQL_JAVA_STATEMENT:
				sequence_IQLJavaStatement(context, (IQLJavaStatement) semanticObject); 
				return; 
			case BasicIQLPackage.IQL_JVM_ELEMENT_CALL_EXPRESSION:
				sequence_IQLOtherExpressions(context, (IQLJvmElementCallExpression) semanticObject); 
				return; 
			case BasicIQLPackage.IQL_LITERAL_EXPRESSION_BOOLEAN:
				sequence_IQLLiteralExpression(context, (IQLLiteralExpressionBoolean) semanticObject); 
				return; 
			case BasicIQLPackage.IQL_LITERAL_EXPRESSION_DOUBLE:
				sequence_IQLLiteralExpression(context, (IQLLiteralExpressionDouble) semanticObject); 
				return; 
			case BasicIQLPackage.IQL_LITERAL_EXPRESSION_INT:
				sequence_IQLLiteralExpression(context, (IQLLiteralExpressionInt) semanticObject); 
				return; 
			case BasicIQLPackage.IQL_LITERAL_EXPRESSION_LIST:
				sequence_IQLLiteralExpressionList(context, (IQLLiteralExpressionList) semanticObject); 
				return; 
			case BasicIQLPackage.IQL_LITERAL_EXPRESSION_MAP:
				sequence_IQLLiteralExpressionMap(context, (IQLLiteralExpressionMap) semanticObject); 
				return; 
			case BasicIQLPackage.IQL_LITERAL_EXPRESSION_MAP_KEY_VALUE:
				sequence_IQLLiteralExpressionMapKeyValue(context, (IQLLiteralExpressionMapKeyValue) semanticObject); 
				return; 
			case BasicIQLPackage.IQL_LITERAL_EXPRESSION_NULL:
				sequence_IQLLiteralExpression(context, (IQLLiteralExpressionNull) semanticObject); 
				return; 
			case BasicIQLPackage.IQL_LITERAL_EXPRESSION_RANGE:
				sequence_IQLLiteralExpression(context, (IQLLiteralExpressionRange) semanticObject); 
				return; 
			case BasicIQLPackage.IQL_LITERAL_EXPRESSION_STRING:
				sequence_IQLLiteralExpression(context, (IQLLiteralExpressionString) semanticObject); 
				return; 
			case BasicIQLPackage.IQL_LITERAL_EXPRESSION_TYPE:
				sequence_IQLLiteralExpression(context, (IQLLiteralExpressionType) semanticObject); 
				return; 
			case BasicIQLPackage.IQL_LOGICAL_AND_EXPRESSION:
				sequence_IQLLogicalAndExpression(context, (IQLLogicalAndExpression) semanticObject); 
				return; 
			case BasicIQLPackage.IQL_LOGICAL_OR_EXPRESSION:
				sequence_IQLLogicalOrExpression(context, (IQLLogicalOrExpression) semanticObject); 
				return; 
			case BasicIQLPackage.IQL_MEMBER_SELECTION:
				sequence_IQLMemberSelection(context, (IQLMemberSelection) semanticObject); 
				return; 
			case BasicIQLPackage.IQL_MEMBER_SELECTION_EXPRESSION:
				sequence_IQLMemberCallExpression(context, (IQLMemberSelectionExpression) semanticObject); 
				return; 
			case BasicIQLPackage.IQL_METADATA:
				sequence_IQLMetadata(context, (IQLMetadata) semanticObject); 
				return; 
			case BasicIQLPackage.IQL_METADATA_LIST:
				sequence_IQLMetadataList(context, (IQLMetadataList) semanticObject); 
				return; 
			case BasicIQLPackage.IQL_METADATA_VALUE_LIST:
				sequence_IQLMetadataValueList(context, (IQLMetadataValueList) semanticObject); 
				return; 
			case BasicIQLPackage.IQL_METADATA_VALUE_MAP:
				sequence_IQLMetadataValueMap(context, (IQLMetadataValueMap) semanticObject); 
				return; 
			case BasicIQLPackage.IQL_METADATA_VALUE_MAP_ELEMENT:
				sequence_IQLMetadataValueMapElement(context, (IQLMetadataValueMapElement) semanticObject); 
				return; 
			case BasicIQLPackage.IQL_METADATA_VALUE_SINGLE_BOOLEAN:
				sequence_IQLMetadataValueSingle(context, (IQLMetadataValueSingleBoolean) semanticObject); 
				return; 
			case BasicIQLPackage.IQL_METADATA_VALUE_SINGLE_DOUBLE:
				sequence_IQLMetadataValueSingle(context, (IQLMetadataValueSingleDouble) semanticObject); 
				return; 
			case BasicIQLPackage.IQL_METADATA_VALUE_SINGLE_INT:
				sequence_IQLMetadataValueSingle(context, (IQLMetadataValueSingleInt) semanticObject); 
				return; 
			case BasicIQLPackage.IQL_METADATA_VALUE_SINGLE_NULL:
				sequence_IQLMetadataValueSingle(context, (IQLMetadataValueSingleNull) semanticObject); 
				return; 
			case BasicIQLPackage.IQL_METADATA_VALUE_SINGLE_STRING:
				sequence_IQLMetadataValueSingle(context, (IQLMetadataValueSingleString) semanticObject); 
				return; 
			case BasicIQLPackage.IQL_METADATA_VALUE_SINGLE_TYPE_REF:
				sequence_IQLMetadataValueSingle(context, (IQLMetadataValueSingleTypeRef) semanticObject); 
				return; 
			case BasicIQLPackage.IQL_METHOD:
				sequence_IQLMethod(context, (IQLMethod) semanticObject); 
				return; 
			case BasicIQLPackage.IQL_METHOD_DECLARATION:
				sequence_IQLMethodDeclaration(context, (IQLMethodDeclaration) semanticObject); 
				return; 
			case BasicIQLPackage.IQL_MODEL:
				if (rule == grammarAccess.getIQLModelRule()) {
					sequence_IQLModel(context, (IQLModel) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getODLModelRule()) {
					sequence_ODLModel(context, (IQLModel) semanticObject); 
					return; 
				}
				else break;
			case BasicIQLPackage.IQL_MODEL_ELEMENT:
				if (rule == grammarAccess.getIQLModelElementRule()) {
					sequence_IQLModelElement(context, (IQLModelElement) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getODLModelElementRule()) {
					sequence_ODLModelElement(context, (IQLModelElement) semanticObject); 
					return; 
				}
				else break;
			case BasicIQLPackage.IQL_MULTIPLICATIVE_EXPRESSION:
				sequence_IQLMultiplicativeExpression(context, (IQLMultiplicativeExpression) semanticObject); 
				return; 
			case BasicIQLPackage.IQL_NAMESPACE:
				sequence_IQLNamespace(context, (IQLNamespace) semanticObject); 
				return; 
			case BasicIQLPackage.IQL_NEW_EXPRESSION:
				sequence_IQLOtherExpressions(context, (IQLNewExpression) semanticObject); 
				return; 
			case BasicIQLPackage.IQL_PARENTHESIS_EXPRESSION:
				sequence_IQLOtherExpressions(context, (IQLParenthesisExpression) semanticObject); 
				return; 
			case BasicIQLPackage.IQL_PLUS_MINUS_EXPRESSION:
				sequence_IQLUnaryExpression(context, (IQLPlusMinusExpression) semanticObject); 
				return; 
			case BasicIQLPackage.IQL_POSTFIX_EXPRESSION:
				sequence_IQLUnaryExpression(context, (IQLPostfixExpression) semanticObject); 
				return; 
			case BasicIQLPackage.IQL_PREFIX_EXPRESSION:
				sequence_IQLUnaryExpression(context, (IQLPrefixExpression) semanticObject); 
				return; 
			case BasicIQLPackage.IQL_RELATIONAL_EXPRESSION:
				sequence_IQLRelationalExpression(context, (IQLRelationalExpression) semanticObject); 
				return; 
			case BasicIQLPackage.IQL_RETURN_STATEMENT:
				sequence_IQLReturnStatement(context, (IQLReturnStatement) semanticObject); 
				return; 
			case BasicIQLPackage.IQL_SIMPLE_TYPE_REF:
				sequence_IQLSimpleTypeRef(context, (IQLSimpleTypeRef) semanticObject); 
				return; 
			case BasicIQLPackage.IQL_STATEMENT_BLOCK:
				sequence_IQLStatementBlock(context, (IQLStatementBlock) semanticObject); 
				return; 
			case BasicIQLPackage.IQL_SUPER_EXPRESSION:
				sequence_IQLOtherExpressions(context, (IQLSuperExpression) semanticObject); 
				return; 
			case BasicIQLPackage.IQL_SWITCH_STATEMENT:
				sequence_IQLSwitchStatement(context, (IQLSwitchStatement) semanticObject); 
				return; 
			case BasicIQLPackage.IQL_THIS_EXPRESSION:
				sequence_IQLOtherExpressions(context, (IQLThisExpression) semanticObject); 
				return; 
			case BasicIQLPackage.IQL_TYPE_CAST_EXPRESSION:
				sequence_IQLUnaryExpression(context, (IQLTypeCastExpression) semanticObject); 
				return; 
			case BasicIQLPackage.IQL_VARIABLE_DECLARATION:
				sequence_IQLVariableDeclaration(context, (IQLVariableDeclaration) semanticObject); 
				return; 
			case BasicIQLPackage.IQL_VARIABLE_INITIALIZATION:
				sequence_IQLVariableInitialization(context, (IQLVariableInitialization) semanticObject); 
				return; 
			case BasicIQLPackage.IQL_VARIABLE_STATEMENT:
				sequence_IQLVariableStatement(context, (IQLVariableStatement) semanticObject); 
				return; 
			case BasicIQLPackage.IQL_WHILE_STATEMENT:
				sequence_IQLWhileStatement(context, (IQLWhileStatement) semanticObject); 
				return; 
			}
		else if (epackage == ODLPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case ODLPackage.ODL_METHOD:
				sequence_ODLMethod(context, (ODLMethod) semanticObject); 
				return; 
			case ODLPackage.ODL_OPERATOR:
				sequence_ODLOperator(context, (ODLOperator) semanticObject); 
				return; 
			case ODLPackage.ODL_PARAMETER:
				sequence_ODLParameter(context, (ODLParameter) semanticObject); 
				return; 
			}
		else if (epackage == TypesPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case TypesPackage.JVM_FORMAL_PARAMETER:
				sequence_JvmFormalParameter(context, (JvmFormalParameter) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     ODLMethod returns ODLMethod
	 *
	 * Constraint:
	 *     (
	 *         (on?='on' | validate?='validate' | (override?='override'? ao?='ao') | (override?='override'? po?='po')) 
	 *         (simpleName=ID (parameters+=JvmFormalParameter parameters+=JvmFormalParameter*)? returnType=JvmTypeReference?)? 
	 *         body=IQLStatementBlock
	 *     )
	 */
	protected void sequence_ODLMethod(ISerializationContext context, ODLMethod semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ODLModelElement returns IQLModelElement
	 *
	 * Constraint:
	 *     (javametadata+=IQLJavaMetadata* (inner=IQLClass | inner=IQLInterface | inner=ODLOperator))
	 */
	protected void sequence_ODLModelElement(ISerializationContext context, IQLModelElement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ODLModel returns IQLModel
	 *
	 * Constraint:
	 *     ((namespaces+=IQLNamespace+ elements+=ODLModelElement+) | elements+=ODLModelElement+)?
	 */
	protected void sequence_ODLModel(ISerializationContext context, IQLModel semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ODLOperator returns ODLOperator
	 *
	 * Constraint:
	 *     (
	 *         simpleName=ID 
	 *         metadataList=IQLMetadataList? 
	 *         (members+=IQLAttribute | members+=IQLMethod | members+=ODLParameter | members+=ODLMethod | members+=IQLJavaMember)*
	 *     )
	 */
	protected void sequence_ODLOperator(ISerializationContext context, ODLOperator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ODLParameter returns ODLParameter
	 *
	 * Constraint:
	 *     (
	 *         optional?='optional'? 
	 *         parameter?='parameter' 
	 *         metadataList=IQLMetadataList? 
	 *         type=JvmTypeReference 
	 *         simpleName=ID 
	 *         init=IQLVariableInitialization?
	 *     )
	 */
	protected void sequence_ODLParameter(ISerializationContext context, ODLParameter semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
