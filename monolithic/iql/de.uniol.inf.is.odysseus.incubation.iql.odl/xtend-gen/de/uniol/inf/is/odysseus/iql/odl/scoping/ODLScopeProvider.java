/**
 * generated by Xtext 2.12.0
 */
package de.uniol.inf.is.odysseus.iql.odl.scoping;

import de.uniol.inf.is.odysseus.iql.basic.basicIQL.IQLAttribute;
import de.uniol.inf.is.odysseus.iql.basic.basicIQL.IQLMemberSelectionExpression;
import de.uniol.inf.is.odysseus.iql.basic.basicIQL.IQLMethod;
import de.uniol.inf.is.odysseus.iql.basic.scoping.AbstractIQLScopeProvider;
import de.uniol.inf.is.odysseus.iql.basic.scoping.IIQLJdtTypeProvider;
import de.uniol.inf.is.odysseus.iql.odl.exprevaluator.IODLExpressionEvaluator;
import de.uniol.inf.is.odysseus.iql.odl.lookup.IODLLookUp;
import de.uniol.inf.is.odysseus.iql.odl.oDL.ODLMethod;
import de.uniol.inf.is.odysseus.iql.odl.oDL.ODLOperator;
import de.uniol.inf.is.odysseus.iql.odl.scoping.IODLScopeProvider;
import de.uniol.inf.is.odysseus.iql.odl.typing.dictionary.IODLTypeDictionary;
import de.uniol.inf.is.odysseus.iql.odl.typing.eventmethods.EventMethodsFactory;
import de.uniol.inf.is.odysseus.iql.odl.typing.utils.IODLTypeUtils;
import java.util.Collection;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.ResourceSet;
import org.eclipse.xtext.EcoreUtil2;
import org.eclipse.xtext.common.types.JvmField;
import org.eclipse.xtext.common.types.JvmIdentifiableElement;
import org.eclipse.xtext.common.types.JvmOperation;
import org.eclipse.xtext.common.types.JvmTypeReference;
import org.eclipse.xtext.scoping.IScope;

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
@SuppressWarnings("all")
public class ODLScopeProvider extends AbstractIQLScopeProvider<IODLTypeDictionary, IODLLookUp, IODLExpressionEvaluator, IODLTypeUtils> implements IODLScopeProvider {
  public ODLScopeProvider(final IODLTypeDictionary typeDictionary, final IODLLookUp lookUp, final IODLExpressionEvaluator exprEvaluator, final IODLTypeUtils typeUtils) {
    super(typeDictionary, lookUp, exprEvaluator, typeUtils);
  }
  
  @Override
  protected Collection<JvmField> getIQLMemberSelectionAttributes(final IQLMemberSelectionExpression expr, final JvmTypeReference typeRef, final boolean isThis, final boolean isSuper) {
    Collection<JvmField> attributes = super.getIQLMemberSelectionAttributes(expr, typeRef, isThis, isSuper);
    ODLOperator operator = EcoreUtil2.<ODLOperator>getContainerOfType(expr, ODLOperator.class);
    if ((isThis && (operator != null))) {
      List<IQLAttribute> _allContentsOfType = EcoreUtil2.<IQLAttribute>getAllContentsOfType(operator, IQLAttribute.class);
      attributes.addAll(_allContentsOfType);
    }
    return attributes;
  }
  
  @Override
  protected Collection<JvmOperation> getIQLMemberSelectionMethods(final IQLMemberSelectionExpression expr, final JvmTypeReference typeRef, final boolean isThis, final boolean isSuper) {
    Collection<JvmOperation> methods = super.getIQLMemberSelectionMethods(expr, typeRef, isThis, isSuper);
    ODLOperator operator = EcoreUtil2.<ODLOperator>getContainerOfType(expr, ODLOperator.class);
    if ((isThis && (operator != null))) {
      List<IQLMethod> _allContentsOfType = EcoreUtil2.<IQLMethod>getAllContentsOfType(operator, IQLMethod.class);
      for (final IQLMethod method : _allContentsOfType) {
        {
          String _simpleName = method.getSimpleName();
          boolean _tripleNotEquals = (_simpleName != null);
          if (_tripleNotEquals) {
          }
          if ((this.isAOContext(expr) && this.isAOContext(method))) {
            methods.add(method);
          } else {
            if ((this.isPOContext(expr) && this.isPOContext(method))) {
              methods.add(method);
            } else {
              if (((!this.isAOContext(method)) && (!this.isPOContext(method)))) {
                methods.add(method);
              }
            }
          }
        }
      }
    }
    return methods;
  }
  
  @Override
  protected Collection<JvmIdentifiableElement> getAttributesIQLJvmElementCallExpression(final EObject node, final JvmTypeReference thisType, final Collection<JvmTypeReference> importedTypes) {
    Collection<JvmIdentifiableElement> elements = super.getAttributesIQLJvmElementCallExpression(node, thisType, importedTypes);
    ODLOperator operator = EcoreUtil2.<ODLOperator>getContainerOfType(node, ODLOperator.class);
    if (((node instanceof ODLOperator) || (operator != null))) {
      List<IQLAttribute> _allContentsOfType = EcoreUtil2.<IQLAttribute>getAllContentsOfType(operator, IQLAttribute.class);
      elements.addAll(_allContentsOfType);
    }
    return elements;
  }
  
  @Override
  protected Collection<JvmIdentifiableElement> getMethodsIQLJvmElementCallExpression(final EObject node, final JvmTypeReference thisType, final Collection<JvmTypeReference> importedTypes) {
    Collection<JvmIdentifiableElement> elements = super.getMethodsIQLJvmElementCallExpression(node, thisType, importedTypes);
    ODLOperator operator = EcoreUtil2.<ODLOperator>getContainerOfType(node, ODLOperator.class);
    if (((node instanceof ODLOperator) || (operator != null))) {
      List<IQLMethod> _allContentsOfType = EcoreUtil2.<IQLMethod>getAllContentsOfType(operator, IQLMethod.class);
      for (final IQLMethod method : _allContentsOfType) {
        {
          String _simpleName = method.getSimpleName();
          boolean _tripleNotEquals = (_simpleName != null);
          if (_tripleNotEquals) {
          }
          if ((this.isAOContext(node) && this.isAOContext(method))) {
            elements.add(method);
          } else {
            if ((this.isPOContext(node) && this.isPOContext(method))) {
              elements.add(method);
            } else {
              if (((!this.isAOContext(method)) && (!this.isPOContext(method)))) {
                elements.add(method);
              }
            }
          }
        }
      }
    }
    return elements;
  }
  
  private boolean isAOContext(final EObject node) {
    ODLMethod method = null;
    if ((node instanceof ODLMethod)) {
      method = ((ODLMethod) node);
    } else {
      ODLMethod _containerOfType = EcoreUtil2.<ODLMethod>getContainerOfType(node, ODLMethod.class);
      method = _containerOfType;
    }
    if ((method != null)) {
      if ((method.isAo() || method.isValidate())) {
        return true;
      } else {
        if ((method.isOn() && 
          EventMethodsFactory.getInstance().hasEventMethod(true, method.getSimpleName(), 
            method.getParameters()))) {
          return true;
        }
      }
    }
    return false;
  }
  
  private boolean isPOContext(final EObject node) {
    ODLMethod method = null;
    if ((node instanceof ODLMethod)) {
      method = ((ODLMethod) node);
    } else {
      ODLMethod _containerOfType = EcoreUtil2.<ODLMethod>getContainerOfType(node, ODLMethod.class);
      method = _containerOfType;
    }
    if ((method != null)) {
      boolean _isPo = method.isPo();
      if (_isPo) {
        return true;
      } else {
        if ((method.isOn() && 
          EventMethodsFactory.getInstance().hasEventMethod(false, method.getSimpleName(), 
            method.getParameters()))) {
          return true;
        }
      }
    }
    return false;
  }
  
  @Override
  protected IScope getJdtScope(final ResourceSet set, final IIQLJdtTypeProvider typeProvider) {
    return IScope.NULLSCOPE;
  }
}
