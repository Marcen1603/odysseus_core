/*
 * generated by Xtext 2.12.0
 */
package de.uniol.inf.is.odysseus.iql.qdl.scoping

import de.uniol.inf.is.odysseus.iql.qdl.lookup.IQDLLookUp
import de.uniol.inf.is.odysseus.iql.qdl.qDL.QDLQuery
import org.eclipse.emf.ecore.resource.ResourceSet
import javax.inject.Inject
import org.eclipse.xtext.EcoreUtil2
import de.uniol.inf.is.odysseus.iql.qdl.typing.utils.IQDLTypeUtils
import de.uniol.inf.is.odysseus.iql.qdl.exprevaluator.IQDLExpressionEvaluator
import de.uniol.inf.is.odysseus.iql.basic.scoping.IIQLJdtTypeProvider
import org.eclipse.xtext.common.types.JvmIdentifiableElement
import java.util.Collection
import org.eclipse.xtext.scoping.IScope
import de.uniol.inf.is.odysseus.iql.qdl.typing.dictionary.IQDLTypeDictionary
import org.eclipse.emf.ecore.EObject
import org.eclipse.xtext.common.types.JvmField
import de.uniol.inf.is.odysseus.iql.basic.basicIQL.IQLClass
import org.eclipse.xtext.common.types.JvmTypeReference
import de.uniol.inf.is.odysseus.iql.basic.basicIQL.IQLMemberSelectionExpression
import de.uniol.inf.is.odysseus.iql.basic.scoping.AbstractIQLScopeProvider

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
class QDLScopeProvider extends AbstractIQLScopeProvider<IQDLTypeDictionary, IQDLLookUp, IQDLExpressionEvaluator, IQDLTypeUtils> implements IQDLScopeProvider{
	
	new(IQDLTypeDictionary typeDictionary, IQDLLookUp lookUp, IQDLExpressionEvaluator exprEvaluator, IQDLTypeUtils typeUtils) {
		super(typeDictionary, lookUp, exprEvaluator, typeUtils)
	}
	
	override protected Collection<JvmField> getIQLMemberSelectionAttributes(IQLMemberSelectionExpression expr,
		JvmTypeReference typeRef, boolean isThis, boolean isSuper) {
		var Collection<JvmField> attributes = super.getIQLMemberSelectionAttributes(expr, typeRef, isThis, isSuper)
		if (isThis) {
			for (IQLClass source : typeDictionary.getSourceTypes()) {
				for (JvmField attr : lookUp.getPublicAttributes(typeUtils.createTypeRef(source), false)) {
					if (attr.getSimpleName().equalsIgnoreCase(source.getSimpleName())) {
						attributes.add(attr)
					}
				}
			}
		}
		return attributes
	}

	override protected Collection<JvmIdentifiableElement> getAttributesIQLJvmElementCallExpression(EObject node,
		JvmTypeReference thisType, Collection<JvmTypeReference> importedTypes) {
		var Collection<JvmIdentifiableElement> elements = super.
			getAttributesIQLJvmElementCallExpression(node, thisType, importedTypes)
		var QDLQuery query = EcoreUtil2.getContainerOfType(node, QDLQuery)
		if (node instanceof QDLQuery || query !== null) {
			for (IQLClass source : typeDictionary.getSourceTypes()) {
				for (JvmField attr : lookUp.getPublicAttributes(typeUtils.createTypeRef(source), false)) {
					if (attr.getSimpleName().equalsIgnoreCase(source.getSimpleName())) {
						elements.add(attr)
					}
				}
			}
		}
		return elements
	}

	override protected IScope getJdtScope(ResourceSet set, IIQLJdtTypeProvider typeProvider) {
		return IScope.NULLSCOPE
	}

}
