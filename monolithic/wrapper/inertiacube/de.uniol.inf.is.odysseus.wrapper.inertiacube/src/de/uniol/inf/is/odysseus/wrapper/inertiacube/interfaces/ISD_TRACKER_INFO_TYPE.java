package de.uniol.inf.is.odysseus.wrapper.inertiacube.interfaces;
import com.ochafik.lang.jnaerator.runtime.Structure;
import de.uniol.inf.is.odysseus.wrapper.inertiacube.interfaces.ISenseLib.Bool;
import java.util.Arrays;
import java.util.List;
/**
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class ISD_TRACKER_INFO_TYPE extends Structure<ISD_TRACKER_INFO_TYPE, ISD_TRACKER_INFO_TYPE.ByValue, ISD_TRACKER_INFO_TYPE.ByReference > {
	/**
	 * Following item are for information only and should not be changed<br>
	 * InterSense Library version
	 */
	public float LibVersion;
	/** IS Precision series or InterTrax. */
	public int TrackerType;
	/** ISD_UNKNOWN, ISD_IS300, ISD_IS600, ISD_IS900, ISD_INTERTRAX */
	public int TrackerModel;
	/** Number of the RS232 port. Starts with 1 (COM1/ttyS0). */
	public int Port;
	/** Communications statistics, for information only. */
	public int RecordsPerSec;
	public float KBitsPerSec;
	/** 4 states: 0 - OFF, system is in free run */
	public int SyncState;
	/** Sync frequency - number of hardware sync signals per second, */
	public float SyncRate;
	/** 0 to 100% */
	public int SyncPhase;
	/** Hardware interface, read-only */
	public int Interface;
	/** IS-900 only, ultrasonic timeout (sampling rate) */
	public int UltTimeout;
	/** IS-900 only, ultrasonic speaker volume */
	public int UltVolume;
	public int dwReserved4;
	/** Firmware revision */
	public float FirmwareRev;
	public float fReserved2;
	public float fReserved3;
	public float fReserved4;
	/**
	 * IS-900 only, enables flasing blue LEDs on SoniStrips/SoniDiscs if TRUE<br>
	 * C type : Bool
	 */
	public Bool LedEnable;
	/** C type : Bool */
	public Bool bReserved2;
	/** C type : Bool */
	public Bool bReserved3;
	/** C type : Bool */
	public Bool bReserved4;
	public ISD_TRACKER_INFO_TYPE() {
		super();
	}
	@Override
	protected List<? > getFieldOrder() {
		return Arrays.asList("LibVersion", "TrackerType", "TrackerModel", "Port", "RecordsPerSec", "KBitsPerSec", "SyncState", "SyncRate", "SyncPhase", "Interface", "UltTimeout", "UltVolume", "dwReserved4", "FirmwareRev", "fReserved2", "fReserved3", "fReserved4", "LedEnable", "bReserved2", "bReserved3", "bReserved4");
	}
	@Override
	protected ByReference newByReference() { return new ByReference(); }
	@Override
	protected ByValue newByValue() { return new ByValue(); }
	@Override
	protected ISD_TRACKER_INFO_TYPE newInstance() { return new ISD_TRACKER_INFO_TYPE(); }
	public static ISD_TRACKER_INFO_TYPE[] newArray(int arrayLength) {
		return Structure.newArray(ISD_TRACKER_INFO_TYPE.class, arrayLength);
	}
	public static class ByReference extends ISD_TRACKER_INFO_TYPE implements Structure.ByReference {
		
	};
	public static class ByValue extends ISD_TRACKER_INFO_TYPE implements Structure.ByValue {
		
	};
}
