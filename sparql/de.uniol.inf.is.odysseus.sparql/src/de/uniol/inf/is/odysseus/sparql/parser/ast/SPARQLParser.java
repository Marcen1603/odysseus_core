/* Generated By:JJTree&JavaCC: Do not edit this line. SPARQLParser.java */
/*
 * (c) Copyright 2004, 2005, 2006, 2007 Hewlett-Packard Development Company, LP
 * All rights reserved.
 */

package de.uniol.inf.is.odysseus.sparql.parser.ast;

import java.util.List;
import java.util.ArrayList;

import de.uniol.inf.is.odysseus.sourcedescription.sdf.description.*;

import de.uniol.inf.is.odysseus.logicaloperator.*;
import de.uniol.inf.is.odysseus.sparql.parser.helper.*;
import de.uniol.inf.is.odysseus.sparql.parser.*;
import de.uniol.inf.is.odysseus.sparql.*;

public class SPARQLParser extends SPARQLParserBase/*@bgen(jjtree)*/implements SPARQLParserTreeConstants, SPARQLParserConstants {/*@bgen(jjtree)*/
  protected JJTSPARQLParserState jjtree = new JJTSPARQLParserState();

  final public void CompilationUnit() throws ParseException {
                         /*@bgen(jjtree) CompilationUnit */
  ASTCompilationUnit jjtn000 = new ASTCompilationUnit(JJTCOMPILATIONUNIT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Query();
      jj_consume_token(0);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public ASTQuery Query() throws ParseException {
                    /*@bgen(jjtree) Query */
  ASTQuery jjtn000 = new ASTQuery(JJTQUERY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_5(6)) {
        Prologue();
        if (jj_2_1(6)) {
          SelectQuery();
        } else if (jj_2_2(6)) {
          ConstructQuery();
        } else if (jj_2_3(6)) {
          DescribeQuery();
        } else if (jj_2_4(6)) {
          AskQuery();
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      } else if (jj_2_6(6)) {
        CreateStatement();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
   {if (true) return jjtn000;}
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public void CreateStatement() throws ParseException {
 /*@bgen(jjtree) CreateStatement */
  ASTCreateStatement jjtn000 = new ASTCreateStatement(JJTCREATESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_7(6)) {
        jj_consume_token(CREATE);
      } else if (jj_2_8(6)) {
        jj_consume_token(ATTACH);
      } else if (jj_2_9(6)) {
        jj_consume_token(ADD);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(STREAM);
      IRIref();
      if (jj_2_10(6)) {
        jj_consume_token(FROM);
      } else if (jj_2_11(6)) {
        jj_consume_token(WITH);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      if (jj_2_12(6)) {
        Socket();
      } else if (jj_2_13(6)) {
        Channel();
      } else if (jj_2_14(6)) {
        CSVSource();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void Socket() throws ParseException {
 /*@bgen(jjtree) Socket */
  ASTSocket jjtn000 = new ASTSocket(JJTSOCKET);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(SOCKET);
      Host();
      jj_consume_token(COLON);
      jj_consume_token(INTEGER);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void Channel() throws ParseException {
 /*@bgen(jjtree) Channel */
  ASTChannel jjtn000 = new ASTChannel(JJTCHANNEL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(CHANNEL);
      Host();
      jj_consume_token(COLON);
      jj_consume_token(INTEGER);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void Host() throws ParseException {
 /*@bgen(jjtree) Host */
  ASTHost jjtn000 = new ASTHost(JJTHOST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token value;
    try {
      if (jj_2_15(6)) {
        value = jj_consume_token(IPADDRESS);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.setValue(value.image);
      } else if (jj_2_16(6)) {
        Identifier();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void CSVSource() throws ParseException {
 /*@bgen(jjtree) CSVSource */
  ASTCSVSource jjtn000 = new ASTCSVSource(JJTCSVSOURCE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      jj_consume_token(CSV);
      t = jj_consume_token(STRING_LITERAL1);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.setURL(t.image.substring(1, t.image.length() - 1));
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void Identifier() throws ParseException {
 /*@bgen(jjtree) Identifier */
  ASTIdentifier jjtn000 = new ASTIdentifier(JJTIDENTIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(IDENTIFIER);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.setName(t.image);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void Prologue() throws ParseException {
                   /*@bgen(jjtree) Prologue */
  ASTPrologue jjtn000 = new ASTPrologue(JJTPROLOGUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_17(6)) {
        BaseDecl();
      } else {
        ;
      }
      label_1:
      while (true) {
        if (jj_2_18(6)) {
          ;
        } else {
          break label_1;
        }
        PrefixDecl();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void BaseDecl() throws ParseException {
                   /*@bgen(jjtree) BaseDecl */
                    ASTBaseDecl jjtn000 = new ASTBaseDecl(JJTBASEDECL);
                    boolean jjtc000 = true;
                    jjtree.openNodeScope(jjtn000);INode base;
    try {
      jj_consume_token(BASE);
      base = IRI_REF();
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.setBaseURI(base.getName()) ;
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void PrefixDecl() throws ParseException {
                     /*@bgen(jjtree) PrefixDecl */
                      ASTPrefixDecl jjtn000 = new ASTPrefixDecl(JJTPREFIXDECL);
                      boolean jjtc000 = true;
                      jjtree.openNodeScope(jjtn000);Token t ; INode iri ;
    try {
      jj_consume_token(PREFIX);
      t = jj_consume_token(PNAME_NS);
      iri = IRI_REF();
        jjtree.closeNodeScope(jjtn000, true);
        jjtc000 = false;
        jjtn000.putPrefix(t.image, iri.getName()) ;
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

// ---- Query type clauses
  final public void SelectQuery() throws ParseException {
                      /*@bgen(jjtree) SelectQuery */
                       ASTSelectQuery jjtn000 = new ASTSelectQuery(JJTSELECTQUERY);
                       boolean jjtc000 = true;
                       jjtree.openNodeScope(jjtn000);Variable v = null; Aggregation agg; List<SourceInfo> sources= new ArrayList<SourceInfo>();
    try {
      jj_consume_token(SELECT);
      if (jj_2_21(6)) {
        if (jj_2_19(6)) {
          jj_consume_token(DISTINCT);
                 jjtn000.setDistinct(true);
        } else if (jj_2_20(6)) {
          jj_consume_token(REDUCED);
                jjtn000.setDistinct(true);
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      } else {
        ;
      }
      if (jj_2_25(6)) {
        label_2:
        while (true) {
          if (jj_2_22(6)) {
            v = Var();
                jjtn000.addResultVar(v) ;
                jjtn000.addVarOrAgg(0);
          } else if (jj_2_23(6)) {
            agg = Aggregation();
                        jjtn000.addAggregation(agg);
                        jjtn000.addVarOrAgg(1);
          } else {
            jj_consume_token(-1);
            throw new ParseException();
          }
          if (jj_2_24(6)) {
            ;
          } else {
            break label_2;
          }
        }
      jjtn000.setResultStar(false) ;
      } else if (jj_2_26(6)) {
        jj_consume_token(STAR);
             jjtn000.setResultStar(true) ;
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      if (jj_2_27(6)) {
        FromClause(sources);
                         jjtn000.setSources(sources);
      } else {
        ;
      }
      WhereClause();
      if (jj_2_28(6)) {
        GroupBy();
      } else {
        ;
      }
      SolutionModifier();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void ConstructQuery() throws ParseException {
                         /*@bgen(jjtree) ConstructQuery */
                          ASTConstructQuery jjtn000 = new ASTConstructQuery(JJTCONSTRUCTQUERY);
                          boolean jjtc000 = true;
                          jjtree.openNodeScope(jjtn000);List<SourceInfo > sources = new ArrayList<SourceInfo >();
    try {
      jj_consume_token(CONSTRUCT);
      ConstructTemplate();
      if (jj_2_29(6)) {
        FromClause(sources);
      } else {
        ;
      }
      WhereClause();
      SolutionModifier();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void DescribeQuery() throws ParseException {
                        /*@bgen(jjtree) DescribeQuery */
                         ASTDescribeQuery jjtn000 = new ASTDescribeQuery(JJTDESCRIBEQUERY);
                         boolean jjtc000 = true;
                         jjtree.openNodeScope(jjtn000);INode n ; List<SourceInfo > sources = new ArrayList<SourceInfo >();
    try {
      jj_consume_token(DESCRIBE);
      if (jj_2_31(6)) {
        label_3:
        while (true) {
          n = VarOrIRIref();
          if (jj_2_30(6)) {
            ;
          } else {
            break label_3;
          }
        }
      } else if (jj_2_32(6)) {
        jj_consume_token(STAR);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      if (jj_2_33(6)) {
        FromClause(sources);
      } else {
        ;
      }
      if (jj_2_34(6)) {
        WhereClause();
      } else {
        ;
      }
      SolutionModifier();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void AskQuery() throws ParseException {
                   /*@bgen(jjtree) AskQuery */
                   ASTAskQuery jjtn000 = new ASTAskQuery(JJTASKQUERY);
                   boolean jjtc000 = true;
                   jjtree.openNodeScope(jjtn000);List<SourceInfo > sources = new ArrayList<SourceInfo >();
    try {
      jj_consume_token(ASK);
      if (jj_2_35(6)) {
        FromClause(sources);
      } else {
        ;
      }
      WhereClause();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

// ----

// This non terminal defines a FROM-part in a sparql query.
// It can contain persistent rdf sources or rdf streams but
// not both.
  final public void FromClause(List<SourceInfo> sources) throws ParseException {
                                             /*@bgen(jjtree) FromClause */
  ASTFromClause jjtn000 = new ASTFromClause(JJTFROMCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      DatastreamClause(sources);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

// NOT USED AT THE MOMENT
//void DatasetClause(List<SourceInfo> sources) : {SourceInfo si;}
//{
//  ( <FROM> si=DefaultGraphClause() {sources.add(si);}
//  | <FROM> si=NamedGraphClause(){sources.add(si);}
//   )+
//}


// =============== BEGIN STREAM ===================
// This is the new part to define some data streams
// FROM STREAM and FROM NAMED STREAM
  final public void DatastreamClause(List<SourceInfo> sources) throws ParseException {
                                                   /*@bgen(jjtree) DatastreamClause */
                                                   ASTDatastreamClause jjtn000 = new ASTDatastreamClause(JJTDATASTREAMCLAUSE);
                                                   boolean jjtc000 = true;
                                                   jjtree.openNodeScope(jjtn000);SourceInfo si;
    try {
      label_4:
      while (true) {
        jj_consume_token(FROM);
        si = StreamClause();
                             sources.add(si);
        if (jj_2_36(6)) {
          ;
        } else {
          break label_4;
        }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

// ================ END STREAM ====================

// NOT USED AT THE MOMENT
//void DefaultGraphClause() : { Node n ; }
//{
//  <GRAPH>
//  n = SourceSelector()
//  {
//    // This checks for duplicates
//    getQuery().addGraphURI(n.getURI()) ;
//  }
//}

// NOT USED AT THE MOMENT
//void NamedGraphClause() : { Node n ; }
//{
//  <NAMED> <GRAPH>
//  n = SourceSelector()
//  {
//    // This checks for duplicates
//    getQuery().addNamedGraphURI(n.getURI()) ;
//  }
//}


// =============== BEGIN STREAM ===================
// This is a default stream clause
// FROM STREAM
  final public SourceInfo StreamClause() throws ParseException {
 /*@bgen(jjtree) StreamClause */
    ASTStreamClause jjtn000 = new ASTStreamClause(JJTSTREAMCLAUSE);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);INode streamName;
    WindowAO window;
    AccessAO access;
    boolean named = false;
    try {
      jj_consume_token(STREAM);
      if (jj_2_37(6)) {
        jj_consume_token(NAMED);
                    named=true;
      } else {
        ;
      }
      streamName = SourceSelector();
      window = Window();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    SDFSource sdfSource = new SDFSource(streamName.getName(), SPARQLAccessSourceTypes.RDF);
        access = new AccessAO(sdfSource);

        SourceInfo si = new SourceInfo(streamName.getName(), access, window);
        si.setDefaultStream(!named);

        {if (true) return si;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public Aggregation Aggregation() throws ParseException {
                             /*@bgen(jjtree) Aggregation */
                             ASTAggregation jjtn000 = new ASTAggregation(JJTAGGREGATION);
                             boolean jjtc000 = true;
                             jjtree.openNodeScope(jjtn000);Variable v; Aggregation agg ;
    try {
      if (jj_2_38(6)) {
        jj_consume_token(AVG);
        jj_consume_token(LPAREN);
        v = Var();
        jj_consume_token(RPAREN);
                        agg = new Aggregation(v, AggregateFunction.AVG);
      } else if (jj_2_39(6)) {
        jj_consume_token(MIN);
        jj_consume_token(LPAREN);
        v = Var();
        jj_consume_token(RPAREN);
                        agg = new Aggregation(v, AggregateFunction.MIN);
      } else if (jj_2_40(6)) {
        jj_consume_token(MAX);
        jj_consume_token(LPAREN);
        v = Var();
        jj_consume_token(RPAREN);
                        agg = new Aggregation(v, AggregateFunction.MAX);
      } else if (jj_2_41(6)) {
        jj_consume_token(SUM);
        jj_consume_token(LPAREN);
        v = Var();
        jj_consume_token(RPAREN);
                        agg = new Aggregation(v, AggregateFunction.SUM);
      } else if (jj_2_42(6)) {
        jj_consume_token(COUNT);
        jj_consume_token(LPAREN);
        v = Var();
        jj_consume_token(RPAREN);
                        agg = new Aggregation(v, AggregateFunction.COUNT);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
         {if (true) return agg;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public WindowAO Window() throws ParseException {
                     /*@bgen(jjtree) Window */
                     ASTWindow jjtn000 = new ASTWindow(JJTWINDOW);
                     boolean jjtc000 = true;
                     jjtree.openNodeScope(jjtn000);WindowAO window = null;
    try {
      if (jj_2_43(6)) {
        window = SlidingTimeWindow();
      } else if (jj_2_44(6)) {
        window = SlidingTupelWindow();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
   {if (true) return window;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public WindowAO SlidingTimeWindow() throws ParseException {
 /*@bgen(jjtree) SlidingTimeWindow */
    ASTSlidingTimeWindow jjtn000 = new ASTSlidingTimeWindow(JJTSLIDINGTIMEWINDOW);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);WindowAO window = null;
    long range = 1;
    long delta = 1;
    try {
      jj_consume_token(WINDOW);
      jj_consume_token(RANGE);
      range = ValueSpecification();
      if (jj_2_45(6)) {
        jj_consume_token(ADVANCE);
        delta = ValueSpecification();
      } else {
        ;
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    window = new WindowAO(WindowType.TIME);
    window.setWindowSize(range);
    window.setWindowAdvance(delta);
    {if (true) return window;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public WindowAO SlidingTupelWindow() throws ParseException {
 /*@bgen(jjtree) SlidingTupelWindow */
        ASTSlidingTupelWindow jjtn000 = new ASTSlidingTupelWindow(JJTSLIDINGTUPELWINDOW);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);WindowAO window = null;
        Token rangeToken = null;
        Token deltaToken = null;
        long range = 1;
        long delta = 1;
    try {
      jj_consume_token(WINDOW);
      jj_consume_token(ELEMS);
      rangeToken = jj_consume_token(INTEGER);
      if (jj_2_46(6)) {
        jj_consume_token(ADVANCE);
        deltaToken = jj_consume_token(INTEGER);
      } else {
        ;
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    range = Long.parseLong(rangeToken.toString());
    if(deltaToken != null){
      delta = Long.parseLong(deltaToken.toString());
    }
    window = new WindowAO(WindowType.TUPLE);
    window.setWindowSize(range);
    window.setWindowAdvance(delta);
    {if (true) return window;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

//ElementSimpleWindow FixedWindow() : 
//{
//    ElementSimpleWindow fw = null;
//    ElementValueSpecification vs = null;
//}
//{
//  <WINDOW> <RANGE> vs = ValueSpecification() <FIXED>
//  {
//    fw = new ElementSimpleWindow(WindowType.JUMPING_TIME_WINDOW);
//    fw.setRange(vs.getValue(), vs.getTimeunit());
//    fw.setDelta(vs.getValue(), vs.getTimeunit());
//    return fw;
//  }
//}

//ElementPredicateWindow PWindow() : {ElementPredicateWindow epw = null; ElementWindow ew = null;}
//{
//  epw = StartEndPWindow() ew = WindowNotPWindow()
//  {epw.setReducingWindow(ew);
//   return epw;}
//}

//ElementStartEndPredicateWindow StartEndPWindow() : 
//{
//    ElementStartEndPredicateWindow sepw = new ElementStartEndPredicateWindow();
//    ElementStartEndPredicate start = null;
//    Element startFilter = null;
//    ElementStartEndPredicate end = null;
//    Element endFilter = null;}
//{
//  <PWINDOW> <START> start = StartEndPredicate() [<DOT> startFilter = Filter()]
//  <END> end = StartEndPredicate() [<DOT> endFilter = Filter()]
//    { start.setFilter((ElementFilter)startFilter);
//      end.setFilter((ElementFilter)endFilter);
//      sepw.setStart(start);
//      sepw.setEnd(end);
//      return sepw;
//    }
//}
  final public WindowAO WindowNotPWindow() throws ParseException {
                               /*@bgen(jjtree) WindowNotPWindow */
                               ASTWindowNotPWindow jjtn000 = new ASTWindowNotPWindow(JJTWINDOWNOTPWINDOW);
                               boolean jjtc000 = true;
                               jjtree.openNodeScope(jjtn000);WindowAO window= null;
    try {
      if (jj_2_47(6)) {
        window = SlidingTimeWindow();
      } else if (jj_2_48(6)) {
        window = SlidingTupelWindow();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          {if (true) return window;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

//ElementStartEndPredicate StartEndPredicate() : 
//{ElementStartEndPredicate sep = new ElementStartEndPredicate();
// Triple t = null;
// Node subjectNode = null;
// Node predicateNode = null;
// Node objectNode = null;
//}
//{
//  (subjectNode = VarOrIRIref() | subjectNode = BlankNode()) predicateNode = VarOrIRIref() 
//    ( objectNode = PWindowGraphTerm() | objectNode = VarOrIRIref())
//    { t = new Triple(subjectNode, predicateNode, objectNode); 
//      sep.setTriple(t);
//      return sep;
//    }
//}

//Node PWindowGraphTerm() : {Node n = null;}
//{
//  (n = IRIref() | n = RDFLiteral() | n = NumericLiteral() | n = BooleanLiteral())
//  { return n; }
//}
  final public long ValueSpecification() throws ParseException {
 /*@bgen(jjtree) ValueSpecification */
    ASTValueSpecification jjtn000 = new ASTValueSpecification(JJTVALUESPECIFICATION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Token size = null;
    int factor = 1;
    try {
      size = jj_consume_token(INTEGER);
      if (jj_2_49(6)) {
        factor = Timeunit();
      } else {
        ;
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    long longValue = Long.parseLong(size.toString());
        {if (true) return longValue * factor;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

/**
This rule returns the factor to multiply with to get a window size in milliseconds.
E. g. a window size of 2 hours is equal to a size of 7200000 milliseconds.
*/
  final public int Timeunit() throws ParseException {
                  /*@bgen(jjtree) Timeunit */
                  ASTTimeunit jjtn000 = new ASTTimeunit(JJTTIMEUNIT);
                  boolean jjtc000 = true;
                  jjtree.openNodeScope(jjtn000);int factor = 1;
    try {
      if (jj_2_50(6)) {
        jj_consume_token(MS);
         factor = 1;
      } else if (jj_2_51(6)) {
        jj_consume_token(S);
          factor = 1000;
      } else if (jj_2_52(6)) {
        jj_consume_token(MINUTE);
              factor = 60000;
      } else if (jj_2_53(6)) {
        jj_consume_token(HOUR);
            factor = 3600000;
      } else if (jj_2_54(6)) {
        jj_consume_token(DAY);
           factor  = 86400000;
      } else if (jj_2_55(6)) {
        jj_consume_token(WEEK);
            factor = 604800000;
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
   {if (true) return factor;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

// ================ END STREAM ====================
  final public INode SourceSelector() throws ParseException {
                          /*@bgen(jjtree) SourceSelector */
                          ASTSourceSelector jjtn000 = new ASTSourceSelector(JJTSOURCESELECTOR);
                          boolean jjtc000 = true;
                          jjtree.openNodeScope(jjtn000);INode iri;
    try {
      iri = IRI_REF();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return iri;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public void WhereClause() throws ParseException {
                      /*@bgen(jjtree) WhereClause */
  ASTWhereClause jjtn000 = new ASTWhereClause(JJTWHERECLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(WHERE);
      GroupGraphPattern();
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void GroupBy() throws ParseException {
                  /*@bgen(jjtree) GroupBy */
                   ASTGroupBy jjtn000 = new ASTGroupBy(JJTGROUPBY);
                   boolean jjtc000 = true;
                   jjtree.openNodeScope(jjtn000);INode v;
    try {
      jj_consume_token(GROUP);
      jj_consume_token(BY);
      jj_consume_token(LPAREN);
      label_5:
      while (true) {
        v = Var();
                                           jjtn000.addVariable(v);
        if (jj_2_56(6)) {
          ;
        } else {
          break label_5;
        }
      }
      jj_consume_token(RPAREN);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void SolutionModifier() throws ParseException {
                           /*@bgen(jjtree) SolutionModifier */
  ASTSolutionModifier jjtn000 = new ASTSolutionModifier(JJTSOLUTIONMODIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_57(6)) {
        OrderClause();
      } else {
        ;
      }
      if (jj_2_58(6)) {
        LimitOffsetClauses();
      } else {
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void LimitOffsetClauses() throws ParseException {
                             /*@bgen(jjtree) LimitOffsetClauses */
  ASTLimitOffsetClauses jjtn000 = new ASTLimitOffsetClauses(JJTLIMITOFFSETCLAUSES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_61(6)) {
        LimitClause();
        if (jj_2_59(6)) {
          OffsetClause();
        } else {
          ;
        }
      } else if (jj_2_62(6)) {
        OffsetClause();
        if (jj_2_60(6)) {
          LimitClause();
        } else {
          ;
        }
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void OrderClause() throws ParseException {
                      /*@bgen(jjtree) OrderClause */
  ASTOrderClause jjtn000 = new ASTOrderClause(JJTORDERCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(ORDER);
      jj_consume_token(BY);
      label_6:
      while (true) {
        OrderCondition();
        if (jj_2_63(6)) {
          ;
        } else {
          break label_6;
        }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void OrderCondition() throws ParseException {
 /*@bgen(jjtree) OrderCondition */
  ASTOrderCondition jjtn000 = new ASTOrderCondition(JJTORDERCONDITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);int direction = 0 ; INode v = null ;
    try {
      if (jj_2_68(6)) {
        if (jj_2_64(6)) {
          jj_consume_token(ASC);
        } else if (jj_2_65(6)) {
          jj_consume_token(DESC);
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
        BrackettedExpression();
      } else if (jj_2_69(6)) {
        if (jj_2_66(6)) {
          Constraint();
        } else if (jj_2_67(6)) {
          v = Var();
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void LimitClause() throws ParseException {
                      /*@bgen(jjtree) LimitClause */
                       ASTLimitClause jjtn000 = new ASTLimitClause(JJTLIMITCLAUSE);
                       boolean jjtc000 = true;
                       jjtree.openNodeScope(jjtn000);Token t ;
    try {
      jj_consume_token(LIMIT);
      t = jj_consume_token(INTEGER);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void OffsetClause() throws ParseException {
                       /*@bgen(jjtree) OffsetClause */
                        ASTOffsetClause jjtn000 = new ASTOffsetClause(JJTOFFSETCLAUSE);
                        boolean jjtc000 = true;
                        jjtree.openNodeScope(jjtn000);Token t ;
    try {
      jj_consume_token(OFFSET);
      t = jj_consume_token(INTEGER);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

// ---- General Graph Pattern 
  final public void GroupGraphPattern() throws ParseException {
                            /*@bgen(jjtree) GroupGraphPattern */
                             ASTGroupGraphPattern jjtn000 = new ASTGroupGraphPattern(JJTGROUPGRAPHPATTERN);
                             boolean jjtc000 = true;
                             jjtree.openNodeScope(jjtn000);WindowAO window;
    try {
      jj_consume_token(LBRACE);
      if (jj_2_70(6)) {
        TriplesBlock();
      } else {
        ;
      }
      label_7:
      while (true) {
        if (jj_2_71(6)) {
          ;
        } else {
          break label_7;
        }
        if (jj_2_72(6)) {
          GraphPatternNotTriples();
        } else if (jj_2_73(6)) {
          Filter();
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
        if (jj_2_74(6)) {
          jj_consume_token(DOT);
        } else {
          ;
        }
        if (jj_2_75(6)) {
          TriplesBlock();
        } else {
          ;
        }
      }
      if (jj_2_76(6)) {
        window = WindowNotPWindow();
                              jjtn000.setWindowAO(window);
      } else {
        ;
      }
      jj_consume_token(RBRACE);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void TriplesBlock() throws ParseException {
                       /*@bgen(jjtree) TriplesBlock */
  ASTTriplesBlock jjtn000 = new ASTTriplesBlock(JJTTRIPLESBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);List<List<Triple >> triples = new ArrayList<List<Triple>>();
  List<Triple> curSubjTriples;
    try {
      curSubjTriples = TriplesSameSubject();
    triples.add(curSubjTriples);
      label_8:
      while (true) {
        if (jj_2_77(6)) {
          ;
        } else {
          break label_8;
        }
        jj_consume_token(DOT);
        curSubjTriples = TriplesSameSubject();
                         triples.add(curSubjTriples);
      }
      if (jj_2_78(6)) {
        jj_consume_token(DOT);
      } else {
        ;
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.setTriples(triples);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

// @@ Ready to be deleted
// Element GroupGraphPattern() : { Element el = null ; ElementTriplesBlock acc = null ; }
// {
//     { ElementGroup elg = new ElementGroup() ; }
//   <LBRACE>
//       { startGroup(elg) ; }
//   // Ensure two BGP's can't be next to each other
//   // Done by seeing if there is a non-BGP and recursing
//   // if there is an intermediate
//   (
//     { acc = new ElementTriplesBlock() ;
//       startTriplesBlock(acc) ;
//     }
//     el = TriplesBlock(acc)
//     { endTriplesBlock(acc) ;
//       elg.addElement(el) ; } 
//   )?
//   (
//     ( el = GraphPatternNotTriples() | el = Filter() )
//     { elg.addElement(el) ; }
//     (<DOT>)?
// 
//     (
//       { acc = new ElementTriplesBlock() ;
//         startTriplesBlock(acc) ;
//       }
//       el = TriplesBlock(acc)
//       { endTriplesBlock(acc) ;
//         elg.addElement(el) ; } 
//     )?
//   )*
//       { endGroup(elg) ; }
//   <RBRACE>
//     { return elg ; }
// }

// Element GroupGraphPattern() : {}
// {
//     { ElementGroup elg = new ElementGroup() ; }
//   <LBRACE>
//       { startGroup(elg) ; }
//     GraphPatternElement(elg)
//       { endGroup(elg) ; }
//   <RBRACE>
//     { return elg ; }
// }
// 
// 
// // Without {}
// // If the recusion is removed can roll GraphPatternElement into GroupGraphPattern()
// 
// void GraphPatternElement(ElementGroup elg) : 
//     { Element el = null ; ElementTriplesBlock acc = null ; }
// {
//   // Ensure two BGP's can't be next to each other
//   // Done by seeing if there is a non-BGP and recursing
//   // if there is an intermediate
//   (
//     { acc = new ElementTriplesBlock() ;
//       startTriplesBlock(acc) ;
//     }
//     el = TriplesBlock(acc)
//     { endTriplesBlock(acc) ;
//       elg.addElement(el) ; } 
//   )?
//   (
//     ( el = GraphPatternNotTriples()
//     | el = Filter()                 
//     )
//     { elg.addElement(el) ; }
//     (<DOT>)?
//     GraphPatternElement(elg)
//   )?
// }
// 
// 
// Element TriplesBlock(ElementTriplesBlock acc) : { }
// {
//   { if ( acc == null )
//       acc = new ElementTriplesBlock() ;
//   }
//   TriplesSameSubject(acc)
//   ( <DOT> (TriplesBlock(acc))? )?
//     { return acc ; }
// }


// -----
  final public void GraphPatternNotTriples() throws ParseException {
                                 /*@bgen(jjtree) GraphPatternNotTriples */
  ASTGraphPatternNotTriples jjtn000 = new ASTGraphPatternNotTriples(JJTGRAPHPATTERNNOTTRIPLES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_79(6)) {
        OptionalGraphPattern();
      } else if (jj_2_80(6)) {
        GroupOrUnionGraphPattern();
      } else if (jj_2_81(6)) {
        GraphGraphPattern();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     {if (true) throw (RuntimeException)jjte000;}
   }
   if (jjte000 instanceof ParseException) {
     {if (true) throw (ParseException)jjte000;}
   }
   {if (true) throw (Error)jjte000;}
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
  }

// ---- Definitions of each pattern element
  final public void OptionalGraphPattern() throws ParseException {
                               /*@bgen(jjtree) OptionalGraphPattern */
  ASTOptionalGraphPattern jjtn000 = new ASTOptionalGraphPattern(JJTOPTIONALGRAPHPATTERN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(OPTIONAL);
      GroupGraphPattern();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void GraphGraphPattern() throws ParseException {
                            /*@bgen(jjtree) GraphGraphPattern */
  ASTGraphGraphPattern jjtn000 = new ASTGraphGraphPattern(JJTGRAPHGRAPHPATTERN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(GRAPH);
      VarOrIRIref();
      GroupGraphPattern();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

// G (union G)* can be a single group pattern
// or a group pattern as part of an union.
  final public void GroupOrUnionGraphPattern() throws ParseException {
 /*@bgen(jjtree) GroupOrUnionGraphPattern */
  ASTGroupOrUnionGraphPattern jjtn000 = new ASTGroupOrUnionGraphPattern(JJTGROUPORUNIONGRAPHPATTERN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      GroupGraphPattern();
      label_9:
      while (true) {
        if (jj_2_82(6)) {
          ;
        } else {
          break label_9;
        }
        jj_consume_token(UNION);
        GroupGraphPattern();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void Filter() throws ParseException {
                 /*@bgen(jjtree) Filter */
  ASTFilter jjtn000 = new ASTFilter(JJTFILTER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(FILTER);
      Constraint();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void Constraint() throws ParseException {
                     /*@bgen(jjtree) Constraint */
                      ASTConstraint jjtn000 = new ASTConstraint(JJTCONSTRAINT);
                      boolean jjtc000 = true;
                      jjtree.openNodeScope(jjtn000);SimpleNode n;
    try {
      if (jj_2_83(6)) {
        n = BrackettedExpression();
                              jjtree.closeNodeScope(jjtn000, true);
                              jjtc000 = false;
                             jjtn000.setString(n.toString());
      } else if (jj_2_84(6)) {
        n = BuiltInCall();
                     jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
                    jjtn000.setString(n.toString());
      } else if (jj_2_85(6)) {
        n = FunctionCall();
                      jjtree.closeNodeScope(jjtn000, true);
                      jjtc000 = false;
                     jjtn000.setString(n.toString());
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void FunctionCall() throws ParseException {
                       /*@bgen(jjtree) FunctionCall */
  ASTFunctionCall jjtn000 = new ASTFunctionCall(JJTFUNCTIONCALL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      IRIref();
      ArgList();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public SimpleNode ArgList() throws ParseException {
 /*@bgen(jjtree) ArgList */
        ASTArgList jjtn000 = new ASTArgList(JJTARGLIST);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);String str = "";
        SimpleNode expr;
    try {
      if (jj_2_87(6)) {
        jj_consume_token(NIL);
      } else if (jj_2_88(6)) {
        jj_consume_token(LPAREN);
        expr = Expression();
                        str+= "(" + expr.toString();
        label_10:
        while (true) {
          if (jj_2_86(6)) {
            ;
          } else {
            break label_10;
          }
          jj_consume_token(COMMA);
          expr = Expression();
                                  str += ", " + expr.toString();
        }
        jj_consume_token(RPAREN);
              str+= ")";
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
        jjtn000.setString(str);
        {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

// -------- Construct patterns
  final public void ConstructTemplate() throws ParseException {
                            /*@bgen(jjtree) ConstructTemplate */
  ASTConstructTemplate jjtn000 = new ASTConstructTemplate(JJTCONSTRUCTTEMPLATE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(LBRACE);
      if (jj_2_89(6)) {
        ConstructTriples();
      } else {
        ;
      }
      jj_consume_token(RBRACE);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void ConstructTriples() throws ParseException {
                           /*@bgen(jjtree) ConstructTriples */
  ASTConstructTriples jjtn000 = new ASTConstructTriples(JJTCONSTRUCTTRIPLES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      TriplesSameSubject();
      if (jj_2_91(6)) {
        jj_consume_token(DOT);
        if (jj_2_90(6)) {
          ConstructTriples();
        } else {
          ;
        }
      } else {
        ;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

// -------- Triple lists with property and object lists
  final public List<Triple> TriplesSameSubject() throws ParseException {
 /*@bgen(jjtree) TriplesSameSubject */
  ASTTriplesSameSubject jjtn000 = new ASTTriplesSameSubject(JJTTRIPLESSAMESUBJECT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);List<Triple > triples = new ArrayList<Triple>();
  INode subject;
  PropertiesAndObjects paos;
    try {
      if (jj_2_92(6)) {
        subject = VarOrTerm();
        paos = PropertyListNotEmpty();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    for(INode curProp: paos.getProperties()){
      for(INode curObject: paos.getObjects(curProp)){
        triples.add(new Triple(subject, curProp, curObject));
      }
    }
      } else if (jj_2_93(6)) {
        // Any of the triple generating syntax elements
          subject = TriplesNode();
        PropertyList();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public PropertiesAndObjects PropertyListNotEmpty() throws ParseException {
 /*@bgen(jjtree) PropertyListNotEmpty */
  ASTPropertyListNotEmpty jjtn000 = new ASTPropertyListNotEmpty(JJTPROPERTYLISTNOTEMPTY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);PropertiesAndObjects paos = new PropertiesAndObjects();
  INode predicate ;
  List<INode > objects;
    try {
      predicate = Verb();
      objects = ObjectList();
    paos.putPropertyAndObjects(predicate, objects);
      label_11:
      while (true) {
        if (jj_2_94(6)) {
          ;
        } else {
          break label_11;
        }
        jj_consume_token(SEMICOLON);
        if (jj_2_95(6)) {
          predicate = Verb();
          objects = ObjectList();
          paos.putPropertyAndObjects(predicate, objects);
        } else {
          ;
        }
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return paos;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public PropertiesAndObjects PropertyList() throws ParseException {
                                       /*@bgen(jjtree) PropertyList */
                                        ASTPropertyList jjtn000 = new ASTPropertyList(JJTPROPERTYLIST);
                                        boolean jjtc000 = true;
                                        jjtree.openNodeScope(jjtn000);PropertiesAndObjects paos;
    try {
      if (jj_2_96(6)) {
        paos = PropertyListNotEmpty();
    {if (true) return paos;}
      } else {
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

// // Recursive
// void PropertyListNotEmpty(Node s, TripleCollector acc) : { Node p ; }
// {
//   p = Verb()
//   ObjectList(s, p, acc)
//   (<SEMICOLON> PropertyList(s, acc) ) ?
// #ifdef ARQ
//   |
//   Reification(s, acc)
// #endif
// }

// // Recursive
// void ObjectList(Node s, Node p, TripleCollector acc): { Node o ; } 
// {
//     { int mark = acc.mark() ; }
//   o = GraphNode(acc) 
//     { insert(acc, mark, s, p, o) ; }
//   ( <COMMA> ObjectList(s, p , acc) )?
// }
  final public List<INode> ObjectList() throws ParseException {
 /*@bgen(jjtree) ObjectList */
  ASTObjectList jjtn000 = new ASTObjectList(JJTOBJECTLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);List<INode > objects = new ArrayList<INode >();
  INode obj;
    try {
      obj = Object();
    objects.add(obj);
      label_12:
      while (true) {
        if (jj_2_97(6)) {
          ;
        } else {
          break label_12;
        }
        jj_consume_token(COMMA);
        obj = Object();
    objects.add(obj);
      }
     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
     {if (true) return objects;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public INode Object() throws ParseException {
                 /*@bgen(jjtree) Object */
                 ASTObject jjtn000 = new ASTObject(JJTOBJECT);
                 boolean jjtc000 = true;
                 jjtree.openNodeScope(jjtn000);INode object;
    try {
      object = GraphNode();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public INode Verb() throws ParseException {
                /*@bgen(jjtree) Verb */
                ASTVerb jjtn000 = new ASTVerb(JJTVERB);
                boolean jjtc000 = true;
                jjtree.openNodeScope(jjtn000);INode p ; Token t;
    try {
      if (jj_2_98(6)) {
        p = VarOrIRIref();
      } else if (jj_2_99(6)) {
        t = jj_consume_token(KW_A);
                                  p = new Literal(t.image);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      {if (true) return p ;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

// -------- Triple expansions

// Anything that can stand in a node slot and which is
// a number of triples
  final public INode TriplesNode() throws ParseException {
                       /*@bgen(jjtree) TriplesNode */
                        ASTTriplesNode jjtn000 = new ASTTriplesNode(JJTTRIPLESNODE);
                        boolean jjtc000 = true;
                        jjtree.openNodeScope(jjtn000);INode n ;
    try {
      if (jj_2_100(6)) {
        Collection();
      } else if (jj_2_101(6)) {
        BlankNodePropertyList();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public void BlankNodePropertyList() throws ParseException {
                                /*@bgen(jjtree) BlankNodePropertyList */
  ASTBlankNodePropertyList jjtn000 = new ASTBlankNodePropertyList(JJTBLANKNODEPROPERTYLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(LBRACKET);
      PropertyListNotEmpty();
      jj_consume_token(RBRACKET);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

// ------- RDF collections
  final public void Collection() throws ParseException {
     /*@bgen(jjtree) Collection */
     ASTCollection jjtn000 = new ASTCollection(JJTCOLLECTION);
     boolean jjtc000 = true;
     jjtree.openNodeScope(jjtn000);INode graphNode;
    try {
      jj_consume_token(LPAREN);
      label_13:
      while (true) {
        graphNode = GraphNode();
        if (jj_2_102(6)) {
          ;
        } else {
          break label_13;
        }
      }
      jj_consume_token(RPAREN);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

// -------- Nodes in a graph pattern or template
  final public INode GraphNode() throws ParseException {
                     /*@bgen(jjtree) GraphNode */
                      ASTGraphNode jjtn000 = new ASTGraphNode(JJTGRAPHNODE);
                      boolean jjtc000 = true;
                      jjtree.openNodeScope(jjtn000);INode n ;
    try {
      if (jj_2_103(6)) {
        n = VarOrTerm();
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                    {if (true) return n ;}
      } else if (jj_2_104(6)) {
        n = TriplesNode();
                      jjtree.closeNodeScope(jjtn000, true);
                      jjtc000 = false;
                      {if (true) return n ;}
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public INode VarOrTerm() throws ParseException {
                     /*@bgen(jjtree) VarOrTerm */
                     ASTVarOrTerm jjtn000 = new ASTVarOrTerm(JJTVARORTERM);
                     boolean jjtc000 = true;
                     jjtree.openNodeScope(jjtn000);INode n = null ;
    try {
      if (jj_2_105(6)) {
        n = Var();
      } else if (jj_2_106(6)) {
        n = GraphTerm();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return n ;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

// Property (if no bNodes) + DESCRIBE
  final public INode VarOrIRIref() throws ParseException {
                       /*@bgen(jjtree) VarOrIRIref */
                       ASTVarOrIRIref jjtn000 = new ASTVarOrIRIref(JJTVARORIRIREF);
                       boolean jjtc000 = true;
                       jjtree.openNodeScope(jjtn000);INode n = null ;
    try {
      if (jj_2_107(6)) {
        n = Var();
      } else if (jj_2_108(6)) {
        n = IRIref();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return n ;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

// // GRAPH and property if including blank nodes are properties.
// Node VarOrBlankNodeOrIRIref() : {Node n = null ; }
// {
//   ( n = Var() | n = BlankNode() | n = IRIref() )
//   { return n ; }
// }
  final public Variable Var() throws ParseException {
                  /*@bgen(jjtree) Var */
                   ASTVar jjtn000 = new ASTVar(JJTVAR);
                   boolean jjtc000 = true;
                   jjtree.openNodeScope(jjtn000);Token t ;
    try {
      if (jj_2_109(6)) {
        t = jj_consume_token(VAR1);
      } else if (jj_2_110(6)) {
        t = jj_consume_token(VAR2);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      {if (true) return new Variable(t.image) ;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public INode GraphTerm() throws ParseException {
                     /*@bgen(jjtree) GraphTerm */
                      ASTGraphTerm jjtn000 = new ASTGraphTerm(JJTGRAPHTERM);
                      boolean jjtc000 = true;
                      jjtree.openNodeScope(jjtn000);INode n ;
    try {
      if (jj_2_111(6)) {
        n = IRIref();
                 jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
                 {if (true) return n ;}
      } else if (jj_2_112(6)) {
        n = RDFLiteral();
                     jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
                     {if (true) return n ;}
      } else if (jj_2_113(6)) {
        n = NumericLiteral();
                         jjtree.closeNodeScope(jjtn000, true);
                         jjtc000 = false;
                         {if (true) return n ;}
      } else if (jj_2_114(6)) {
        n = BooleanLiteral();
                         jjtree.closeNodeScope(jjtn000, true);
                         jjtc000 = false;
                         {if (true) return n ;}
      } else if (jj_2_115(6)) {
        n = BlankNode();
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                    {if (true) return n ;}
      } else if (jj_2_116(6)) {
        jj_consume_token(NIL);
         jjtree.closeNodeScope(jjtn000, true);
         jjtc000 = false;
        {if (true) return BlankNode.NIL;}
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

// -------- Constraint syntax
  final public SimpleNode Expression() throws ParseException {
                           /*@bgen(jjtree) Expression */
  ASTExpression jjtn000 = new ASTExpression(JJTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      ConditionalOrExpression();
                             jjtree.closeNodeScope(jjtn000, true);
                             jjtc000 = false;
                            {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public SimpleNode ConditionalOrExpression() throws ParseException {
                                        /*@bgen(jjtree) ConditionalOrExpression */
  ASTConditionalOrExpression jjtn000 = new ASTConditionalOrExpression(JJTCONDITIONALOREXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      ConditionalAndExpression();
      label_14:
      while (true) {
        if (jj_2_117(6)) {
          ;
        } else {
          break label_14;
        }
        jj_consume_token(SC_OR);
        ConditionalAndExpression();
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
   {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public SimpleNode ConditionalAndExpression() throws ParseException {
                                         /*@bgen(jjtree) ConditionalAndExpression */
  ASTConditionalAndExpression jjtn000 = new ASTConditionalAndExpression(JJTCONDITIONALANDEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      ValueLogical();
      label_15:
      while (true) {
        if (jj_2_118(6)) {
          ;
        } else {
          break label_15;
        }
        jj_consume_token(SC_AND);
        ValueLogical();
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
   {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public SimpleNode ValueLogical() throws ParseException {
                             /*@bgen(jjtree) ValueLogical */
  ASTValueLogical jjtn000 = new ASTValueLogical(JJTVALUELOGICAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      RelationalExpression();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
   {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public SimpleNode RelationalExpression() throws ParseException {
                                     /*@bgen(jjtree) RelationalExpression */
                                      ASTRelationalExpression jjtn000 = new ASTRelationalExpression(JJTRELATIONALEXPRESSION);
                                      boolean jjtc000 = true;
                                      jjtree.openNodeScope(jjtn000);Token t = null;
    try {
      NumericExpression();
      if (jj_2_125(6)) {
        if (jj_2_119(6)) {
          t = jj_consume_token(EQ);
          NumericExpression();
        } else if (jj_2_120(6)) {
          t = jj_consume_token(NE);
          NumericExpression();
        } else if (jj_2_121(6)) {
          t = jj_consume_token(LT);
          NumericExpression();
        } else if (jj_2_122(6)) {
          t = jj_consume_token(GT);
          NumericExpression();
        } else if (jj_2_123(6)) {
          t = jj_consume_token(LE);
          NumericExpression();
        } else if (jj_2_124(6)) {
          t = jj_consume_token(GE);
          NumericExpression();
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      } else {
        ;
      }
    if(t != null){
      jjtn000.setCompareOperator(t.image);
    }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
   {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public SimpleNode NumericExpression() throws ParseException {
                                   /*@bgen(jjtree) NumericExpression */
  ASTNumericExpression jjtn000 = new ASTNumericExpression(JJTNUMERICEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      AdditiveExpression();
                        jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
                       {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public SimpleNode AdditiveExpression() throws ParseException {
 /*@bgen(jjtree) AdditiveExpression */
  ASTAdditiveExpression jjtn000 = new ASTAdditiveExpression(JJTADDITIVEEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);String str = "";
  SimpleNode tempExpr;
  INode lit;
    try {
      tempExpr = MultiplicativeExpression();
    str += tempExpr.toString();
      label_16:
      while (true) {
        if (jj_2_126(6)) {
          ;
        } else {
          break label_16;
        }
        if (jj_2_127(6)) {
          jj_consume_token(PLUS);
          tempExpr = MultiplicativeExpression();
                                                 str += " + " + tempExpr.toString();
        } else if (jj_2_128(6)) {
          jj_consume_token(MINUS);
          tempExpr = MultiplicativeExpression();
                                                  str += " - " + tempExpr.toString();
        } else if (jj_2_129(6)) {
          lit = NumericLiteralPositive();
                                 str += lit.getName();
        } else if (jj_2_130(6)) {
          lit = NumericLiteralNegative();
                                 str += lit.getName();
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    jjtn000.setString(str);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
   {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public SimpleNode MultiplicativeExpression() throws ParseException {
 /*@bgen(jjtree) MultiplicativeExpression */
  ASTMultiplicativeExpression jjtn000 = new ASTMultiplicativeExpression(JJTMULTIPLICATIVEEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);String str = "";
  SimpleNode tempExpr;
    try {
      tempExpr = UnaryExpression();
                             str += tempExpr.toString();
      label_17:
      while (true) {
        if (jj_2_131(6)) {
          ;
        } else {
          break label_17;
        }
        if (jj_2_132(6)) {
          jj_consume_token(STAR);
          tempExpr = UnaryExpression();
                                      str+=" * " + tempExpr.toString();
        } else if (jj_2_133(6)) {
          jj_consume_token(SLASH);
          tempExpr = UnaryExpression();
                                       str += "/" + tempExpr.toString();
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
        jjtn000.setString(str);
    {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public SimpleNode UnaryExpression() throws ParseException {
 /*@bgen(jjtree) UnaryExpression */
        ASTUnaryExpression jjtn000 = new ASTUnaryExpression(JJTUNARYEXPRESSION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);String str = "";
        SimpleNode tempExpr;
    try {
      if (jj_2_134(6)) {
        jj_consume_token(PLUS);
        tempExpr = PrimaryExpression();
                                       jjtree.closeNodeScope(jjtn000, true);
                                       jjtc000 = false;
                                      str += " + " + tempExpr.toString();
      } else if (jj_2_135(6)) {
        jj_consume_token(MINUS);
        tempExpr = PrimaryExpression();
                                          jjtree.closeNodeScope(jjtn000, true);
                                          jjtc000 = false;
                                         str += " - " + tempExpr.toString();
      } else if (jj_2_136(6)) {
        tempExpr = PrimaryExpression();
                                 str+= tempExpr.toString();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
        jjtn000.setString(str);
        {if (true) return jjtn000;}
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public SimpleNode PrimaryExpression() throws ParseException {
 /*@bgen(jjtree) PrimaryExpression */
        ASTPrimaryExpression jjtn000 = new ASTPrimaryExpression(JJTPRIMARYEXPRESSION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);SimpleNode expr;
        String str;
        INode node;
    try {
      if (jj_2_137(6)) {
        expr = BrackettedExpression();
                                jjtn000.setString(expr.toString());
      } else if (jj_2_138(6)) {
        expr = BuiltInCall();
                       jjtn000.setString(expr.toString());
      } else if (jj_2_139(6)) {
        expr = IRIrefOrFunction();
                            jjtn000.setString(expr.toString());
      } else if (jj_2_140(6)) {
        node = RDFLiteral();
                      jjtn000.setString(node.getName());
      } else if (jj_2_141(6)) {
        node = NumericLiteral();
                          jjtn000.setString(node.getName());
      } else if (jj_2_142(6)) {
        node = BooleanLiteral();
                          jjtn000.setString(node.getName());
      } else if (jj_2_143(6)) {
        node = Var();
               jjtn000.setString(node.getName());
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
   {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public SimpleNode BrackettedExpression() throws ParseException {
 /*@bgen(jjtree) BrackettedExpression */
  ASTBrackettedExpression jjtn000 = new ASTBrackettedExpression(JJTBRACKETTEDEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(LPAREN);
      Expression();
      jj_consume_token(RPAREN);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
     {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public SimpleNode BuiltInCall() throws ParseException {
 /*@bgen(jjtree) BuiltInCall */
        ASTBuiltInCall jjtn000 = new ASTBuiltInCall(JJTBUILTINCALL);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);String str = "";
        SimpleNode node;
        SimpleNode node2;
        Variable var;
    try {
      if (jj_2_144(6)) {
        jj_consume_token(STR);
        jj_consume_token(LPAREN);
        node = Expression();
        jj_consume_token(RPAREN);
                                                jjtree.closeNodeScope(jjtn000, true);
                                                jjtc000 = false;
                                               jjtn000.setString("str(" + node.toString() + ")");
      } else if (jj_2_145(6)) {
        jj_consume_token(LANG);
        jj_consume_token(LPAREN);
        node = Expression();
        jj_consume_token(RPAREN);
                                                 jjtree.closeNodeScope(jjtn000, true);
                                                 jjtc000 = false;
                                                jjtn000.setString("lang(" + node.toString() + ")");
      } else if (jj_2_146(6)) {
        jj_consume_token(LANGMATCHES);
        jj_consume_token(LPAREN);
        node = Expression();
        jj_consume_token(COMMA);
        node2 = Expression();
        jj_consume_token(RPAREN);
         jjtree.closeNodeScope(jjtn000, true);
         jjtc000 = false;
        jjtn000.setString("langMatches(" + node.toString() + ", " + node2.toString() + ")");
      } else if (jj_2_147(6)) {
        jj_consume_token(DTYPE);
        jj_consume_token(LPAREN);
        node = Expression();
        jj_consume_token(RPAREN);
                                                 jjtree.closeNodeScope(jjtn000, true);
                                                 jjtc000 = false;
                                                jjtn000.setString("datatype(" + node.toString() + ")");
      } else if (jj_2_148(6)) {
        jj_consume_token(BOUND);
        jj_consume_token(LPAREN);
        var = Var();
        jj_consume_token(RPAREN);
                                         jjtree.closeNodeScope(jjtn000, true);
                                         jjtc000 = false;
                                        jjtn000.setString("bound(" + var.getName() + ")");
      } else if (jj_2_149(6)) {
        jj_consume_token(SAME_TERM);
        jj_consume_token(LPAREN);
        node = Expression();
        jj_consume_token(COMMA);
        node2 = Expression();
        jj_consume_token(RPAREN);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
   jjtn000.setString("sameTerm(" + node.toString() + ", " + node2.toString() + ")");
      } else if (jj_2_150(6)) {
        jj_consume_token(IS_IRI);
        jj_consume_token(LPAREN);
        node = Expression();
        jj_consume_token(RPAREN);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
   jjtn000.setString("isIRI(" + node.toString() + ")");
      } else if (jj_2_151(6)) {
        jj_consume_token(IS_URI);
        jj_consume_token(LPAREN);
        node = Expression();
        jj_consume_token(RPAREN);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
         jjtn000.setString("isURI(" + node.toString() + ")");
      } else if (jj_2_152(6)) {
        jj_consume_token(IS_BLANK);
        jj_consume_token(LPAREN);
        node = Expression();
        jj_consume_token(RPAREN);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
         jjtn000.setString("isBlank(" + node.toString() + ")");
      } else if (jj_2_153(6)) {
        jj_consume_token(IS_LITERAL);
        jj_consume_token(LPAREN);
        node = Expression();
        jj_consume_token(RPAREN);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
         jjtn000.setString("isLiteral(" + node.toString() + ")");
      } else if (jj_2_154(6)) {
        // Regular expression matcher
            node = RegexExpression();
                           jjtn000.setString(node.toString());
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
     {if (true) return jjtn000;}
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public SimpleNode RegexExpression() throws ParseException {
 /*@bgen(jjtree) RegexExpression */
  ASTRegexExpression jjtn000 = new ASTRegexExpression(JJTREGEXEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(REGEX);
      jj_consume_token(LPAREN);
      Expression();
      jj_consume_token(COMMA);
      Expression();
      if (jj_2_155(6)) {
        jj_consume_token(COMMA);
        Expression();
      } else {
        ;
      }
      jj_consume_token(RPAREN);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

// The case of "q:name()" or just "q:name"
// by expanding out FunctionCall()
  final public SimpleNode IRIrefOrFunction() throws ParseException {
 /*@bgen(jjtree) IRIrefOrFunction */
        ASTIRIrefOrFunction jjtn000 = new ASTIRIrefOrFunction(JJTIRIREFORFUNCTION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);INode n;
        String str ="";
        SimpleNode argList;
    try {
      n = IRIref();
             str+=n.getName();
      if (jj_2_156(6)) {
        argList = ArgList();
                      str += argList.toString();
      } else {
        ;
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
   {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public INode RDFLiteral() throws ParseException {
 /*@bgen(jjtree) RDFLiteral */
        ASTRDFLiteral jjtn000 = new ASTRDFLiteral(JJTRDFLITERAL);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);String name;
        String lang;
        INode n;

        Literal lit;
    try {
      name = String();
                lit = new Literal(name);
      if (jj_2_157(6)) {
        jj_consume_token(AT);
        lang = String();
                        lit.setLanguage(lang);
      } else {
        ;
      }
      if (jj_2_158(6)) {
        jj_consume_token(DATATYPE);
        n = IRIref();
                           lit.setDatatype(n.getName());
      } else {
        ;
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
   {if (true) return lit;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public INode NumericLiteral() throws ParseException {
                          /*@bgen(jjtree) NumericLiteral */
                           ASTNumericLiteral jjtn000 = new ASTNumericLiteral(JJTNUMERICLITERAL);
                           boolean jjtc000 = true;
                           jjtree.openNodeScope(jjtn000);INode n ;
    try {
      if (jj_2_159(6)) {
        n = NumericLiteralUnsigned();
      } else if (jj_2_160(6)) {
        n = NumericLiteralPositive();
      } else if (jj_2_161(6)) {
        n = NumericLiteralNegative();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return n ;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public INode NumericLiteralUnsigned() throws ParseException {
                                  /*@bgen(jjtree) NumericLiteralUnsigned */
                                   ASTNumericLiteralUnsigned jjtn000 = new ASTNumericLiteralUnsigned(JJTNUMERICLITERALUNSIGNED);
                                   boolean jjtc000 = true;
                                   jjtree.openNodeScope(jjtn000);Token t ;
    try {
      if (jj_2_162(6)) {
        t = jj_consume_token(INTEGER);
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                  {if (true) return new Literal(t.image) ;}
      } else if (jj_2_163(6)) {
        t = jj_consume_token(DECIMAL);
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                  {if (true) return new Literal(t.image) ;}
      } else if (jj_2_164(6)) {
        t = jj_consume_token(DOUBLE);
                 jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
                 {if (true) return new Literal(t.image) ;}
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public INode NumericLiteralPositive() throws ParseException {
                                  /*@bgen(jjtree) NumericLiteralPositive */
                                   ASTNumericLiteralPositive jjtn000 = new ASTNumericLiteralPositive(JJTNUMERICLITERALPOSITIVE);
                                   boolean jjtc000 = true;
                                   jjtree.openNodeScope(jjtn000);Token t ;
    try {
      if (jj_2_165(6)) {
        t = jj_consume_token(INTEGER_POSITIVE);
                           jjtree.closeNodeScope(jjtn000, true);
                           jjtc000 = false;
                           {if (true) return new Literal(t.image) ;}
      } else if (jj_2_166(6)) {
        t = jj_consume_token(DECIMAL_POSITIVE);
                           jjtree.closeNodeScope(jjtn000, true);
                           jjtc000 = false;
                           {if (true) return new Literal(t.image) ;}
      } else if (jj_2_167(6)) {
        t = jj_consume_token(DOUBLE_POSITIVE);
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                          {if (true) return new Literal(t.image) ;}
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public INode NumericLiteralNegative() throws ParseException {
                                  /*@bgen(jjtree) NumericLiteralNegative */
                                   ASTNumericLiteralNegative jjtn000 = new ASTNumericLiteralNegative(JJTNUMERICLITERALNEGATIVE);
                                   boolean jjtc000 = true;
                                   jjtree.openNodeScope(jjtn000);Token t ;
    try {
      if (jj_2_168(6)) {
        t = jj_consume_token(INTEGER_NEGATIVE);
                           jjtree.closeNodeScope(jjtn000, true);
                           jjtc000 = false;
                           {if (true) return new Literal(t.image) ;}
      } else if (jj_2_169(6)) {
        t = jj_consume_token(DECIMAL_NEGATIVE);
                           jjtree.closeNodeScope(jjtn000, true);
                           jjtc000 = false;
                           {if (true) return new Literal(t.image) ;}
      } else if (jj_2_170(6)) {
        t = jj_consume_token(DOUBLE_NEGATIVE);
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                          {if (true) return new Literal(t.image) ;}
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public INode BooleanLiteral() throws ParseException {
                          /*@bgen(jjtree) BooleanLiteral */
  ASTBooleanLiteral jjtn000 = new ASTBooleanLiteral(JJTBOOLEANLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_171(6)) {
        jj_consume_token(TRUE);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return new Literal("true");}
      } else if (jj_2_172(6)) {
        jj_consume_token(FALSE);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return new Literal("false");}
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public String String() throws ParseException {
                   /*@bgen(jjtree) String */
                    ASTString jjtn000 = new ASTString(JJTSTRING);
                    boolean jjtc000 = true;
                    jjtree.openNodeScope(jjtn000);Token t ; String lex ;
    try {
      if (jj_2_173(6)) {
        t = jj_consume_token(STRING_LITERAL1);
                            lex = stripQuotes(t.image) ;
      } else if (jj_2_174(6)) {
        t = jj_consume_token(STRING_LITERAL2);
                            lex = stripQuotes(t.image) ;
      } else if (jj_2_175(6)) {
        t = jj_consume_token(STRING_LITERAL_LONG1);
                                 lex = stripQuotes(t.image) ;
      } else if (jj_2_176(6)) {
        t = jj_consume_token(STRING_LITERAL_LONG2);
                                 lex = stripQuotes(t.image) ;
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      lex = unescapeStr(lex, t.beginLine, t.beginColumn) ;
      {if (true) return lex ;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public INode IRIref() throws ParseException {
                  /*@bgen(jjtree) IRIref */
                   ASTIRIref jjtn000 = new ASTIRIref(JJTIRIREF);
                   boolean jjtc000 = true;
                   jjtree.openNodeScope(jjtn000);INode n;
    try {
      if (jj_2_177(6)) {
        n = IRI_REF();
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                  {if (true) return n ;}
      } else if (jj_2_178(6)) {
        n = PrefixedName();
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                       {if (true) return n ;}
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public Literal PrefixedName() throws ParseException {
                          /*@bgen(jjtree) PrefixedName */
                           ASTPrefixedName jjtn000 = new ASTPrefixedName(JJTPREFIXEDNAME);
                           boolean jjtc000 = true;
                           jjtree.openNodeScope(jjtn000);Token t ;
    try {
      if (jj_2_179(6)) {
        t = jj_consume_token(PNAME_LN);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      {if (true) return new Literal(t.image);}
      } else if (jj_2_180(6)) {
        t = jj_consume_token(PNAME_NS);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      {if (true) return new Literal(t.image);}
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public BlankNode BlankNode() throws ParseException {
                         /*@bgen(jjtree) BlankNode */
                          ASTBlankNode jjtn000 = new ASTBlankNode(JJTBLANKNODE);
                          boolean jjtc000 = true;
                          jjtree.openNodeScope(jjtn000);Token t = null ;
    try {
      if (jj_2_181(6)) {
        t = jj_consume_token(BLANK_NODE_LABEL);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      {if (true) return new BlankNode(t.image);}
      } else if (jj_2_182(6)) {
        jj_consume_token(ANON);
           jjtree.closeNodeScope(jjtn000, true);
           jjtc000 = false;
           {if (true) return createBlankNode() ;}
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public IRI IRI_REF() throws ParseException {
                 /*@bgen(jjtree) IRI_REF */
                  ASTIRI_REF jjtn000 = new ASTIRI_REF(JJTIRI_REF);
                  boolean jjtc000 = true;
                  jjtree.openNodeScope(jjtn000);Token t ;
    try {
      t = jj_consume_token(IRIref);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return new IRI(t.image);}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  private boolean jj_2_28(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  private boolean jj_2_29(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  private boolean jj_2_30(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  private boolean jj_2_31(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_31(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(30, xla); }
  }

  private boolean jj_2_32(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_32(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(31, xla); }
  }

  private boolean jj_2_33(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_33(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(32, xla); }
  }

  private boolean jj_2_34(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_34(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(33, xla); }
  }

  private boolean jj_2_35(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_35(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(34, xla); }
  }

  private boolean jj_2_36(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_36(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(35, xla); }
  }

  private boolean jj_2_37(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_37(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(36, xla); }
  }

  private boolean jj_2_38(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_38(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(37, xla); }
  }

  private boolean jj_2_39(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_39(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(38, xla); }
  }

  private boolean jj_2_40(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_40(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(39, xla); }
  }

  private boolean jj_2_41(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_41(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(40, xla); }
  }

  private boolean jj_2_42(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_42(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(41, xla); }
  }

  private boolean jj_2_43(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_43(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(42, xla); }
  }

  private boolean jj_2_44(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_44(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(43, xla); }
  }

  private boolean jj_2_45(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_45(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(44, xla); }
  }

  private boolean jj_2_46(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_46(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(45, xla); }
  }

  private boolean jj_2_47(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_47(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(46, xla); }
  }

  private boolean jj_2_48(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_48(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(47, xla); }
  }

  private boolean jj_2_49(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_49(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(48, xla); }
  }

  private boolean jj_2_50(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_50(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(49, xla); }
  }

  private boolean jj_2_51(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_51(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(50, xla); }
  }

  private boolean jj_2_52(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_52(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(51, xla); }
  }

  private boolean jj_2_53(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_53(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(52, xla); }
  }

  private boolean jj_2_54(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_54(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(53, xla); }
  }

  private boolean jj_2_55(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_55(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(54, xla); }
  }

  private boolean jj_2_56(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_56(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(55, xla); }
  }

  private boolean jj_2_57(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_57(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(56, xla); }
  }

  private boolean jj_2_58(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_58(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(57, xla); }
  }

  private boolean jj_2_59(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_59(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(58, xla); }
  }

  private boolean jj_2_60(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_60(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(59, xla); }
  }

  private boolean jj_2_61(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_61(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(60, xla); }
  }

  private boolean jj_2_62(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_62(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(61, xla); }
  }

  private boolean jj_2_63(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_63(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(62, xla); }
  }

  private boolean jj_2_64(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_64(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(63, xla); }
  }

  private boolean jj_2_65(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_65(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(64, xla); }
  }

  private boolean jj_2_66(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_66(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(65, xla); }
  }

  private boolean jj_2_67(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_67(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(66, xla); }
  }

  private boolean jj_2_68(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_68(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(67, xla); }
  }

  private boolean jj_2_69(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_69(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(68, xla); }
  }

  private boolean jj_2_70(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_70(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(69, xla); }
  }

  private boolean jj_2_71(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_71(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(70, xla); }
  }

  private boolean jj_2_72(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_72(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(71, xla); }
  }

  private boolean jj_2_73(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_73(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(72, xla); }
  }

  private boolean jj_2_74(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_74(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(73, xla); }
  }

  private boolean jj_2_75(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_75(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(74, xla); }
  }

  private boolean jj_2_76(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_76(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(75, xla); }
  }

  private boolean jj_2_77(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_77(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(76, xla); }
  }

  private boolean jj_2_78(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_78(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(77, xla); }
  }

  private boolean jj_2_79(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_79(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(78, xla); }
  }

  private boolean jj_2_80(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_80(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(79, xla); }
  }

  private boolean jj_2_81(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_81(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(80, xla); }
  }

  private boolean jj_2_82(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_82(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(81, xla); }
  }

  private boolean jj_2_83(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_83(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(82, xla); }
  }

  private boolean jj_2_84(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_84(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(83, xla); }
  }

  private boolean jj_2_85(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_85(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(84, xla); }
  }

  private boolean jj_2_86(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_86(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(85, xla); }
  }

  private boolean jj_2_87(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_87(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(86, xla); }
  }

  private boolean jj_2_88(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_88(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(87, xla); }
  }

  private boolean jj_2_89(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_89(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(88, xla); }
  }

  private boolean jj_2_90(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_90(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(89, xla); }
  }

  private boolean jj_2_91(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_91(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(90, xla); }
  }

  private boolean jj_2_92(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_92(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(91, xla); }
  }

  private boolean jj_2_93(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_93(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(92, xla); }
  }

  private boolean jj_2_94(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_94(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(93, xla); }
  }

  private boolean jj_2_95(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_95(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(94, xla); }
  }

  private boolean jj_2_96(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_96(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(95, xla); }
  }

  private boolean jj_2_97(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_97(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(96, xla); }
  }

  private boolean jj_2_98(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_98(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(97, xla); }
  }

  private boolean jj_2_99(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_99(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(98, xla); }
  }

  private boolean jj_2_100(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_100(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(99, xla); }
  }

  private boolean jj_2_101(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_101(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(100, xla); }
  }

  private boolean jj_2_102(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_102(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(101, xla); }
  }

  private boolean jj_2_103(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_103(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(102, xla); }
  }

  private boolean jj_2_104(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_104(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(103, xla); }
  }

  private boolean jj_2_105(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_105(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(104, xla); }
  }

  private boolean jj_2_106(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_106(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(105, xla); }
  }

  private boolean jj_2_107(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_107(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(106, xla); }
  }

  private boolean jj_2_108(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_108(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(107, xla); }
  }

  private boolean jj_2_109(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_109(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(108, xla); }
  }

  private boolean jj_2_110(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_110(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(109, xla); }
  }

  private boolean jj_2_111(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_111(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(110, xla); }
  }

  private boolean jj_2_112(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_112(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(111, xla); }
  }

  private boolean jj_2_113(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_113(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(112, xla); }
  }

  private boolean jj_2_114(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_114(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(113, xla); }
  }

  private boolean jj_2_115(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_115(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(114, xla); }
  }

  private boolean jj_2_116(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_116(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(115, xla); }
  }

  private boolean jj_2_117(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_117(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(116, xla); }
  }

  private boolean jj_2_118(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_118(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(117, xla); }
  }

  private boolean jj_2_119(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_119(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(118, xla); }
  }

  private boolean jj_2_120(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_120(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(119, xla); }
  }

  private boolean jj_2_121(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_121(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(120, xla); }
  }

  private boolean jj_2_122(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_122(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(121, xla); }
  }

  private boolean jj_2_123(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_123(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(122, xla); }
  }

  private boolean jj_2_124(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_124(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(123, xla); }
  }

  private boolean jj_2_125(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_125(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(124, xla); }
  }

  private boolean jj_2_126(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_126(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(125, xla); }
  }

  private boolean jj_2_127(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_127(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(126, xla); }
  }

  private boolean jj_2_128(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_128(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(127, xla); }
  }

  private boolean jj_2_129(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_129(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(128, xla); }
  }

  private boolean jj_2_130(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_130(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(129, xla); }
  }

  private boolean jj_2_131(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_131(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(130, xla); }
  }

  private boolean jj_2_132(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_132(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(131, xla); }
  }

  private boolean jj_2_133(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_133(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(132, xla); }
  }

  private boolean jj_2_134(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_134(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(133, xla); }
  }

  private boolean jj_2_135(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_135(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(134, xla); }
  }

  private boolean jj_2_136(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_136(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(135, xla); }
  }

  private boolean jj_2_137(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_137(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(136, xla); }
  }

  private boolean jj_2_138(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_138(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(137, xla); }
  }

  private boolean jj_2_139(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_139(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(138, xla); }
  }

  private boolean jj_2_140(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_140(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(139, xla); }
  }

  private boolean jj_2_141(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_141(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(140, xla); }
  }

  private boolean jj_2_142(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_142(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(141, xla); }
  }

  private boolean jj_2_143(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_143(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(142, xla); }
  }

  private boolean jj_2_144(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_144(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(143, xla); }
  }

  private boolean jj_2_145(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_145(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(144, xla); }
  }

  private boolean jj_2_146(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_146(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(145, xla); }
  }

  private boolean jj_2_147(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_147(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(146, xla); }
  }

  private boolean jj_2_148(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_148(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(147, xla); }
  }

  private boolean jj_2_149(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_149(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(148, xla); }
  }

  private boolean jj_2_150(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_150(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(149, xla); }
  }

  private boolean jj_2_151(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_151(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(150, xla); }
  }

  private boolean jj_2_152(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_152(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(151, xla); }
  }

  private boolean jj_2_153(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_153(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(152, xla); }
  }

  private boolean jj_2_154(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_154(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(153, xla); }
  }

  private boolean jj_2_155(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_155(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(154, xla); }
  }

  private boolean jj_2_156(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_156(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(155, xla); }
  }

  private boolean jj_2_157(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_157(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(156, xla); }
  }

  private boolean jj_2_158(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_158(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(157, xla); }
  }

  private boolean jj_2_159(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_159(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(158, xla); }
  }

  private boolean jj_2_160(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_160(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(159, xla); }
  }

  private boolean jj_2_161(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_161(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(160, xla); }
  }

  private boolean jj_2_162(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_162(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(161, xla); }
  }

  private boolean jj_2_163(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_163(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(162, xla); }
  }

  private boolean jj_2_164(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_164(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(163, xla); }
  }

  private boolean jj_2_165(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_165(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(164, xla); }
  }

  private boolean jj_2_166(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_166(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(165, xla); }
  }

  private boolean jj_2_167(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_167(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(166, xla); }
  }

  private boolean jj_2_168(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_168(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(167, xla); }
  }

  private boolean jj_2_169(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_169(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(168, xla); }
  }

  private boolean jj_2_170(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_170(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(169, xla); }
  }

  private boolean jj_2_171(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_171(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(170, xla); }
  }

  private boolean jj_2_172(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_172(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(171, xla); }
  }

  private boolean jj_2_173(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_173(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(172, xla); }
  }

  private boolean jj_2_174(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_174(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(173, xla); }
  }

  private boolean jj_2_175(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_175(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(174, xla); }
  }

  private boolean jj_2_176(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_176(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(175, xla); }
  }

  private boolean jj_2_177(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_177(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(176, xla); }
  }

  private boolean jj_2_178(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_178(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(177, xla); }
  }

  private boolean jj_2_179(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_179(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(178, xla); }
  }

  private boolean jj_2_180(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_180(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(179, xla); }
  }

  private boolean jj_2_181(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_181(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(180, xla); }
  }

  private boolean jj_2_182(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_182(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(181, xla); }
  }

  private boolean jj_3R_52() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_92()) {
    jj_scanpos = xsp;
    if (jj_3_93()) return true;
    }
    return false;
  }

  private boolean jj_3_156() {
    if (jj_3R_87()) return true;
    return false;
  }

  private boolean jj_3_92() {
    if (jj_3R_61()) return true;
    if (jj_3R_62()) return true;
    return false;
  }

  private boolean jj_3_90() {
    if (jj_3R_60()) return true;
    return false;
  }

  private boolean jj_3R_85() {
    if (jj_3R_72()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_156()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_91() {
    if (jj_scan_token(DOT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_90()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_60() {
    if (jj_3R_52()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_91()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_155() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_59()) return true;
    return false;
  }

  private boolean jj_3_89() {
    if (jj_3R_60()) return true;
    return false;
  }

  private boolean jj_3R_86() {
    if (jj_scan_token(REGEX)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_59()) return true;
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_59()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_155()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_93() {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_89()) jj_scanpos = xsp;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3_154() {
    if (jj_3R_86()) return true;
    return false;
  }

  private boolean jj_3_86() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_59()) return true;
    return false;
  }

  private boolean jj_3_44() {
    if (jj_3R_38()) return true;
    return false;
  }

  private boolean jj_3_153() {
    if (jj_scan_token(IS_LITERAL)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_59()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_38() {
    if (jj_scan_token(WINDOW)) return true;
    if (jj_scan_token(ELEMS)) return true;
    if (jj_scan_token(INTEGER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_46()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_152() {
    if (jj_scan_token(IS_BLANK)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_59()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3_88() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_59()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_86()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3_151() {
    if (jj_scan_token(IS_URI)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_59()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3_87() {
    if (jj_scan_token(NIL)) return true;
    return false;
  }

  private boolean jj_3R_87() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_87()) {
    jj_scanpos = xsp;
    if (jj_3_88()) return true;
    }
    return false;
  }

  private boolean jj_3_150() {
    if (jj_scan_token(IS_IRI)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_59()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3_149() {
    if (jj_scan_token(SAME_TERM)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_59()) return true;
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_59()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3_148() {
    if (jj_scan_token(BOUND)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_30()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3_45() {
    if (jj_scan_token(ADVANCE)) return true;
    if (jj_3R_39()) return true;
    return false;
  }

  private boolean jj_3_147() {
    if (jj_scan_token(DTYPE)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_59()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_58() {
    if (jj_3R_72()) return true;
    if (jj_3R_87()) return true;
    return false;
  }

  private boolean jj_3R_37() {
    if (jj_scan_token(WINDOW)) return true;
    if (jj_scan_token(RANGE)) return true;
    if (jj_3R_39()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_45()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_146() {
    if (jj_scan_token(LANGMATCHES)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_59()) return true;
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_59()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3_145() {
    if (jj_scan_token(LANG)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_59()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3_85() {
    if (jj_3R_58()) return true;
    return false;
  }

  private boolean jj_3_84() {
    if (jj_3R_57()) return true;
    return false;
  }

  private boolean jj_3_144() {
    if (jj_scan_token(STR)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_59()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3_83() {
    if (jj_3R_47()) return true;
    return false;
  }

  private boolean jj_3R_57() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_144()) {
    jj_scanpos = xsp;
    if (jj_3_145()) {
    jj_scanpos = xsp;
    if (jj_3_146()) {
    jj_scanpos = xsp;
    if (jj_3_147()) {
    jj_scanpos = xsp;
    if (jj_3_148()) {
    jj_scanpos = xsp;
    if (jj_3_149()) {
    jj_scanpos = xsp;
    if (jj_3_150()) {
    jj_scanpos = xsp;
    if (jj_3_151()) {
    jj_scanpos = xsp;
    if (jj_3_152()) {
    jj_scanpos = xsp;
    if (jj_3_153()) {
    jj_scanpos = xsp;
    if (jj_3_154()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_46() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_83()) {
    jj_scanpos = xsp;
    if (jj_3_84()) {
    jj_scanpos = xsp;
    if (jj_3_85()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_43() {
    if (jj_3R_37()) return true;
    return false;
  }

  private boolean jj_3R_50() {
    if (jj_scan_token(FILTER)) return true;
    if (jj_3R_46()) return true;
    return false;
  }

  private boolean jj_3R_97() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_43()) {
    jj_scanpos = xsp;
    if (jj_3_44()) return true;
    }
    return false;
  }

  private boolean jj_3_42() {
    if (jj_scan_token(COUNT)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_30()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3_41() {
    if (jj_scan_token(SUM)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_30()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3_82() {
    if (jj_scan_token(UNION)) return true;
    if (jj_3R_56()) return true;
    return false;
  }

  private boolean jj_3R_47() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_59()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3_40() {
    if (jj_scan_token(MAX)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_30()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_54() {
    if (jj_3R_56()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_82()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_39() {
    if (jj_scan_token(MIN)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_30()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3_38() {
    if (jj_scan_token(AVG)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_30()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_31() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_38()) {
    jj_scanpos = xsp;
    if (jj_3_39()) {
    jj_scanpos = xsp;
    if (jj_3_40()) {
    jj_scanpos = xsp;
    if (jj_3_41()) {
    jj_scanpos = xsp;
    if (jj_3_42()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_143() {
    if (jj_3R_30()) return true;
    return false;
  }

  private boolean jj_3R_55() {
    if (jj_scan_token(GRAPH)) return true;
    if (jj_3R_34()) return true;
    if (jj_3R_56()) return true;
    return false;
  }

  private boolean jj_3_142() {
    if (jj_3R_75()) return true;
    return false;
  }

  private boolean jj_3_141() {
    if (jj_3R_74()) return true;
    return false;
  }

  private boolean jj_3_140() {
    if (jj_3R_73()) return true;
    return false;
  }

  private boolean jj_3R_53() {
    if (jj_scan_token(OPTIONAL)) return true;
    if (jj_3R_56()) return true;
    return false;
  }

  private boolean jj_3_139() {
    if (jj_3R_85()) return true;
    return false;
  }

  private boolean jj_3_138() {
    if (jj_3R_57()) return true;
    return false;
  }

  private boolean jj_3_37() {
    if (jj_scan_token(NAMED)) return true;
    return false;
  }

  private boolean jj_3_137() {
    if (jj_3R_47()) return true;
    return false;
  }

  private boolean jj_3R_84() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_137()) {
    jj_scanpos = xsp;
    if (jj_3_138()) {
    jj_scanpos = xsp;
    if (jj_3_139()) {
    jj_scanpos = xsp;
    if (jj_3_140()) {
    jj_scanpos = xsp;
    if (jj_3_141()) {
    jj_scanpos = xsp;
    if (jj_3_142()) {
    jj_scanpos = xsp;
    if (jj_3_143()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_81() {
    if (jj_3R_55()) return true;
    return false;
  }

  private boolean jj_3_80() {
    if (jj_3R_54()) return true;
    return false;
  }

  private boolean jj_3_79() {
    if (jj_3R_53()) return true;
    return false;
  }

  private boolean jj_3R_36() {
    if (jj_scan_token(STREAM)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_37()) jj_scanpos = xsp;
    if (jj_3R_96()) return true;
    if (jj_3R_97()) return true;
    return false;
  }

  private boolean jj_3R_49() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_79()) {
    jj_scanpos = xsp;
    if (jj_3_80()) {
    jj_scanpos = xsp;
    if (jj_3_81()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_136() {
    if (jj_3R_84()) return true;
    return false;
  }

  private boolean jj_3_135() {
    if (jj_scan_token(MINUS)) return true;
    if (jj_3R_84()) return true;
    return false;
  }

  private boolean jj_3_134() {
    if (jj_scan_token(PLUS)) return true;
    if (jj_3R_84()) return true;
    return false;
  }

  private boolean jj_3R_83() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_134()) {
    jj_scanpos = xsp;
    if (jj_3_135()) {
    jj_scanpos = xsp;
    if (jj_3_136()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_133() {
    if (jj_scan_token(SLASH)) return true;
    if (jj_3R_83()) return true;
    return false;
  }

  private boolean jj_3_131() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_132()) {
    jj_scanpos = xsp;
    if (jj_3_133()) return true;
    }
    return false;
  }

  private boolean jj_3_132() {
    if (jj_scan_token(STAR)) return true;
    if (jj_3R_83()) return true;
    return false;
  }

  private boolean jj_3R_80() {
    if (jj_3R_83()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_131()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_36() {
    if (jj_scan_token(FROM)) return true;
    if (jj_3R_36()) return true;
    return false;
  }

  private boolean jj_3R_95() {
    Token xsp;
    if (jj_3_36()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_36()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_130() {
    if (jj_3R_82()) return true;
    return false;
  }

  private boolean jj_3_129() {
    if (jj_3R_81()) return true;
    return false;
  }

  private boolean jj_3_128() {
    if (jj_scan_token(MINUS)) return true;
    if (jj_3R_80()) return true;
    return false;
  }

  private boolean jj_3_126() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_127()) {
    jj_scanpos = xsp;
    if (jj_3_128()) {
    jj_scanpos = xsp;
    if (jj_3_129()) {
    jj_scanpos = xsp;
    if (jj_3_130()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3_127() {
    if (jj_scan_token(PLUS)) return true;
    if (jj_3R_80()) return true;
    return false;
  }

  private boolean jj_3R_100() {
    if (jj_3R_80()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_126()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_32() {
    if (jj_3R_95()) return true;
    return false;
  }

  private boolean jj_3R_79() {
    if (jj_3R_100()) return true;
    return false;
  }

  private boolean jj_3_35() {
    if (jj_3R_32()) return true;
    return false;
  }

  private boolean jj_3R_21() {
    if (jj_scan_token(ASK)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_35()) jj_scanpos = xsp;
    if (jj_3R_35()) return true;
    return false;
  }

  private boolean jj_3_124() {
    if (jj_scan_token(GE)) return true;
    if (jj_3R_79()) return true;
    return false;
  }

  private boolean jj_3_123() {
    if (jj_scan_token(LE)) return true;
    if (jj_3R_79()) return true;
    return false;
  }

  private boolean jj_3_122() {
    if (jj_scan_token(GT)) return true;
    if (jj_3R_79()) return true;
    return false;
  }

  private boolean jj_3_121() {
    if (jj_scan_token(LT)) return true;
    if (jj_3R_79()) return true;
    return false;
  }

  private boolean jj_3_34() {
    if (jj_3R_35()) return true;
    return false;
  }

  private boolean jj_3_120() {
    if (jj_scan_token(NE)) return true;
    if (jj_3R_79()) return true;
    return false;
  }

  private boolean jj_3_33() {
    if (jj_3R_32()) return true;
    return false;
  }

  private boolean jj_3_119() {
    if (jj_scan_token(EQ)) return true;
    if (jj_3R_79()) return true;
    return false;
  }

  private boolean jj_3_125() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_119()) {
    jj_scanpos = xsp;
    if (jj_3_120()) {
    jj_scanpos = xsp;
    if (jj_3_121()) {
    jj_scanpos = xsp;
    if (jj_3_122()) {
    jj_scanpos = xsp;
    if (jj_3_123()) {
    jj_scanpos = xsp;
    if (jj_3_124()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_30() {
    if (jj_3R_34()) return true;
    return false;
  }

  private boolean jj_3_32() {
    if (jj_scan_token(STAR)) return true;
    return false;
  }

  private boolean jj_3R_99() {
    if (jj_3R_79()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_125()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_31() {
    Token xsp;
    if (jj_3_30()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_30()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_20() {
    if (jj_scan_token(DESCRIBE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_31()) {
    jj_scanpos = xsp;
    if (jj_3_32()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3_33()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3_34()) jj_scanpos = xsp;
    if (jj_3R_92()) return true;
    return false;
  }

  private boolean jj_3R_78() {
    if (jj_3R_99()) return true;
    return false;
  }

  private boolean jj_3_29() {
    if (jj_3R_32()) return true;
    return false;
  }

  private boolean jj_3_118() {
    if (jj_scan_token(SC_AND)) return true;
    if (jj_3R_78()) return true;
    return false;
  }

  private boolean jj_3_73() {
    if (jj_3R_50()) return true;
    return false;
  }

  private boolean jj_3R_77() {
    if (jj_3R_78()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_118()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_78() {
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  private boolean jj_3R_19() {
    if (jj_scan_token(CONSTRUCT)) return true;
    if (jj_3R_93()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_29()) jj_scanpos = xsp;
    if (jj_3R_35()) return true;
    return false;
  }

  private boolean jj_3_117() {
    if (jj_scan_token(SC_OR)) return true;
    if (jj_3R_77()) return true;
    return false;
  }

  private boolean jj_3_77() {
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_52()) return true;
    return false;
  }

  private boolean jj_3R_98() {
    if (jj_3R_77()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_117()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_28() {
    if (jj_3R_33()) return true;
    return false;
  }

  private boolean jj_3_27() {
    if (jj_3R_32()) return true;
    return false;
  }

  private boolean jj_3R_48() {
    if (jj_3R_52()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_77()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3_78()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_59() {
    if (jj_3R_98()) return true;
    return false;
  }

  private boolean jj_3_26() {
    if (jj_scan_token(STAR)) return true;
    return false;
  }

  private boolean jj_3_110() {
    if (jj_scan_token(VAR2)) return true;
    return false;
  }

  private boolean jj_3_76() {
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3_23() {
    if (jj_3R_31()) return true;
    return false;
  }

  private boolean jj_3_116() {
    if (jj_scan_token(NIL)) return true;
    return false;
  }

  private boolean jj_3_75() {
    if (jj_3R_48()) return true;
    return false;
  }

  private boolean jj_3_115() {
    if (jj_3R_76()) return true;
    return false;
  }

  private boolean jj_3_114() {
    if (jj_3R_75()) return true;
    return false;
  }

  private boolean jj_3_113() {
    if (jj_3R_74()) return true;
    return false;
  }

  private boolean jj_3_72() {
    if (jj_3R_49()) return true;
    return false;
  }

  private boolean jj_3_74() {
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  private boolean jj_3_112() {
    if (jj_3R_73()) return true;
    return false;
  }

  private boolean jj_3R_71() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_111()) {
    jj_scanpos = xsp;
    if (jj_3_112()) {
    jj_scanpos = xsp;
    if (jj_3_113()) {
    jj_scanpos = xsp;
    if (jj_3_114()) {
    jj_scanpos = xsp;
    if (jj_3_115()) {
    jj_scanpos = xsp;
    if (jj_3_116()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_111() {
    if (jj_3R_72()) return true;
    return false;
  }

  private boolean jj_3_22() {
    if (jj_3R_30()) return true;
    return false;
  }

  private boolean jj_3_24() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_22()) {
    jj_scanpos = xsp;
    if (jj_3_23()) return true;
    }
    return false;
  }

  private boolean jj_3_71() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_72()) {
    jj_scanpos = xsp;
    if (jj_3_73()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3_74()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3_75()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_25() {
    Token xsp;
    if (jj_3_24()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_24()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_109() {
    if (jj_scan_token(VAR1)) return true;
    return false;
  }

  private boolean jj_3R_30() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_109()) {
    jj_scanpos = xsp;
    if (jj_3_110()) return true;
    }
    return false;
  }

  private boolean jj_3_70() {
    if (jj_3R_48()) return true;
    return false;
  }

  private boolean jj_3_20() {
    if (jj_scan_token(REDUCED)) return true;
    return false;
  }

  private boolean jj_3_108() {
    if (jj_3R_72()) return true;
    return false;
  }

  private boolean jj_3_19() {
    if (jj_scan_token(DISTINCT)) return true;
    return false;
  }

  private boolean jj_3_21() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_19()) {
    jj_scanpos = xsp;
    if (jj_3_20()) return true;
    }
    return false;
  }

  private boolean jj_3R_18() {
    if (jj_scan_token(SELECT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_21()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3_25()) {
    jj_scanpos = xsp;
    if (jj_3_26()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3_27()) jj_scanpos = xsp;
    if (jj_3R_35()) return true;
    xsp = jj_scanpos;
    if (jj_3_28()) jj_scanpos = xsp;
    if (jj_3R_92()) return true;
    return false;
  }

  private boolean jj_3R_56() {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_70()) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_71()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3_76()) jj_scanpos = xsp;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3_106() {
    if (jj_3R_71()) return true;
    return false;
  }

  private boolean jj_3R_29() {
    if (jj_scan_token(PREFIX)) return true;
    if (jj_scan_token(PNAME_NS)) return true;
    if (jj_3R_90()) return true;
    return false;
  }

  private boolean jj_3_107() {
    if (jj_3R_30()) return true;
    return false;
  }

  private boolean jj_3R_43() {
    if (jj_scan_token(OFFSET)) return true;
    if (jj_scan_token(INTEGER)) return true;
    return false;
  }

  private boolean jj_3R_34() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_107()) {
    jj_scanpos = xsp;
    if (jj_3_108()) return true;
    }
    return false;
  }

  private boolean jj_3R_44() {
    if (jj_scan_token(LIMIT)) return true;
    if (jj_scan_token(INTEGER)) return true;
    return false;
  }

  private boolean jj_3_105() {
    if (jj_3R_30()) return true;
    return false;
  }

  private boolean jj_3R_28() {
    if (jj_scan_token(BASE)) return true;
    if (jj_3R_90()) return true;
    return false;
  }

  private boolean jj_3R_61() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_105()) {
    jj_scanpos = xsp;
    if (jj_3_106()) return true;
    }
    return false;
  }

  private boolean jj_3_67() {
    if (jj_3R_30()) return true;
    return false;
  }

  private boolean jj_3_18() {
    if (jj_3R_29()) return true;
    return false;
  }

  private boolean jj_3_66() {
    if (jj_3R_46()) return true;
    return false;
  }

  private boolean jj_3_17() {
    if (jj_3R_28()) return true;
    return false;
  }

  private boolean jj_3_69() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_66()) {
    jj_scanpos = xsp;
    if (jj_3_67()) return true;
    }
    return false;
  }

  private boolean jj_3_65() {
    if (jj_scan_token(DESC)) return true;
    return false;
  }

  private boolean jj_3_63() {
    if (jj_3R_45()) return true;
    return false;
  }

  private boolean jj_3R_22() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_17()) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_18()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_64() {
    if (jj_scan_token(ASC)) return true;
    return false;
  }

  private boolean jj_3_104() {
    if (jj_3R_63()) return true;
    return false;
  }

  private boolean jj_3R_70() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_103()) {
    jj_scanpos = xsp;
    if (jj_3_104()) return true;
    }
    return false;
  }

  private boolean jj_3_103() {
    if (jj_3R_61()) return true;
    return false;
  }

  private boolean jj_3_60() {
    if (jj_3R_44()) return true;
    return false;
  }

  private boolean jj_3_68() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_64()) {
    jj_scanpos = xsp;
    if (jj_3_65()) return true;
    }
    if (jj_3R_47()) return true;
    return false;
  }

  private boolean jj_3_59() {
    if (jj_3R_43()) return true;
    return false;
  }

  private boolean jj_3R_45() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_68()) {
    jj_scanpos = xsp;
    if (jj_3_69()) return true;
    }
    return false;
  }

  private boolean jj_3R_27() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3_56() {
    if (jj_3R_30()) return true;
    return false;
  }

  private boolean jj_3_102() {
    if (jj_3R_70()) return true;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_3R_21()) return true;
    return false;
  }

  private boolean jj_3R_68() {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    if (jj_3_102()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_102()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_41() {
    if (jj_scan_token(ORDER)) return true;
    if (jj_scan_token(BY)) return true;
    Token xsp;
    if (jj_3_63()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_63()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_26() {
    if (jj_scan_token(CSV)) return true;
    if (jj_scan_token(STRING_LITERAL1)) return true;
    return false;
  }

  private boolean jj_3_99() {
    if (jj_scan_token(KW_A)) return true;
    return false;
  }

  private boolean jj_3_62() {
    if (jj_3R_43()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_60()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_61() {
    if (jj_3R_44()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_59()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_69() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_62()) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_90() {
    if (jj_scan_token(IRIref)) return true;
    return false;
  }

  private boolean jj_3_16() {
    if (jj_3R_27()) return true;
    return false;
  }

  private boolean jj_3R_42() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_61()) {
    jj_scanpos = xsp;
    if (jj_3_62()) return true;
    }
    return false;
  }

  private boolean jj_3_101() {
    if (jj_3R_69()) return true;
    return false;
  }

  private boolean jj_3_14() {
    if (jj_3R_26()) return true;
    return false;
  }

  private boolean jj_3R_63() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_100()) {
    jj_scanpos = xsp;
    if (jj_3_101()) return true;
    }
    return false;
  }

  private boolean jj_3_100() {
    if (jj_3R_68()) return true;
    return false;
  }

  private boolean jj_3R_94() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_15()) {
    jj_scanpos = xsp;
    if (jj_3_16()) return true;
    }
    return false;
  }

  private boolean jj_3_182() {
    if (jj_scan_token(ANON)) return true;
    return false;
  }

  private boolean jj_3_15() {
    if (jj_scan_token(IPADDRESS)) return true;
    return false;
  }

  private boolean jj_3_9() {
    if (jj_scan_token(ADD)) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_3R_20()) return true;
    return false;
  }

  private boolean jj_3_58() {
    if (jj_3R_42()) return true;
    return false;
  }

  private boolean jj_3_57() {
    if (jj_3R_41()) return true;
    return false;
  }

  private boolean jj_3R_33() {
    if (jj_scan_token(GROUP)) return true;
    if (jj_scan_token(BY)) return true;
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    if (jj_3_56()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_56()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_92() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_57()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3_58()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_76() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_181()) {
    jj_scanpos = xsp;
    if (jj_3_182()) return true;
    }
    return false;
  }

  private boolean jj_3_181() {
    if (jj_scan_token(BLANK_NODE_LABEL)) return true;
    return false;
  }

  private boolean jj_3R_25() {
    if (jj_scan_token(CHANNEL)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_scan_token(INTEGER)) return true;
    return false;
  }

  private boolean jj_3_98() {
    if (jj_3R_34()) return true;
    return false;
  }

  private boolean jj_3_180() {
    if (jj_scan_token(PNAME_NS)) return true;
    return false;
  }

  private boolean jj_3_13() {
    if (jj_3R_25()) return true;
    return false;
  }

  private boolean jj_3R_65() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_98()) {
    jj_scanpos = xsp;
    if (jj_3_99()) return true;
    }
    return false;
  }

  private boolean jj_3R_35() {
    if (jj_scan_token(WHERE)) return true;
    if (jj_3R_56()) return true;
    return false;
  }

  private boolean jj_3_179() {
    if (jj_scan_token(PNAME_LN)) return true;
    return false;
  }

  private boolean jj_3_11() {
    if (jj_scan_token(WITH)) return true;
    return false;
  }

  private boolean jj_3_8() {
    if (jj_scan_token(ATTACH)) return true;
    return false;
  }

  private boolean jj_3R_91() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_179()) {
    jj_scanpos = xsp;
    if (jj_3_180()) return true;
    }
    return false;
  }

  private boolean jj_3R_67() {
    if (jj_3R_70()) return true;
    return false;
  }

  private boolean jj_3R_24() {
    if (jj_scan_token(SOCKET)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_scan_token(INTEGER)) return true;
    return false;
  }

  private boolean jj_3_178() {
    if (jj_3R_91()) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3R_72() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_177()) {
    jj_scanpos = xsp;
    if (jj_3_178()) return true;
    }
    return false;
  }

  private boolean jj_3_177() {
    if (jj_3R_90()) return true;
    return false;
  }

  private boolean jj_3_12() {
    if (jj_3R_24()) return true;
    return false;
  }

  private boolean jj_3R_96() {
    if (jj_3R_90()) return true;
    return false;
  }

  private boolean jj_3_10() {
    if (jj_scan_token(FROM)) return true;
    return false;
  }

  private boolean jj_3_7() {
    if (jj_scan_token(CREATE)) return true;
    return false;
  }

  private boolean jj_3_97() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_67()) return true;
    return false;
  }

  private boolean jj_3R_23() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_7()) {
    jj_scanpos = xsp;
    if (jj_3_8()) {
    jj_scanpos = xsp;
    if (jj_3_9()) return true;
    }
    }
    if (jj_scan_token(STREAM)) return true;
    if (jj_3R_72()) return true;
    xsp = jj_scanpos;
    if (jj_3_10()) {
    jj_scanpos = xsp;
    if (jj_3_11()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3_12()) {
    jj_scanpos = xsp;
    if (jj_3_13()) {
    jj_scanpos = xsp;
    if (jj_3_14()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_55() {
    if (jj_scan_token(WEEK)) return true;
    return false;
  }

  private boolean jj_3_49() {
    if (jj_3R_40()) return true;
    return false;
  }

  private boolean jj_3_176() {
    if (jj_scan_token(STRING_LITERAL_LONG2)) return true;
    return false;
  }

  private boolean jj_3_54() {
    if (jj_scan_token(DAY)) return true;
    return false;
  }

  private boolean jj_3_175() {
    if (jj_scan_token(STRING_LITERAL_LONG1)) return true;
    return false;
  }

  private boolean jj_3_53() {
    if (jj_scan_token(HOUR)) return true;
    return false;
  }

  private boolean jj_3_174() {
    if (jj_scan_token(STRING_LITERAL2)) return true;
    return false;
  }

  private boolean jj_3_52() {
    if (jj_scan_token(MINUTE)) return true;
    return false;
  }

  private boolean jj_3R_66() {
    if (jj_3R_67()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_97()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_173() {
    if (jj_scan_token(STRING_LITERAL1)) return true;
    return false;
  }

  private boolean jj_3_51() {
    if (jj_scan_token(S)) return true;
    return false;
  }

  private boolean jj_3R_88() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_173()) {
    jj_scanpos = xsp;
    if (jj_3_174()) {
    jj_scanpos = xsp;
    if (jj_3_175()) {
    jj_scanpos = xsp;
    if (jj_3_176()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3_50() {
    if (jj_scan_token(MS)) return true;
    return false;
  }

  private boolean jj_3R_40() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_50()) {
    jj_scanpos = xsp;
    if (jj_3_51()) {
    jj_scanpos = xsp;
    if (jj_3_52()) {
    jj_scanpos = xsp;
    if (jj_3_53()) {
    jj_scanpos = xsp;
    if (jj_3_54()) {
    jj_scanpos = xsp;
    if (jj_3_55()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_18()) return true;
    return false;
  }

  private boolean jj_3_6() {
    if (jj_3R_23()) return true;
    return false;
  }

  private boolean jj_3_5() {
    if (jj_3R_22()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_1()) {
    jj_scanpos = xsp;
    if (jj_3_2()) {
    jj_scanpos = xsp;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_3_4()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3_172() {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  private boolean jj_3R_39() {
    if (jj_scan_token(INTEGER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_49()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_75() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_171()) {
    jj_scanpos = xsp;
    if (jj_3_172()) return true;
    }
    return false;
  }

  private boolean jj_3_171() {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  private boolean jj_3_48() {
    if (jj_3R_38()) return true;
    return false;
  }

  private boolean jj_3_170() {
    if (jj_scan_token(DOUBLE_NEGATIVE)) return true;
    return false;
  }

  private boolean jj_3_169() {
    if (jj_scan_token(DECIMAL_NEGATIVE)) return true;
    return false;
  }

  private boolean jj_3R_82() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_168()) {
    jj_scanpos = xsp;
    if (jj_3_169()) {
    jj_scanpos = xsp;
    if (jj_3_170()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_168() {
    if (jj_scan_token(INTEGER_NEGATIVE)) return true;
    return false;
  }

  private boolean jj_3_167() {
    if (jj_scan_token(DOUBLE_POSITIVE)) return true;
    return false;
  }

  private boolean jj_3_166() {
    if (jj_scan_token(DECIMAL_POSITIVE)) return true;
    return false;
  }

  private boolean jj_3R_81() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_165()) {
    jj_scanpos = xsp;
    if (jj_3_166()) {
    jj_scanpos = xsp;
    if (jj_3_167()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_165() {
    if (jj_scan_token(INTEGER_POSITIVE)) return true;
    return false;
  }

  private boolean jj_3_96() {
    if (jj_3R_62()) return true;
    return false;
  }

  private boolean jj_3_95() {
    if (jj_3R_65()) return true;
    if (jj_3R_66()) return true;
    return false;
  }

  private boolean jj_3R_64() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_96()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_164() {
    if (jj_scan_token(DOUBLE)) return true;
    return false;
  }

  private boolean jj_3_163() {
    if (jj_scan_token(DECIMAL)) return true;
    return false;
  }

  private boolean jj_3R_89() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_162()) {
    jj_scanpos = xsp;
    if (jj_3_163()) {
    jj_scanpos = xsp;
    if (jj_3_164()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_162() {
    if (jj_scan_token(INTEGER)) return true;
    return false;
  }

  private boolean jj_3_161() {
    if (jj_3R_82()) return true;
    return false;
  }

  private boolean jj_3_160() {
    if (jj_3R_81()) return true;
    return false;
  }

  private boolean jj_3_94() {
    if (jj_scan_token(SEMICOLON)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_95()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_159() {
    if (jj_3R_89()) return true;
    return false;
  }

  private boolean jj_3_47() {
    if (jj_3R_37()) return true;
    return false;
  }

  private boolean jj_3R_74() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_159()) {
    jj_scanpos = xsp;
    if (jj_3_160()) {
    jj_scanpos = xsp;
    if (jj_3_161()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_51() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_47()) {
    jj_scanpos = xsp;
    if (jj_3_48()) return true;
    }
    return false;
  }

  private boolean jj_3R_62() {
    if (jj_3R_65()) return true;
    if (jj_3R_66()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_94()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_158() {
    if (jj_scan_token(DATATYPE)) return true;
    if (jj_3R_72()) return true;
    return false;
  }

  private boolean jj_3_157() {
    if (jj_scan_token(AT)) return true;
    if (jj_3R_88()) return true;
    return false;
  }

  private boolean jj_3R_73() {
    if (jj_3R_88()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_157()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3_158()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_93() {
    if (jj_3R_63()) return true;
    if (jj_3R_64()) return true;
    return false;
  }

  private boolean jj_3_46() {
    if (jj_scan_token(ADVANCE)) return true;
    if (jj_scan_token(INTEGER)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public SPARQLParserTokenManager token_source;
  JavaCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[0];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static private int[] jj_la1_4;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
      jj_la1_init_3();
      jj_la1_init_4();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {};
   }
   private static void jj_la1_init_3() {
      jj_la1_3 = new int[] {};
   }
   private static void jj_la1_init_4() {
      jj_la1_4 = new int[] {};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[182];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public SPARQLParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public SPARQLParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new SPARQLParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public SPARQLParser(java.io.Reader stream) {
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new SPARQLParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public SPARQLParser(SPARQLParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(SPARQLParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[142];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 0; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
          if ((jj_la1_4[i] & (1<<j)) != 0) {
            la1tokens[128+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 142; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 182; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
            case 28: jj_3_29(); break;
            case 29: jj_3_30(); break;
            case 30: jj_3_31(); break;
            case 31: jj_3_32(); break;
            case 32: jj_3_33(); break;
            case 33: jj_3_34(); break;
            case 34: jj_3_35(); break;
            case 35: jj_3_36(); break;
            case 36: jj_3_37(); break;
            case 37: jj_3_38(); break;
            case 38: jj_3_39(); break;
            case 39: jj_3_40(); break;
            case 40: jj_3_41(); break;
            case 41: jj_3_42(); break;
            case 42: jj_3_43(); break;
            case 43: jj_3_44(); break;
            case 44: jj_3_45(); break;
            case 45: jj_3_46(); break;
            case 46: jj_3_47(); break;
            case 47: jj_3_48(); break;
            case 48: jj_3_49(); break;
            case 49: jj_3_50(); break;
            case 50: jj_3_51(); break;
            case 51: jj_3_52(); break;
            case 52: jj_3_53(); break;
            case 53: jj_3_54(); break;
            case 54: jj_3_55(); break;
            case 55: jj_3_56(); break;
            case 56: jj_3_57(); break;
            case 57: jj_3_58(); break;
            case 58: jj_3_59(); break;
            case 59: jj_3_60(); break;
            case 60: jj_3_61(); break;
            case 61: jj_3_62(); break;
            case 62: jj_3_63(); break;
            case 63: jj_3_64(); break;
            case 64: jj_3_65(); break;
            case 65: jj_3_66(); break;
            case 66: jj_3_67(); break;
            case 67: jj_3_68(); break;
            case 68: jj_3_69(); break;
            case 69: jj_3_70(); break;
            case 70: jj_3_71(); break;
            case 71: jj_3_72(); break;
            case 72: jj_3_73(); break;
            case 73: jj_3_74(); break;
            case 74: jj_3_75(); break;
            case 75: jj_3_76(); break;
            case 76: jj_3_77(); break;
            case 77: jj_3_78(); break;
            case 78: jj_3_79(); break;
            case 79: jj_3_80(); break;
            case 80: jj_3_81(); break;
            case 81: jj_3_82(); break;
            case 82: jj_3_83(); break;
            case 83: jj_3_84(); break;
            case 84: jj_3_85(); break;
            case 85: jj_3_86(); break;
            case 86: jj_3_87(); break;
            case 87: jj_3_88(); break;
            case 88: jj_3_89(); break;
            case 89: jj_3_90(); break;
            case 90: jj_3_91(); break;
            case 91: jj_3_92(); break;
            case 92: jj_3_93(); break;
            case 93: jj_3_94(); break;
            case 94: jj_3_95(); break;
            case 95: jj_3_96(); break;
            case 96: jj_3_97(); break;
            case 97: jj_3_98(); break;
            case 98: jj_3_99(); break;
            case 99: jj_3_100(); break;
            case 100: jj_3_101(); break;
            case 101: jj_3_102(); break;
            case 102: jj_3_103(); break;
            case 103: jj_3_104(); break;
            case 104: jj_3_105(); break;
            case 105: jj_3_106(); break;
            case 106: jj_3_107(); break;
            case 107: jj_3_108(); break;
            case 108: jj_3_109(); break;
            case 109: jj_3_110(); break;
            case 110: jj_3_111(); break;
            case 111: jj_3_112(); break;
            case 112: jj_3_113(); break;
            case 113: jj_3_114(); break;
            case 114: jj_3_115(); break;
            case 115: jj_3_116(); break;
            case 116: jj_3_117(); break;
            case 117: jj_3_118(); break;
            case 118: jj_3_119(); break;
            case 119: jj_3_120(); break;
            case 120: jj_3_121(); break;
            case 121: jj_3_122(); break;
            case 122: jj_3_123(); break;
            case 123: jj_3_124(); break;
            case 124: jj_3_125(); break;
            case 125: jj_3_126(); break;
            case 126: jj_3_127(); break;
            case 127: jj_3_128(); break;
            case 128: jj_3_129(); break;
            case 129: jj_3_130(); break;
            case 130: jj_3_131(); break;
            case 131: jj_3_132(); break;
            case 132: jj_3_133(); break;
            case 133: jj_3_134(); break;
            case 134: jj_3_135(); break;
            case 135: jj_3_136(); break;
            case 136: jj_3_137(); break;
            case 137: jj_3_138(); break;
            case 138: jj_3_139(); break;
            case 139: jj_3_140(); break;
            case 140: jj_3_141(); break;
            case 141: jj_3_142(); break;
            case 142: jj_3_143(); break;
            case 143: jj_3_144(); break;
            case 144: jj_3_145(); break;
            case 145: jj_3_146(); break;
            case 146: jj_3_147(); break;
            case 147: jj_3_148(); break;
            case 148: jj_3_149(); break;
            case 149: jj_3_150(); break;
            case 150: jj_3_151(); break;
            case 151: jj_3_152(); break;
            case 152: jj_3_153(); break;
            case 153: jj_3_154(); break;
            case 154: jj_3_155(); break;
            case 155: jj_3_156(); break;
            case 156: jj_3_157(); break;
            case 157: jj_3_158(); break;
            case 158: jj_3_159(); break;
            case 159: jj_3_160(); break;
            case 160: jj_3_161(); break;
            case 161: jj_3_162(); break;
            case 162: jj_3_163(); break;
            case 163: jj_3_164(); break;
            case 164: jj_3_165(); break;
            case 165: jj_3_166(); break;
            case 166: jj_3_167(); break;
            case 167: jj_3_168(); break;
            case 168: jj_3_169(); break;
            case 169: jj_3_170(); break;
            case 170: jj_3_171(); break;
            case 171: jj_3_172(); break;
            case 172: jj_3_173(); break;
            case 173: jj_3_174(); break;
            case 174: jj_3_175(); break;
            case 175: jj_3_176(); break;
            case 176: jj_3_177(); break;
            case 177: jj_3_178(); break;
            case 178: jj_3_179(); break;
            case 179: jj_3_180(); break;
            case 180: jj_3_181(); break;
            case 181: jj_3_182(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
