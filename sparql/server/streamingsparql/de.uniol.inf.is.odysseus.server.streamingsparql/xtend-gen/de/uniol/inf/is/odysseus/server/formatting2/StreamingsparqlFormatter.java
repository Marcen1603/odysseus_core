/**
 * generated by Xtext 2.12.0
 */
package de.uniol.inf.is.odysseus.server.formatting2;

import de.uniol.inf.is.odysseus.server.streamingsparql.Aggregate;
import de.uniol.inf.is.odysseus.server.streamingsparql.Base;
import de.uniol.inf.is.odysseus.server.streamingsparql.DatasetClause;
import de.uniol.inf.is.odysseus.server.streamingsparql.Filesinkclause;
import de.uniol.inf.is.odysseus.server.streamingsparql.Filterclause;
import de.uniol.inf.is.odysseus.server.streamingsparql.IRI;
import de.uniol.inf.is.odysseus.server.streamingsparql.Prefix;
import de.uniol.inf.is.odysseus.server.streamingsparql.SelectQuery;
import de.uniol.inf.is.odysseus.server.streamingsparql.Variable;
import de.uniol.inf.is.odysseus.server.streamingsparql.WhereClause;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;

@SuppressWarnings("all")
public class StreamingsparqlFormatter extends AbstractFormatter2 {
  protected void _format(final Base base, @Extension final IFormattableDocument document) {
    IRI _iref = base.getIref();
    document.<IRI>format(_iref);
  }
  
  protected void _format(final SelectQuery selectQuery, @Extension final IFormattableDocument document) {
    Base _base = selectQuery.getBase();
    document.<Base>format(_base);
    EList<Prefix> _prefixes = selectQuery.getPrefixes();
    for (final Prefix prefix : _prefixes) {
      document.<Prefix>format(prefix);
    }
    EList<DatasetClause> _datasetClauses = selectQuery.getDatasetClauses();
    for (final DatasetClause datasetClause : _datasetClauses) {
      document.<DatasetClause>format(datasetClause);
    }
    EList<Variable> _variables = selectQuery.getVariables();
    for (final Variable variable : _variables) {
      document.<Variable>format(variable);
    }
    WhereClause _whereClause = selectQuery.getWhereClause();
    document.<WhereClause>format(_whereClause);
    Filterclause _filterclause = selectQuery.getFilterclause();
    document.<Filterclause>format(_filterclause);
    Aggregate _aggregateClause = selectQuery.getAggregateClause();
    document.<Aggregate>format(_aggregateClause);
    Filesinkclause _filesinkclause = selectQuery.getFilesinkclause();
    document.<Filesinkclause>format(_filesinkclause);
  }
  
  public void format(final Object selectQuery, final IFormattableDocument document) {
    if (selectQuery instanceof XtextResource) {
      _format((XtextResource)selectQuery, document);
      return;
    } else if (selectQuery instanceof SelectQuery) {
      _format((SelectQuery)selectQuery, document);
      return;
    } else if (selectQuery instanceof Base) {
      _format((Base)selectQuery, document);
      return;
    } else if (selectQuery instanceof EObject) {
      _format((EObject)selectQuery, document);
      return;
    } else if (selectQuery == null) {
      _format((Void)null, document);
      return;
    } else if (selectQuery != null) {
      _format(selectQuery, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(selectQuery, document).toString());
    }
  }
}
