module de.uniol.inf.is.odysseus.server.GenerateStreamingsparql

import org.eclipse.emf.mwe.utils.*
import org.eclipse.xtext.generator.*
import org.eclipse.xtext.ui.generator.*

var grammarURI = "classpath:/de/uniol/inf/is/odysseus/server/Streamingsparql.xtext"
var fileExtensions = "sparql"
var projectName = "de.uniol.inf.is.odysseus.server.streamingsparql"
var pathServer = "/server/streamingsparql"
var pathUi = "/client/studio/streamingsparql"
var rootPath = "../../.."
var generateXtendStub = true
var encoding = "UTF-8"

Workflow {
/* 
	bean = StandaloneSetup {
		scanClassPath = true
		platformUri = "${rootPath}/.."// The following two lines can be removed, if Xbase is not used.
//		registerGeneratedEPackage = "org.eclipse.xtext.xbase.XbasePackage"
		registerGenModelFile = "platform:/resource/org.eclipse.xtext.xbase/model/Xbase.genmodel"
	}
*/

	component = org.eclipse.emf.mwe.utils.DirectoryCleaner {
		directory = "${projectName}/src-gen"
	}

	component = org.eclipse.emf.mwe.utils.DirectoryCleaner {
		directory = "${projectName}/model/generated"
	}
/*
	component = org.eclipse.emf.mwe.utils.DirectoryCleaner {
		directory = "${projectName}.ui/src-gen"
	}

	component = org.eclipse.emf.mwe.utils.DirectoryCleaner {
		directory = "${projectName}.tests/src-gen"
	}
*/
	component = org.eclipse.xtext.xtext.generator.XtextGenerator {
		configuration = {
			project = org.eclipse.xtext.xtext.generator.model.project.StandardProjectConfig {
				baseName = projectName
 				rootPath = "${rootPath}${pathServer}"
				eclipsePlugin = {
					name = "${projectName}.ui"
					root = "${rootPath}${pathUi}/${projectName}.ui"
					enabled = true
				}

				genericIde = {
					name = "${projectName}.ide"
					root = "${rootPath}${pathUi}/${projectName}.ide"
					enabled = true
				}

				//				eclipsePluginTest = {
				//					name = "${projectName}.tests"
				//					root = "${runtimeProject}.tests/"
				//					enabled = true
				//				}
				runtimeTest = {
					enabled = true
				}

				createEclipseMetaData = true
			}
			code = {
				encoding = encoding
				fileHeader = "/*\n * generated by Xtext \${version}\n */"
			}
		}
		language = org.eclipse.xtext.xtext.generator.StandardLanguage {
			grammarUri = grammarURI
			fileExtensions = fileExtensions
//			parserGenerator = {}
//			serializer = {
//				generateStub = false
//			}

			// Java API to access grammar elements (required by several other fragments)
			fragment = org.eclipse.xtext.xtext.generator.grammarAccess.GrammarAccessFragment2 auto-inject {}
			//			// generates Java API for the generated EPackages
			//			fragment = org.eclipse.xtext.xtext.generator.ecore.EMFGeneratorFragment2 auto-inject {}

			//			fragment = org.eclipse.xtext.xtext.generator.serializer.SerializerFragment2 auto-inject {
			//				generateStub = false
			//			}

			// a custom ResourceFactory for use with EMF
			//			fragment = org.eclipse.xtext.xtext.generator.resourceFactory.ResourceFactoryFragment2 auto-inject {}

			//			// The antlr parser generator fragment.
			//			fragment = org.eclipse.xtext.xtext.generator.parser.antlr.XtextAntlrGeneratorFragment2 auto-inject {
			////				options = {
			////					backtrack = true
			////				}
			//			}

			// Xtend-based API for validation
			fragment = org.eclipse.xtext.xtext.generator.validation.ValidatorFragment2 auto-inject {
				composedCheck = "org.eclipse.xtext.validation.ImportUriValidator"
				composedCheck = "org.eclipse.xtext.validation.NamesAreUniqueValidator"
			}

			// scoping and exporting API
			fragment = org.eclipse.xtext.xtext.generator.scoping.ImportNamespacesScopingFragment2 auto-inject {}
			fragment = org.eclipse.xtext.xtext.generator.exporting.QualifiedNamesFragment2 auto-inject {}
			fragment = org.eclipse.xtext.xtext.generator.builder.BuilderIntegrationFragment2 auto-inject {}
			// generator API
			//			fragment = org.eclipse.xtext.xtext.generator.generator.GeneratorFragment2 auto-inject {}
			// formatter API
			fragment = org.eclipse.xtext.xtext.generator.formatting.Formatter2Fragment2 auto-inject {}
			// labeling API
			fragment = org.eclipse.xtext.xtext.generator.ui.labeling.LabelProviderFragment2 auto-inject {}
			// outline API
			fragment = org.eclipse.xtext.xtext.generator.ui.outline.OutlineTreeProviderFragment2 auto-inject {}
			fragment = org.eclipse.xtext.xtext.generator.ui.outline.QuickOutlineFragment2 auto-inject {}
			// quickfix API
			fragment = org.eclipse.xtext.xtext.generator.ui.quickfix.QuickfixProviderFragment2 auto-inject {}
			// content assist API
			fragment = org.eclipse.xtext.xtext.generator.ui.contentAssist.ContentAssistFragment2 auto-inject {}
			// generates junit test support classes into Generator#pathTestProject
//			fragment = org.eclipse.xtext.xtext.generator.junit.Junit4Fragment2 auto-inject {}
			// rename refactoring
//			fragment = org.eclipse.xtext.xtext.generator.ui.refactoring.RefactorElementNameFragment2 auto-inject {}
			// provides the necessary bindings for java types integration
			fragment = org.eclipse.xtext.xtext.generator.types.TypesGeneratorFragment2 auto-inject {}
			// generates the required bindings only if the grammar inherits from Xbase
			fragment = org.eclipse.xtext.xtext.generator.xbase.XbaseGeneratorFragment2 auto-inject {}
			//			// generates the required bindings only if the grammar inherits from Xtype
			//			fragment = org.eclipse.xtext.xtext.generator.xbase.XtypeGeneratorFragment2 auto-inject {}
			// provides a preference page for template proposals
			fragment = org.eclipse.xtext.xtext.generator.ui.templates.CodetemplatesGeneratorFragment2 auto-inject {}
			// provides a compare view
			fragment = org.eclipse.xtext.xtext.generator.ui.compare.CompareFragment2 auto-inject {}
		}
	}
}

