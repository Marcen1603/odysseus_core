/*
 * generated by Xtext 2.12.0
 */
package de.uniol.inf.is.odysseus.server.serializer;

import com.google.inject.Inject;
import de.uniol.inf.is.odysseus.server.services.StreamingsparqlGrammarAccess;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.GroupAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;

@SuppressWarnings("all")
public abstract class AbstractStreamingsparqlSyntacticSequencer extends AbstractSyntacticSequencer {

	protected StreamingsparqlGrammarAccess grammarAccess;
	protected AbstractElementAlias match_Aggregate_CommaKeyword_3_0_q;
	protected AbstractElementAlias match_Aggregate___AggregationsKeyword_2_0_EqualsSignKeyword_2_1_LeftSquareBracketKeyword_2_2_RightSquareBracketKeyword_2_4__q;
	protected AbstractElementAlias match_Aggregation_CommaKeyword_8_q;
	protected AbstractElementAlias match_GroupGraphPatternSub_FullStopKeyword_3_q;
	protected AbstractElementAlias match_SelectQuery_RUNQUERYKeyword_0_1_q;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (StreamingsparqlGrammarAccess) access;
		match_Aggregate_CommaKeyword_3_0_q = new TokenAlias(false, true, grammarAccess.getAggregateAccess().getCommaKeyword_3_0());
		match_Aggregate___AggregationsKeyword_2_0_EqualsSignKeyword_2_1_LeftSquareBracketKeyword_2_2_RightSquareBracketKeyword_2_4__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getAggregateAccess().getAggregationsKeyword_2_0()), new TokenAlias(false, false, grammarAccess.getAggregateAccess().getEqualsSignKeyword_2_1()), new TokenAlias(false, false, grammarAccess.getAggregateAccess().getLeftSquareBracketKeyword_2_2()), new TokenAlias(false, false, grammarAccess.getAggregateAccess().getRightSquareBracketKeyword_2_4()));
		match_Aggregation_CommaKeyword_8_q = new TokenAlias(false, true, grammarAccess.getAggregationAccess().getCommaKeyword_8());
		match_GroupGraphPatternSub_FullStopKeyword_3_q = new TokenAlias(false, true, grammarAccess.getGroupGraphPatternSubAccess().getFullStopKeyword_3());
		match_SelectQuery_RUNQUERYKeyword_0_1_q = new TokenAlias(false, true, grammarAccess.getSelectQueryAccess().getRUNQUERYKeyword_0_1());
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		return "";
	}
	
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_Aggregate_CommaKeyword_3_0_q.equals(syntax))
				emit_Aggregate_CommaKeyword_3_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Aggregate___AggregationsKeyword_2_0_EqualsSignKeyword_2_1_LeftSquareBracketKeyword_2_2_RightSquareBracketKeyword_2_4__q.equals(syntax))
				emit_Aggregate___AggregationsKeyword_2_0_EqualsSignKeyword_2_1_LeftSquareBracketKeyword_2_2_RightSquareBracketKeyword_2_4__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Aggregation_CommaKeyword_8_q.equals(syntax))
				emit_Aggregation_CommaKeyword_8_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_GroupGraphPatternSub_FullStopKeyword_3_q.equals(syntax))
				emit_GroupGraphPatternSub_FullStopKeyword_3_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_SelectQuery_RUNQUERYKeyword_0_1_q.equals(syntax))
				emit_SelectQuery_RUNQUERYKeyword_0_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'AGGREGATE(' ('aggregations' '=' '[' ']')? (ambiguity) groupby=GroupBy
	 *     aggregations+=Aggregation ']' (ambiguity) groupby=GroupBy
	 */
	protected void emit_Aggregate_CommaKeyword_3_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('aggregations' '=' '[' ']')?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'AGGREGATE(' (ambiguity) ')' (rule start)
	 *     (rule start) 'AGGREGATE(' (ambiguity) ','? groupby=GroupBy
	 */
	protected void emit_Aggregate___AggregationsKeyword_2_0_EqualsSignKeyword_2_1_LeftSquareBracketKeyword_2_2_RightSquareBracketKeyword_2_4__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     aggName=STRING ']' (ambiguity) (rule end)
	 *     datatype=STRING ']' (ambiguity) (rule end)
	 */
	protected void emit_Aggregation_CommaKeyword_8_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '.'?
	 *
	 * This ambiguous syntax occurs at:
	 *     graphPatterns+=TriplesSameSubject (ambiguity) '}' (rule end)
	 */
	protected void emit_GroupGraphPatternSub_FullStopKeyword_3_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '#RUNQUERY'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) 'SELECT' variables+=Variable
	 *     (rule start) (ambiguity) base=Base
	 *     (rule start) (ambiguity) datasetClauses+=DatasetClause
	 *     (rule start) (ambiguity) prefixes+=Prefix
	 */
	protected void emit_SelectQuery_RUNQUERYKeyword_0_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
