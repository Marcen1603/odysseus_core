package de.uniol.inf.is.odysseus.aalso.simulation.ideaal.objects.simulatedObjects;

import static de.uniol.inf.is.odysseus.aalso.simulation.ideaal.Constants.Fields.ACTIVITY;
import de.uniol.inf.is.odysseus.aalso.model.Agent;
import de.uniol.inf.is.odysseus.aalso.model.Place;
import de.uniol.inf.is.odysseus.aalso.simulation.ideaal.Constants.Activity;
import de.uniol.inf.is.odysseus.aalso.simulation.ideaal.objects.Sensor;
import de.uniol.inf.is.odysseus.aalso.simulation.ideaal.objects.SensorObject;
import de.uniol.inf.is.odysseus.aalso.simulation.ideaal.objects.simulatedObjects.WeightSensor;
import de.uniol.inf.is.odysseus.aalso.types.FloatNumber;
import de.uniol.inf.is.odysseus.aalso.types.Publishable;

/**
 * Represents the bed in the simulation having 4 weightsensors
 * 
 * @author Jan-Benno Meyer zu Holte
 *
 */
public class Bed extends SensorObject {
	
	/**
	 * Setting up the sensors and first values
	 * 
	 * @param reference @see {@link de.uniol.inf.is.odysseus.aalso.simulation.ideaal.objects.SensorObject#SensorObject(Place, int, int)}
	 * @param numOfSensors @see {@link de.uniol.inf.is.odysseus.aalso.simulation.ideaal.objects.SensorObject#SensorObject(Place, int, int)}
	 * @param frequency @see {@link de.uniol.inf.is.odysseus.aalso.simulation.ideaal.objects.SensorObject#SensorObject(Place, int, int)}
	 * @param defaultAgent An agent object with default values for the sensors
	 */
	public Bed(Place reference, int numOfSensors, int frequency, Agent defaultAgent) {
		super(reference, numOfSensors, frequency);
		FloatNumber defaultValueCasted = (FloatNumber) defaultAgent.get("Weight");
		for(int i = 1; i <= this.getNumOfSensors(); i++){
			this.getSensorList().add(new WeightSensor(this.getReference().getName()+"-Sensor " + i, new FloatNumber(defaultValueCasted.getNumber() / getNumOfSensors()), 20));
		}
		this.generateCurrentValues(defaultAgent);
	}

	@Override
	public Publishable generateCurrentValues(Agent agent) {
		FloatNumber inputValueCasted = (FloatNumber) agent.get("Weight");
		double sensorValues = 0.0;
		switch ((Activity) agent.get(ACTIVITY)) {
		// The values generated by the sensors are all the same because the agent is sleeping in the middle of the bed ;-)
		case SCHLAFEN:
			double newSensorInputValue = inputValueCasted.getNumber() / this.getNumOfSensors();
			// generate the sensorvalues by calling the sensors generateurrentValue method with specific param
			for(Sensor sensor : this.getSensorList()) {
				sensor.generateCurrentValue(new FloatNumber(newSensorInputValue));
				sensorValues += ((FloatNumber)sensor.getCurrentValue()).getNumber();
			}
			this.setCurrentValue(new FloatNumber(sensorValues));
			this.getReference().set("Bed-Sensor", this.getCurrentValue());
			// Set the context variables of the reference
			for(int i = 0; i < this.getNumOfSensors(); i++){
				this.getReference().set("Bed-Sensor" + (i+1), this.getSensorList().get(i).getCurrentValue());
			}
			break;
		case LESEN:
			// The values generated by the sensors differ because the agten is sitting in the bed reading
			// Value for front Weight-Sensors, with each sensor carrying 1/3 of the Agent's weight 
			double newSensorInputValueFront = (inputValueCasted.getNumber() / 3);
			// Value for rear Weight-Sensors, with each Sensor carrying 1/6 of the Agent's weight
			double newSensorInputValueRear =  inputValueCasted.getNumber() / 6;
			int counter = 0;
			// generate the sensorvalues by calling the sensors generateurrentValue method with specific param
			for(Sensor sensor : this.getSensorList()) {
				if (counter < 2) {
					sensor.generateCurrentValue(new FloatNumber(newSensorInputValueFront));
				} else {
					sensor.generateCurrentValue(new FloatNumber(newSensorInputValueRear));
				}
				counter++;
				sensorValues += ((FloatNumber)sensor.getCurrentValue()).getNumber();
			}
			this.setCurrentValue(new FloatNumber(sensorValues));
			this.getReference().set("Bed-Sensor", this.getCurrentValue());
			// Set the context variables of the reference
			for(int i = 0; i < this.getNumOfSensors(); i++){
				this.getReference().set("Bed-Sensor" + (i+1), this.getSensorList().get(i).getCurrentValue());
			}
			break;
		default:
			// There is no special Acticity given so all sensors generate the same values
			double newSensorInputValueDefault = inputValueCasted.getNumber() / this.getNumOfSensors();
			// generate the sensorvalues by calling the sensors generateurrentValue methodwith specific param
			for(Sensor sensor : this.getSensorList()) {
				sensor.generateCurrentValue(new FloatNumber(newSensorInputValueDefault));
				sensorValues += ((FloatNumber)sensor.getCurrentValue()).getNumber();
			}
			this.setCurrentValue(new FloatNumber(sensorValues));
			this.getReference().set("Bed-Sensor", this.getCurrentValue());
			// Set the context variables of the reference
			for(int i = 0; i < this.getNumOfSensors(); i++){
				this.getReference().set("Bed-Sensor" + (i+1), this.getSensorList().get(i).getCurrentValue());
			}
			break;
		}
		return this.getCurrentValue();
	}

}
