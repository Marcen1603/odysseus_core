#-------------------------------------------------------------------------------
# Copyright 2012 The Odysseus Team
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#   http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#-------------------------------------------------------------------------------
///OdysseusScript
#PARSER PQL
#TRANSCFG salsa
#QUERY
///Your first query here

///------------------------------------------------------------------------
/// LMS1 Scanner
lms1 = ADAPTER({schema = ['scan:SpatialMultiPoint'], options = ['host:192.168.0.20', 'port:2111', 'record:false'], adapter = 'Sick'})  
windowLms1 = WINDOW({type = 'time', size = 50, advance = 50}, lms1)
lmsB1 = ADAPTER({schema = ['scan:SpatialMultiPoint'], options = ['host:192.168.0.20', 'port:2111', 'record:20000'], adapter = 'Sick'})  
windowLmsB1 = WINDOW({type = 'time', size = 100, advance = 100}, lmsB1)


/// LMS1 Grid
gridLms1 = MAP({expressions = ['ToGrid(scan, -10000.0, -10000.0, 20000.0, 20000.0, 300.0)']}, windowLms1)
renamedGridLms1 = RENAME({aliases = ['scan']}, gridLms1)

///------------------------------------------------------------------------
/// LMS2 Scanner
rawLms2 = ADAPTER({schema = ['scan:SpatialMultiPoint'], options = ['host:192.168.0.10', 'port:2111', 'record:false'], adapter = 'Sick'})  
movedLms2 = MAP({expressions = ['RotateViewPoint(MoveViewPoint(scan, 3750.0, -4600.0), 174.49)']}, rawLms2)
lms2 = RENAME({aliases = ['scan']}, movedLms2)
windowLms2 = WINDOW({type = 'time', size = 50, advance = 50}, lms2)
rawLmsB2 = ADAPTER({schema = ['scan:SpatialMultiPoint'], options = ['host:192.168.0.10', 'port:2111', 'record:20000'], adapter = 'Sick'})  
movedLmsB2 = MAP({expressions = ['RotateViewPoint(MoveViewPoint(scan, 3750.0, -4600.0), 174.49)']}, rawLmsB2)
lmsB2 = RENAME({aliases = ['scan']}, movedLmsB2)
windowLmsB2 = WINDOW({type = 'time', size = 100, advance = 100}, lmsB2)


/// LMS2 Grid
gridLms2 = MAP({expressions = ['ToGrid(scan, -10000.0, -10000.0, 20000.0, 20000.0, 300.0)']}, windowLms2)
renamedGridLms2 = RENAME({aliases = ['scan']}, gridLms2)

///------------------------------------------------------------------------
/// Scooter Position
rawScooter = ADAPTER({schema = ['scan:SpatialPoint'], options = ['host:192.168.1.99', 'port:10000', 'service:ClientConnector', 'protocol:default', 'ownService:SaLsA.SensorCluster', 'ownPort:10200'], adapter = 'ICE'})  
movedScooter = MAP({expressions = ['RotateViewPoint(MoveViewPoint(scan, 17330, 0.0),-45.0)']}, rawScooter)
scooter = RENAME({aliases = ['scan']}, movedScooter)
windowScooter = WINDOW({type = 'time', size = 50, advance = 50}, scooter)

///------------------------------------------------------------------------
/// LMS Segments
unionLmsB = UNION(windowLmsB1, windowLmsB2)
segmentsLmsB = MAP({expressions = ['ExtractSegments(scan, 300)']}, unionLmsB)
renamedSegmentsLmsB = RENAME({aliases = ['feature']}, segmentsLmsB)
windowSegmentsLmsB = WINDOW({type = 'time', size = 50, advance = 50}, renamedSegmentsLmsB)
unestedLmsB = UNNEST({attribute = 'feature'}, windowSegmentsLmsB)

/// LMS Grid
unionGridLms = UNION(renamedGridLms1, renamedGridLms2)
windowGridLms = WINDOW({type = 'time', size = 50, advance = 50}, unionGridLms)
aggregateGridLms = AGGREGATE({ aggregations=[['MERGEGRID', 'scan', 'scan','tuple']]}, windowGridLms) 

/// LMS Feature
aggregatePolygonLms = AGGREGATE({aggregations = [['PMERGE','feature','feature','tuple']] }, unestedLmsB)
unestedLmsFeature = UNNEST({attribute = 'feature'}, aggregatePolygonLms)

/// Scooter Polygon
joinScooter = JOIN({predicate=RelationalPredicate('SpatialContains(feature,scan)')}, unestedLmsFeature, windowScooter)


/// Scooter Anti-Grid
///gridScooter = MAP({expressions = ['ToGrid(feature, -10000.0, -10000.0, 20000.0, 20000.0, 300.0)']}, joinScooter)
gridScooter = MAP({expressions = ['ToGrid(feature, -10000.0, -10000.0, 20000.0, 20000.0, 300.0)']}, unestedLmsFeature)
renamedGridScooter = RENAME({aliases = ['scooter']}, gridScooter)

/// Combine Grids
combinedGrid = JOIN({predicate = RelationalPredicate('true')}, aggregateGridLms, renamedGridScooter)
realGrid =  MAP({expressions = ['ClearGrid(scan, scooter)']}, combinedGrid)
renamedRealGrid = RENAME({aliases = ['scan']}, realGrid)

///------------------------------------------------------------------------
/// Free Area Filter
///speedFilter =  SELECT({predicate = RelationalPredicate('IsGridFree(scan, 1, 1, 20, 20)')}, renamedRealGrid)
///speed = MAP({expressions = ['doubleToFloat(1)']}, speedFilter)

/// Set Max Speed
///setSpeed = BINDING({options = ['host:192.168.1.99', 'port:10000', 'service:ClientConnector', 'protocol:default', 'ownService:SaLsA.SensorCluster', 'ownPort:10201' ], adapter = 'ICE'}, speed)

///------------------------------------------------------------------------
/// Visualization
///visualization = MAPSINK(unionLmsB)
///visualization2 = MAPSINK(unestedLmsB)
visualization3 = MAPSINK(unestedLmsFeature)
///visualization = MAPSINK(renamedGridScooter)
///visualization = MAPSINK(renamedRealGrid)
///visualizationRoom = MAPSINK(aggregateGridLms)


