///OdysseusScript
#PARSER PQL
#TRANSCFG Standard
#QUERY
///Your first query here

/// Liefert ein Stream aus einzelnen Laserscannern: L1, L2, L3  
access01 = access({SOURCE = 'SCL1_1', HOST= '10.53.1.98', PORT = 10010, TYPE = 'NIOServerSocketSource', SCHEMA = [['type', 'String'],['instance', 'String'],['observation', 'Integer'],['polygon', 'Object'],['quali', 'Double'],['timestamp', 'Long']] })

map01 = map({expressions = ['instance','SpatialConvexHull(polygon)']}, access01)

rename00 = rename({aliases = ['instance','polygon']}, map01)

select01 = select({predicate=RelationalPredicate('SpatialIsPolygon(polygon)=true OR SpatialIsLine(polygon)=true')},rename00)

//Build a buffer around the incoming polygon  
map02 = map({expressions = ['instance','polygon','SpatialBuffer(polygon,400.00)']}, select01)

rename01 = rename({aliases = ['instance_1','polygon_1','polygonBuf_1']}, map02)

rename02 = rename({aliases = ['instance_2','polygon_2','polygonBuf_2']}, map02)

window01 = window({size = 5, advance = 1, type = 'time'}, rename01)

window02 = window({size = 5, advance = 1, type = 'time'}, rename02)

///----Korrektur Strom

join01 = join({predicate = RelationalPredicate('1=1')}, window01, window02)

project01 = project({attributes = ['polygon_1','polygon_2','polygonBuf_1','polygonBuf_2']}, join01)

map03 = map({expressions = ['polygon_1', 'polygonBuf_2']}, project01)

///mapsink01 = mapsink(map03)

///----Merge

/// Test Prädikate

/// Gute Ergebnisse mit:
/// SpatialIsWithinDistance(PolygonBuf_1, PolygonBuf_2, 300.00)=true

/// Kein Ergebniss: 
/// SpatialCrosses(PolygonBuf_1, PolygonBuf_2)=true

///join02 = join({predicate = RelationalPredicate('(SpatialContains(Polygon_1,PolygonBuf_2) = false AND SpatialEquals(Polygon_1,Polygon_2) = false AND SpatialIsWithinDistance(PolygonBuf_1, PolygonBuf_2, 300.00)=true) ')}, window01, window02)

join02 = join({predicate = RelationalPredicate('(SpatialContains(polygon_1,polygonBuf_2) = false AND SpatialIsWithinDistance(polygonBuf_1, polygonBuf_2, 300.00)=true) ')}, window01, window02)

map05 = map({expressions = ['SpatialConvexHull(SpatialUnion(polygon_1,polygon_2))','polygonBuf_1']}, join02)

rename03 = rename({aliases = ['polygon_1','polygonBuf_1']}, map05)

rename04 = rename({aliases = ['polygon_2','polygonBuf_2']}, map05)

///Spatial Join of delivered features - this have to be updated with the first cycle query…
join03 = join({predicate = RelationalPredicate('(SpatialEquals(polygon_1,polygonBuf_2) = false AND SpatialContains(polygon_1,polygonBuf_2) = false AND SpatialIsWithinDistance(polygonBuf_1, polygonBuf_2, 300.00)=true) ')}, rename03, rename04)

project04 = project({attributes = ['polygon_1','polygon_2','polygonBuf_1','polygonBuf_2']}, join03)

///Efizienter? 
///SpatialUnionBuffer(Polygon_1,Polygon_2, 0.00)
///,'SpatialUnion(PolygonBuf_1,PolygonBuf_2)'

map04 = map({expressions = ['SpatialConvexHull(SpatialUnion(polygon_1,polygon_2))']}, project04)

///mapsink02 = mapsink(map04)
