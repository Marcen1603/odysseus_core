// **********************************************************************
//
// Copyright (c) 2003-2011 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.4.2
//
// <auto-generated>
//
// Generated from file `GridStruct.java'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package GridPublishSubscribe;

public class GridStruct implements java.lang.Cloneable, java.io.Serializable
{
    /**
	 * 
	 */
	private static final long serialVersionUID = -6780532705012638903L;

	public long timestamp;

    public double x;

    public double y;

    public int width;

    public int height;

    public double cellsize;

    public byte[] data;

    public GridStruct()
    {
    }

    public GridStruct(long timestamp, double x, double y, int width, int height, double cellsize, byte[] data)
    {
        this.timestamp = timestamp;
        this.x = x;
        this.y = y;
        this.width = width;
        this.height = height;
        this.cellsize = cellsize;
        this.data = data;
    }

    public boolean
    equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        GridStruct _r = null;
        try
        {
            _r = (GridStruct)rhs;
        }
        catch(ClassCastException ex)
        {
        }

        if(_r != null)
        {
            if(timestamp != _r.timestamp)
            {
                return false;
            }
            if(x != _r.x)
            {
                return false;
            }
            if(y != _r.y)
            {
                return false;
            }
            if(width != _r.width)
            {
                return false;
            }
            if(height != _r.height)
            {
                return false;
            }
            if(cellsize != _r.cellsize)
            {
                return false;
            }
            if(!java.util.Arrays.equals(data, _r.data))
            {
                return false;
            }

            return true;
        }

        return false;
    }

    public int
    hashCode()
    {
        int __h = 0;
        __h = 5 * __h + (int)timestamp;
        __h = 5 * __h + (int)java.lang.Double.doubleToLongBits(x);
        __h = 5 * __h + (int)java.lang.Double.doubleToLongBits(y);
        __h = 5 * __h + width;
        __h = 5 * __h + height;
        __h = 5 * __h + (int)java.lang.Double.doubleToLongBits(cellsize);
        if(data != null)
        {
            for(int __i0 = 0; __i0 < data.length; __i0++)
            {
                __h = 5 * __h + (int)data[__i0];
            }
        }
        return __h;
    }

    public java.lang.Object
    clone()
    {
        java.lang.Object o = null;
        try
        {
            o = super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return o;
    }

    public void
    __write(IceInternal.BasicStream __os)
    {
        __os.writeLong(timestamp);
        __os.writeDouble(x);
        __os.writeDouble(y);
        __os.writeInt(width);
        __os.writeInt(height);
        __os.writeDouble(cellsize);
        GridDataHelper.write(__os, data);
    }

    public void
    __read(IceInternal.BasicStream __is)
    {
        timestamp = __is.readLong();
        x = __is.readDouble();
        y = __is.readDouble();
        width = __is.readInt();
        height = __is.readInt();
        cellsize = __is.readDouble();
        data = GridDataHelper.read(__is);
    }
}
