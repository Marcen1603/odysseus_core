/** Copyright [2011] [The Odysseus Team]
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
package de.uniol.inf.is.odysseus.nexmark.generator;

/*  
 NEXMark Generator -- Niagara Extension to XMark Data Generator

 Acknowledgements:
 The NEXMark Generator was developed using the xmlgen generator 
 from the XMark Benchmark project as a basis. The NEXMark
 generator generates streams of auction elements (bids, items
 for auctions, persons) as opposed to the auction files
 generated by xmlgen.  xmlgen was developed by Florian Waas.
 See http://www.xml-benchmark.org for information.

 Copyright (c) Dept. of  Computer Science & Engineering,
 OGI School of Science & Engineering, OHSU. All Rights Reserved.

 Permission to use, copy, modify, and distribute this software and
 its documentation is hereby granted, provided that both the
 copyright notice and this permission notice appear in all copies
 of the software, derivative works or modified versions, and any
 portions thereof, and that both notices appear in supporting
 documentation.

 THE AUTHORS AND THE DEPT. OF COMPUTER SCIENCE & ENGINEERING 
 AT OHSU ALLOW USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION, 
 AND THEY DISCLAIM ANY LIABILITY OF ANY KIND FOR ANY DAMAGES 
 WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.

 This software was developed with support from NSF ITR award
 IIS0086002 and from DARPA through NAVY/SPAWAR 
 Contract No. N66001-99-1-8098.

 */

import java.util.ArrayList;
import java.util.Random;

/**
 * Klasse die {@link OpenAuction}'s verwaltet. Mittels {@link #getNewAuction()}
 * wird eine neue Auktion erstellt und im System erfasst. Per
 * {@link #getExistingAuction()} kann eine zufaellige, existierende und offene
 * Auktion erreicht werden.
 * 
 */
class OpenAuctions {
	private int currentId = 0;
	private int allocSize; // allocated size of openAuctions array
	private Random rnd = new Random(18394);
	private SimpleCalendar cal;

	private ArrayList<OpenAuction> openAuctions;
	private NEXMarkGeneratorConfiguration configuration;

	public OpenAuctions(SimpleCalendar cal, NEXMarkGeneratorConfiguration config) {
		allocSize = 3000;
		openAuctions = new ArrayList<OpenAuction>(allocSize);
		configuration = config;
		this.cal = cal;
	}

	/**
	 * Gibt eine neue {@link OpenAuction} zurueck
	 * 
	 * @return neue Auktion
	 */
	public OpenAuction getNewAuction() {
		OpenAuction newItem = new OpenAuction(cal, currentId, rnd, configuration);
		openAuctions.add(newItem);
		currentId++;
		return newItem;
	}

	/**
	 * Sucht eine zufaellige, offene {@link OpenAuction} herraus
	 * 
	 * @return - eine offene Auktion
	 * @throws CouldNotGetExistingAuctionIdException
	 *             - wenn keine offenen Auktionen existieren
	 */
	public OpenAuction getExistingAuction() throws CouldNotGetExistingAuctionIdException { // used
		if (openAuctions.isEmpty()) {
			throw new CouldNotGetExistingAuctionIdException();
		}

		// suche eine zufaellige Auction herraus
		OpenAuction auction;
		int id;
		do {
			id = rnd.nextInt(openAuctions.size());
			auction = openAuctions.get(id);
			// ist die Auktion bereits zu ende, teste ob noch Auktionen
			// existieren, sonst suche weiter
			if (auction.isClosed(cal)) {
				openAuctions.remove(auction);
				// System.err.printf("Auktion %d geschlossen\n", auction.id);
				if (openAuctions.isEmpty()) {
					throw new CouldNotGetExistingAuctionIdException();
				}
				continue;
			}
			break;
		} while (true);

		auction.recordBid();
		return auction;
	}

	public void setCal(SimpleCalendar cal) {
		this.cal = cal;
	}
}

class CouldNotGetExistingAuctionIdException extends Exception {
	private static final long serialVersionUID = -3841192486210781719L;
}
