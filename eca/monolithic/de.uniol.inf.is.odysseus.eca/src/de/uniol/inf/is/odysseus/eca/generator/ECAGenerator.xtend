/*
 * generated by Xtext
 */
package de.uniol.inf.is.odysseus.eca.generator

import de.uniol.inf.is.odysseus.eca.connect.EcaPluginConnector
import de.uniol.inf.is.odysseus.eca.eCA.COMMANDACTION
import de.uniol.inf.is.odysseus.eca.eCA.FREECONDITION
import de.uniol.inf.is.odysseus.eca.eCA.MAPCONDITION
import de.uniol.inf.is.odysseus.eca.eCA.QUERYCONDITION
import de.uniol.inf.is.odysseus.eca.eCA.Rule
import de.uniol.inf.is.odysseus.eca.eCA.SOURCECONDITION
import de.uniol.inf.is.odysseus.eca.eCA.SYSTEMCONDITION
import de.uniol.inf.is.odysseus.eca.eCA.Timer
import de.uniol.inf.is.odysseus.eca.eCA.Window
import de.uniol.inf.is.odysseus.eca.plugin.EcaRuleObj
import java.util.ArrayList
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IFileSystemAccess
import org.eclipse.xtext.generator.IGenerator2
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class ECAGenerator implements IGenerator2 {
	private var EcaPluginConnector connect = new EcaPluginConnector();
	private var ArrayList<EcaRuleObj> querySet = new ArrayList();

	var ArrayList<String> actionList = new ArrayList();
	var ArrayList<String> systemList = new ArrayList();
	var ArrayList<String> queryCondList = new ArrayList();

	private var int sourceCondCount = 0;
	private var StringBuffer sourceCond = new StringBuffer();

	private var int systemCondCount = 0;
	private var StringBuffer systemCond = new StringBuffer();

	private var int freeCondCount = 0;
	private var StringBuffer freeCond = new StringBuffer();

	private var ArrayList<String> map = new ArrayList();
	private var int subActionCount = 0;

	private var int windowSize = 1000;
	private var int timerIntervall = 1000;

	def void doGenerate(Resource resource, IFileSystemAccess fsa) {

		// Fensterdefinition auslesen
		resource.allContents.filter(typeof(Window)).forEach [
			{
				if (it !== null) {
					windowSize = it.windowValue;
				}
			}
		]
		// Zeitintervall auslesen
		resource.allContents.filter(typeof(Timer)).forEach [
			{
				if (it !== null) {
					timerIntervall = it.timerIntervallValue;
				}
			}
		]
		// Regeldefinition auslesen
		resource.allContents.filter(typeof(Rule)).forEach[it.extract];
	}

	// Wird f端r jede Regel aufgerufen, soll f端r jeden Bedingungstyp eine Query erstellen
	// plugin.makeQuery(ruleName, ruleSource, ruleCondition, ruleAction);
	def void extract(Rule rule) {
		querySet.clear;
		actionList.clear;
		queryCondList.clear;
		systemList.clear;
		var String ruleName = rule.name;
		var String ruleSource;
		var String ruleCondition;

		// Eventquelle auslesen
		if (!(rule.source.defSource === null)) {
			ruleSource = rule.source.defSource.definedSource.name;
			sourceCondCount++
			sourceCond.append(rule.source.defSource.definedAttribute + " " + rule.source.defSource.definedOperator +
				" ")

			if (rule.source.defSource.definedValue.constValue !== null) {
				sourceCond.append(rule.source.defSource.definedValue.constValue)
			} else if (rule.source.defSource.definedValue.idValue !== null) {
				sourceCond.append("\"" + rule.source.defSource.definedValue.idValue + "\"")
			} else if (rule.source.defSource.definedValue.stringValue !== null) {
				systemCond.append(rule.source.defSource.definedValue.stringValue)
			} else if (rule.source.defSource.definedValue.doubleValue > 0) {
				sourceCond.append(rule.source.defSource.definedValue.doubleValue)
			} else {
				sourceCond.append(rule.source.defSource.definedValue.intValue)
			}
		} else if (!(rule.source.newSource === null)) {
			ruleSource = rule.source.newSource.name;
		} else if (!(rule.source.preSource === null)) {
			ruleSource = rule.source.preSource;
		}

		// Aktionsteil auslesen
		rule.ruleActions.eAllContents.filter(typeof(COMMANDACTION)).forEach[it.addActions];
		subActionCount = 0;

		// System-Bedingungen (curCPULoad, etc.) werden ausgelesen und in Array gespeichert (name, operator, value, name, operator, ...)
		rule.ruleConditions.eAllContents.filter(typeof(SYSTEMCONDITION)).forEach[it.addSystemCondition];
		systemCondCount = 0;

		// Query-Bedingungen (curCPULoad, etc.) werden ausgelesen und in Array gespeichert (name, operator, value, name, operator, ...)
		rule.ruleConditions.eAllContents.filter(typeof(QUERYCONDITION)).forEach[it.addQueryCondition];

		// Wird f端er jeden Bedingungstyp nach seiner Anzahl (durch 'AND'-Verkn端pfung) aufgerufen
		rule.ruleConditions.eAllContents.filter(typeof(SOURCECONDITION)).forEach[it.addSourceCondition];
		if (sourceCond.length > 2) {
			ruleCondition = sourceCond.toString();
			sourceCond.setLength(0);
			sourceCondCount = 0;
			querySet.add(
				new EcaRuleObj("source", ruleName, ruleSource, ruleCondition, systemList, queryCondList, actionList,
					windowSize, timerIntervall))
		}

		rule.ruleConditions.eAllContents.filter(typeof(MAPCONDITION)).forEach [
			{
				map.add(it.mapCond);
			}
		];
		for (var int i = 0; i < map.size; i++) {
			querySet.add(
				new EcaRuleObj("map", ruleName, ruleSource, map.get(i), systemList, queryCondList, actionList,
					windowSize, timerIntervall))
		}
		map.clear;

		rule.ruleConditions.eAllContents.filter(typeof(FREECONDITION)).forEach[it.addFreeCondition];
		if (freeCond.length > 2) {
			ruleCondition = freeCond.toString();
			freeCond.setLength(0);
			freeCondCount = 0;
			querySet.add(
				new EcaRuleObj("free", ruleName, ruleSource, ruleCondition, systemList, queryCondList, actionList,
					windowSize, timerIntervall))
		}

		if (querySet.size() < 1 && systemList.size() > 0) {
			querySet.add(
				new EcaRuleObj("systemload", ruleName, ruleSource, ruleCondition, systemList, queryCondList, actionList,
					windowSize, timerIntervall))
		}
		if (querySet.size() < 1 && queryCondList.size() > 0) {
			querySet.add(
				new EcaRuleObj("queryCond", ruleName, ruleSource, ruleCondition, systemList, queryCondList, actionList,
					windowSize, timerIntervall))
		}

		connect.makeQuery(querySet);

	}

	// EventQuellen-Bedingungen (z.B. eventType)
	def void addSourceCondition(SOURCECONDITION cond) {
		if (sourceCondCount > 0) {
			sourceCond.append(" AND ")
		}
		sourceCondCount++
		sourceCond.append(cond.condAttribute + " " + cond.operator + " ")

		if (cond.value.constValue !== null) {
			sourceCond.append(cond.value.constValue.constValue)
		} else if (cond.value.idValue !== null) {
			sourceCond.append("\"" + cond.value.idValue + "\"")
		} else if (cond.value.stringValue !== null) {
			systemCond.append(cond.value.stringValue)
		} else if (cond.value.doubleValue > 0) {
			sourceCond.append(cond.value.doubleValue)
		} else {
			sourceCond.append(cond.value.intValue)
		}
	}

	// System-Bedingungen (z.B. CPULoad)
	def void addSystemCondition(SYSTEMCONDITION cond) {
		var StringBuffer tmp = new StringBuffer();

		systemCondCount++
		systemList.add(cond.systemAttribute);
		systemList.add(cond.operator);

		if (cond.value.constValue !== null) {
			tmp.append(cond.value.constValue.constValue)
			systemList.add(tmp.toString())
			tmp.setLength(0)
		} else if (cond.value.idValue !== null) {
			tmp.append(cond.value.idValue)
			systemList.add(tmp.toString())
			tmp.setLength(0)
		} else if (cond.value.stringValue !== null) {
			tmp.append(cond.value.stringValue)
			systemList.add(tmp.toString())
			tmp.setLength(0)
		} else if (cond.value.doubleValue > 0) {
			tmp.append(cond.value.doubleValue)
			systemList.add(tmp.toString())
			tmp.setLength(0)
		} else {
			tmp.append(cond.value.intValue)
			systemList.add(tmp.toString())
			tmp.setLength(0)
		}
	}

	// Freie Bedingungen in PQL
	def void addFreeCondition(FREECONDITION cond) {
		freeCond.append(cond.freeCondition)
		freeCondCount++
	}

	def void addActions(COMMANDACTION actions) {
		var StringBuffer tmp = new StringBuffer();
		tmp.setLength(0);

		subActionCount++

		actionList.add(actions.subActname);
		if (actions.actionValue !== null) {
			if (actions.actionValue.constValue !== null) {
				tmp.append(actions.actionValue.constValue.constValue)
				actionList.add(tmp.toString());
				tmp.setLength(0);
			} else if (actions.actionValue.idValue !== null) {
				tmp.append(actions.actionValue.idValue)
				actionList.add(tmp.toString());
				tmp.setLength(0);
			} else if (actions.actionValue.stringValue !== null) {
				tmp.append(actions.actionValue.stringValue)
				actionList.add(tmp.toString());
				tmp.setLength(0);
			} else if (actions.actionValue.doubleValue > 0) {
				tmp.append(actions.actionValue.doubleValue)
				actionList.add(tmp.toString());
				tmp.setLength(0);
			} else {
				tmp.append(actions.actionValue.intValue)
				actionList.add(tmp.toString());
				tmp.setLength(0);
			}
		} else if (actions.functAction !== null) {
			// 0function - 1prioperator - 2privalue - 3state
			if (actions.functAction.sel !== null) {
				actionList.add(actions.functAction.sel)
			} else {
				actionList.add("rnd");
			}

			tmp.append(actions.functAction.priOperator)
			actionList.add(tmp.toString());
			tmp.setLength(0);
			tmp.append(actions.functAction.priVal)
			actionList.add(tmp.toString());
			tmp.setLength(0);
			tmp.append(actions.functAction.stateName)
			actionList.add(tmp.toString());
			tmp.setLength(0);
		} else {
			actionList.add(null);
		}
	}

	def void addQueryCondition(QUERYCONDITION cond) {
		var StringBuffer tmp = new StringBuffer();
		tmp.setLength(0);
		// 0query - 1prioperator - 2privalue - 3state
		if (cond.queryNot !== null) {
			queryCondList.add("!exists");
		} else {
			queryCondList.add("exists");
		}
		tmp.append(cond.queryFunct.priOperator)
		queryCondList.add(tmp.toString());
		tmp.setLength(0);
		tmp.append(cond.queryFunct.priVal)
		queryCondList.add(tmp.toString());
		tmp.setLength(0);
		tmp.append(cond.queryFunct.stateName)
		queryCondList.add(tmp.toString());
		tmp.setLength(0);
	}
	
	override afterGenerate(Resource input, IFileSystemAccess2 fsa, IGeneratorContext context) {
		throw new UnsupportedOperationException("TODO: auto-generated method stub")
	}
	
	override beforeGenerate(Resource input, IFileSystemAccess2 fsa, IGeneratorContext context) {
		throw new UnsupportedOperationException("TODO: auto-generated method stub")
	}
	
	override doGenerate(Resource input, IFileSystemAccess2 fsa, IGeneratorContext context) {
		throw new UnsupportedOperationException("TODO: auto-generated method stub")
	}

}
