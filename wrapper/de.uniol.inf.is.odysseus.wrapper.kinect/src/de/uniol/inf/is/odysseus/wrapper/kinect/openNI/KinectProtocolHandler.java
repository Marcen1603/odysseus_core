package de.uniol.inf.is.odysseus.wrapper.kinect.openNI;

import java.io.IOException;
import java.nio.ByteBuffer;
import java.util.Map;

import de.uniol.inf.is.odysseus.core.collection.Tuple;
import de.uniol.inf.is.odysseus.core.datahandler.IDataHandler;
import de.uniol.inf.is.odysseus.core.physicaloperator.ITransferHandler;
import de.uniol.inf.is.odysseus.core.physicaloperator.access.protocol.AbstractByteBufferHandler;
import de.uniol.inf.is.odysseus.core.physicaloperator.access.protocol.IProtocolHandler;
import de.uniol.inf.is.odysseus.core.physicaloperator.access.transport.IAccessPattern;
import de.uniol.inf.is.odysseus.core.physicaloperator.access.transport.ITransportDirection;
import de.uniol.inf.is.odysseus.core.physicaloperator.access.transport.ITransportExchangePattern;
import de.uniol.inf.is.odysseus.core.physicaloperator.access.transport.ITransportHandler;

/**
 * Kinect protocol handler, only passes the ByteBuffer generated by the
 * {@link KinectTransportHandler} to a data handler, usualy TupleDataHandler.
 * @author Juergen Boger <juergen.boger@offis.de>
 */
public class KinectProtocolHandler extends AbstractByteBufferHandler<Tuple<?>> {
    /**
     * Standard constructor.
     */
    public KinectProtocolHandler() {
        super();
    }

    /**
     * Constructor.
     * @param direction
     * Direction of the stream.
     * @param access
     * Acces pattern.
     */
    public KinectProtocolHandler(ITransportDirection direction,
            IAccessPattern access) {
        super(direction, access);
    }

    @Override
    public void open() throws IOException {
        getTransportHandler().open();
    }

    @Override
    public void close() throws IOException {
        getTransportHandler().close();
    }

    @Override
    public IProtocolHandler<Tuple<?>> createInstance(
            ITransportDirection direction, IAccessPattern access,
            Map<String, String> options, IDataHandler<Tuple<?>> dataHandler,
            ITransferHandler<Tuple<?>> transfer) {
        KinectProtocolHandler instance = new KinectProtocolHandler(direction,
                access);
        instance.setDataHandler(dataHandler);
        instance.setTransfer(transfer);
        return instance;
    }

    @Override
    public String getName() {
        return "Kinect";
    }

    @Override
    public void onConnect(ITransportHandler caller) {
        // Transport handler will do the job
    }

    @Override
    public void onDisonnect(ITransportHandler caller) {
        // Transport handler will do the job
    }

    @Override
    public void process(ByteBuffer message) {
        super.getTransfer().transfer(getDataHandler().readData(message));
    }

    @Override
    public ITransportExchangePattern getExchangePattern() {
        return ITransportExchangePattern.InOnly;
    }

    @Override
    public void process(String[] message) {
    }
}
