package de.uniol.inf.is.odysseus.wrapper.inertiacube.interfaces;
import com.ochafik.lang.jnaerator.runtime.Structure;
import de.uniol.inf.is.odysseus.wrapper.inertiacube.interfaces.ISenseLib.Bool;
import java.util.Arrays;
import java.util.List;
/**
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class ISD_HARDWARE_INFO_TYPE extends Structure<ISD_HARDWARE_INFO_TYPE, ISD_HARDWARE_INFO_TYPE.ByValue, ISD_HARDWARE_INFO_TYPE.ByReference > {
	/**
	 * Set to TRUE if ISD_GetSystemHardwareInfo succeeded<br>
	 * C type : Bool
	 */
	public boolean Valid;
	/** See ISD_SYSTEM_TYPE */
	public int TrackerType;
	/** See ISD_SYSTEM_MODEL */
	public int TrackerModel;
	/** Hardware port number (1 for COM1/ttyS0, etc.) */
	public int Port;
	/** Hardware interface (RS232, USB, etc.) */
	public int Interface;
	/**
	 * TRUE if tracking algorithms are executed in the library<br>
	 * C type : Bool
	 */
	public Bool OnHost;
	/** Position tracking hardware, see ISD_AUX_SYSTEM_TYPE */
	public int AuxSystem;
	/** Firmware revision */
	public float FirmwareRev;
	/** C type : char[128] */
	public byte[] ModelName = new byte[128];
	/** C type : Capability_struct */
	public Capability_struct Capability;
	/** C type : Bool */
	public Bool bReserved1;
	/** C type : Bool */
	public Bool bReserved2;
	/** C type : Bool */
	public Bool bReserved3;
	/** C type : Bool */
	public Bool bReserved4;
	/** Serial port baud rate */
	public int BaudRate;
	/** Number of self test levels */
	public int NumTestLevels;
	public int dwReserved3;
	public int dwReserved4;
	public float fReserved1;
	public float fReserved2;
	public float fReserved3;
	public float fReserved4;
	/** C type : char[128] */
	public byte[] cReserved1 = new byte[128];
	/** C type : char[128] */
	public byte[] cReserved2 = new byte[128];
	/** C type : char[128] */
	public byte[] cReserved3 = new byte[128];
	/** C type : char[128] */
	public byte[] cReserved4 = new byte[128];
	/** <i>native declaration : line 486</i> */
	public static class Capability_struct extends Structure<Capability_struct, Capability_struct.ByValue, Capability_struct.ByReference > {
		/**
		 * Can track position<br>
		 * C type : Bool
		 */
		public Bool Position;
		/**
		 * Can track orientation<br>
		 * C type : Bool
		 */
		public Bool Orientation;
		/**
		 * Can support lens encoders<br>
		 * C type : Bool
		 */
		public Bool Encoders;
		/**
		 * Predictive algorithms are available<br>
		 * C type : Bool
		 */
		public Bool Prediction;
		/**
		 * Enhancement level can be changed<br>
		 * C type : Bool
		 */
		public Bool Enhancement;
		/**
		 * Compass setting can be changed<br>
		 * C type : Bool
		 */
		public Bool Compass;
		/**
		 * Has the self-test capability<br>
		 * C type : Bool
		 */
		public Bool SelfTest;
		/**
		 * Can keep error log<br>
		 * C type : Bool
		 */
		public Bool ErrorLog;
		/**
		 * Can control ultrasonic volume via software<br>
		 * C type : Bool
		 */
		public Bool UltVolume;
		/**
		 * Can control microphone sensitivity by software<br>
		 * C type : Bool
		 */
		public Bool UltGain;
		/**
		 * Can change ultrasonic sampling frequency<br>
		 * C type : Bool
		 */
		public Bool UltTimeout;
		/**
		 * SoniDiscs support photodiode<br>
		 * C type : Bool
		 */
		public Bool PhotoDiode;
		/** Number of supported stations */
		public int MaxStations;
		/** Number of supported IMUs */
		public int MaxImus;
		/** Maximum number of Fixed Position Sensing Elements (constellation/galaxy) */
		public int MaxFPses;
		/** Maximum number of analog channels supported per station */
		public int MaxChannels;
		/** Maximum number of digital button inputs per station */
		public int MaxButtons;
		/**
		 * Can provide measurement data<br>
		 * C type : Bool
		 */
		public Bool MeasData;
		/**
		 * Can provide diagnostic data<br>
		 * C type : Bool
		 */
		public Bool DiagData;
		/**
		 * Supports PSE configuration/reporting tools<br>
		 * C type : Bool
		 */
		public Bool PseConfig;
		/**
		 * Supports configuration locking<br>
		 * C type : Bool
		 */
		public Bool ConfigLock;
		/** Maximum ultrasonic range */
		public float UltMaxRange;
		public float fReserved2;
		public float fReserved3;
		public float fReserved4;
		/**
		 * Supports dynamic compass calibration<br>
		 * C type : Bool
		 */
		public Bool CompassCal;
		/** C type : Bool */
		public Bool bReserved2;
		/** C type : Bool */
		public Bool bReserved3;
		/** C type : Bool */
		public Bool bReserved4;
		public int dwReserved1;
		public int dwReserved2;
		public int dwReserved3;
		public int dwReserved4;
		public Capability_struct() {
			super();
		}
		protected List<? > getFieldOrder() {
			return Arrays.asList("Position", "Orientation", "Encoders", "Prediction", "Enhancement", "Compass", "SelfTest", "ErrorLog", "UltVolume", "UltGain", "UltTimeout", "PhotoDiode", "MaxStations", "MaxImus", "MaxFPses", "MaxChannels", "MaxButtons", "MeasData", "DiagData", "PseConfig", "ConfigLock", "UltMaxRange", "fReserved2", "fReserved3", "fReserved4", "CompassCal", "bReserved2", "bReserved3", "bReserved4", "dwReserved1", "dwReserved2", "dwReserved3", "dwReserved4");
		}
		protected ByReference newByReference() { return new ByReference(); }
		protected ByValue newByValue() { return new ByValue(); }
		protected Capability_struct newInstance() { return new Capability_struct(); }
		public static Capability_struct[] newArray(int arrayLength) {
			return Structure.newArray(Capability_struct.class, arrayLength);
		}
		public static class ByReference extends Capability_struct implements Structure.ByReference {
			
		};
		public static class ByValue extends Capability_struct implements Structure.ByValue {
			
		};
	};
	public ISD_HARDWARE_INFO_TYPE() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("Valid", "TrackerType", "TrackerModel", "Port", "Interface", "OnHost", "AuxSystem", "FirmwareRev", "ModelName", "Capability", "bReserved1", "bReserved2", "bReserved3", "bReserved4", "BaudRate", "NumTestLevels", "dwReserved3", "dwReserved4", "fReserved1", "fReserved2", "fReserved3", "fReserved4", "cReserved1", "cReserved2", "cReserved3", "cReserved4");
	}
	protected ByReference newByReference() { return new ByReference(); }
	protected ByValue newByValue() { return new ByValue(); }
	protected ISD_HARDWARE_INFO_TYPE newInstance() { return new ISD_HARDWARE_INFO_TYPE(); }
	public static ISD_HARDWARE_INFO_TYPE[] newArray(int arrayLength) {
		return Structure.newArray(ISD_HARDWARE_INFO_TYPE.class, arrayLength);
	}
	public static class ByReference extends ISD_HARDWARE_INFO_TYPE implements Structure.ByReference {
		
	};
	public static class ByValue extends ISD_HARDWARE_INFO_TYPE implements Structure.ByValue {
		
	};
}
