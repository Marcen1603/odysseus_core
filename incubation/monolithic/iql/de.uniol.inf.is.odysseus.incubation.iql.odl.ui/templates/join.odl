operator OJoin(outputMode = "NEW_ELEMENT"){	
	
	parameter IPredicate joinPredicate;
		
	
	ITimeIntervalSweepArea[] areas = [];
	ITransferArea transferFunction;	
	IDataMergeFunction dataMerge;
	IMetadataMergeFunction metadataMerge;
	
	
	on init {
		
	}	
	
		
	on createOutputSchema(int arg0) : SDFSchema{
		SDFSchema left = getSubscribedToSource(0).schema;
		SDFSchema right = getSubscribedToSource(1).schema;		
		return SDFSchema::join(left, right);
	}							
	
	on processOpen {
		areas[0] = new JoinTISweepArea();
		areas[0].queryPredicate = joinPredicate;	
				
		areas[1] = new JoinTISweepArea();
		areas[1].queryPredicate = joinPredicate;
						
		transferFunction = new TITransferArea();
		transferFunction.init(this, this.getSubscribedToSource.size);		
		
		dataMerge = new RelationalMergeFunction(getOutputSchema.size);		
		dataMerge.init;		
		
		metadataMerge = getMergeFunction(getInputSchema(0).getMetaAttributeNames, getInputSchema(1).getMetaAttributeNames);
		metadataMerge.init;	
		
		joinPredicate.init();
		areas[0].clear;
		areas[1].clear;
	}		
	
	
	
	on processDone(int port) {
		this.transferFunction.done(port);
	}
	
	on processNext(Tuple tuple, int port) {
		this.transferFunction.newElement(tuple, port);
				
		int otherPort = getOtherPort(port);	
				
		Order order = fromOrdinal(port);	
				
		areas[otherport].purgeElements(tuple, order);	
		
		Iterator qualifies = areas[otherPort].queryCopy(tuple, order, false);
				
		while(qualifies.hasNext) {
			Object next = qualifies.next;
			Object newElement = dataMerge.merge(tuple, next, metadataMerge, order);
			transferFunction.transfer(newElement);
		}		
				
		areas[port].insert(tuple);	
	}	
	
	
	on processPuncutation(IPunctuation punctuation, int port) {
		if (punctuation.isHeartbeat) {
			this.areas[getOtherPort(port)].purgeElementsBefore(punctuation.getTime);		
		}
		this.transferFunction.sendPunctuation(punctuation);
		this.transferFunction.newElement(punctuation, port);
	}


	getOtherPort(int port) : int {
		if (port == 0) {
			return 1;
		} else {
			return 0;
		}
	}	
	
}