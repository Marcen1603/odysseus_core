operator ODLJoin(outputMode = "NEW_ELEMENT", minInputPorts = 2, maxInputPorts = 2){	
	
	optional parameter IPredicate predicate = TruePredicate::getInstance();		
	
	ITimeIntervalSweepArea[] areas = [];	
	
	IDataMergeFunction dataMerge;
	
	ITransferArea transferFunction;		
	
	IMetadataMergeFunction metadataMerge;
		
		
	on init {		
		String areaName = "TIJoinSA";
		areas[0] = SweepAreaRegistry::getSweepArea(areaName);		
		areas[0].queryPredicate = predicate;		
							
		areas[1] = SweepAreaRegistry::getSweepArea(areaName);
		areas[1].queryPredicate = predicate;
	}	
		
		
	on createOutputSchema(int arg0) : SDFSchema{
		SDFSchema left = getSubscribedToSource(0).schema;
		SDFSchema right = getSubscribedToSource(1).schema;		
		return SDFSchema::join(left, right);
	}
	
	on processOpen {		
		dataMerge = new RelationalMergeFunction(getOutputSchema.size);		
		dataMerge.init;	
			
		transferFunction = new TITransferArea();
		transferFunction.init(this, this.getSubscribedToSource.size);		
		
		List leftMeta = getInputSchema(0).getMetaAttributeNames;
		List rightMeta = getInputSchema(1).getMetaAttributeNames;
		metadataMerge = MetadataRegistry::getMergeFunction(leftMeta,rightMeta);
		metadataMerge.init;	
		
		predicate.init();
		
		areas[0].clear;
		areas[1].clear;
	}
	
	on processNext(Tuple tuple, int port) {
		this.transferFunction.newElement(tuple, port);
				
		int otherPort = getOtherPort(port);	
				
		Order order = Order::fromOrdinal(port);	
				
		areas[otherport].purgeElements(tuple, order);	
		
		Iterator qualifies = areas[otherPort].queryCopy(tuple, order, false);
				
		while(qualifies.hasNext) {
			Tuple next = qualifies.next;
			Tuple newElement = dataMerge.merge(tuple, next, metadataMerge, order);
			transferFunction.transfer(newElement);
		}		
				
		areas[port].insert(tuple);	
	}	
	
	
	on processPunctuation(IPunctuation punctuation, int port) {
		if (punctuation.isHeartbeat) {
			this.areas[getOtherPort(port)].purgeElementsBefore(punctuation.getTime);		
		}
		this.transferFunction.sendPunctuation(punctuation);
		this.transferFunction.newElement(punctuation, port);
	}
	
	on processDone(int port) {
		this.transferFunction.done(port);
	}


	getOtherPort(int port) : int {
		if (port == 0) {
			return 1;
		} else {
			return 0;
		}
	}	
	
}