grammar de.uniol.inf.is.odysseus.iql.qdl.QDL with de.uniol.inf.is.odysseus.iql.basic.BasicIQL

generate qDL "http://www.uniol.de/inf/is/odysseus/iql/qdl/QDL"

import "http://www.uniol.de/inf/is/odysseus/iql/basic/BasicIQL" as iql
import "http://www.eclipse.org/xtext/common/JavaVMTypes" as types

QDLFile returns iql::IQLFile:
	{QDLFile}
	namespaces+=IQLNamespace*
	(elements+=QDLTypeDefinition)*
;

QDLTypeDefinition returns iql::IQLTypeDefinition:
	{QDLTypeDefinition}
	(javametadata+=IQLJavaMetadata)*
	inner=(IQLClass | IQLInterface | QDLQuery)
; 

QDLQuery returns types::JvmGenericType:
	{QDLQuery}
	'query' simpleName=ID ('(' (metadataList=IQLMetadataList)? ')')?
	statements=IQLStatementBlock
;

IQLAssignmentExpression returns iql::IQLExpression:
	IQLSubscribeExpression (
		=>({iql::IQLAssignmentExpression.leftOperand=current} op=OpAssign) rightOperand=IQLAssignmentExpression
	)?
;

IQLSubscribeExpression returns iql::IQLExpression:
	IQLPortExpression
	(=>({IQLSubscribeExpression.leftOperand=current} op=IQLSubscribe) rightOperand=IQLPortExpression)*
;

IQLPortExpression returns iql::IQLExpression:
	IQLLogicalOrExpression
	(=>({IQLPortExpression.leftOperand=current} op=':') rightOperand=IQLLogicalOrExpression)*
;


IQLSubscribe:
	'->' | '<-'
;

IQLMetadataValueSingle returns iql::IQLMetadataValue:
	{IQLMetadataValueSingleInt} value = INT|
	{IQLMetadataValueSingleDouble} value = DOUBLE|
	{IQLMetadataValueSingleString} value = STRING|
	{IQLMetadataValueSingleBoolean} value = BOOLEAN|
	{IQLMetadataValueSingleChar} value = CHAR |
	(=>({QDLMetadataValueSingleID} value = ID)) |
	{IQLMetadataValueSingleTypeRef} value = JvmTypeReference |	
	{IQLMetadataValueSingleNull} value = 'null'	
;
