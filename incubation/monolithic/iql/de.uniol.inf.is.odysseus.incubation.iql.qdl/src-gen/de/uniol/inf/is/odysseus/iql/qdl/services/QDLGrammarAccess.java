/*
* generated by Xtext
*/
package de.uniol.inf.is.odysseus.iql.qdl.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import de.uniol.inf.is.odysseus.iql.basic.services.BasicIQLGrammarAccess;

@Singleton
public class QDLGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class QDLModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QDLModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cQDLModelAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNamespacesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNamespacesIQLNamespaceParserRuleCall_1_0 = (RuleCall)cNamespacesAssignment_1.eContents().get(0);
		private final Assignment cElementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cElementsQDLModelElementParserRuleCall_2_0 = (RuleCall)cElementsAssignment_2.eContents().get(0);
		
		//QDLModel returns basiciql::IQLModel:
		//	{QDLModel} namespaces+=IQLNamespace* elements+=QDLModelElement*;
		public ParserRule getRule() { return rule; }

		//{QDLModel} namespaces+=IQLNamespace* elements+=QDLModelElement*
		public Group getGroup() { return cGroup; }

		//{QDLModel}
		public Action getQDLModelAction_0() { return cQDLModelAction_0; }

		//namespaces+=IQLNamespace*
		public Assignment getNamespacesAssignment_1() { return cNamespacesAssignment_1; }

		//IQLNamespace
		public RuleCall getNamespacesIQLNamespaceParserRuleCall_1_0() { return cNamespacesIQLNamespaceParserRuleCall_1_0; }

		//elements+=QDLModelElement*
		public Assignment getElementsAssignment_2() { return cElementsAssignment_2; }

		//QDLModelElement
		public RuleCall getElementsQDLModelElementParserRuleCall_2_0() { return cElementsQDLModelElementParserRuleCall_2_0; }
	}

	public class QDLModelElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QDLModelElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cQDLModelElementAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cJavametadataAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cJavametadataIQLJavaMetadataParserRuleCall_1_0 = (RuleCall)cJavametadataAssignment_1.eContents().get(0);
		private final Assignment cInnerAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cInnerAlternatives_2_0 = (Alternatives)cInnerAssignment_2.eContents().get(0);
		private final RuleCall cInnerIQLClassParserRuleCall_2_0_0 = (RuleCall)cInnerAlternatives_2_0.eContents().get(0);
		private final RuleCall cInnerIQLInterfaceParserRuleCall_2_0_1 = (RuleCall)cInnerAlternatives_2_0.eContents().get(1);
		private final RuleCall cInnerQDLQueryParserRuleCall_2_0_2 = (RuleCall)cInnerAlternatives_2_0.eContents().get(2);
		
		//QDLModelElement returns basiciql::IQLModelElement:
		//	{QDLModelElement} javametadata+=IQLJavaMetadata* inner=(IQLClass | IQLInterface | QDLQuery);
		public ParserRule getRule() { return rule; }

		//{QDLModelElement} javametadata+=IQLJavaMetadata* inner=(IQLClass | IQLInterface | QDLQuery)
		public Group getGroup() { return cGroup; }

		//{QDLModelElement}
		public Action getQDLModelElementAction_0() { return cQDLModelElementAction_0; }

		//javametadata+=IQLJavaMetadata*
		public Assignment getJavametadataAssignment_1() { return cJavametadataAssignment_1; }

		//IQLJavaMetadata
		public RuleCall getJavametadataIQLJavaMetadataParserRuleCall_1_0() { return cJavametadataIQLJavaMetadataParserRuleCall_1_0; }

		//inner=(IQLClass | IQLInterface | QDLQuery)
		public Assignment getInnerAssignment_2() { return cInnerAssignment_2; }

		//IQLClass | IQLInterface | QDLQuery
		public Alternatives getInnerAlternatives_2_0() { return cInnerAlternatives_2_0; }

		//IQLClass
		public RuleCall getInnerIQLClassParserRuleCall_2_0_0() { return cInnerIQLClassParserRuleCall_2_0_0; }

		//IQLInterface
		public RuleCall getInnerIQLInterfaceParserRuleCall_2_0_1() { return cInnerIQLInterfaceParserRuleCall_2_0_1; }

		//QDLQuery
		public RuleCall getInnerQDLQueryParserRuleCall_2_0_2() { return cInnerQDLQueryParserRuleCall_2_0_2; }
	}

	public class QDLQueryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QDLQuery");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cQDLQueryAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cQueryKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSimpleNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSimpleNameIDTerminalRuleCall_2_0 = (RuleCall)cSimpleNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cMetadataListAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cMetadataListIQLMetadataListParserRuleCall_3_1_0 = (RuleCall)cMetadataListAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Assignment cStatementsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cStatementsIQLStatementBlockParserRuleCall_4_0 = (RuleCall)cStatementsAssignment_4.eContents().get(0);
		
		//QDLQuery returns jvm::JvmGenericType:
		//	{QDLQuery} "query" simpleName=ID ("(" metadataList=IQLMetadataList? ")")? statements=IQLStatementBlock;
		public ParserRule getRule() { return rule; }

		//{QDLQuery} "query" simpleName=ID ("(" metadataList=IQLMetadataList? ")")? statements=IQLStatementBlock
		public Group getGroup() { return cGroup; }

		//{QDLQuery}
		public Action getQDLQueryAction_0() { return cQDLQueryAction_0; }

		//"query"
		public Keyword getQueryKeyword_1() { return cQueryKeyword_1; }

		//simpleName=ID
		public Assignment getSimpleNameAssignment_2() { return cSimpleNameAssignment_2; }

		//ID
		public RuleCall getSimpleNameIDTerminalRuleCall_2_0() { return cSimpleNameIDTerminalRuleCall_2_0; }

		//("(" metadataList=IQLMetadataList? ")")?
		public Group getGroup_3() { return cGroup_3; }

		//"("
		public Keyword getLeftParenthesisKeyword_3_0() { return cLeftParenthesisKeyword_3_0; }

		//metadataList=IQLMetadataList?
		public Assignment getMetadataListAssignment_3_1() { return cMetadataListAssignment_3_1; }

		//IQLMetadataList
		public RuleCall getMetadataListIQLMetadataListParserRuleCall_3_1_0() { return cMetadataListIQLMetadataListParserRuleCall_3_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3_2() { return cRightParenthesisKeyword_3_2; }

		//statements=IQLStatementBlock
		public Assignment getStatementsAssignment_4() { return cStatementsAssignment_4; }

		//IQLStatementBlock
		public RuleCall getStatementsIQLStatementBlockParserRuleCall_4_0() { return cStatementsIQLStatementBlockParserRuleCall_4_0; }
	}

	public class IQLRelationalExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IQLRelationalExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIQLSubscribeExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Group cGroup_1_0_0_0 = (Group)cGroup_1_0_0.eContents().get(0);
		private final Action cIQLInstanceOfExpressionLeftOperandAction_1_0_0_0_0 = (Action)cGroup_1_0_0_0.eContents().get(0);
		private final Keyword cInstanceofKeyword_1_0_0_0_1 = (Keyword)cGroup_1_0_0_0.eContents().get(1);
		private final Assignment cTargetRefAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cTargetRefJvmTypeReferenceParserRuleCall_1_0_1_0 = (RuleCall)cTargetRefAssignment_1_0_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Group cGroup_1_1_0 = (Group)cGroup_1_1.eContents().get(0);
		private final Group cGroup_1_1_0_0 = (Group)cGroup_1_1_0.eContents().get(0);
		private final Action cIQLRelationalExpressionLeftOperandAction_1_1_0_0_0 = (Action)cGroup_1_1_0_0.eContents().get(0);
		private final Assignment cOpAssignment_1_1_0_0_1 = (Assignment)cGroup_1_1_0_0.eContents().get(1);
		private final RuleCall cOpOpRelationalParserRuleCall_1_1_0_0_1_0 = (RuleCall)cOpAssignment_1_1_0_0_1.eContents().get(0);
		private final Assignment cRightOperandAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cRightOperandIQLSubscribeExpressionParserRuleCall_1_1_1_0 = (RuleCall)cRightOperandAssignment_1_1_1.eContents().get(0);
		
		//IQLRelationalExpression returns basiciql::IQLExpression:
		//	IQLSubscribeExpression (=> ({IQLInstanceOfExpression.leftOperand=current} "instanceof") targetRef=JvmTypeReference |
		//	=> ({IQLRelationalExpression.leftOperand=current} op=OpRelational) rightOperand=IQLSubscribeExpression)*;
		public ParserRule getRule() { return rule; }

		//IQLSubscribeExpression (=> ({IQLInstanceOfExpression.leftOperand=current} "instanceof") targetRef=JvmTypeReference | =>
		//({IQLRelationalExpression.leftOperand=current} op=OpRelational) rightOperand=IQLSubscribeExpression)*
		public Group getGroup() { return cGroup; }

		//IQLSubscribeExpression
		public RuleCall getIQLSubscribeExpressionParserRuleCall_0() { return cIQLSubscribeExpressionParserRuleCall_0; }

		//(=> ({IQLInstanceOfExpression.leftOperand=current} "instanceof") targetRef=JvmTypeReference | =>
		//({IQLRelationalExpression.leftOperand=current} op=OpRelational) rightOperand=IQLSubscribeExpression)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//=> ({IQLInstanceOfExpression.leftOperand=current} "instanceof") targetRef=JvmTypeReference
		public Group getGroup_1_0() { return cGroup_1_0; }

		//=> ({IQLInstanceOfExpression.leftOperand=current} "instanceof")
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{IQLInstanceOfExpression.leftOperand=current} "instanceof"
		public Group getGroup_1_0_0_0() { return cGroup_1_0_0_0; }

		//{IQLInstanceOfExpression.leftOperand=current}
		public Action getIQLInstanceOfExpressionLeftOperandAction_1_0_0_0_0() { return cIQLInstanceOfExpressionLeftOperandAction_1_0_0_0_0; }

		//"instanceof"
		public Keyword getInstanceofKeyword_1_0_0_0_1() { return cInstanceofKeyword_1_0_0_0_1; }

		//targetRef=JvmTypeReference
		public Assignment getTargetRefAssignment_1_0_1() { return cTargetRefAssignment_1_0_1; }

		//JvmTypeReference
		public RuleCall getTargetRefJvmTypeReferenceParserRuleCall_1_0_1_0() { return cTargetRefJvmTypeReferenceParserRuleCall_1_0_1_0; }

		//=> ({IQLRelationalExpression.leftOperand=current} op=OpRelational) rightOperand=IQLSubscribeExpression
		public Group getGroup_1_1() { return cGroup_1_1; }

		//=> ({IQLRelationalExpression.leftOperand=current} op=OpRelational)
		public Group getGroup_1_1_0() { return cGroup_1_1_0; }

		//{IQLRelationalExpression.leftOperand=current} op=OpRelational
		public Group getGroup_1_1_0_0() { return cGroup_1_1_0_0; }

		//{IQLRelationalExpression.leftOperand=current}
		public Action getIQLRelationalExpressionLeftOperandAction_1_1_0_0_0() { return cIQLRelationalExpressionLeftOperandAction_1_1_0_0_0; }

		//op=OpRelational
		public Assignment getOpAssignment_1_1_0_0_1() { return cOpAssignment_1_1_0_0_1; }

		//OpRelational
		public RuleCall getOpOpRelationalParserRuleCall_1_1_0_0_1_0() { return cOpOpRelationalParserRuleCall_1_1_0_0_1_0; }

		//rightOperand=IQLSubscribeExpression
		public Assignment getRightOperandAssignment_1_1_1() { return cRightOperandAssignment_1_1_1; }

		//IQLSubscribeExpression
		public RuleCall getRightOperandIQLSubscribeExpressionParserRuleCall_1_1_1_0() { return cRightOperandIQLSubscribeExpressionParserRuleCall_1_1_1_0; }
	}

	public class IQLSubscribeExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IQLSubscribeExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIQLPortExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cIQLSubscribeExpressionLeftOperandAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cOpAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final RuleCall cOpIQLSubscribeParserRuleCall_1_0_0_1_0 = (RuleCall)cOpAssignment_1_0_0_1.eContents().get(0);
		private final Assignment cRightOperandAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightOperandIQLPortExpressionParserRuleCall_1_1_0 = (RuleCall)cRightOperandAssignment_1_1.eContents().get(0);
		
		//IQLSubscribeExpression returns basiciql::IQLExpression:
		//	IQLPortExpression (=> ({IQLSubscribeExpression.leftOperand=current} op=IQLSubscribe)
		//	rightOperand=IQLPortExpression)*;
		public ParserRule getRule() { return rule; }

		//IQLPortExpression (=> ({IQLSubscribeExpression.leftOperand=current} op=IQLSubscribe) rightOperand=IQLPortExpression)*
		public Group getGroup() { return cGroup; }

		//IQLPortExpression
		public RuleCall getIQLPortExpressionParserRuleCall_0() { return cIQLPortExpressionParserRuleCall_0; }

		//(=> ({IQLSubscribeExpression.leftOperand=current} op=IQLSubscribe) rightOperand=IQLPortExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//=> ({IQLSubscribeExpression.leftOperand=current} op=IQLSubscribe)
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{IQLSubscribeExpression.leftOperand=current} op=IQLSubscribe
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{IQLSubscribeExpression.leftOperand=current}
		public Action getIQLSubscribeExpressionLeftOperandAction_1_0_0_0() { return cIQLSubscribeExpressionLeftOperandAction_1_0_0_0; }

		//op=IQLSubscribe
		public Assignment getOpAssignment_1_0_0_1() { return cOpAssignment_1_0_0_1; }

		//IQLSubscribe
		public RuleCall getOpIQLSubscribeParserRuleCall_1_0_0_1_0() { return cOpIQLSubscribeParserRuleCall_1_0_0_1_0; }

		//rightOperand=IQLPortExpression
		public Assignment getRightOperandAssignment_1_1() { return cRightOperandAssignment_1_1; }

		//IQLPortExpression
		public RuleCall getRightOperandIQLPortExpressionParserRuleCall_1_1_0() { return cRightOperandIQLPortExpressionParserRuleCall_1_1_0; }
	}

	public class IQLPortExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IQLPortExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIQLAdditiveExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cIQLPortExpressionLeftOperandAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cOpAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final Keyword cOpColonKeyword_1_0_0_1_0 = (Keyword)cOpAssignment_1_0_0_1.eContents().get(0);
		private final Assignment cRightOperandAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightOperandIQLAdditiveExpressionParserRuleCall_1_1_0 = (RuleCall)cRightOperandAssignment_1_1.eContents().get(0);
		
		//IQLPortExpression returns basiciql::IQLExpression:
		//	IQLAdditiveExpression (=> ({IQLPortExpression.leftOperand=current} op=":") rightOperand=IQLAdditiveExpression)?;
		public ParserRule getRule() { return rule; }

		//IQLAdditiveExpression (=> ({IQLPortExpression.leftOperand=current} op=":") rightOperand=IQLAdditiveExpression)?
		public Group getGroup() { return cGroup; }

		//IQLAdditiveExpression
		public RuleCall getIQLAdditiveExpressionParserRuleCall_0() { return cIQLAdditiveExpressionParserRuleCall_0; }

		//(=> ({IQLPortExpression.leftOperand=current} op=":") rightOperand=IQLAdditiveExpression)?
		public Group getGroup_1() { return cGroup_1; }

		//=> ({IQLPortExpression.leftOperand=current} op=":")
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{IQLPortExpression.leftOperand=current} op=":"
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{IQLPortExpression.leftOperand=current}
		public Action getIQLPortExpressionLeftOperandAction_1_0_0_0() { return cIQLPortExpressionLeftOperandAction_1_0_0_0; }

		//op=":"
		public Assignment getOpAssignment_1_0_0_1() { return cOpAssignment_1_0_0_1; }

		//":"
		public Keyword getOpColonKeyword_1_0_0_1_0() { return cOpColonKeyword_1_0_0_1_0; }

		//rightOperand=IQLAdditiveExpression
		public Assignment getRightOperandAssignment_1_1() { return cRightOperandAssignment_1_1; }

		//IQLAdditiveExpression
		public RuleCall getRightOperandIQLAdditiveExpressionParserRuleCall_1_1_0() { return cRightOperandIQLAdditiveExpressionParserRuleCall_1_1_0; }
	}

	public class IQLSubscribeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IQLSubscribe");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cLessThanSignHyphenMinusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//IQLSubscribe:
		//	"->" | "<-";
		public ParserRule getRule() { return rule; }

		//"->" | "<-"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_0() { return cHyphenMinusGreaterThanSignKeyword_0; }

		//"<-"
		public Keyword getLessThanSignHyphenMinusKeyword_1() { return cLessThanSignHyphenMinusKeyword_1; }
	}

	public class IQLMetadataValueSingleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IQLMetadataValueSingle");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cIQLMetadataValueSingleIntAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cValueAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_0_1_0 = (RuleCall)cValueAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cIQLMetadataValueSingleDoubleAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValueDOUBLETerminalRuleCall_1_1_0 = (RuleCall)cValueAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cIQLMetadataValueSingleStringAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cValueAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_2_1_0 = (RuleCall)cValueAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cIQLMetadataValueSingleBooleanAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Assignment cValueAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cValueBOOLEANTerminalRuleCall_3_1_0 = (RuleCall)cValueAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Group cGroup_4_0 = (Group)cGroup_4.eContents().get(0);
		private final Action cQDLMetadataValueSingleIDAction_4_0_0 = (Action)cGroup_4_0.eContents().get(0);
		private final Assignment cValueAssignment_4_0_1 = (Assignment)cGroup_4_0.eContents().get(1);
		private final RuleCall cValueIDTerminalRuleCall_4_0_1_0 = (RuleCall)cValueAssignment_4_0_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Action cIQLMetadataValueSingleTypeRefAction_5_0 = (Action)cGroup_5.eContents().get(0);
		private final Assignment cValueAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cValueJvmTypeReferenceParserRuleCall_5_1_0 = (RuleCall)cValueAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Action cIQLMetadataValueSingleNullAction_6_0 = (Action)cGroup_6.eContents().get(0);
		private final Keyword cNullKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		
		//IQLMetadataValueSingle returns basiciql::IQLMetadataValue:
		//	{basiciql::IQLMetadataValueSingleInt} value=INT | {basiciql::IQLMetadataValueSingleDouble} value=DOUBLE |
		//	{basiciql::IQLMetadataValueSingleString} value=STRING | {basiciql::IQLMetadataValueSingleBoolean} value=BOOLEAN | =>
		//	({QDLMetadataValueSingleID} value=ID) | {basiciql::IQLMetadataValueSingleTypeRef} value=JvmTypeReference |
		//	{basiciql::IQLMetadataValueSingleNull} "null";
		public ParserRule getRule() { return rule; }

		//{basiciql::IQLMetadataValueSingleInt} value=INT | {basiciql::IQLMetadataValueSingleDouble} value=DOUBLE |
		//{basiciql::IQLMetadataValueSingleString} value=STRING | {basiciql::IQLMetadataValueSingleBoolean} value=BOOLEAN | =>
		//({QDLMetadataValueSingleID} value=ID) | {basiciql::IQLMetadataValueSingleTypeRef} value=JvmTypeReference |
		//{basiciql::IQLMetadataValueSingleNull} "null"
		public Alternatives getAlternatives() { return cAlternatives; }

		//{basiciql::IQLMetadataValueSingleInt} value=INT
		public Group getGroup_0() { return cGroup_0; }

		//{basiciql::IQLMetadataValueSingleInt}
		public Action getIQLMetadataValueSingleIntAction_0_0() { return cIQLMetadataValueSingleIntAction_0_0; }

		//value=INT
		public Assignment getValueAssignment_0_1() { return cValueAssignment_0_1; }

		//INT
		public RuleCall getValueINTTerminalRuleCall_0_1_0() { return cValueINTTerminalRuleCall_0_1_0; }

		//{basiciql::IQLMetadataValueSingleDouble} value=DOUBLE
		public Group getGroup_1() { return cGroup_1; }

		//{basiciql::IQLMetadataValueSingleDouble}
		public Action getIQLMetadataValueSingleDoubleAction_1_0() { return cIQLMetadataValueSingleDoubleAction_1_0; }

		//value=DOUBLE
		public Assignment getValueAssignment_1_1() { return cValueAssignment_1_1; }

		//DOUBLE
		public RuleCall getValueDOUBLETerminalRuleCall_1_1_0() { return cValueDOUBLETerminalRuleCall_1_1_0; }

		//{basiciql::IQLMetadataValueSingleString} value=STRING
		public Group getGroup_2() { return cGroup_2; }

		//{basiciql::IQLMetadataValueSingleString}
		public Action getIQLMetadataValueSingleStringAction_2_0() { return cIQLMetadataValueSingleStringAction_2_0; }

		//value=STRING
		public Assignment getValueAssignment_2_1() { return cValueAssignment_2_1; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_2_1_0() { return cValueSTRINGTerminalRuleCall_2_1_0; }

		//{basiciql::IQLMetadataValueSingleBoolean} value=BOOLEAN
		public Group getGroup_3() { return cGroup_3; }

		//{basiciql::IQLMetadataValueSingleBoolean}
		public Action getIQLMetadataValueSingleBooleanAction_3_0() { return cIQLMetadataValueSingleBooleanAction_3_0; }

		//value=BOOLEAN
		public Assignment getValueAssignment_3_1() { return cValueAssignment_3_1; }

		//BOOLEAN
		public RuleCall getValueBOOLEANTerminalRuleCall_3_1_0() { return cValueBOOLEANTerminalRuleCall_3_1_0; }

		//=> ({QDLMetadataValueSingleID} value=ID)
		public Group getGroup_4() { return cGroup_4; }

		//{QDLMetadataValueSingleID} value=ID
		public Group getGroup_4_0() { return cGroup_4_0; }

		//{QDLMetadataValueSingleID}
		public Action getQDLMetadataValueSingleIDAction_4_0_0() { return cQDLMetadataValueSingleIDAction_4_0_0; }

		//value=ID
		public Assignment getValueAssignment_4_0_1() { return cValueAssignment_4_0_1; }

		//ID
		public RuleCall getValueIDTerminalRuleCall_4_0_1_0() { return cValueIDTerminalRuleCall_4_0_1_0; }

		//{basiciql::IQLMetadataValueSingleTypeRef} value=JvmTypeReference
		public Group getGroup_5() { return cGroup_5; }

		//{basiciql::IQLMetadataValueSingleTypeRef}
		public Action getIQLMetadataValueSingleTypeRefAction_5_0() { return cIQLMetadataValueSingleTypeRefAction_5_0; }

		//value=JvmTypeReference
		public Assignment getValueAssignment_5_1() { return cValueAssignment_5_1; }

		//JvmTypeReference
		public RuleCall getValueJvmTypeReferenceParserRuleCall_5_1_0() { return cValueJvmTypeReferenceParserRuleCall_5_1_0; }

		//{basiciql::IQLMetadataValueSingleNull} "null"
		public Group getGroup_6() { return cGroup_6; }

		//{basiciql::IQLMetadataValueSingleNull}
		public Action getIQLMetadataValueSingleNullAction_6_0() { return cIQLMetadataValueSingleNullAction_6_0; }

		//"null"
		public Keyword getNullKeyword_6_1() { return cNullKeyword_6_1; }
	}

	public class IQLJavaTextElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IQLJavaText");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIQL_JAVA_KEYWORDSParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cWSTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cBOOLEANTerminalRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cDOUBLETerminalRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cSTRINGTerminalRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cINTTerminalRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cANY_OTHERTerminalRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final Keyword cPlusSignKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cPlusSignEqualsSignKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Keyword cHyphenMinusKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		private final Keyword cHyphenMinusEqualsSignKeyword_11 = (Keyword)cAlternatives.eContents().get(11);
		private final Keyword cAsteriskKeyword_12 = (Keyword)cAlternatives.eContents().get(12);
		private final Keyword cAsteriskEqualsSignKeyword_13 = (Keyword)cAlternatives.eContents().get(13);
		private final Keyword cSolidusKeyword_14 = (Keyword)cAlternatives.eContents().get(14);
		private final Keyword cSolidusEqualsSignKeyword_15 = (Keyword)cAlternatives.eContents().get(15);
		private final Keyword cPercentSignKeyword_16 = (Keyword)cAlternatives.eContents().get(16);
		private final Keyword cPercentSignEqualsSignKeyword_17 = (Keyword)cAlternatives.eContents().get(17);
		private final Keyword cPlusSignPlusSignKeyword_18 = (Keyword)cAlternatives.eContents().get(18);
		private final Keyword cHyphenMinusHyphenMinusKeyword_19 = (Keyword)cAlternatives.eContents().get(19);
		private final Keyword cGreaterThanSignKeyword_20 = (Keyword)cAlternatives.eContents().get(20);
		private final Keyword cGreaterThanSignEqualsSignKeyword_21 = (Keyword)cAlternatives.eContents().get(21);
		private final Keyword cLessThanSignKeyword_22 = (Keyword)cAlternatives.eContents().get(22);
		private final Keyword cLessThanSignEqualsSignKeyword_23 = (Keyword)cAlternatives.eContents().get(23);
		private final Keyword cExclamationMarkKeyword_24 = (Keyword)cAlternatives.eContents().get(24);
		private final Keyword cExclamationMarkEqualsSignKeyword_25 = (Keyword)cAlternatives.eContents().get(25);
		private final Keyword cAmpersandAmpersandKeyword_26 = (Keyword)cAlternatives.eContents().get(26);
		private final Keyword cVerticalLineVerticalLineKeyword_27 = (Keyword)cAlternatives.eContents().get(27);
		private final Keyword cEqualsSignEqualsSignKeyword_28 = (Keyword)cAlternatives.eContents().get(28);
		private final Keyword cEqualsSignKeyword_29 = (Keyword)cAlternatives.eContents().get(29);
		private final Keyword cTildeKeyword_30 = (Keyword)cAlternatives.eContents().get(30);
		private final Keyword cQuestionMarkColonKeyword_31 = (Keyword)cAlternatives.eContents().get(31);
		private final Keyword cVerticalLineKeyword_32 = (Keyword)cAlternatives.eContents().get(32);
		private final Keyword cVerticalLineEqualsSignKeyword_33 = (Keyword)cAlternatives.eContents().get(33);
		private final Keyword cCircumflexAccentKeyword_34 = (Keyword)cAlternatives.eContents().get(34);
		private final Keyword cCircumflexAccentEqualsSignKeyword_35 = (Keyword)cAlternatives.eContents().get(35);
		private final Keyword cAmpersandKeyword_36 = (Keyword)cAlternatives.eContents().get(36);
		private final Keyword cAmpersandEqualsSignKeyword_37 = (Keyword)cAlternatives.eContents().get(37);
		private final Keyword cGreaterThanSignGreaterThanSignKeyword_38 = (Keyword)cAlternatives.eContents().get(38);
		private final Keyword cGreaterThanSignGreaterThanSignEqualsSignKeyword_39 = (Keyword)cAlternatives.eContents().get(39);
		private final Keyword cLessThanSignLessThanSignKeyword_40 = (Keyword)cAlternatives.eContents().get(40);
		private final Keyword cLessThanSignLessThanSignEqualsSignKeyword_41 = (Keyword)cAlternatives.eContents().get(41);
		private final Keyword cGreaterThanSignGreaterThanSignGreaterThanSignKeyword_42 = (Keyword)cAlternatives.eContents().get(42);
		private final Keyword cGreaterThanSignGreaterThanSignGreaterThanSignEqualsSignKeyword_43 = (Keyword)cAlternatives.eContents().get(43);
		private final Keyword cLeftSquareBracketKeyword_44 = (Keyword)cAlternatives.eContents().get(44);
		private final Keyword cRightSquareBracketKeyword_45 = (Keyword)cAlternatives.eContents().get(45);
		private final Keyword cLeftCurlyBracketKeyword_46 = (Keyword)cAlternatives.eContents().get(46);
		private final Keyword cRightCurlyBracketKeyword_47 = (Keyword)cAlternatives.eContents().get(47);
		private final Keyword cLeftParenthesisKeyword_48 = (Keyword)cAlternatives.eContents().get(48);
		private final Keyword cRightParenthesisKeyword_49 = (Keyword)cAlternatives.eContents().get(49);
		private final Keyword cFullStopKeyword_50 = (Keyword)cAlternatives.eContents().get(50);
		private final Keyword cColonKeyword_51 = (Keyword)cAlternatives.eContents().get(51);
		private final Keyword cSemicolonKeyword_52 = (Keyword)cAlternatives.eContents().get(52);
		private final Keyword cCommaKeyword_53 = (Keyword)cAlternatives.eContents().get(53);
		private final Keyword cNullKeyword_54 = (Keyword)cAlternatives.eContents().get(54);
		private final Keyword cQueryKeyword_55 = (Keyword)cAlternatives.eContents().get(55);
		
		//IQLJavaText:
		//	(IQL_JAVA_KEYWORDS | WS | ID | BOOLEAN | DOUBLE | STRING | INT | ANY_OTHER | "+" | "+=" | "-" | "-=" | "*" | "*=" |
		//	"/" | "/=" | "%" | "%=" | "++" | "--" | ">" | ">=" | "<" | "<=" | "!" | "!=" | "&&" | "||" | "==" | "=" | "~" | "?:"
		//	| "|" | "|=" | "^" | "^=" | "&" | "&=" | ">>" | ">>=" | "<<" | "<<=" | ">>>" | ">>>=" | "[" | "]" | "{" | "}" | "(" |
		//	")" | "." | ":" | ";" | "," | "null" | "query")*;
		public ParserRule getRule() { return rule; }

		//(IQL_JAVA_KEYWORDS | WS | ID | BOOLEAN | DOUBLE | STRING | INT | ANY_OTHER | "+" | "+=" | "-" | "-=" | "*" | "*=" | "/"
		//| "/=" | "%" | "%=" | "++" | "--" | ">" | ">=" | "<" | "<=" | "!" | "!=" | "&&" | "||" | "==" | "=" | "~" | "?:" | "|"
		//| "|=" | "^" | "^=" | "&" | "&=" | ">>" | ">>=" | "<<" | "<<=" | ">>>" | ">>>=" | "[" | "]" | "{" | "}" | "(" | ")" |
		//"." | ":" | ";" | "," | "null" | "query")*
		public Alternatives getAlternatives() { return cAlternatives; }

		//IQL_JAVA_KEYWORDS
		public RuleCall getIQL_JAVA_KEYWORDSParserRuleCall_0() { return cIQL_JAVA_KEYWORDSParserRuleCall_0; }

		//WS
		public RuleCall getWSTerminalRuleCall_1() { return cWSTerminalRuleCall_1; }

		//ID
		public RuleCall getIDTerminalRuleCall_2() { return cIDTerminalRuleCall_2; }

		//BOOLEAN
		public RuleCall getBOOLEANTerminalRuleCall_3() { return cBOOLEANTerminalRuleCall_3; }

		//DOUBLE
		public RuleCall getDOUBLETerminalRuleCall_4() { return cDOUBLETerminalRuleCall_4; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_5() { return cSTRINGTerminalRuleCall_5; }

		//INT
		public RuleCall getINTTerminalRuleCall_6() { return cINTTerminalRuleCall_6; }

		//ANY_OTHER
		public RuleCall getANY_OTHERTerminalRuleCall_7() { return cANY_OTHERTerminalRuleCall_7; }

		//"+"
		public Keyword getPlusSignKeyword_8() { return cPlusSignKeyword_8; }

		//"+="
		public Keyword getPlusSignEqualsSignKeyword_9() { return cPlusSignEqualsSignKeyword_9; }

		//"-"
		public Keyword getHyphenMinusKeyword_10() { return cHyphenMinusKeyword_10; }

		//"-="
		public Keyword getHyphenMinusEqualsSignKeyword_11() { return cHyphenMinusEqualsSignKeyword_11; }

		//"*"
		public Keyword getAsteriskKeyword_12() { return cAsteriskKeyword_12; }

		//"*="
		public Keyword getAsteriskEqualsSignKeyword_13() { return cAsteriskEqualsSignKeyword_13; }

		//"/"
		public Keyword getSolidusKeyword_14() { return cSolidusKeyword_14; }

		//"/="
		public Keyword getSolidusEqualsSignKeyword_15() { return cSolidusEqualsSignKeyword_15; }

		//"%"
		public Keyword getPercentSignKeyword_16() { return cPercentSignKeyword_16; }

		//"%="
		public Keyword getPercentSignEqualsSignKeyword_17() { return cPercentSignEqualsSignKeyword_17; }

		//"++"
		public Keyword getPlusSignPlusSignKeyword_18() { return cPlusSignPlusSignKeyword_18; }

		//"--"
		public Keyword getHyphenMinusHyphenMinusKeyword_19() { return cHyphenMinusHyphenMinusKeyword_19; }

		//">"
		public Keyword getGreaterThanSignKeyword_20() { return cGreaterThanSignKeyword_20; }

		//">="
		public Keyword getGreaterThanSignEqualsSignKeyword_21() { return cGreaterThanSignEqualsSignKeyword_21; }

		//"<"
		public Keyword getLessThanSignKeyword_22() { return cLessThanSignKeyword_22; }

		//"<="
		public Keyword getLessThanSignEqualsSignKeyword_23() { return cLessThanSignEqualsSignKeyword_23; }

		//"!"
		public Keyword getExclamationMarkKeyword_24() { return cExclamationMarkKeyword_24; }

		//"!="
		public Keyword getExclamationMarkEqualsSignKeyword_25() { return cExclamationMarkEqualsSignKeyword_25; }

		//"&&"
		public Keyword getAmpersandAmpersandKeyword_26() { return cAmpersandAmpersandKeyword_26; }

		//"||"
		public Keyword getVerticalLineVerticalLineKeyword_27() { return cVerticalLineVerticalLineKeyword_27; }

		//"=="
		public Keyword getEqualsSignEqualsSignKeyword_28() { return cEqualsSignEqualsSignKeyword_28; }

		//"="
		public Keyword getEqualsSignKeyword_29() { return cEqualsSignKeyword_29; }

		//"~"
		public Keyword getTildeKeyword_30() { return cTildeKeyword_30; }

		//"?:"
		public Keyword getQuestionMarkColonKeyword_31() { return cQuestionMarkColonKeyword_31; }

		//"|"
		public Keyword getVerticalLineKeyword_32() { return cVerticalLineKeyword_32; }

		//"|="
		public Keyword getVerticalLineEqualsSignKeyword_33() { return cVerticalLineEqualsSignKeyword_33; }

		//"^"
		public Keyword getCircumflexAccentKeyword_34() { return cCircumflexAccentKeyword_34; }

		//"^="
		public Keyword getCircumflexAccentEqualsSignKeyword_35() { return cCircumflexAccentEqualsSignKeyword_35; }

		//"&"
		public Keyword getAmpersandKeyword_36() { return cAmpersandKeyword_36; }

		//"&="
		public Keyword getAmpersandEqualsSignKeyword_37() { return cAmpersandEqualsSignKeyword_37; }

		//">>"
		public Keyword getGreaterThanSignGreaterThanSignKeyword_38() { return cGreaterThanSignGreaterThanSignKeyword_38; }

		//">>="
		public Keyword getGreaterThanSignGreaterThanSignEqualsSignKeyword_39() { return cGreaterThanSignGreaterThanSignEqualsSignKeyword_39; }

		//"<<"
		public Keyword getLessThanSignLessThanSignKeyword_40() { return cLessThanSignLessThanSignKeyword_40; }

		//"<<="
		public Keyword getLessThanSignLessThanSignEqualsSignKeyword_41() { return cLessThanSignLessThanSignEqualsSignKeyword_41; }

		//">>>"
		public Keyword getGreaterThanSignGreaterThanSignGreaterThanSignKeyword_42() { return cGreaterThanSignGreaterThanSignGreaterThanSignKeyword_42; }

		//">>>="
		public Keyword getGreaterThanSignGreaterThanSignGreaterThanSignEqualsSignKeyword_43() { return cGreaterThanSignGreaterThanSignGreaterThanSignEqualsSignKeyword_43; }

		//"["
		public Keyword getLeftSquareBracketKeyword_44() { return cLeftSquareBracketKeyword_44; }

		//"]"
		public Keyword getRightSquareBracketKeyword_45() { return cRightSquareBracketKeyword_45; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_46() { return cLeftCurlyBracketKeyword_46; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_47() { return cRightCurlyBracketKeyword_47; }

		//"("
		public Keyword getLeftParenthesisKeyword_48() { return cLeftParenthesisKeyword_48; }

		//")"
		public Keyword getRightParenthesisKeyword_49() { return cRightParenthesisKeyword_49; }

		//"."
		public Keyword getFullStopKeyword_50() { return cFullStopKeyword_50; }

		//":"
		public Keyword getColonKeyword_51() { return cColonKeyword_51; }

		//";"
		public Keyword getSemicolonKeyword_52() { return cSemicolonKeyword_52; }

		//","
		public Keyword getCommaKeyword_53() { return cCommaKeyword_53; }

		//"null"
		public Keyword getNullKeyword_54() { return cNullKeyword_54; }

		//"query"
		public Keyword getQueryKeyword_55() { return cQueryKeyword_55; }
	}
	
	
	private final QDLModelElements pQDLModel;
	private final QDLModelElementElements pQDLModelElement;
	private final QDLQueryElements pQDLQuery;
	private final IQLRelationalExpressionElements pIQLRelationalExpression;
	private final IQLSubscribeExpressionElements pIQLSubscribeExpression;
	private final IQLPortExpressionElements pIQLPortExpression;
	private final IQLSubscribeElements pIQLSubscribe;
	private final IQLMetadataValueSingleElements pIQLMetadataValueSingle;
	private final IQLJavaTextElements pIQLJavaText;
	
	private final Grammar grammar;

	private final BasicIQLGrammarAccess gaBasicIQL;

	@Inject
	public QDLGrammarAccess(GrammarProvider grammarProvider,
		BasicIQLGrammarAccess gaBasicIQL) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaBasicIQL = gaBasicIQL;
		this.pQDLModel = new QDLModelElements();
		this.pQDLModelElement = new QDLModelElementElements();
		this.pQDLQuery = new QDLQueryElements();
		this.pIQLRelationalExpression = new IQLRelationalExpressionElements();
		this.pIQLSubscribeExpression = new IQLSubscribeExpressionElements();
		this.pIQLPortExpression = new IQLPortExpressionElements();
		this.pIQLSubscribe = new IQLSubscribeElements();
		this.pIQLMetadataValueSingle = new IQLMetadataValueSingleElements();
		this.pIQLJavaText = new IQLJavaTextElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("de.uniol.inf.is.odysseus.iql.qdl.QDL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public BasicIQLGrammarAccess getBasicIQLGrammarAccess() {
		return gaBasicIQL;
	}

	
	//QDLModel returns basiciql::IQLModel:
	//	{QDLModel} namespaces+=IQLNamespace* elements+=QDLModelElement*;
	public QDLModelElements getQDLModelAccess() {
		return pQDLModel;
	}
	
	public ParserRule getQDLModelRule() {
		return getQDLModelAccess().getRule();
	}

	//QDLModelElement returns basiciql::IQLModelElement:
	//	{QDLModelElement} javametadata+=IQLJavaMetadata* inner=(IQLClass | IQLInterface | QDLQuery);
	public QDLModelElementElements getQDLModelElementAccess() {
		return pQDLModelElement;
	}
	
	public ParserRule getQDLModelElementRule() {
		return getQDLModelElementAccess().getRule();
	}

	//QDLQuery returns jvm::JvmGenericType:
	//	{QDLQuery} "query" simpleName=ID ("(" metadataList=IQLMetadataList? ")")? statements=IQLStatementBlock;
	public QDLQueryElements getQDLQueryAccess() {
		return pQDLQuery;
	}
	
	public ParserRule getQDLQueryRule() {
		return getQDLQueryAccess().getRule();
	}

	//IQLRelationalExpression returns basiciql::IQLExpression:
	//	IQLSubscribeExpression (=> ({IQLInstanceOfExpression.leftOperand=current} "instanceof") targetRef=JvmTypeReference |
	//	=> ({IQLRelationalExpression.leftOperand=current} op=OpRelational) rightOperand=IQLSubscribeExpression)*;
	public IQLRelationalExpressionElements getIQLRelationalExpressionAccess() {
		return pIQLRelationalExpression;
	}
	
	public ParserRule getIQLRelationalExpressionRule() {
		return getIQLRelationalExpressionAccess().getRule();
	}

	//IQLSubscribeExpression returns basiciql::IQLExpression:
	//	IQLPortExpression (=> ({IQLSubscribeExpression.leftOperand=current} op=IQLSubscribe)
	//	rightOperand=IQLPortExpression)*;
	public IQLSubscribeExpressionElements getIQLSubscribeExpressionAccess() {
		return pIQLSubscribeExpression;
	}
	
	public ParserRule getIQLSubscribeExpressionRule() {
		return getIQLSubscribeExpressionAccess().getRule();
	}

	//IQLPortExpression returns basiciql::IQLExpression:
	//	IQLAdditiveExpression (=> ({IQLPortExpression.leftOperand=current} op=":") rightOperand=IQLAdditiveExpression)?;
	public IQLPortExpressionElements getIQLPortExpressionAccess() {
		return pIQLPortExpression;
	}
	
	public ParserRule getIQLPortExpressionRule() {
		return getIQLPortExpressionAccess().getRule();
	}

	//IQLSubscribe:
	//	"->" | "<-";
	public IQLSubscribeElements getIQLSubscribeAccess() {
		return pIQLSubscribe;
	}
	
	public ParserRule getIQLSubscribeRule() {
		return getIQLSubscribeAccess().getRule();
	}

	//IQLMetadataValueSingle returns basiciql::IQLMetadataValue:
	//	{basiciql::IQLMetadataValueSingleInt} value=INT | {basiciql::IQLMetadataValueSingleDouble} value=DOUBLE |
	//	{basiciql::IQLMetadataValueSingleString} value=STRING | {basiciql::IQLMetadataValueSingleBoolean} value=BOOLEAN | =>
	//	({QDLMetadataValueSingleID} value=ID) | {basiciql::IQLMetadataValueSingleTypeRef} value=JvmTypeReference |
	//	{basiciql::IQLMetadataValueSingleNull} "null";
	public IQLMetadataValueSingleElements getIQLMetadataValueSingleAccess() {
		return pIQLMetadataValueSingle;
	}
	
	public ParserRule getIQLMetadataValueSingleRule() {
		return getIQLMetadataValueSingleAccess().getRule();
	}

	//IQLJavaText:
	//	(IQL_JAVA_KEYWORDS | WS | ID | BOOLEAN | DOUBLE | STRING | INT | ANY_OTHER | "+" | "+=" | "-" | "-=" | "*" | "*=" |
	//	"/" | "/=" | "%" | "%=" | "++" | "--" | ">" | ">=" | "<" | "<=" | "!" | "!=" | "&&" | "||" | "==" | "=" | "~" | "?:"
	//	| "|" | "|=" | "^" | "^=" | "&" | "&=" | ">>" | ">>=" | "<<" | "<<=" | ">>>" | ">>>=" | "[" | "]" | "{" | "}" | "(" |
	//	")" | "." | ":" | ";" | "," | "null" | "query")*;
	public IQLJavaTextElements getIQLJavaTextAccess() {
		return pIQLJavaText;
	}
	
	public ParserRule getIQLJavaTextRule() {
		return getIQLJavaTextAccess().getRule();
	}

	//IQLModel:
	//	("namespace" name=QualifiedName ";")? namespaces+=IQLNamespace* elements+=IQLModelElement*;
	public BasicIQLGrammarAccess.IQLModelElements getIQLModelAccess() {
		return gaBasicIQL.getIQLModelAccess();
	}
	
	public ParserRule getIQLModelRule() {
		return getIQLModelAccess().getRule();
	}

	//IQLModelElement:
	//	javametadata+=IQLJavaMetadata* inner=(IQLClass | IQLInterface);
	public BasicIQLGrammarAccess.IQLModelElementElements getIQLModelElementAccess() {
		return gaBasicIQL.getIQLModelElementAccess();
	}
	
	public ParserRule getIQLModelElementRule() {
		return getIQLModelElementAccess().getRule();
	}

	//IQLNamespace:
	//	"use" static?="static"? importedNamespace=QualifiedNameWithWildcard ";";
	public BasicIQLGrammarAccess.IQLNamespaceElements getIQLNamespaceAccess() {
		return gaBasicIQL.getIQLNamespaceAccess();
	}
	
	public ParserRule getIQLNamespaceRule() {
		return getIQLNamespaceAccess().getRule();
	}

	//IQLClass returns jvm::JvmGenericType:
	//	{IQLClass} "class" simpleName=ID ("extends" extendedClass=JvmTypeReference)? ("implements"
	//	extendedInterfaces+=JvmTypeReference ("," extendedInterfaces+=JvmTypeReference)*)? "{" members+=(IQLAttribute |
	//	IQLMethod | IQLJavaMember)* "}";
	public BasicIQLGrammarAccess.IQLClassElements getIQLClassAccess() {
		return gaBasicIQL.getIQLClassAccess();
	}
	
	public ParserRule getIQLClassRule() {
		return getIQLClassAccess().getRule();
	}

	//IQLInterface returns jvm::JvmGenericType:
	//	{IQLInterface} "interface" simpleName=ID ("extends" extendedInterfaces+=JvmTypeReference (","
	//	extendedInterfaces+=JvmTypeReference)?)? "{" members+=(IQLMethodDeclaration | IQLJavaMember)* "}";
	public BasicIQLGrammarAccess.IQLInterfaceElements getIQLInterfaceAccess() {
		return gaBasicIQL.getIQLInterfaceAccess();
	}
	
	public ParserRule getIQLInterfaceRule() {
		return getIQLInterfaceAccess().getRule();
	}

	//IQLJavaMetadata:
	//	java=IQLJava;
	public BasicIQLGrammarAccess.IQLJavaMetadataElements getIQLJavaMetadataAccess() {
		return gaBasicIQL.getIQLJavaMetadataAccess();
	}
	
	public ParserRule getIQLJavaMetadataRule() {
		return getIQLJavaMetadataAccess().getRule();
	}

	///////////////////////////////////////////////
	///////////////////////////////////////////////
	///////////////////////////////////////////////
	//IQLAttribute returns jvm::JvmField:
	//	{IQLAttribute} type=JvmTypeReference simpleName=ID init=IQLVariableInitialization? ";";
	public BasicIQLGrammarAccess.IQLAttributeElements getIQLAttributeAccess() {
		return gaBasicIQL.getIQLAttributeAccess();
	}
	
	public ParserRule getIQLAttributeRule() {
		return getIQLAttributeAccess().getRule();
	}

	//JvmTypeReference returns jvm::JvmTypeReference:
	//	IQLSimpleTypeRef | IQLArrayTypeRef;
	public BasicIQLGrammarAccess.JvmTypeReferenceElements getJvmTypeReferenceAccess() {
		return gaBasicIQL.getJvmTypeReferenceAccess();
	}
	
	public ParserRule getJvmTypeReferenceRule() {
		return getJvmTypeReferenceAccess().getRule();
	}

	//IQLSimpleTypeRef returns jvm::JvmTypeReference:
	//	{IQLSimpleTypeRef} type=[jvm::JvmType|QualifiedName];
	public BasicIQLGrammarAccess.IQLSimpleTypeRefElements getIQLSimpleTypeRefAccess() {
		return gaBasicIQL.getIQLSimpleTypeRefAccess();
	}
	
	public ParserRule getIQLSimpleTypeRefRule() {
		return getIQLSimpleTypeRefAccess().getRule();
	}

	//IQLArrayTypeRef returns jvm::JvmTypeReference:
	//	{IQLArrayTypeRef} type=IQLArrayType;
	public BasicIQLGrammarAccess.IQLArrayTypeRefElements getIQLArrayTypeRefAccess() {
		return gaBasicIQL.getIQLArrayTypeRefAccess();
	}
	
	public ParserRule getIQLArrayTypeRefRule() {
		return getIQLArrayTypeRefAccess().getRule();
	}

	//IQLArrayType returns jvm::JvmType:
	//	{IQLArrayType} componentType=[jvm::JvmType|QualifiedName] dimensions+=ArrayBrackets+;
	public BasicIQLGrammarAccess.IQLArrayTypeElements getIQLArrayTypeAccess() {
		return gaBasicIQL.getIQLArrayTypeAccess();
	}
	
	public ParserRule getIQLArrayTypeRule() {
		return getIQLArrayTypeAccess().getRule();
	}

	//ArrayBrackets:
	//	"[" "]";
	public BasicIQLGrammarAccess.ArrayBracketsElements getArrayBracketsAccess() {
		return gaBasicIQL.getArrayBracketsAccess();
	}
	
	public ParserRule getArrayBracketsRule() {
		return getArrayBracketsAccess().getRule();
	}

	//JvmFormalParameter returns jvm::JvmFormalParameter:
	//	parameterType=JvmTypeReference name=ID;
	public BasicIQLGrammarAccess.JvmFormalParameterElements getJvmFormalParameterAccess() {
		return gaBasicIQL.getJvmFormalParameterAccess();
	}
	
	public ParserRule getJvmFormalParameterRule() {
		return getJvmFormalParameterAccess().getRule();
	}

	//IQLMethod returns jvm::JvmOperation:
	//	{IQLMethod} override?="override"? simpleName=ID ("(" (parameters+=JvmFormalParameter (","
	//	parameters+=JvmFormalParameter)*)? ")")? (":" returnType=JvmTypeReference)? body=IQLStatementBlock;
	public BasicIQLGrammarAccess.IQLMethodElements getIQLMethodAccess() {
		return gaBasicIQL.getIQLMethodAccess();
	}
	
	public ParserRule getIQLMethodRule() {
		return getIQLMethodAccess().getRule();
	}

	//IQLMethodDeclaration returns jvm::JvmOperation:
	//	{IQLMethodDeclaration} simpleName=ID "(" (parameters+=JvmFormalParameter ("," parameters+=JvmFormalParameter)*)? ")"
	//	(":" returnType=JvmTypeReference)? ";";
	public BasicIQLGrammarAccess.IQLMethodDeclarationElements getIQLMethodDeclarationAccess() {
		return gaBasicIQL.getIQLMethodDeclarationAccess();
	}
	
	public ParserRule getIQLMethodDeclarationRule() {
		return getIQLMethodDeclarationAccess().getRule();
	}

	//IQLJavaMember returns jvm::JvmMember:
	//	{IQLJavaMember} java=IQLJava;
	public BasicIQLGrammarAccess.IQLJavaMemberElements getIQLJavaMemberAccess() {
		return gaBasicIQL.getIQLJavaMemberAccess();
	}
	
	public ParserRule getIQLJavaMemberRule() {
		return getIQLJavaMemberAccess().getRule();
	}

	///////////////////////////////////////////////
	///////////////////////////////////////////////
	///////////////////////////////////////////////
	//IQLMetadataList:
	//	elements+=IQLMetadata ("," elements+=IQLMetadata)*;
	public BasicIQLGrammarAccess.IQLMetadataListElements getIQLMetadataListAccess() {
		return gaBasicIQL.getIQLMetadataListAccess();
	}
	
	public ParserRule getIQLMetadataListRule() {
		return getIQLMetadataListAccess().getRule();
	}

	//IQLMetadata:
	//	name=ID ("=" value=IQLMetadataValue)?;
	public BasicIQLGrammarAccess.IQLMetadataElements getIQLMetadataAccess() {
		return gaBasicIQL.getIQLMetadataAccess();
	}
	
	public ParserRule getIQLMetadataRule() {
		return getIQLMetadataAccess().getRule();
	}

	//IQLMetadataValue:
	//	IQLMetadataValueSingle | IQLMetadataValueList | IQLMetadataValueMap;
	public BasicIQLGrammarAccess.IQLMetadataValueElements getIQLMetadataValueAccess() {
		return gaBasicIQL.getIQLMetadataValueAccess();
	}
	
	public ParserRule getIQLMetadataValueRule() {
		return getIQLMetadataValueAccess().getRule();
	}

	//IQLMetadataValueList returns IQLMetadataValue:
	//	{IQLMetadataValueList} "[" (elements+=IQLMetadataValue ("," elements+=IQLMetadataValue)*)? "]";
	public BasicIQLGrammarAccess.IQLMetadataValueListElements getIQLMetadataValueListAccess() {
		return gaBasicIQL.getIQLMetadataValueListAccess();
	}
	
	public ParserRule getIQLMetadataValueListRule() {
		return getIQLMetadataValueListAccess().getRule();
	}

	//IQLMetadataValueMap returns IQLMetadataValue:
	//	{IQLMetadataValueMap} "{" (elements+=IQLMetadataValueMapElement ("," elements+=IQLMetadataValueMapElement)*)? "}";
	public BasicIQLGrammarAccess.IQLMetadataValueMapElements getIQLMetadataValueMapAccess() {
		return gaBasicIQL.getIQLMetadataValueMapAccess();
	}
	
	public ParserRule getIQLMetadataValueMapRule() {
		return getIQLMetadataValueMapAccess().getRule();
	}

	//IQLMetadataValueMapElement:
	//	key=IQLMetadataValue "=" value=IQLMetadataValue;
	public BasicIQLGrammarAccess.IQLMetadataValueMapElementElements getIQLMetadataValueMapElementAccess() {
		return gaBasicIQL.getIQLMetadataValueMapElementAccess();
	}
	
	public ParserRule getIQLMetadataValueMapElementRule() {
		return getIQLMetadataValueMapElementAccess().getRule();
	}

	///////////////////////////////////////////////
	///////////////////////////////////////////////
	///////////////////////////////////////////////
	//IQLVariableDeclaration returns jvm::JvmIdentifiableElement:
	//	{IQLVariableDeclaration} ref=JvmTypeReference name=ID;
	public BasicIQLGrammarAccess.IQLVariableDeclarationElements getIQLVariableDeclarationAccess() {
		return gaBasicIQL.getIQLVariableDeclarationAccess();
	}
	
	public ParserRule getIQLVariableDeclarationRule() {
		return getIQLVariableDeclarationAccess().getRule();
	}

	//IQLVariableInitialization:
	//	argsList=IQLArgumentsList argsMap=IQLArgumentsMap? | "=" value=IQLExpression;
	public BasicIQLGrammarAccess.IQLVariableInitializationElements getIQLVariableInitializationAccess() {
		return gaBasicIQL.getIQLVariableInitializationAccess();
	}
	
	public ParserRule getIQLVariableInitializationRule() {
		return getIQLVariableInitializationAccess().getRule();
	}

	//IQLArgumentsList:
	//	{IQLArgumentsList} "(" (elements+=IQLExpression ("," elements+=IQLExpression)*)? ")";
	public BasicIQLGrammarAccess.IQLArgumentsListElements getIQLArgumentsListAccess() {
		return gaBasicIQL.getIQLArgumentsListAccess();
	}
	
	public ParserRule getIQLArgumentsListRule() {
		return getIQLArgumentsListAccess().getRule();
	}

	//IQLArgumentsMap:
	//	{IQLArgumentsMap} "{" (elements+=IQLArgumentsMapKeyValue ("," elements+=IQLArgumentsMapKeyValue)*)? "}";
	public BasicIQLGrammarAccess.IQLArgumentsMapElements getIQLArgumentsMapAccess() {
		return gaBasicIQL.getIQLArgumentsMapAccess();
	}
	
	public ParserRule getIQLArgumentsMapRule() {
		return getIQLArgumentsMapAccess().getRule();
	}

	//IQLArgumentsMapKeyValue:
	//	key=[jvm::JvmIdentifiableElement|QualifiedName] "=" value=IQLExpression;
	public BasicIQLGrammarAccess.IQLArgumentsMapKeyValueElements getIQLArgumentsMapKeyValueAccess() {
		return gaBasicIQL.getIQLArgumentsMapKeyValueAccess();
	}
	
	public ParserRule getIQLArgumentsMapKeyValueRule() {
		return getIQLArgumentsMapKeyValueAccess().getRule();
	}

	///////////////////////////////////////////////
	///////////////////////////////////////////////
	///////////////////////////////////////////////
	//IQLStatement:
	//	IQLStatementBlock | IQLExpressionStatement | IQLIfStatement | IQLWhileStatement | IQLDoWhileStatement |
	//	IQLForStatement | IQLForEachStatement | IQLSwitchStatement | IQLVariableStatement | IQLBreakStatement |
	//	IQLContinueStatement | IQLReturnStatement | IQLConstructorCallStatement | IQLJavaStatement;
	public BasicIQLGrammarAccess.IQLStatementElements getIQLStatementAccess() {
		return gaBasicIQL.getIQLStatementAccess();
	}
	
	public ParserRule getIQLStatementRule() {
		return getIQLStatementAccess().getRule();
	}

	//IQLStatementBlock returns IQLStatement:
	//	{IQLStatementBlock} "{" statements+=IQLStatement* "}";
	public BasicIQLGrammarAccess.IQLStatementBlockElements getIQLStatementBlockAccess() {
		return gaBasicIQL.getIQLStatementBlockAccess();
	}
	
	public ParserRule getIQLStatementBlockRule() {
		return getIQLStatementBlockAccess().getRule();
	}

	//IQLJavaStatement returns IQLStatement:
	//	{IQLJavaStatement} java=IQLJava;
	public BasicIQLGrammarAccess.IQLJavaStatementElements getIQLJavaStatementAccess() {
		return gaBasicIQL.getIQLJavaStatementAccess();
	}
	
	public ParserRule getIQLJavaStatementRule() {
		return getIQLJavaStatementAccess().getRule();
	}

	//IQLIfStatement returns IQLStatement:
	//	{IQLIfStatement} "if" "(" predicate=IQLExpression ")" thenBody=IQLStatement ("else" elseBody=IQLStatement)?;
	public BasicIQLGrammarAccess.IQLIfStatementElements getIQLIfStatementAccess() {
		return gaBasicIQL.getIQLIfStatementAccess();
	}
	
	public ParserRule getIQLIfStatementRule() {
		return getIQLIfStatementAccess().getRule();
	}

	//IQLWhileStatement returns IQLStatement:
	//	{IQLWhileStatement} "while" "(" predicate=IQLExpression ")" body=IQLStatement;
	public BasicIQLGrammarAccess.IQLWhileStatementElements getIQLWhileStatementAccess() {
		return gaBasicIQL.getIQLWhileStatementAccess();
	}
	
	public ParserRule getIQLWhileStatementRule() {
		return getIQLWhileStatementAccess().getRule();
	}

	//IQLDoWhileStatement returns IQLStatement:
	//	{IQLDoWhileStatement} "do" body=IQLStatement "while" "(" predicate=IQLExpression ")" ";";
	public BasicIQLGrammarAccess.IQLDoWhileStatementElements getIQLDoWhileStatementAccess() {
		return gaBasicIQL.getIQLDoWhileStatementAccess();
	}
	
	public ParserRule getIQLDoWhileStatementRule() {
		return getIQLDoWhileStatementAccess().getRule();
	}

	//IQLForStatement returns IQLStatement:
	//	{IQLForStatement} "for" "(" var=IQLVariableStatement predicate=IQLExpressionStatement updateExpr=IQLExpression ")"
	//	body=IQLStatement;
	public BasicIQLGrammarAccess.IQLForStatementElements getIQLForStatementAccess() {
		return gaBasicIQL.getIQLForStatementAccess();
	}
	
	public ParserRule getIQLForStatementRule() {
		return getIQLForStatementAccess().getRule();
	}

	//IQLForEachStatement returns IQLStatement:
	//	{IQLForEachStatement} "for" "(" var=IQLVariableDeclaration ":" forExpression=IQLExpression ")" body=IQLStatement;
	public BasicIQLGrammarAccess.IQLForEachStatementElements getIQLForEachStatementAccess() {
		return gaBasicIQL.getIQLForEachStatementAccess();
	}
	
	public ParserRule getIQLForEachStatementRule() {
		return getIQLForEachStatementAccess().getRule();
	}

	//IQLSwitchStatement returns IQLStatement:
	//	{IQLSwitchStatement} "switch" "(" expr=IQLExpression ")" "{" cases+=IQLCasePart* ("default" ":"
	//	statements+=IQLStatement*)? "}";
	public BasicIQLGrammarAccess.IQLSwitchStatementElements getIQLSwitchStatementAccess() {
		return gaBasicIQL.getIQLSwitchStatementAccess();
	}
	
	public ParserRule getIQLSwitchStatementRule() {
		return getIQLSwitchStatementAccess().getRule();
	}

	//IQLCasePart:
	//	{IQLCasePart} "case" expr=IQLLiteralExpression ":" statements+=IQLStatement*;
	public BasicIQLGrammarAccess.IQLCasePartElements getIQLCasePartAccess() {
		return gaBasicIQL.getIQLCasePartAccess();
	}
	
	public ParserRule getIQLCasePartRule() {
		return getIQLCasePartAccess().getRule();
	}

	//IQLExpressionStatement returns IQLStatement:
	//	{IQLExpressionStatement} expression=IQLExpression ";";
	public BasicIQLGrammarAccess.IQLExpressionStatementElements getIQLExpressionStatementAccess() {
		return gaBasicIQL.getIQLExpressionStatementAccess();
	}
	
	public ParserRule getIQLExpressionStatementRule() {
		return getIQLExpressionStatementAccess().getRule();
	}

	//IQLVariableStatement returns IQLStatement:
	//	{IQLVariableStatement} var=IQLVariableDeclaration init=IQLVariableInitialization ";";
	public BasicIQLGrammarAccess.IQLVariableStatementElements getIQLVariableStatementAccess() {
		return gaBasicIQL.getIQLVariableStatementAccess();
	}
	
	public ParserRule getIQLVariableStatementRule() {
		return getIQLVariableStatementAccess().getRule();
	}

	//IQLConstructorCallStatement returns IQLStatement:
	//	{IQLConstructorCallStatement} (this?="super" | super?="this") args=IQLArgumentsList ";";
	public BasicIQLGrammarAccess.IQLConstructorCallStatementElements getIQLConstructorCallStatementAccess() {
		return gaBasicIQL.getIQLConstructorCallStatementAccess();
	}
	
	public ParserRule getIQLConstructorCallStatementRule() {
		return getIQLConstructorCallStatementAccess().getRule();
	}

	//IQLBreakStatement returns IQLStatement:
	//	{IQLBreakStatement} "break" ";";
	public BasicIQLGrammarAccess.IQLBreakStatementElements getIQLBreakStatementAccess() {
		return gaBasicIQL.getIQLBreakStatementAccess();
	}
	
	public ParserRule getIQLBreakStatementRule() {
		return getIQLBreakStatementAccess().getRule();
	}

	//IQLContinueStatement returns IQLStatement:
	//	{IQLContinueStatement} "continue" ";";
	public BasicIQLGrammarAccess.IQLContinueStatementElements getIQLContinueStatementAccess() {
		return gaBasicIQL.getIQLContinueStatementAccess();
	}
	
	public ParserRule getIQLContinueStatementRule() {
		return getIQLContinueStatementAccess().getRule();
	}

	//IQLReturnStatement returns IQLStatement:
	//	{IQLReturnStatement} "return" expression=IQLExpression ";";
	public BasicIQLGrammarAccess.IQLReturnStatementElements getIQLReturnStatementAccess() {
		return gaBasicIQL.getIQLReturnStatementAccess();
	}
	
	public ParserRule getIQLReturnStatementRule() {
		return getIQLReturnStatementAccess().getRule();
	}

	///////////////////////////////////////////////
	///////////////////////////////////////////////
	///////////////////////////////////////////////
	//IQLExpression:
	//	IQLAssignmentExpression;
	public BasicIQLGrammarAccess.IQLExpressionElements getIQLExpressionAccess() {
		return gaBasicIQL.getIQLExpressionAccess();
	}
	
	public ParserRule getIQLExpressionRule() {
		return getIQLExpressionAccess().getRule();
	}

	//IQLAssignmentExpression returns IQLExpression:
	//	IQLLogicalOrExpression (=> ({IQLAssignmentExpression.leftOperand=current} op=OpAssign)
	//	rightOperand=IQLAssignmentExpression)?;
	public BasicIQLGrammarAccess.IQLAssignmentExpressionElements getIQLAssignmentExpressionAccess() {
		return gaBasicIQL.getIQLAssignmentExpressionAccess();
	}
	
	public ParserRule getIQLAssignmentExpressionRule() {
		return getIQLAssignmentExpressionAccess().getRule();
	}

	//OpAssign:
	//	"=" | "+=" | "-=" | "*=" | "/=" | "%=";
	public BasicIQLGrammarAccess.OpAssignElements getOpAssignAccess() {
		return gaBasicIQL.getOpAssignAccess();
	}
	
	public ParserRule getOpAssignRule() {
		return getOpAssignAccess().getRule();
	}

	//IQLLogicalOrExpression returns IQLExpression:
	//	IQLLogicalAndExpression (=> ({IQLLogicalOrExpression.leftOperand=current} op=OpLogicalOr)
	//	rightOperand=IQLLogicalAndExpression)*;
	public BasicIQLGrammarAccess.IQLLogicalOrExpressionElements getIQLLogicalOrExpressionAccess() {
		return gaBasicIQL.getIQLLogicalOrExpressionAccess();
	}
	
	public ParserRule getIQLLogicalOrExpressionRule() {
		return getIQLLogicalOrExpressionAccess().getRule();
	}

	//OpLogicalOr:
	//	"||";
	public BasicIQLGrammarAccess.OpLogicalOrElements getOpLogicalOrAccess() {
		return gaBasicIQL.getOpLogicalOrAccess();
	}
	
	public ParserRule getOpLogicalOrRule() {
		return getOpLogicalOrAccess().getRule();
	}

	//IQLLogicalAndExpression returns IQLExpression:
	//	IQLEqualityExpression (=> ({IQLLogicalAndExpression.leftOperand=current} op=OpLogicalAnd)
	//	rightOperand=IQLEqualityExpression)*;
	public BasicIQLGrammarAccess.IQLLogicalAndExpressionElements getIQLLogicalAndExpressionAccess() {
		return gaBasicIQL.getIQLLogicalAndExpressionAccess();
	}
	
	public ParserRule getIQLLogicalAndExpressionRule() {
		return getIQLLogicalAndExpressionAccess().getRule();
	}

	//OpLogicalAnd:
	//	"&&";
	public BasicIQLGrammarAccess.OpLogicalAndElements getOpLogicalAndAccess() {
		return gaBasicIQL.getOpLogicalAndAccess();
	}
	
	public ParserRule getOpLogicalAndRule() {
		return getOpLogicalAndAccess().getRule();
	}

	//IQLEqualityExpression returns IQLExpression:
	//	IQLRelationalExpression (=> ({IQLEqualityExpression.leftOperand=current} op=OpEquality)
	//	rightOperand=IQLRelationalExpression)*;
	public BasicIQLGrammarAccess.IQLEqualityExpressionElements getIQLEqualityExpressionAccess() {
		return gaBasicIQL.getIQLEqualityExpressionAccess();
	}
	
	public ParserRule getIQLEqualityExpressionRule() {
		return getIQLEqualityExpressionAccess().getRule();
	}

	//OpEquality:
	//	"==" | "!=";
	public BasicIQLGrammarAccess.OpEqualityElements getOpEqualityAccess() {
		return gaBasicIQL.getOpEqualityAccess();
	}
	
	public ParserRule getOpEqualityRule() {
		return getOpEqualityAccess().getRule();
	}

	//OpRelational:
	//	">" | ">=" | "<" | "<=";
	public BasicIQLGrammarAccess.OpRelationalElements getOpRelationalAccess() {
		return gaBasicIQL.getOpRelationalAccess();
	}
	
	public ParserRule getOpRelationalRule() {
		return getOpRelationalAccess().getRule();
	}

	//IQLAdditiveExpression returns IQLExpression:
	//	IQLMultiplicativeExpression (=> ({IQLAdditiveExpression.leftOperand=current} op=OpAdd)
	//	rightOperand=IQLMultiplicativeExpression)*;
	public BasicIQLGrammarAccess.IQLAdditiveExpressionElements getIQLAdditiveExpressionAccess() {
		return gaBasicIQL.getIQLAdditiveExpressionAccess();
	}
	
	public ParserRule getIQLAdditiveExpressionRule() {
		return getIQLAdditiveExpressionAccess().getRule();
	}

	//OpAdd:
	//	"+" | "-";
	public BasicIQLGrammarAccess.OpAddElements getOpAddAccess() {
		return gaBasicIQL.getOpAddAccess();
	}
	
	public ParserRule getOpAddRule() {
		return getOpAddAccess().getRule();
	}

	//IQLMultiplicativeExpression returns IQLExpression:
	//	IQLUnaryExpression (=> ({IQLMultiplicativeExpression.leftOperand=current} op=OpMulti)
	//	rightOperand=IQLUnaryExpression)*;
	public BasicIQLGrammarAccess.IQLMultiplicativeExpressionElements getIQLMultiplicativeExpressionAccess() {
		return gaBasicIQL.getIQLMultiplicativeExpressionAccess();
	}
	
	public ParserRule getIQLMultiplicativeExpressionRule() {
		return getIQLMultiplicativeExpressionAccess().getRule();
	}

	//OpMulti:
	//	"*" | "/" | "%";
	public BasicIQLGrammarAccess.OpMultiElements getOpMultiAccess() {
		return gaBasicIQL.getOpMultiAccess();
	}
	
	public ParserRule getOpMultiRule() {
		return getOpMultiAccess().getRule();
	}

	//IQLUnaryExpression returns IQLExpression:
	//	({IQLPlusMinusExpression} op=OpUnaryPlusMinus) operand=IQLMemberCallExpression | ({IQLBooleanNotExpression}
	//	op=OpUnaryBooleanNot) operand=IQLMemberCallExpression | ({IQLPrefixExpression} op=OpPrefix)
	//	operand=IQLMemberCallExpression | => ({IQLTypeCastExpression} "(" targetRef=JvmTypeReference ")")
	//	operand=IQLMemberCallExpression | IQLMemberCallExpression => ({IQLPostfixExpression.operand=current} op=OpPostfix)?;
	public BasicIQLGrammarAccess.IQLUnaryExpressionElements getIQLUnaryExpressionAccess() {
		return gaBasicIQL.getIQLUnaryExpressionAccess();
	}
	
	public ParserRule getIQLUnaryExpressionRule() {
		return getIQLUnaryExpressionAccess().getRule();
	}

	//OpUnaryPlusMinus:
	//	"-" | "+";
	public BasicIQLGrammarAccess.OpUnaryPlusMinusElements getOpUnaryPlusMinusAccess() {
		return gaBasicIQL.getOpUnaryPlusMinusAccess();
	}
	
	public ParserRule getOpUnaryPlusMinusRule() {
		return getOpUnaryPlusMinusAccess().getRule();
	}

	//OpUnaryBooleanNot:
	//	"!";
	public BasicIQLGrammarAccess.OpUnaryBooleanNotElements getOpUnaryBooleanNotAccess() {
		return gaBasicIQL.getOpUnaryBooleanNotAccess();
	}
	
	public ParserRule getOpUnaryBooleanNotRule() {
		return getOpUnaryBooleanNotAccess().getRule();
	}

	//OpPrefix:
	//	"++" | "--";
	public BasicIQLGrammarAccess.OpPrefixElements getOpPrefixAccess() {
		return gaBasicIQL.getOpPrefixAccess();
	}
	
	public ParserRule getOpPrefixRule() {
		return getOpPrefixAccess().getRule();
	}

	//OpPostfix:
	//	"++" | "--";
	public BasicIQLGrammarAccess.OpPostfixElements getOpPostfixAccess() {
		return gaBasicIQL.getOpPostfixAccess();
	}
	
	public ParserRule getOpPostfixRule() {
		return getOpPostfixAccess().getRule();
	}

	//IQLMemberCallExpression returns IQLExpression:
	//	IQLOtherExpressions (=> ({IQLArrayExpression.leftOperand=current} "[" expressions+=IQLExpression (","
	//	expressions+=IQLExpression)? "]") | => ({IQLMemberSelectionExpression.leftOperand=current} ".")
	//	sel=IQLMemberSelection)*;
	public BasicIQLGrammarAccess.IQLMemberCallExpressionElements getIQLMemberCallExpressionAccess() {
		return gaBasicIQL.getIQLMemberCallExpressionAccess();
	}
	
	public ParserRule getIQLMemberCallExpressionRule() {
		return getIQLMemberCallExpressionAccess().getRule();
	}

	//IQLMemberSelection:
	//	member=[jvm::JvmMember] args=IQLArgumentsList?;
	public BasicIQLGrammarAccess.IQLMemberSelectionElements getIQLMemberSelectionAccess() {
		return gaBasicIQL.getIQLMemberSelectionAccess();
	}
	
	public ParserRule getIQLMemberSelectionRule() {
		return getIQLMemberSelectionAccess().getRule();
	}

	//IQLOtherExpressions returns IQLExpression:
	//	{IQLJvmElementCallExpression} element=[jvm::JvmIdentifiableElement|QualifiedName] args=IQLArgumentsList? |
	//	{IQLThisExpression} "this" | {IQLSuperExpression} "super" | {IQLParenthesisExpression} "(" expr=IQLExpression ")" |
	//	{IQLNewExpression} "new" (ref=IQLArrayTypeRef | ref=IQLSimpleTypeRef argsList=IQLArgumentsList
	//	argsMap=IQLArgumentsMap?) | IQLLiteralExpression;
	public BasicIQLGrammarAccess.IQLOtherExpressionsElements getIQLOtherExpressionsAccess() {
		return gaBasicIQL.getIQLOtherExpressionsAccess();
	}
	
	public ParserRule getIQLOtherExpressionsRule() {
		return getIQLOtherExpressionsAccess().getRule();
	}

	//IQLLiteralExpression returns IQLExpression:
	//	{IQLLiteralExpressionInt} value=INT | {IQLLiteralExpressionDouble} value=DOUBLE | {IQLLiteralExpressionString}
	//	value=STRING | {IQLLiteralExpressionBoolean} value=BOOLEAN | {IQLLiteralExpressionRange} value=RANGE |
	//	{IQLLiteralExpressionNull} "null" | => IQLLiteralExpressionList | IQLLiteralExpressionMap;
	public BasicIQLGrammarAccess.IQLLiteralExpressionElements getIQLLiteralExpressionAccess() {
		return gaBasicIQL.getIQLLiteralExpressionAccess();
	}
	
	public ParserRule getIQLLiteralExpressionRule() {
		return getIQLLiteralExpressionAccess().getRule();
	}

	//IQLLiteralExpressionList returns IQLExpression:
	//	{IQLLiteralExpressionList} "[" (elements+=IQLExpression ("," elements+=IQLExpression)*)? "]";
	public BasicIQLGrammarAccess.IQLLiteralExpressionListElements getIQLLiteralExpressionListAccess() {
		return gaBasicIQL.getIQLLiteralExpressionListAccess();
	}
	
	public ParserRule getIQLLiteralExpressionListRule() {
		return getIQLLiteralExpressionListAccess().getRule();
	}

	//IQLLiteralExpressionMap returns IQLExpression:
	//	{IQLLiteralExpressionMap} "[" (elements+=IQLLiteralExpressionMapKeyValue (","
	//	elements+=IQLLiteralExpressionMapKeyValue)*)? "]";
	public BasicIQLGrammarAccess.IQLLiteralExpressionMapElements getIQLLiteralExpressionMapAccess() {
		return gaBasicIQL.getIQLLiteralExpressionMapAccess();
	}
	
	public ParserRule getIQLLiteralExpressionMapRule() {
		return getIQLLiteralExpressionMapAccess().getRule();
	}

	//IQLLiteralExpressionMapKeyValue:
	//	key=IQLExpression ":" value=IQLExpression;
	public BasicIQLGrammarAccess.IQLLiteralExpressionMapKeyValueElements getIQLLiteralExpressionMapKeyValueAccess() {
		return gaBasicIQL.getIQLLiteralExpressionMapKeyValueAccess();
	}
	
	public ParserRule getIQLLiteralExpressionMapKeyValueRule() {
		return getIQLLiteralExpressionMapKeyValueAccess().getRule();
	}

	///////////////////////////////////////////////
	///////////////////////////////////////////////
	///////////////////////////////////////////////
	//QualifiedNameWithWildcard:
	//	QualifiedName "::*"?;
	public BasicIQLGrammarAccess.QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return gaBasicIQL.getQualifiedNameWithWildcardAccess();
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}

	//QualifiedName:
	//	ID ("::" ID)*;
	public BasicIQLGrammarAccess.QualifiedNameElements getQualifiedNameAccess() {
		return gaBasicIQL.getQualifiedNameAccess();
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//terminal RANGE:
	//	INT ".." INT;
	public TerminalRule getRANGERule() {
		return gaBasicIQL.getRANGERule();
	} 

	//IQLJava hidden(SL_COMMENT, ML_COMMENT):
	//	"$*" text=IQLJavaText "*$";
	public BasicIQLGrammarAccess.IQLJavaElements getIQLJavaAccess() {
		return gaBasicIQL.getIQLJavaAccess();
	}
	
	public ParserRule getIQLJavaRule() {
		return getIQLJavaAccess().getRule();
	}

	//IQL_JAVA_KEYWORDS:
	//	"break" | "case" | "class" | "continue" | "default" | "do" | "else" | "extends" | "for" | "if" | "implements" |
	//	"instanceof" | "interface" | "new" | "package" | "return" | "super" | "switch" | "this" | "while" | "abstract" |
	//	"assert" | "catch" | "const" | "enum" | "final" | "finally" | "goto" | "import" | "native" | "private" | "protected"
	//	| "public" | "static" | "synchronized" | "throw" | "throws" | "transient" | "try" | "volatile" | "strictfp";
	public BasicIQLGrammarAccess.IQL_JAVA_KEYWORDSElements getIQL_JAVA_KEYWORDSAccess() {
		return gaBasicIQL.getIQL_JAVA_KEYWORDSAccess();
	}
	
	public ParserRule getIQL_JAVA_KEYWORDSRule() {
		return getIQL_JAVA_KEYWORDSAccess().getRule();
	}

	//terminal BOOLEAN returns ecore::EBoolean:
	//	"true" | "false";
	public TerminalRule getBOOLEANRule() {
		return gaBasicIQL.getBOOLEANRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaBasicIQL.getINTRule();
	} 

	//terminal DOUBLE returns ecore::EDouble:
	//	"0".."9"* "." "0".."9"+;
	public TerminalRule getDOUBLERule() {
		return gaBasicIQL.getDOUBLERule();
	} 

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaBasicIQL.getIDRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaBasicIQL.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaBasicIQL.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaBasicIQL.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaBasicIQL.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaBasicIQL.getANY_OTHERRule();
	} 
}
