/*
* generated by Xtext
*/
package de.uniol.inf.is.odysseus.iql.basic.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class BasicIQLGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class IQLModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IQLModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cNamespaceKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cNamespacesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNamespacesIQLNamespaceParserRuleCall_1_0 = (RuleCall)cNamespacesAssignment_1.eContents().get(0);
		private final Assignment cElementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cElementsIQLModelElementParserRuleCall_2_0 = (RuleCall)cElementsAssignment_2.eContents().get(0);
		
		//IQLModel:
		//	("namespace" name=QualifiedName ";")? namespaces+=IQLNamespace* elements+=IQLModelElement*;
		public ParserRule getRule() { return rule; }

		//("namespace" name=QualifiedName ";")? namespaces+=IQLNamespace* elements+=IQLModelElement*
		public Group getGroup() { return cGroup; }

		//("namespace" name=QualifiedName ";")?
		public Group getGroup_0() { return cGroup_0; }

		//"namespace"
		public Keyword getNamespaceKeyword_0_0() { return cNamespaceKeyword_0_0; }

		//name=QualifiedName
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_0_1_0() { return cNameQualifiedNameParserRuleCall_0_1_0; }

		//";"
		public Keyword getSemicolonKeyword_0_2() { return cSemicolonKeyword_0_2; }

		//namespaces+=IQLNamespace*
		public Assignment getNamespacesAssignment_1() { return cNamespacesAssignment_1; }

		//IQLNamespace
		public RuleCall getNamespacesIQLNamespaceParserRuleCall_1_0() { return cNamespacesIQLNamespaceParserRuleCall_1_0; }

		//elements+=IQLModelElement*
		public Assignment getElementsAssignment_2() { return cElementsAssignment_2; }

		//IQLModelElement
		public RuleCall getElementsIQLModelElementParserRuleCall_2_0() { return cElementsIQLModelElementParserRuleCall_2_0; }
	}

	public class IQLModelElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IQLModelElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cJavametadataAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cJavametadataIQLJavaMetadataParserRuleCall_0_0 = (RuleCall)cJavametadataAssignment_0.eContents().get(0);
		private final Assignment cInnerAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cInnerAlternatives_1_0 = (Alternatives)cInnerAssignment_1.eContents().get(0);
		private final RuleCall cInnerIQLClassParserRuleCall_1_0_0 = (RuleCall)cInnerAlternatives_1_0.eContents().get(0);
		private final RuleCall cInnerIQLInterfaceParserRuleCall_1_0_1 = (RuleCall)cInnerAlternatives_1_0.eContents().get(1);
		
		//IQLModelElement:
		//	javametadata+=IQLJavaMetadata* inner=(IQLClass | IQLInterface);
		public ParserRule getRule() { return rule; }

		//javametadata+=IQLJavaMetadata* inner=(IQLClass | IQLInterface)
		public Group getGroup() { return cGroup; }

		//javametadata+=IQLJavaMetadata*
		public Assignment getJavametadataAssignment_0() { return cJavametadataAssignment_0; }

		//IQLJavaMetadata
		public RuleCall getJavametadataIQLJavaMetadataParserRuleCall_0_0() { return cJavametadataIQLJavaMetadataParserRuleCall_0_0; }

		//inner=(IQLClass | IQLInterface)
		public Assignment getInnerAssignment_1() { return cInnerAssignment_1; }

		//IQLClass | IQLInterface
		public Alternatives getInnerAlternatives_1_0() { return cInnerAlternatives_1_0; }

		//IQLClass
		public RuleCall getInnerIQLClassParserRuleCall_1_0_0() { return cInnerIQLClassParserRuleCall_1_0_0; }

		//IQLInterface
		public RuleCall getInnerIQLInterfaceParserRuleCall_1_0_1() { return cInnerIQLInterfaceParserRuleCall_1_0_1; }
	}

	public class IQLNamespaceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IQLNamespace");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cStaticAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cStaticStaticKeyword_1_0 = (Keyword)cStaticAssignment_1.eContents().get(0);
		private final Assignment cImportedNamespaceAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cImportedNamespaceQualifiedNameWithWildcardParserRuleCall_2_0 = (RuleCall)cImportedNamespaceAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//IQLNamespace:
		//	"use" static?="static"? importedNamespace=QualifiedNameWithWildcard ";";
		public ParserRule getRule() { return rule; }

		//"use" static?="static"? importedNamespace=QualifiedNameWithWildcard ";"
		public Group getGroup() { return cGroup; }

		//"use"
		public Keyword getUseKeyword_0() { return cUseKeyword_0; }

		//static?="static"?
		public Assignment getStaticAssignment_1() { return cStaticAssignment_1; }

		//"static"
		public Keyword getStaticStaticKeyword_1_0() { return cStaticStaticKeyword_1_0; }

		//importedNamespace=QualifiedNameWithWildcard
		public Assignment getImportedNamespaceAssignment_2() { return cImportedNamespaceAssignment_2; }

		//QualifiedNameWithWildcard
		public RuleCall getImportedNamespaceQualifiedNameWithWildcardParserRuleCall_2_0() { return cImportedNamespaceQualifiedNameWithWildcardParserRuleCall_2_0; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class IQLClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IQLClass");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIQLClassAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cClassKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSimpleNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSimpleNameIDTerminalRuleCall_2_0 = (RuleCall)cSimpleNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cExtendsKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cExtendedClassAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cExtendedClassJvmTypeReferenceParserRuleCall_3_1_0 = (RuleCall)cExtendedClassAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cImplementsKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cExtendedInterfacesAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cExtendedInterfacesJvmTypeReferenceParserRuleCall_4_1_0 = (RuleCall)cExtendedInterfacesAssignment_4_1.eContents().get(0);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Keyword cCommaKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Assignment cExtendedInterfacesAssignment_4_2_1 = (Assignment)cGroup_4_2.eContents().get(1);
		private final RuleCall cExtendedInterfacesJvmTypeReferenceParserRuleCall_4_2_1_0 = (RuleCall)cExtendedInterfacesAssignment_4_2_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cMembersAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final Alternatives cMembersAlternatives_6_0 = (Alternatives)cMembersAssignment_6.eContents().get(0);
		private final RuleCall cMembersIQLAttributeParserRuleCall_6_0_0 = (RuleCall)cMembersAlternatives_6_0.eContents().get(0);
		private final RuleCall cMembersIQLMethodParserRuleCall_6_0_1 = (RuleCall)cMembersAlternatives_6_0.eContents().get(1);
		private final RuleCall cMembersIQLJavaMemberParserRuleCall_6_0_2 = (RuleCall)cMembersAlternatives_6_0.eContents().get(2);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//IQLClass returns jvm::JvmGenericType:
		//	{IQLClass} "class" simpleName=ID ("extends" extendedClass=JvmTypeReference)? ("implements"
		//	extendedInterfaces+=JvmTypeReference ("," extendedInterfaces+=JvmTypeReference)*)? "{" members+=(IQLAttribute |
		//	IQLMethod | IQLJavaMember)* "}";
		public ParserRule getRule() { return rule; }

		//{IQLClass} "class" simpleName=ID ("extends" extendedClass=JvmTypeReference)? ("implements"
		//extendedInterfaces+=JvmTypeReference ("," extendedInterfaces+=JvmTypeReference)*)? "{" members+=(IQLAttribute |
		//IQLMethod | IQLJavaMember)* "}"
		public Group getGroup() { return cGroup; }

		//{IQLClass}
		public Action getIQLClassAction_0() { return cIQLClassAction_0; }

		//"class"
		public Keyword getClassKeyword_1() { return cClassKeyword_1; }

		//simpleName=ID
		public Assignment getSimpleNameAssignment_2() { return cSimpleNameAssignment_2; }

		//ID
		public RuleCall getSimpleNameIDTerminalRuleCall_2_0() { return cSimpleNameIDTerminalRuleCall_2_0; }

		//("extends" extendedClass=JvmTypeReference)?
		public Group getGroup_3() { return cGroup_3; }

		//"extends"
		public Keyword getExtendsKeyword_3_0() { return cExtendsKeyword_3_0; }

		//extendedClass=JvmTypeReference
		public Assignment getExtendedClassAssignment_3_1() { return cExtendedClassAssignment_3_1; }

		//JvmTypeReference
		public RuleCall getExtendedClassJvmTypeReferenceParserRuleCall_3_1_0() { return cExtendedClassJvmTypeReferenceParserRuleCall_3_1_0; }

		//("implements" extendedInterfaces+=JvmTypeReference ("," extendedInterfaces+=JvmTypeReference)*)?
		public Group getGroup_4() { return cGroup_4; }

		//"implements"
		public Keyword getImplementsKeyword_4_0() { return cImplementsKeyword_4_0; }

		//extendedInterfaces+=JvmTypeReference
		public Assignment getExtendedInterfacesAssignment_4_1() { return cExtendedInterfacesAssignment_4_1; }

		//JvmTypeReference
		public RuleCall getExtendedInterfacesJvmTypeReferenceParserRuleCall_4_1_0() { return cExtendedInterfacesJvmTypeReferenceParserRuleCall_4_1_0; }

		//("," extendedInterfaces+=JvmTypeReference)*
		public Group getGroup_4_2() { return cGroup_4_2; }

		//","
		public Keyword getCommaKeyword_4_2_0() { return cCommaKeyword_4_2_0; }

		//extendedInterfaces+=JvmTypeReference
		public Assignment getExtendedInterfacesAssignment_4_2_1() { return cExtendedInterfacesAssignment_4_2_1; }

		//JvmTypeReference
		public RuleCall getExtendedInterfacesJvmTypeReferenceParserRuleCall_4_2_1_0() { return cExtendedInterfacesJvmTypeReferenceParserRuleCall_4_2_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }

		//members+=(IQLAttribute | IQLMethod | IQLJavaMember)*
		public Assignment getMembersAssignment_6() { return cMembersAssignment_6; }

		//IQLAttribute | IQLMethod | IQLJavaMember
		public Alternatives getMembersAlternatives_6_0() { return cMembersAlternatives_6_0; }

		//IQLAttribute
		public RuleCall getMembersIQLAttributeParserRuleCall_6_0_0() { return cMembersIQLAttributeParserRuleCall_6_0_0; }

		//IQLMethod
		public RuleCall getMembersIQLMethodParserRuleCall_6_0_1() { return cMembersIQLMethodParserRuleCall_6_0_1; }

		//IQLJavaMember
		public RuleCall getMembersIQLJavaMemberParserRuleCall_6_0_2() { return cMembersIQLJavaMemberParserRuleCall_6_0_2; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class IQLInterfaceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IQLInterface");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIQLInterfaceAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cInterfaceKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSimpleNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSimpleNameIDTerminalRuleCall_2_0 = (RuleCall)cSimpleNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cExtendsKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cExtendedInterfacesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cExtendedInterfacesJvmTypeReferenceParserRuleCall_3_1_0 = (RuleCall)cExtendedInterfacesAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cCommaKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cExtendedInterfacesAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cExtendedInterfacesJvmTypeReferenceParserRuleCall_3_2_1_0 = (RuleCall)cExtendedInterfacesAssignment_3_2_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cMembersAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final Alternatives cMembersAlternatives_5_0 = (Alternatives)cMembersAssignment_5.eContents().get(0);
		private final RuleCall cMembersIQLMethodDeclarationParserRuleCall_5_0_0 = (RuleCall)cMembersAlternatives_5_0.eContents().get(0);
		private final RuleCall cMembersIQLJavaMemberParserRuleCall_5_0_1 = (RuleCall)cMembersAlternatives_5_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//IQLInterface returns jvm::JvmGenericType:
		//	{IQLInterface} "interface" simpleName=ID ("extends" extendedInterfaces+=JvmTypeReference (","
		//	extendedInterfaces+=JvmTypeReference)?)? "{" members+=(IQLMethodDeclaration | IQLJavaMember)* "}";
		public ParserRule getRule() { return rule; }

		//{IQLInterface} "interface" simpleName=ID ("extends" extendedInterfaces+=JvmTypeReference (","
		//extendedInterfaces+=JvmTypeReference)?)? "{" members+=(IQLMethodDeclaration | IQLJavaMember)* "}"
		public Group getGroup() { return cGroup; }

		//{IQLInterface}
		public Action getIQLInterfaceAction_0() { return cIQLInterfaceAction_0; }

		//"interface"
		public Keyword getInterfaceKeyword_1() { return cInterfaceKeyword_1; }

		//simpleName=ID
		public Assignment getSimpleNameAssignment_2() { return cSimpleNameAssignment_2; }

		//ID
		public RuleCall getSimpleNameIDTerminalRuleCall_2_0() { return cSimpleNameIDTerminalRuleCall_2_0; }

		//("extends" extendedInterfaces+=JvmTypeReference ("," extendedInterfaces+=JvmTypeReference)?)?
		public Group getGroup_3() { return cGroup_3; }

		//"extends"
		public Keyword getExtendsKeyword_3_0() { return cExtendsKeyword_3_0; }

		//extendedInterfaces+=JvmTypeReference
		public Assignment getExtendedInterfacesAssignment_3_1() { return cExtendedInterfacesAssignment_3_1; }

		//JvmTypeReference
		public RuleCall getExtendedInterfacesJvmTypeReferenceParserRuleCall_3_1_0() { return cExtendedInterfacesJvmTypeReferenceParserRuleCall_3_1_0; }

		//("," extendedInterfaces+=JvmTypeReference)?
		public Group getGroup_3_2() { return cGroup_3_2; }

		//","
		public Keyword getCommaKeyword_3_2_0() { return cCommaKeyword_3_2_0; }

		//extendedInterfaces+=JvmTypeReference
		public Assignment getExtendedInterfacesAssignment_3_2_1() { return cExtendedInterfacesAssignment_3_2_1; }

		//JvmTypeReference
		public RuleCall getExtendedInterfacesJvmTypeReferenceParserRuleCall_3_2_1_0() { return cExtendedInterfacesJvmTypeReferenceParserRuleCall_3_2_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }

		//members+=(IQLMethodDeclaration | IQLJavaMember)*
		public Assignment getMembersAssignment_5() { return cMembersAssignment_5; }

		//IQLMethodDeclaration | IQLJavaMember
		public Alternatives getMembersAlternatives_5_0() { return cMembersAlternatives_5_0; }

		//IQLMethodDeclaration
		public RuleCall getMembersIQLMethodDeclarationParserRuleCall_5_0_0() { return cMembersIQLMethodDeclarationParserRuleCall_5_0_0; }

		//IQLJavaMember
		public RuleCall getMembersIQLJavaMemberParserRuleCall_5_0_1() { return cMembersIQLJavaMemberParserRuleCall_5_0_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class IQLJavaMetadataElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IQLJavaMetadata");
		private final Assignment cJavaAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cJavaIQLJavaParserRuleCall_0 = (RuleCall)cJavaAssignment.eContents().get(0);
		
		//IQLJavaMetadata:
		//	java=IQLJava;
		public ParserRule getRule() { return rule; }

		//java=IQLJava
		public Assignment getJavaAssignment() { return cJavaAssignment; }

		//IQLJava
		public RuleCall getJavaIQLJavaParserRuleCall_0() { return cJavaIQLJavaParserRuleCall_0; }
	}

	public class IQLAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IQLAttribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIQLAttributeAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeJvmTypeReferenceParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cSimpleNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSimpleNameIDTerminalRuleCall_2_0 = (RuleCall)cSimpleNameAssignment_2.eContents().get(0);
		private final Assignment cInitAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cInitIQLVariableInitializationParserRuleCall_3_0 = (RuleCall)cInitAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		///////////////////////////////////////////////
		///////////////////////////////////////////////
		///////////////////////////////////////////////
		//IQLAttribute returns jvm::JvmField:
		//	{IQLAttribute} type=JvmTypeReference simpleName=ID init=IQLVariableInitialization? ";";
		public ParserRule getRule() { return rule; }

		//{IQLAttribute} type=JvmTypeReference simpleName=ID init=IQLVariableInitialization? ";"
		public Group getGroup() { return cGroup; }

		//{IQLAttribute}
		public Action getIQLAttributeAction_0() { return cIQLAttributeAction_0; }

		//type=JvmTypeReference
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//JvmTypeReference
		public RuleCall getTypeJvmTypeReferenceParserRuleCall_1_0() { return cTypeJvmTypeReferenceParserRuleCall_1_0; }

		//simpleName=ID
		public Assignment getSimpleNameAssignment_2() { return cSimpleNameAssignment_2; }

		//ID
		public RuleCall getSimpleNameIDTerminalRuleCall_2_0() { return cSimpleNameIDTerminalRuleCall_2_0; }

		//init=IQLVariableInitialization?
		public Assignment getInitAssignment_3() { return cInitAssignment_3; }

		//IQLVariableInitialization
		public RuleCall getInitIQLVariableInitializationParserRuleCall_3_0() { return cInitIQLVariableInitializationParserRuleCall_3_0; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class JvmTypeReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "JvmTypeReference");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIQLSimpleTypeRefParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIQLArrayTypeRefParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//JvmTypeReference returns jvm::JvmTypeReference:
		//	IQLSimpleTypeRef | IQLArrayTypeRef;
		public ParserRule getRule() { return rule; }

		//IQLSimpleTypeRef | IQLArrayTypeRef
		public Alternatives getAlternatives() { return cAlternatives; }

		//IQLSimpleTypeRef
		public RuleCall getIQLSimpleTypeRefParserRuleCall_0() { return cIQLSimpleTypeRefParserRuleCall_0; }

		//IQLArrayTypeRef
		public RuleCall getIQLArrayTypeRefParserRuleCall_1() { return cIQLArrayTypeRefParserRuleCall_1; }
	}

	public class IQLSimpleTypeRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IQLSimpleTypeRef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIQLSimpleTypeRefAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTypeJvmTypeCrossReference_1_0 = (CrossReference)cTypeAssignment_1.eContents().get(0);
		private final RuleCall cTypeJvmTypeQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cTypeJvmTypeCrossReference_1_0.eContents().get(1);
		
		//IQLSimpleTypeRef returns jvm::JvmTypeReference:
		//	{IQLSimpleTypeRef} type=[jvm::JvmType|QualifiedName];
		public ParserRule getRule() { return rule; }

		//{IQLSimpleTypeRef} type=[jvm::JvmType|QualifiedName]
		public Group getGroup() { return cGroup; }

		//{IQLSimpleTypeRef}
		public Action getIQLSimpleTypeRefAction_0() { return cIQLSimpleTypeRefAction_0; }

		//type=[jvm::JvmType|QualifiedName]
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//[jvm::JvmType|QualifiedName]
		public CrossReference getTypeJvmTypeCrossReference_1_0() { return cTypeJvmTypeCrossReference_1_0; }

		//QualifiedName
		public RuleCall getTypeJvmTypeQualifiedNameParserRuleCall_1_0_1() { return cTypeJvmTypeQualifiedNameParserRuleCall_1_0_1; }
	}

	public class IQLArrayTypeRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IQLArrayTypeRef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIQLArrayTypeRefAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeIQLArrayTypeParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		
		//IQLArrayTypeRef returns jvm::JvmTypeReference:
		//	{IQLArrayTypeRef} type=IQLArrayType;
		public ParserRule getRule() { return rule; }

		//{IQLArrayTypeRef} type=IQLArrayType
		public Group getGroup() { return cGroup; }

		//{IQLArrayTypeRef}
		public Action getIQLArrayTypeRefAction_0() { return cIQLArrayTypeRefAction_0; }

		//type=IQLArrayType
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//IQLArrayType
		public RuleCall getTypeIQLArrayTypeParserRuleCall_1_0() { return cTypeIQLArrayTypeParserRuleCall_1_0; }
	}

	public class IQLArrayTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IQLArrayType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIQLArrayTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cComponentTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cComponentTypeJvmTypeCrossReference_1_0 = (CrossReference)cComponentTypeAssignment_1.eContents().get(0);
		private final RuleCall cComponentTypeJvmTypeQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cComponentTypeJvmTypeCrossReference_1_0.eContents().get(1);
		private final Assignment cDimensionsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDimensionsArrayBracketsParserRuleCall_2_0 = (RuleCall)cDimensionsAssignment_2.eContents().get(0);
		
		//IQLArrayType returns jvm::JvmType:
		//	{IQLArrayType} componentType=[jvm::JvmType|QualifiedName] dimensions+=ArrayBrackets+;
		public ParserRule getRule() { return rule; }

		//{IQLArrayType} componentType=[jvm::JvmType|QualifiedName] dimensions+=ArrayBrackets+
		public Group getGroup() { return cGroup; }

		//{IQLArrayType}
		public Action getIQLArrayTypeAction_0() { return cIQLArrayTypeAction_0; }

		//componentType=[jvm::JvmType|QualifiedName]
		public Assignment getComponentTypeAssignment_1() { return cComponentTypeAssignment_1; }

		//[jvm::JvmType|QualifiedName]
		public CrossReference getComponentTypeJvmTypeCrossReference_1_0() { return cComponentTypeJvmTypeCrossReference_1_0; }

		//QualifiedName
		public RuleCall getComponentTypeJvmTypeQualifiedNameParserRuleCall_1_0_1() { return cComponentTypeJvmTypeQualifiedNameParserRuleCall_1_0_1; }

		//dimensions+=ArrayBrackets+
		public Assignment getDimensionsAssignment_2() { return cDimensionsAssignment_2; }

		//ArrayBrackets
		public RuleCall getDimensionsArrayBracketsParserRuleCall_2_0() { return cDimensionsArrayBracketsParserRuleCall_2_0; }
	}

	public class ArrayBracketsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ArrayBrackets");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//ArrayBrackets:
		//	"[" "]";
		public ParserRule getRule() { return rule; }

		//"[" "]"
		public Group getGroup() { return cGroup; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1() { return cRightSquareBracketKeyword_1; }
	}

	public class JvmFormalParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "JvmFormalParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cParameterTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cParameterTypeJvmTypeReferenceParserRuleCall_0_0 = (RuleCall)cParameterTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//JvmFormalParameter returns jvm::JvmFormalParameter:
		//	parameterType=JvmTypeReference name=ID;
		public ParserRule getRule() { return rule; }

		//parameterType=JvmTypeReference name=ID
		public Group getGroup() { return cGroup; }

		//parameterType=JvmTypeReference
		public Assignment getParameterTypeAssignment_0() { return cParameterTypeAssignment_0; }

		//JvmTypeReference
		public RuleCall getParameterTypeJvmTypeReferenceParserRuleCall_0_0() { return cParameterTypeJvmTypeReferenceParserRuleCall_0_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class IQLMethodElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IQLMethod");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIQLMethodAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cOverrideAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cOverrideOverrideKeyword_1_0 = (Keyword)cOverrideAssignment_1.eContents().get(0);
		private final Assignment cSimpleNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSimpleNameIDTerminalRuleCall_2_0 = (RuleCall)cSimpleNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Assignment cParametersAssignment_3_1_0 = (Assignment)cGroup_3_1.eContents().get(0);
		private final RuleCall cParametersJvmFormalParameterParserRuleCall_3_1_0_0 = (RuleCall)cParametersAssignment_3_1_0.eContents().get(0);
		private final Group cGroup_3_1_1 = (Group)cGroup_3_1.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_1_0 = (Keyword)cGroup_3_1_1.eContents().get(0);
		private final Assignment cParametersAssignment_3_1_1_1 = (Assignment)cGroup_3_1_1.eContents().get(1);
		private final RuleCall cParametersJvmFormalParameterParserRuleCall_3_1_1_1_0 = (RuleCall)cParametersAssignment_3_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cColonKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cReturnTypeAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cReturnTypeJvmTypeReferenceParserRuleCall_4_1_0 = (RuleCall)cReturnTypeAssignment_4_1.eContents().get(0);
		private final Assignment cBodyAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cBodyIQLStatementBlockParserRuleCall_5_0 = (RuleCall)cBodyAssignment_5.eContents().get(0);
		
		//IQLMethod returns jvm::JvmOperation:
		//	{IQLMethod} override?="override"? simpleName=ID ("(" (parameters+=JvmFormalParameter (","
		//	parameters+=JvmFormalParameter)*)? ")")? (":" returnType=JvmTypeReference)? body=IQLStatementBlock;
		public ParserRule getRule() { return rule; }

		//{IQLMethod} override?="override"? simpleName=ID ("(" (parameters+=JvmFormalParameter (","
		//parameters+=JvmFormalParameter)*)? ")")? (":" returnType=JvmTypeReference)? body=IQLStatementBlock
		public Group getGroup() { return cGroup; }

		//{IQLMethod}
		public Action getIQLMethodAction_0() { return cIQLMethodAction_0; }

		//override?="override"?
		public Assignment getOverrideAssignment_1() { return cOverrideAssignment_1; }

		//"override"
		public Keyword getOverrideOverrideKeyword_1_0() { return cOverrideOverrideKeyword_1_0; }

		//simpleName=ID
		public Assignment getSimpleNameAssignment_2() { return cSimpleNameAssignment_2; }

		//ID
		public RuleCall getSimpleNameIDTerminalRuleCall_2_0() { return cSimpleNameIDTerminalRuleCall_2_0; }

		//("(" (parameters+=JvmFormalParameter ("," parameters+=JvmFormalParameter)*)? ")")?
		public Group getGroup_3() { return cGroup_3; }

		//"("
		public Keyword getLeftParenthesisKeyword_3_0() { return cLeftParenthesisKeyword_3_0; }

		//(parameters+=JvmFormalParameter ("," parameters+=JvmFormalParameter)*)?
		public Group getGroup_3_1() { return cGroup_3_1; }

		//parameters+=JvmFormalParameter
		public Assignment getParametersAssignment_3_1_0() { return cParametersAssignment_3_1_0; }

		//JvmFormalParameter
		public RuleCall getParametersJvmFormalParameterParserRuleCall_3_1_0_0() { return cParametersJvmFormalParameterParserRuleCall_3_1_0_0; }

		//("," parameters+=JvmFormalParameter)*
		public Group getGroup_3_1_1() { return cGroup_3_1_1; }

		//","
		public Keyword getCommaKeyword_3_1_1_0() { return cCommaKeyword_3_1_1_0; }

		//parameters+=JvmFormalParameter
		public Assignment getParametersAssignment_3_1_1_1() { return cParametersAssignment_3_1_1_1; }

		//JvmFormalParameter
		public RuleCall getParametersJvmFormalParameterParserRuleCall_3_1_1_1_0() { return cParametersJvmFormalParameterParserRuleCall_3_1_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3_2() { return cRightParenthesisKeyword_3_2; }

		//(":" returnType=JvmTypeReference)?
		public Group getGroup_4() { return cGroup_4; }

		//":"
		public Keyword getColonKeyword_4_0() { return cColonKeyword_4_0; }

		//returnType=JvmTypeReference
		public Assignment getReturnTypeAssignment_4_1() { return cReturnTypeAssignment_4_1; }

		//JvmTypeReference
		public RuleCall getReturnTypeJvmTypeReferenceParserRuleCall_4_1_0() { return cReturnTypeJvmTypeReferenceParserRuleCall_4_1_0; }

		//body=IQLStatementBlock
		public Assignment getBodyAssignment_5() { return cBodyAssignment_5; }

		//IQLStatementBlock
		public RuleCall getBodyIQLStatementBlockParserRuleCall_5_0() { return cBodyIQLStatementBlockParserRuleCall_5_0; }
	}

	public class IQLMethodDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IQLMethodDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIQLMethodDeclarationAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cSimpleNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSimpleNameIDTerminalRuleCall_1_0 = (RuleCall)cSimpleNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cParametersAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cParametersJvmFormalParameterParserRuleCall_3_0_0 = (RuleCall)cParametersAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cParametersAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cParametersJvmFormalParameterParserRuleCall_3_1_1_0 = (RuleCall)cParametersAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cColonKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cReturnTypeAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cReturnTypeJvmTypeReferenceParserRuleCall_5_1_0 = (RuleCall)cReturnTypeAssignment_5_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//IQLMethodDeclaration returns jvm::JvmOperation:
		//	{IQLMethodDeclaration} simpleName=ID "(" (parameters+=JvmFormalParameter ("," parameters+=JvmFormalParameter)*)? ")"
		//	(":" returnType=JvmTypeReference)? ";";
		public ParserRule getRule() { return rule; }

		//{IQLMethodDeclaration} simpleName=ID "(" (parameters+=JvmFormalParameter ("," parameters+=JvmFormalParameter)*)? ")"
		//(":" returnType=JvmTypeReference)? ";"
		public Group getGroup() { return cGroup; }

		//{IQLMethodDeclaration}
		public Action getIQLMethodDeclarationAction_0() { return cIQLMethodDeclarationAction_0; }

		//simpleName=ID
		public Assignment getSimpleNameAssignment_1() { return cSimpleNameAssignment_1; }

		//ID
		public RuleCall getSimpleNameIDTerminalRuleCall_1_0() { return cSimpleNameIDTerminalRuleCall_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//(parameters+=JvmFormalParameter ("," parameters+=JvmFormalParameter)*)?
		public Group getGroup_3() { return cGroup_3; }

		//parameters+=JvmFormalParameter
		public Assignment getParametersAssignment_3_0() { return cParametersAssignment_3_0; }

		//JvmFormalParameter
		public RuleCall getParametersJvmFormalParameterParserRuleCall_3_0_0() { return cParametersJvmFormalParameterParserRuleCall_3_0_0; }

		//("," parameters+=JvmFormalParameter)*
		public Group getGroup_3_1() { return cGroup_3_1; }

		//","
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }

		//parameters+=JvmFormalParameter
		public Assignment getParametersAssignment_3_1_1() { return cParametersAssignment_3_1_1; }

		//JvmFormalParameter
		public RuleCall getParametersJvmFormalParameterParserRuleCall_3_1_1_0() { return cParametersJvmFormalParameterParserRuleCall_3_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//(":" returnType=JvmTypeReference)?
		public Group getGroup_5() { return cGroup_5; }

		//":"
		public Keyword getColonKeyword_5_0() { return cColonKeyword_5_0; }

		//returnType=JvmTypeReference
		public Assignment getReturnTypeAssignment_5_1() { return cReturnTypeAssignment_5_1; }

		//JvmTypeReference
		public RuleCall getReturnTypeJvmTypeReferenceParserRuleCall_5_1_0() { return cReturnTypeJvmTypeReferenceParserRuleCall_5_1_0; }

		//";"
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
	}

	public class IQLJavaMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IQLJavaMember");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIQLJavaMemberAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cJavaAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cJavaIQLJavaParserRuleCall_1_0 = (RuleCall)cJavaAssignment_1.eContents().get(0);
		
		//IQLJavaMember returns jvm::JvmMember:
		//	{IQLJavaMember} java=IQLJava;
		public ParserRule getRule() { return rule; }

		//{IQLJavaMember} java=IQLJava
		public Group getGroup() { return cGroup; }

		//{IQLJavaMember}
		public Action getIQLJavaMemberAction_0() { return cIQLJavaMemberAction_0; }

		//java=IQLJava
		public Assignment getJavaAssignment_1() { return cJavaAssignment_1; }

		//IQLJava
		public RuleCall getJavaIQLJavaParserRuleCall_1_0() { return cJavaIQLJavaParserRuleCall_1_0; }
	}

	public class IQLMetadataListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IQLMetadataList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cElementsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cElementsIQLMetadataParserRuleCall_0_0 = (RuleCall)cElementsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cElementsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cElementsIQLMetadataParserRuleCall_1_1_0 = (RuleCall)cElementsAssignment_1_1.eContents().get(0);
		
		///////////////////////////////////////////////
		///////////////////////////////////////////////
		///////////////////////////////////////////////
		//IQLMetadataList:
		//	elements+=IQLMetadata ("," elements+=IQLMetadata)*;
		public ParserRule getRule() { return rule; }

		//elements+=IQLMetadata ("," elements+=IQLMetadata)*
		public Group getGroup() { return cGroup; }

		//elements+=IQLMetadata
		public Assignment getElementsAssignment_0() { return cElementsAssignment_0; }

		//IQLMetadata
		public RuleCall getElementsIQLMetadataParserRuleCall_0_0() { return cElementsIQLMetadataParserRuleCall_0_0; }

		//("," elements+=IQLMetadata)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//elements+=IQLMetadata
		public Assignment getElementsAssignment_1_1() { return cElementsAssignment_1_1; }

		//IQLMetadata
		public RuleCall getElementsIQLMetadataParserRuleCall_1_1_0() { return cElementsIQLMetadataParserRuleCall_1_1_0; }
	}

	public class IQLMetadataElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IQLMetadata");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValueIQLMetadataValueParserRuleCall_1_1_0 = (RuleCall)cValueAssignment_1_1.eContents().get(0);
		
		//IQLMetadata:
		//	name=ID ("=" value=IQLMetadataValue)?;
		public ParserRule getRule() { return rule; }

		//name=ID ("=" value=IQLMetadataValue)?
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//("=" value=IQLMetadataValue)?
		public Group getGroup_1() { return cGroup_1; }

		//"="
		public Keyword getEqualsSignKeyword_1_0() { return cEqualsSignKeyword_1_0; }

		//value=IQLMetadataValue
		public Assignment getValueAssignment_1_1() { return cValueAssignment_1_1; }

		//IQLMetadataValue
		public RuleCall getValueIQLMetadataValueParserRuleCall_1_1_0() { return cValueIQLMetadataValueParserRuleCall_1_1_0; }
	}

	public class IQLMetadataValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IQLMetadataValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIQLMetadataValueSingleParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIQLMetadataValueListParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cIQLMetadataValueMapParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//IQLMetadataValue:
		//	IQLMetadataValueSingle | IQLMetadataValueList | IQLMetadataValueMap;
		public ParserRule getRule() { return rule; }

		//IQLMetadataValueSingle | IQLMetadataValueList | IQLMetadataValueMap
		public Alternatives getAlternatives() { return cAlternatives; }

		//IQLMetadataValueSingle
		public RuleCall getIQLMetadataValueSingleParserRuleCall_0() { return cIQLMetadataValueSingleParserRuleCall_0; }

		//IQLMetadataValueList
		public RuleCall getIQLMetadataValueListParserRuleCall_1() { return cIQLMetadataValueListParserRuleCall_1; }

		//IQLMetadataValueMap
		public RuleCall getIQLMetadataValueMapParserRuleCall_2() { return cIQLMetadataValueMapParserRuleCall_2; }
	}

	public class IQLMetadataValueSingleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IQLMetadataValueSingle");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cIQLMetadataValueSingleIntAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cValueAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_0_1_0 = (RuleCall)cValueAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cIQLMetadataValueSingleDoubleAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValueDOUBLETerminalRuleCall_1_1_0 = (RuleCall)cValueAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cIQLMetadataValueSingleStringAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cValueAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_2_1_0 = (RuleCall)cValueAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cIQLMetadataValueSingleBooleanAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Assignment cValueAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cValueBOOLEANParserRuleCall_3_1_0 = (RuleCall)cValueAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cIQLMetadataValueSingleTypeRefAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Assignment cValueAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cValueJvmTypeReferenceParserRuleCall_4_1_0 = (RuleCall)cValueAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Action cIQLMetadataValueSingleNullAction_5_0 = (Action)cGroup_5.eContents().get(0);
		private final Keyword cNullKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		
		//IQLMetadataValueSingle returns IQLMetadataValue:
		//	{IQLMetadataValueSingleInt} value=INT | {IQLMetadataValueSingleDouble} value=DOUBLE | {IQLMetadataValueSingleString}
		//	value=STRING | {IQLMetadataValueSingleBoolean} value=BOOLEAN | {IQLMetadataValueSingleTypeRef} value=JvmTypeReference
		//	| {IQLMetadataValueSingleNull} "null";
		public ParserRule getRule() { return rule; }

		//{IQLMetadataValueSingleInt} value=INT | {IQLMetadataValueSingleDouble} value=DOUBLE | {IQLMetadataValueSingleString}
		//value=STRING | {IQLMetadataValueSingleBoolean} value=BOOLEAN | {IQLMetadataValueSingleTypeRef} value=JvmTypeReference
		//| {IQLMetadataValueSingleNull} "null"
		public Alternatives getAlternatives() { return cAlternatives; }

		//{IQLMetadataValueSingleInt} value=INT
		public Group getGroup_0() { return cGroup_0; }

		//{IQLMetadataValueSingleInt}
		public Action getIQLMetadataValueSingleIntAction_0_0() { return cIQLMetadataValueSingleIntAction_0_0; }

		//value=INT
		public Assignment getValueAssignment_0_1() { return cValueAssignment_0_1; }

		//INT
		public RuleCall getValueINTTerminalRuleCall_0_1_0() { return cValueINTTerminalRuleCall_0_1_0; }

		//{IQLMetadataValueSingleDouble} value=DOUBLE
		public Group getGroup_1() { return cGroup_1; }

		//{IQLMetadataValueSingleDouble}
		public Action getIQLMetadataValueSingleDoubleAction_1_0() { return cIQLMetadataValueSingleDoubleAction_1_0; }

		//value=DOUBLE
		public Assignment getValueAssignment_1_1() { return cValueAssignment_1_1; }

		//DOUBLE
		public RuleCall getValueDOUBLETerminalRuleCall_1_1_0() { return cValueDOUBLETerminalRuleCall_1_1_0; }

		//{IQLMetadataValueSingleString} value=STRING
		public Group getGroup_2() { return cGroup_2; }

		//{IQLMetadataValueSingleString}
		public Action getIQLMetadataValueSingleStringAction_2_0() { return cIQLMetadataValueSingleStringAction_2_0; }

		//value=STRING
		public Assignment getValueAssignment_2_1() { return cValueAssignment_2_1; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_2_1_0() { return cValueSTRINGTerminalRuleCall_2_1_0; }

		//{IQLMetadataValueSingleBoolean} value=BOOLEAN
		public Group getGroup_3() { return cGroup_3; }

		//{IQLMetadataValueSingleBoolean}
		public Action getIQLMetadataValueSingleBooleanAction_3_0() { return cIQLMetadataValueSingleBooleanAction_3_0; }

		//value=BOOLEAN
		public Assignment getValueAssignment_3_1() { return cValueAssignment_3_1; }

		//BOOLEAN
		public RuleCall getValueBOOLEANParserRuleCall_3_1_0() { return cValueBOOLEANParserRuleCall_3_1_0; }

		//{IQLMetadataValueSingleTypeRef} value=JvmTypeReference
		public Group getGroup_4() { return cGroup_4; }

		//{IQLMetadataValueSingleTypeRef}
		public Action getIQLMetadataValueSingleTypeRefAction_4_0() { return cIQLMetadataValueSingleTypeRefAction_4_0; }

		//value=JvmTypeReference
		public Assignment getValueAssignment_4_1() { return cValueAssignment_4_1; }

		//JvmTypeReference
		public RuleCall getValueJvmTypeReferenceParserRuleCall_4_1_0() { return cValueJvmTypeReferenceParserRuleCall_4_1_0; }

		//{IQLMetadataValueSingleNull} "null"
		public Group getGroup_5() { return cGroup_5; }

		//{IQLMetadataValueSingleNull}
		public Action getIQLMetadataValueSingleNullAction_5_0() { return cIQLMetadataValueSingleNullAction_5_0; }

		//"null"
		public Keyword getNullKeyword_5_1() { return cNullKeyword_5_1; }
	}

	public class IQLMetadataValueListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IQLMetadataValueList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIQLMetadataValueListAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cElementsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cElementsIQLMetadataValueParserRuleCall_2_0_0 = (RuleCall)cElementsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cElementsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cElementsIQLMetadataValueParserRuleCall_2_1_1_0 = (RuleCall)cElementsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//IQLMetadataValueList returns IQLMetadataValue:
		//	{IQLMetadataValueList} "[" (elements+=IQLMetadataValue ("," elements+=IQLMetadataValue)*)? "]";
		public ParserRule getRule() { return rule; }

		//{IQLMetadataValueList} "[" (elements+=IQLMetadataValue ("," elements+=IQLMetadataValue)*)? "]"
		public Group getGroup() { return cGroup; }

		//{IQLMetadataValueList}
		public Action getIQLMetadataValueListAction_0() { return cIQLMetadataValueListAction_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }

		//(elements+=IQLMetadataValue ("," elements+=IQLMetadataValue)*)?
		public Group getGroup_2() { return cGroup_2; }

		//elements+=IQLMetadataValue
		public Assignment getElementsAssignment_2_0() { return cElementsAssignment_2_0; }

		//IQLMetadataValue
		public RuleCall getElementsIQLMetadataValueParserRuleCall_2_0_0() { return cElementsIQLMetadataValueParserRuleCall_2_0_0; }

		//("," elements+=IQLMetadataValue)*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }

		//elements+=IQLMetadataValue
		public Assignment getElementsAssignment_2_1_1() { return cElementsAssignment_2_1_1; }

		//IQLMetadataValue
		public RuleCall getElementsIQLMetadataValueParserRuleCall_2_1_1_0() { return cElementsIQLMetadataValueParserRuleCall_2_1_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}

	public class IQLMetadataValueMapElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IQLMetadataValueMap");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIQLMetadataValueMapAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cElementsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cElementsIQLMetadataValueMapElementParserRuleCall_2_0_0 = (RuleCall)cElementsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cElementsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cElementsIQLMetadataValueMapElementParserRuleCall_2_1_1_0 = (RuleCall)cElementsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//IQLMetadataValueMap returns IQLMetadataValue:
		//	{IQLMetadataValueMap} "{" (elements+=IQLMetadataValueMapElement ("," elements+=IQLMetadataValueMapElement)*)? "}";
		public ParserRule getRule() { return rule; }

		//{IQLMetadataValueMap} "{" (elements+=IQLMetadataValueMapElement ("," elements+=IQLMetadataValueMapElement)*)? "}"
		public Group getGroup() { return cGroup; }

		//{IQLMetadataValueMap}
		public Action getIQLMetadataValueMapAction_0() { return cIQLMetadataValueMapAction_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//(elements+=IQLMetadataValueMapElement ("," elements+=IQLMetadataValueMapElement)*)?
		public Group getGroup_2() { return cGroup_2; }

		//elements+=IQLMetadataValueMapElement
		public Assignment getElementsAssignment_2_0() { return cElementsAssignment_2_0; }

		//IQLMetadataValueMapElement
		public RuleCall getElementsIQLMetadataValueMapElementParserRuleCall_2_0_0() { return cElementsIQLMetadataValueMapElementParserRuleCall_2_0_0; }

		//("," elements+=IQLMetadataValueMapElement)*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }

		//elements+=IQLMetadataValueMapElement
		public Assignment getElementsAssignment_2_1_1() { return cElementsAssignment_2_1_1; }

		//IQLMetadataValueMapElement
		public RuleCall getElementsIQLMetadataValueMapElementParserRuleCall_2_1_1_0() { return cElementsIQLMetadataValueMapElementParserRuleCall_2_1_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class IQLMetadataValueMapElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IQLMetadataValueMapElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cKeyIQLMetadataValueParserRuleCall_0_0 = (RuleCall)cKeyAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueIQLMetadataValueParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//IQLMetadataValueMapElement:
		//	key=IQLMetadataValue "=" value=IQLMetadataValue;
		public ParserRule getRule() { return rule; }

		//key=IQLMetadataValue "=" value=IQLMetadataValue
		public Group getGroup() { return cGroup; }

		//key=IQLMetadataValue
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }

		//IQLMetadataValue
		public RuleCall getKeyIQLMetadataValueParserRuleCall_0_0() { return cKeyIQLMetadataValueParserRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//value=IQLMetadataValue
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//IQLMetadataValue
		public RuleCall getValueIQLMetadataValueParserRuleCall_2_0() { return cValueIQLMetadataValueParserRuleCall_2_0; }
	}

	public class IQLVariableDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IQLVariableDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIQLVariableDeclarationAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cRefAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRefJvmTypeReferenceParserRuleCall_1_0 = (RuleCall)cRefAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		///////////////////////////////////////////////
		///////////////////////////////////////////////
		///////////////////////////////////////////////
		//IQLVariableDeclaration returns jvm::JvmIdentifiableElement:
		//	{IQLVariableDeclaration} ref=JvmTypeReference name=ID;
		public ParserRule getRule() { return rule; }

		//{IQLVariableDeclaration} ref=JvmTypeReference name=ID
		public Group getGroup() { return cGroup; }

		//{IQLVariableDeclaration}
		public Action getIQLVariableDeclarationAction_0() { return cIQLVariableDeclarationAction_0; }

		//ref=JvmTypeReference
		public Assignment getRefAssignment_1() { return cRefAssignment_1; }

		//JvmTypeReference
		public RuleCall getRefJvmTypeReferenceParserRuleCall_1_0() { return cRefJvmTypeReferenceParserRuleCall_1_0; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
	}

	public class IQLVariableInitializationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IQLVariableInitialization");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cIQLVariableInitializationAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Assignment cArgsListAssignment_0_1_0 = (Assignment)cGroup_0_1.eContents().get(0);
		private final RuleCall cArgsListIQLArgumentsListParserRuleCall_0_1_0_0 = (RuleCall)cArgsListAssignment_0_1_0.eContents().get(0);
		private final Assignment cArgsMapAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cArgsMapIQLArgumentsMapParserRuleCall_0_1_1_0 = (RuleCall)cArgsMapAssignment_0_1_1.eContents().get(0);
		private final Assignment cArgsMapAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cArgsMapIQLArgumentsMapParserRuleCall_1_0 = (RuleCall)cArgsMapAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cEqualsSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cValueAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cValueIQLExpressionParserRuleCall_2_1_0 = (RuleCall)cValueAssignment_2_1.eContents().get(0);
		
		//IQLVariableInitialization:
		//	{IQLVariableInitialization} (argsList=IQLArgumentsList argsMap=IQLArgumentsMap?) | argsMap=IQLArgumentsMap | "="
		//	value=IQLExpression;
		public ParserRule getRule() { return rule; }

		//{IQLVariableInitialization} (argsList=IQLArgumentsList argsMap=IQLArgumentsMap?) | argsMap=IQLArgumentsMap | "="
		//value=IQLExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//{IQLVariableInitialization} (argsList=IQLArgumentsList argsMap=IQLArgumentsMap?)
		public Group getGroup_0() { return cGroup_0; }

		//{IQLVariableInitialization}
		public Action getIQLVariableInitializationAction_0_0() { return cIQLVariableInitializationAction_0_0; }

		//argsList=IQLArgumentsList argsMap=IQLArgumentsMap?
		public Group getGroup_0_1() { return cGroup_0_1; }

		//argsList=IQLArgumentsList
		public Assignment getArgsListAssignment_0_1_0() { return cArgsListAssignment_0_1_0; }

		//IQLArgumentsList
		public RuleCall getArgsListIQLArgumentsListParserRuleCall_0_1_0_0() { return cArgsListIQLArgumentsListParserRuleCall_0_1_0_0; }

		//argsMap=IQLArgumentsMap?
		public Assignment getArgsMapAssignment_0_1_1() { return cArgsMapAssignment_0_1_1; }

		//IQLArgumentsMap
		public RuleCall getArgsMapIQLArgumentsMapParserRuleCall_0_1_1_0() { return cArgsMapIQLArgumentsMapParserRuleCall_0_1_1_0; }

		//argsMap=IQLArgumentsMap
		public Assignment getArgsMapAssignment_1() { return cArgsMapAssignment_1; }

		//IQLArgumentsMap
		public RuleCall getArgsMapIQLArgumentsMapParserRuleCall_1_0() { return cArgsMapIQLArgumentsMapParserRuleCall_1_0; }

		//"=" value=IQLExpression
		public Group getGroup_2() { return cGroup_2; }

		//"="
		public Keyword getEqualsSignKeyword_2_0() { return cEqualsSignKeyword_2_0; }

		//value=IQLExpression
		public Assignment getValueAssignment_2_1() { return cValueAssignment_2_1; }

		//IQLExpression
		public RuleCall getValueIQLExpressionParserRuleCall_2_1_0() { return cValueIQLExpressionParserRuleCall_2_1_0; }
	}

	public class IQLArgumentsListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IQLArgumentsList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIQLArgumentsListAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cElementsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cElementsIQLExpressionParserRuleCall_2_0_0 = (RuleCall)cElementsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cElementsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cElementsIQLExpressionParserRuleCall_2_1_1_0 = (RuleCall)cElementsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//IQLArgumentsList:
		//	{IQLArgumentsList} "(" (elements+=IQLExpression ("," elements+=IQLExpression)*)? ")";
		public ParserRule getRule() { return rule; }

		//{IQLArgumentsList} "(" (elements+=IQLExpression ("," elements+=IQLExpression)*)? ")"
		public Group getGroup() { return cGroup; }

		//{IQLArgumentsList}
		public Action getIQLArgumentsListAction_0() { return cIQLArgumentsListAction_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//(elements+=IQLExpression ("," elements+=IQLExpression)*)?
		public Group getGroup_2() { return cGroup_2; }

		//elements+=IQLExpression
		public Assignment getElementsAssignment_2_0() { return cElementsAssignment_2_0; }

		//IQLExpression
		public RuleCall getElementsIQLExpressionParserRuleCall_2_0_0() { return cElementsIQLExpressionParserRuleCall_2_0_0; }

		//("," elements+=IQLExpression)*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }

		//elements+=IQLExpression
		public Assignment getElementsAssignment_2_1_1() { return cElementsAssignment_2_1_1; }

		//IQLExpression
		public RuleCall getElementsIQLExpressionParserRuleCall_2_1_1_0() { return cElementsIQLExpressionParserRuleCall_2_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class IQLArgumentsMapElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IQLArgumentsMap");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIQLArgumentsMapAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cElementsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cElementsIQLArgumentsMapKeyValueParserRuleCall_2_0_0 = (RuleCall)cElementsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cElementsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cElementsIQLArgumentsMapKeyValueParserRuleCall_2_1_1_0 = (RuleCall)cElementsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//IQLArgumentsMap:
		//	{IQLArgumentsMap} "{" (elements+=IQLArgumentsMapKeyValue ("," elements+=IQLArgumentsMapKeyValue)*)? "}";
		public ParserRule getRule() { return rule; }

		//{IQLArgumentsMap} "{" (elements+=IQLArgumentsMapKeyValue ("," elements+=IQLArgumentsMapKeyValue)*)? "}"
		public Group getGroup() { return cGroup; }

		//{IQLArgumentsMap}
		public Action getIQLArgumentsMapAction_0() { return cIQLArgumentsMapAction_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//(elements+=IQLArgumentsMapKeyValue ("," elements+=IQLArgumentsMapKeyValue)*)?
		public Group getGroup_2() { return cGroup_2; }

		//elements+=IQLArgumentsMapKeyValue
		public Assignment getElementsAssignment_2_0() { return cElementsAssignment_2_0; }

		//IQLArgumentsMapKeyValue
		public RuleCall getElementsIQLArgumentsMapKeyValueParserRuleCall_2_0_0() { return cElementsIQLArgumentsMapKeyValueParserRuleCall_2_0_0; }

		//("," elements+=IQLArgumentsMapKeyValue)*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }

		//elements+=IQLArgumentsMapKeyValue
		public Assignment getElementsAssignment_2_1_1() { return cElementsAssignment_2_1_1; }

		//IQLArgumentsMapKeyValue
		public RuleCall getElementsIQLArgumentsMapKeyValueParserRuleCall_2_1_1_0() { return cElementsIQLArgumentsMapKeyValueParserRuleCall_2_1_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class IQLArgumentsMapKeyValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IQLArgumentsMapKeyValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cKeyJvmIdentifiableElementCrossReference_0_0 = (CrossReference)cKeyAssignment_0.eContents().get(0);
		private final RuleCall cKeyJvmIdentifiableElementQualifiedNameParserRuleCall_0_0_1 = (RuleCall)cKeyJvmIdentifiableElementCrossReference_0_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueIQLExpressionParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//IQLArgumentsMapKeyValue:
		//	key=[jvm::JvmIdentifiableElement|QualifiedName] "=" value=IQLExpression;
		public ParserRule getRule() { return rule; }

		//key=[jvm::JvmIdentifiableElement|QualifiedName] "=" value=IQLExpression
		public Group getGroup() { return cGroup; }

		//key=[jvm::JvmIdentifiableElement|QualifiedName]
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }

		//[jvm::JvmIdentifiableElement|QualifiedName]
		public CrossReference getKeyJvmIdentifiableElementCrossReference_0_0() { return cKeyJvmIdentifiableElementCrossReference_0_0; }

		//QualifiedName
		public RuleCall getKeyJvmIdentifiableElementQualifiedNameParserRuleCall_0_0_1() { return cKeyJvmIdentifiableElementQualifiedNameParserRuleCall_0_0_1; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//value=IQLExpression
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//IQLExpression
		public RuleCall getValueIQLExpressionParserRuleCall_2_0() { return cValueIQLExpressionParserRuleCall_2_0; }
	}

	public class IQLStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IQLStatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIQLStatementBlockParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIQLExpressionStatementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cIQLIfStatementParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cIQLWhileStatementParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cIQLDoWhileStatementParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cIQLForStatementParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cIQLForEachStatementParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cIQLSwitchStatementParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cIQLVariableStatementParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cIQLBreakStatementParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cIQLContinueStatementParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cIQLReturnStatementParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final RuleCall cIQLConstructorCallStatementParserRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		private final RuleCall cIQLJavaStatementParserRuleCall_13 = (RuleCall)cAlternatives.eContents().get(13);
		
		///////////////////////////////////////////////
		///////////////////////////////////////////////
		///////////////////////////////////////////////
		//IQLStatement:
		//	IQLStatementBlock | IQLExpressionStatement | IQLIfStatement | IQLWhileStatement | IQLDoWhileStatement |
		//	IQLForStatement | IQLForEachStatement | IQLSwitchStatement | IQLVariableStatement | IQLBreakStatement |
		//	IQLContinueStatement | IQLReturnStatement | IQLConstructorCallStatement | IQLJavaStatement;
		public ParserRule getRule() { return rule; }

		//IQLStatementBlock | IQLExpressionStatement | IQLIfStatement | IQLWhileStatement | IQLDoWhileStatement | IQLForStatement
		//| IQLForEachStatement | IQLSwitchStatement | IQLVariableStatement | IQLBreakStatement | IQLContinueStatement |
		//IQLReturnStatement | IQLConstructorCallStatement | IQLJavaStatement
		public Alternatives getAlternatives() { return cAlternatives; }

		//IQLStatementBlock
		public RuleCall getIQLStatementBlockParserRuleCall_0() { return cIQLStatementBlockParserRuleCall_0; }

		//IQLExpressionStatement
		public RuleCall getIQLExpressionStatementParserRuleCall_1() { return cIQLExpressionStatementParserRuleCall_1; }

		//IQLIfStatement
		public RuleCall getIQLIfStatementParserRuleCall_2() { return cIQLIfStatementParserRuleCall_2; }

		//IQLWhileStatement
		public RuleCall getIQLWhileStatementParserRuleCall_3() { return cIQLWhileStatementParserRuleCall_3; }

		//IQLDoWhileStatement
		public RuleCall getIQLDoWhileStatementParserRuleCall_4() { return cIQLDoWhileStatementParserRuleCall_4; }

		//IQLForStatement
		public RuleCall getIQLForStatementParserRuleCall_5() { return cIQLForStatementParserRuleCall_5; }

		//IQLForEachStatement
		public RuleCall getIQLForEachStatementParserRuleCall_6() { return cIQLForEachStatementParserRuleCall_6; }

		//IQLSwitchStatement
		public RuleCall getIQLSwitchStatementParserRuleCall_7() { return cIQLSwitchStatementParserRuleCall_7; }

		//IQLVariableStatement
		public RuleCall getIQLVariableStatementParserRuleCall_8() { return cIQLVariableStatementParserRuleCall_8; }

		//IQLBreakStatement
		public RuleCall getIQLBreakStatementParserRuleCall_9() { return cIQLBreakStatementParserRuleCall_9; }

		//IQLContinueStatement
		public RuleCall getIQLContinueStatementParserRuleCall_10() { return cIQLContinueStatementParserRuleCall_10; }

		//IQLReturnStatement
		public RuleCall getIQLReturnStatementParserRuleCall_11() { return cIQLReturnStatementParserRuleCall_11; }

		//IQLConstructorCallStatement
		public RuleCall getIQLConstructorCallStatementParserRuleCall_12() { return cIQLConstructorCallStatementParserRuleCall_12; }

		//IQLJavaStatement
		public RuleCall getIQLJavaStatementParserRuleCall_13() { return cIQLJavaStatementParserRuleCall_13; }
	}

	public class IQLStatementBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IQLStatementBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIQLStatementBlockAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStatementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStatementsIQLStatementParserRuleCall_2_0 = (RuleCall)cStatementsAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//IQLStatementBlock returns IQLStatement:
		//	{IQLStatementBlock} "{" statements+=IQLStatement* "}";
		public ParserRule getRule() { return rule; }

		//{IQLStatementBlock} "{" statements+=IQLStatement* "}"
		public Group getGroup() { return cGroup; }

		//{IQLStatementBlock}
		public Action getIQLStatementBlockAction_0() { return cIQLStatementBlockAction_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//statements+=IQLStatement*
		public Assignment getStatementsAssignment_2() { return cStatementsAssignment_2; }

		//IQLStatement
		public RuleCall getStatementsIQLStatementParserRuleCall_2_0() { return cStatementsIQLStatementParserRuleCall_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class IQLJavaStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IQLJavaStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIQLJavaStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cJavaAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cJavaIQLJavaParserRuleCall_1_0 = (RuleCall)cJavaAssignment_1.eContents().get(0);
		
		//IQLJavaStatement returns IQLStatement:
		//	{IQLJavaStatement} java=IQLJava;
		public ParserRule getRule() { return rule; }

		//{IQLJavaStatement} java=IQLJava
		public Group getGroup() { return cGroup; }

		//{IQLJavaStatement}
		public Action getIQLJavaStatementAction_0() { return cIQLJavaStatementAction_0; }

		//java=IQLJava
		public Assignment getJavaAssignment_1() { return cJavaAssignment_1; }

		//IQLJava
		public RuleCall getJavaIQLJavaParserRuleCall_1_0() { return cJavaIQLJavaParserRuleCall_1_0; }
	}

	public class IQLIfStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IQLIfStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIQLIfStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cIfKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPredicateAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPredicateIQLExpressionParserRuleCall_3_0 = (RuleCall)cPredicateAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cThenBodyAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cThenBodyIQLStatementParserRuleCall_5_0 = (RuleCall)cThenBodyAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cElseKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cElseBodyAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cElseBodyIQLStatementParserRuleCall_6_1_0 = (RuleCall)cElseBodyAssignment_6_1.eContents().get(0);
		
		//IQLIfStatement returns IQLStatement:
		//	{IQLIfStatement} "if" "(" predicate=IQLExpression ")" thenBody=IQLStatement ("else" elseBody=IQLStatement)?;
		public ParserRule getRule() { return rule; }

		//{IQLIfStatement} "if" "(" predicate=IQLExpression ")" thenBody=IQLStatement ("else" elseBody=IQLStatement)?
		public Group getGroup() { return cGroup; }

		//{IQLIfStatement}
		public Action getIQLIfStatementAction_0() { return cIQLIfStatementAction_0; }

		//"if"
		public Keyword getIfKeyword_1() { return cIfKeyword_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//predicate=IQLExpression
		public Assignment getPredicateAssignment_3() { return cPredicateAssignment_3; }

		//IQLExpression
		public RuleCall getPredicateIQLExpressionParserRuleCall_3_0() { return cPredicateIQLExpressionParserRuleCall_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//thenBody=IQLStatement
		public Assignment getThenBodyAssignment_5() { return cThenBodyAssignment_5; }

		//IQLStatement
		public RuleCall getThenBodyIQLStatementParserRuleCall_5_0() { return cThenBodyIQLStatementParserRuleCall_5_0; }

		//(=> "else" elseBody=IQLStatement)?
		public Group getGroup_6() { return cGroup_6; }

		//=> "else"
		public Keyword getElseKeyword_6_0() { return cElseKeyword_6_0; }

		//elseBody=IQLStatement
		public Assignment getElseBodyAssignment_6_1() { return cElseBodyAssignment_6_1; }

		//IQLStatement
		public RuleCall getElseBodyIQLStatementParserRuleCall_6_1_0() { return cElseBodyIQLStatementParserRuleCall_6_1_0; }
	}

	public class IQLWhileStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IQLWhileStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIQLWhileStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cWhileKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPredicateAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPredicateIQLExpressionParserRuleCall_3_0 = (RuleCall)cPredicateAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cBodyAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cBodyIQLStatementParserRuleCall_5_0 = (RuleCall)cBodyAssignment_5.eContents().get(0);
		
		//IQLWhileStatement returns IQLStatement:
		//	{IQLWhileStatement} "while" "(" predicate=IQLExpression ")" body=IQLStatement;
		public ParserRule getRule() { return rule; }

		//{IQLWhileStatement} "while" "(" predicate=IQLExpression ")" body=IQLStatement
		public Group getGroup() { return cGroup; }

		//{IQLWhileStatement}
		public Action getIQLWhileStatementAction_0() { return cIQLWhileStatementAction_0; }

		//"while"
		public Keyword getWhileKeyword_1() { return cWhileKeyword_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//predicate=IQLExpression
		public Assignment getPredicateAssignment_3() { return cPredicateAssignment_3; }

		//IQLExpression
		public RuleCall getPredicateIQLExpressionParserRuleCall_3_0() { return cPredicateIQLExpressionParserRuleCall_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//body=IQLStatement
		public Assignment getBodyAssignment_5() { return cBodyAssignment_5; }

		//IQLStatement
		public RuleCall getBodyIQLStatementParserRuleCall_5_0() { return cBodyIQLStatementParserRuleCall_5_0; }
	}

	public class IQLDoWhileStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IQLDoWhileStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIQLDoWhileStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDoKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cBodyAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBodyIQLStatementParserRuleCall_2_0 = (RuleCall)cBodyAssignment_2.eContents().get(0);
		private final Keyword cWhileKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cPredicateAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cPredicateIQLExpressionParserRuleCall_5_0 = (RuleCall)cPredicateAssignment_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cSemicolonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//IQLDoWhileStatement returns IQLStatement:
		//	{IQLDoWhileStatement} "do" body=IQLStatement "while" "(" predicate=IQLExpression ")" ";";
		public ParserRule getRule() { return rule; }

		//{IQLDoWhileStatement} "do" body=IQLStatement "while" "(" predicate=IQLExpression ")" ";"
		public Group getGroup() { return cGroup; }

		//{IQLDoWhileStatement}
		public Action getIQLDoWhileStatementAction_0() { return cIQLDoWhileStatementAction_0; }

		//"do"
		public Keyword getDoKeyword_1() { return cDoKeyword_1; }

		//body=IQLStatement
		public Assignment getBodyAssignment_2() { return cBodyAssignment_2; }

		//IQLStatement
		public RuleCall getBodyIQLStatementParserRuleCall_2_0() { return cBodyIQLStatementParserRuleCall_2_0; }

		//"while"
		public Keyword getWhileKeyword_3() { return cWhileKeyword_3; }

		//"("
		public Keyword getLeftParenthesisKeyword_4() { return cLeftParenthesisKeyword_4; }

		//predicate=IQLExpression
		public Assignment getPredicateAssignment_5() { return cPredicateAssignment_5; }

		//IQLExpression
		public RuleCall getPredicateIQLExpressionParserRuleCall_5_0() { return cPredicateIQLExpressionParserRuleCall_5_0; }

		//")"
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }

		//";"
		public Keyword getSemicolonKeyword_7() { return cSemicolonKeyword_7; }
	}

	public class IQLForStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IQLForStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIQLForStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cForKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cVarAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cVarIQLVariableDeclarationParserRuleCall_3_0 = (RuleCall)cVarAssignment_3.eContents().get(0);
		private final Keyword cEqualsSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cValueAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cValueIQLExpressionParserRuleCall_5_0 = (RuleCall)cValueAssignment_5.eContents().get(0);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cPredicateAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cPredicateIQLExpressionParserRuleCall_7_0 = (RuleCall)cPredicateAssignment_7.eContents().get(0);
		private final Keyword cSemicolonKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cUpdateExprAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cUpdateExprIQLExpressionParserRuleCall_9_0 = (RuleCall)cUpdateExprAssignment_9.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Assignment cBodyAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final RuleCall cBodyIQLStatementParserRuleCall_11_0 = (RuleCall)cBodyAssignment_11.eContents().get(0);
		
		//IQLForStatement returns IQLStatement:
		//	{IQLForStatement} "for" "(" var=IQLVariableDeclaration "=" value=IQLExpression ";" predicate=IQLExpression ";"
		//	updateExpr=IQLExpression ")" body=IQLStatement;
		public ParserRule getRule() { return rule; }

		//{IQLForStatement} "for" "(" var=IQLVariableDeclaration "=" value=IQLExpression ";" predicate=IQLExpression ";"
		//updateExpr=IQLExpression ")" body=IQLStatement
		public Group getGroup() { return cGroup; }

		//{IQLForStatement}
		public Action getIQLForStatementAction_0() { return cIQLForStatementAction_0; }

		//"for"
		public Keyword getForKeyword_1() { return cForKeyword_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//var=IQLVariableDeclaration
		public Assignment getVarAssignment_3() { return cVarAssignment_3; }

		//IQLVariableDeclaration
		public RuleCall getVarIQLVariableDeclarationParserRuleCall_3_0() { return cVarIQLVariableDeclarationParserRuleCall_3_0; }

		//"="
		public Keyword getEqualsSignKeyword_4() { return cEqualsSignKeyword_4; }

		//value=IQLExpression
		public Assignment getValueAssignment_5() { return cValueAssignment_5; }

		//IQLExpression
		public RuleCall getValueIQLExpressionParserRuleCall_5_0() { return cValueIQLExpressionParserRuleCall_5_0; }

		//";"
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }

		//predicate=IQLExpression
		public Assignment getPredicateAssignment_7() { return cPredicateAssignment_7; }

		//IQLExpression
		public RuleCall getPredicateIQLExpressionParserRuleCall_7_0() { return cPredicateIQLExpressionParserRuleCall_7_0; }

		//";"
		public Keyword getSemicolonKeyword_8() { return cSemicolonKeyword_8; }

		//updateExpr=IQLExpression
		public Assignment getUpdateExprAssignment_9() { return cUpdateExprAssignment_9; }

		//IQLExpression
		public RuleCall getUpdateExprIQLExpressionParserRuleCall_9_0() { return cUpdateExprIQLExpressionParserRuleCall_9_0; }

		//")"
		public Keyword getRightParenthesisKeyword_10() { return cRightParenthesisKeyword_10; }

		//body=IQLStatement
		public Assignment getBodyAssignment_11() { return cBodyAssignment_11; }

		//IQLStatement
		public RuleCall getBodyIQLStatementParserRuleCall_11_0() { return cBodyIQLStatementParserRuleCall_11_0; }
	}

	public class IQLForEachStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IQLForEachStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIQLForEachStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cForKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cVarAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cVarIQLVariableDeclarationParserRuleCall_3_0 = (RuleCall)cVarAssignment_3.eContents().get(0);
		private final Keyword cColonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cForExpressionAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cForExpressionIQLExpressionParserRuleCall_5_0 = (RuleCall)cForExpressionAssignment_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cBodyAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cBodyIQLStatementParserRuleCall_7_0 = (RuleCall)cBodyAssignment_7.eContents().get(0);
		
		//IQLForEachStatement returns IQLStatement:
		//	{IQLForEachStatement} "for" "(" var=IQLVariableDeclaration ":" forExpression=IQLExpression ")" body=IQLStatement;
		public ParserRule getRule() { return rule; }

		//{IQLForEachStatement} "for" "(" var=IQLVariableDeclaration ":" forExpression=IQLExpression ")" body=IQLStatement
		public Group getGroup() { return cGroup; }

		//{IQLForEachStatement}
		public Action getIQLForEachStatementAction_0() { return cIQLForEachStatementAction_0; }

		//"for"
		public Keyword getForKeyword_1() { return cForKeyword_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//var=IQLVariableDeclaration
		public Assignment getVarAssignment_3() { return cVarAssignment_3; }

		//IQLVariableDeclaration
		public RuleCall getVarIQLVariableDeclarationParserRuleCall_3_0() { return cVarIQLVariableDeclarationParserRuleCall_3_0; }

		//":"
		public Keyword getColonKeyword_4() { return cColonKeyword_4; }

		//forExpression=IQLExpression
		public Assignment getForExpressionAssignment_5() { return cForExpressionAssignment_5; }

		//IQLExpression
		public RuleCall getForExpressionIQLExpressionParserRuleCall_5_0() { return cForExpressionIQLExpressionParserRuleCall_5_0; }

		//")"
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }

		//body=IQLStatement
		public Assignment getBodyAssignment_7() { return cBodyAssignment_7; }

		//IQLStatement
		public RuleCall getBodyIQLStatementParserRuleCall_7_0() { return cBodyIQLStatementParserRuleCall_7_0; }
	}

	public class IQLSwitchStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IQLSwitchStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIQLSwitchStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSwitchKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cExprAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExprIQLExpressionParserRuleCall_3_0 = (RuleCall)cExprAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cCasesAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cCasesIQLCasePartParserRuleCall_6_0 = (RuleCall)cCasesAssignment_6.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cDefaultKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Keyword cColonKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Assignment cStatementsAssignment_7_2 = (Assignment)cGroup_7.eContents().get(2);
		private final RuleCall cStatementsIQLStatementParserRuleCall_7_2_0 = (RuleCall)cStatementsAssignment_7_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//IQLSwitchStatement returns IQLStatement:
		//	{IQLSwitchStatement} "switch" "(" expr=IQLExpression ")" "{" cases+=IQLCasePart* ("default" ":"
		//	statements+=IQLStatement*)? "}";
		public ParserRule getRule() { return rule; }

		//{IQLSwitchStatement} "switch" "(" expr=IQLExpression ")" "{" cases+=IQLCasePart* ("default" ":"
		//statements+=IQLStatement*)? "}"
		public Group getGroup() { return cGroup; }

		//{IQLSwitchStatement}
		public Action getIQLSwitchStatementAction_0() { return cIQLSwitchStatementAction_0; }

		//"switch"
		public Keyword getSwitchKeyword_1() { return cSwitchKeyword_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//expr=IQLExpression
		public Assignment getExprAssignment_3() { return cExprAssignment_3; }

		//IQLExpression
		public RuleCall getExprIQLExpressionParserRuleCall_3_0() { return cExprIQLExpressionParserRuleCall_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }

		//cases+=IQLCasePart*
		public Assignment getCasesAssignment_6() { return cCasesAssignment_6; }

		//IQLCasePart
		public RuleCall getCasesIQLCasePartParserRuleCall_6_0() { return cCasesIQLCasePartParserRuleCall_6_0; }

		//("default" ":" statements+=IQLStatement*)?
		public Group getGroup_7() { return cGroup_7; }

		//"default"
		public Keyword getDefaultKeyword_7_0() { return cDefaultKeyword_7_0; }

		//":"
		public Keyword getColonKeyword_7_1() { return cColonKeyword_7_1; }

		//statements+=IQLStatement*
		public Assignment getStatementsAssignment_7_2() { return cStatementsAssignment_7_2; }

		//IQLStatement
		public RuleCall getStatementsIQLStatementParserRuleCall_7_2_0() { return cStatementsIQLStatementParserRuleCall_7_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}

	public class IQLCasePartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IQLCasePart");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIQLCasePartAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cCaseKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExprAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExprIQLLiteralExpressionParserRuleCall_2_0 = (RuleCall)cExprAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cStatementsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cStatementsIQLStatementParserRuleCall_4_0 = (RuleCall)cStatementsAssignment_4.eContents().get(0);
		
		//IQLCasePart:
		//	{IQLCasePart} "case" expr=IQLLiteralExpression ":" statements+=IQLStatement*;
		public ParserRule getRule() { return rule; }

		//{IQLCasePart} "case" expr=IQLLiteralExpression ":" statements+=IQLStatement*
		public Group getGroup() { return cGroup; }

		//{IQLCasePart}
		public Action getIQLCasePartAction_0() { return cIQLCasePartAction_0; }

		//"case"
		public Keyword getCaseKeyword_1() { return cCaseKeyword_1; }

		//expr=IQLLiteralExpression
		public Assignment getExprAssignment_2() { return cExprAssignment_2; }

		//IQLLiteralExpression
		public RuleCall getExprIQLLiteralExpressionParserRuleCall_2_0() { return cExprIQLLiteralExpressionParserRuleCall_2_0; }

		//":"
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }

		//statements+=IQLStatement*
		public Assignment getStatementsAssignment_4() { return cStatementsAssignment_4; }

		//IQLStatement
		public RuleCall getStatementsIQLStatementParserRuleCall_4_0() { return cStatementsIQLStatementParserRuleCall_4_0; }
	}

	public class IQLExpressionStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IQLExpressionStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIQLExpressionStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionIQLExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//IQLExpressionStatement returns IQLStatement:
		//	{IQLExpressionStatement} expression=IQLExpression ";";
		public ParserRule getRule() { return rule; }

		//{IQLExpressionStatement} expression=IQLExpression ";"
		public Group getGroup() { return cGroup; }

		//{IQLExpressionStatement}
		public Action getIQLExpressionStatementAction_0() { return cIQLExpressionStatementAction_0; }

		//expression=IQLExpression
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }

		//IQLExpression
		public RuleCall getExpressionIQLExpressionParserRuleCall_1_0() { return cExpressionIQLExpressionParserRuleCall_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class IQLVariableStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IQLVariableStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIQLVariableStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cVarAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVarIQLVariableDeclarationParserRuleCall_1_0 = (RuleCall)cVarAssignment_1.eContents().get(0);
		private final Assignment cInitAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cInitIQLVariableInitializationParserRuleCall_2_0 = (RuleCall)cInitAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//IQLVariableStatement returns IQLStatement:
		//	{IQLVariableStatement} var=IQLVariableDeclaration init=IQLVariableInitialization ";";
		public ParserRule getRule() { return rule; }

		//{IQLVariableStatement} var=IQLVariableDeclaration init=IQLVariableInitialization ";"
		public Group getGroup() { return cGroup; }

		//{IQLVariableStatement}
		public Action getIQLVariableStatementAction_0() { return cIQLVariableStatementAction_0; }

		//var=IQLVariableDeclaration
		public Assignment getVarAssignment_1() { return cVarAssignment_1; }

		//IQLVariableDeclaration
		public RuleCall getVarIQLVariableDeclarationParserRuleCall_1_0() { return cVarIQLVariableDeclarationParserRuleCall_1_0; }

		//init=IQLVariableInitialization
		public Assignment getInitAssignment_2() { return cInitAssignment_2; }

		//IQLVariableInitialization
		public RuleCall getInitIQLVariableInitializationParserRuleCall_2_0() { return cInitIQLVariableInitializationParserRuleCall_2_0; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class IQLConstructorCallStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IQLConstructorCallStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIQLConstructorCallStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cThisAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final Keyword cThisThisKeyword_1_0_0 = (Keyword)cThisAssignment_1_0.eContents().get(0);
		private final Assignment cSuperAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final Keyword cSuperSuperKeyword_1_1_0 = (Keyword)cSuperAssignment_1_1.eContents().get(0);
		private final Assignment cArgsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cArgsIQLArgumentsListParserRuleCall_2_0 = (RuleCall)cArgsAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//IQLConstructorCallStatement returns IQLStatement:
		//	{IQLConstructorCallStatement} (this?="this" | super?="super") args=IQLArgumentsList ";";
		public ParserRule getRule() { return rule; }

		//{IQLConstructorCallStatement} (this?="this" | super?="super") args=IQLArgumentsList ";"
		public Group getGroup() { return cGroup; }

		//{IQLConstructorCallStatement}
		public Action getIQLConstructorCallStatementAction_0() { return cIQLConstructorCallStatementAction_0; }

		//this?="this" | super?="super"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//this?="this"
		public Assignment getThisAssignment_1_0() { return cThisAssignment_1_0; }

		//"this"
		public Keyword getThisThisKeyword_1_0_0() { return cThisThisKeyword_1_0_0; }

		//super?="super"
		public Assignment getSuperAssignment_1_1() { return cSuperAssignment_1_1; }

		//"super"
		public Keyword getSuperSuperKeyword_1_1_0() { return cSuperSuperKeyword_1_1_0; }

		//args=IQLArgumentsList
		public Assignment getArgsAssignment_2() { return cArgsAssignment_2; }

		//IQLArgumentsList
		public RuleCall getArgsIQLArgumentsListParserRuleCall_2_0() { return cArgsIQLArgumentsListParserRuleCall_2_0; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class IQLBreakStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IQLBreakStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIQLBreakStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cBreakKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//IQLBreakStatement returns IQLStatement:
		//	{IQLBreakStatement} "break" ";";
		public ParserRule getRule() { return rule; }

		//{IQLBreakStatement} "break" ";"
		public Group getGroup() { return cGroup; }

		//{IQLBreakStatement}
		public Action getIQLBreakStatementAction_0() { return cIQLBreakStatementAction_0; }

		//"break"
		public Keyword getBreakKeyword_1() { return cBreakKeyword_1; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class IQLContinueStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IQLContinueStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIQLContinueStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cContinueKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//IQLContinueStatement returns IQLStatement:
		//	{IQLContinueStatement} "continue" ";";
		public ParserRule getRule() { return rule; }

		//{IQLContinueStatement} "continue" ";"
		public Group getGroup() { return cGroup; }

		//{IQLContinueStatement}
		public Action getIQLContinueStatementAction_0() { return cIQLContinueStatementAction_0; }

		//"continue"
		public Keyword getContinueKeyword_1() { return cContinueKeyword_1; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class IQLReturnStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IQLReturnStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIQLReturnStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cReturnKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionIQLExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//IQLReturnStatement returns IQLStatement:
		//	{IQLReturnStatement} "return" expression=IQLExpression? ";";
		public ParserRule getRule() { return rule; }

		//{IQLReturnStatement} "return" expression=IQLExpression? ";"
		public Group getGroup() { return cGroup; }

		//{IQLReturnStatement}
		public Action getIQLReturnStatementAction_0() { return cIQLReturnStatementAction_0; }

		//"return"
		public Keyword getReturnKeyword_1() { return cReturnKeyword_1; }

		//expression=IQLExpression?
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }

		//IQLExpression
		public RuleCall getExpressionIQLExpressionParserRuleCall_2_0() { return cExpressionIQLExpressionParserRuleCall_2_0; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class IQLExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IQLExpression");
		private final RuleCall cIQLAssignmentExpressionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		///////////////////////////////////////////////
		///////////////////////////////////////////////
		///////////////////////////////////////////////
		//IQLExpression:
		//	IQLAssignmentExpression;
		public ParserRule getRule() { return rule; }

		//IQLAssignmentExpression
		public RuleCall getIQLAssignmentExpressionParserRuleCall() { return cIQLAssignmentExpressionParserRuleCall; }
	}

	public class IQLAssignmentExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IQLAssignmentExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIQLLogicalOrExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cIQLAssignmentExpressionLeftOperandAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cOpAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final RuleCall cOpOpAssignParserRuleCall_1_0_0_1_0 = (RuleCall)cOpAssignment_1_0_0_1.eContents().get(0);
		private final Assignment cRightOperandAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightOperandIQLAssignmentExpressionParserRuleCall_1_1_0 = (RuleCall)cRightOperandAssignment_1_1.eContents().get(0);
		
		//IQLAssignmentExpression returns IQLExpression:
		//	IQLLogicalOrExpression (=> ({IQLAssignmentExpression.leftOperand=current} op=OpAssign)
		//	rightOperand=IQLAssignmentExpression)?;
		public ParserRule getRule() { return rule; }

		//IQLLogicalOrExpression (=> ({IQLAssignmentExpression.leftOperand=current} op=OpAssign)
		//rightOperand=IQLAssignmentExpression)?
		public Group getGroup() { return cGroup; }

		//IQLLogicalOrExpression
		public RuleCall getIQLLogicalOrExpressionParserRuleCall_0() { return cIQLLogicalOrExpressionParserRuleCall_0; }

		//(=> ({IQLAssignmentExpression.leftOperand=current} op=OpAssign) rightOperand=IQLAssignmentExpression)?
		public Group getGroup_1() { return cGroup_1; }

		//=> ({IQLAssignmentExpression.leftOperand=current} op=OpAssign)
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{IQLAssignmentExpression.leftOperand=current} op=OpAssign
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{IQLAssignmentExpression.leftOperand=current}
		public Action getIQLAssignmentExpressionLeftOperandAction_1_0_0_0() { return cIQLAssignmentExpressionLeftOperandAction_1_0_0_0; }

		//op=OpAssign
		public Assignment getOpAssignment_1_0_0_1() { return cOpAssignment_1_0_0_1; }

		//OpAssign
		public RuleCall getOpOpAssignParserRuleCall_1_0_0_1_0() { return cOpOpAssignParserRuleCall_1_0_0_1_0; }

		//rightOperand=IQLAssignmentExpression
		public Assignment getRightOperandAssignment_1_1() { return cRightOperandAssignment_1_1; }

		//IQLAssignmentExpression
		public RuleCall getRightOperandIQLAssignmentExpressionParserRuleCall_1_1_0() { return cRightOperandIQLAssignmentExpressionParserRuleCall_1_1_0; }
	}

	public class OpAssignElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OpAssign");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cEqualsSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cPlusSignEqualsSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cHyphenMinusEqualsSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cAsteriskEqualsSignKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cSolidusEqualsSignKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cPercentSignEqualsSignKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		
		//OpAssign:
		//	"=" | "+=" | "-=" | "*=" | "/=" | "%=";
		public ParserRule getRule() { return rule; }

		//"=" | "+=" | "-=" | "*=" | "/=" | "%="
		public Alternatives getAlternatives() { return cAlternatives; }

		//"="
		public Keyword getEqualsSignKeyword_0() { return cEqualsSignKeyword_0; }

		//"+="
		public Keyword getPlusSignEqualsSignKeyword_1() { return cPlusSignEqualsSignKeyword_1; }

		//"-="
		public Keyword getHyphenMinusEqualsSignKeyword_2() { return cHyphenMinusEqualsSignKeyword_2; }

		//"*="
		public Keyword getAsteriskEqualsSignKeyword_3() { return cAsteriskEqualsSignKeyword_3; }

		//"/="
		public Keyword getSolidusEqualsSignKeyword_4() { return cSolidusEqualsSignKeyword_4; }

		//"%="
		public Keyword getPercentSignEqualsSignKeyword_5() { return cPercentSignEqualsSignKeyword_5; }
	}

	public class IQLLogicalOrExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IQLLogicalOrExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIQLLogicalAndExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cIQLLogicalOrExpressionLeftOperandAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cOpAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final RuleCall cOpOpLogicalOrParserRuleCall_1_0_0_1_0 = (RuleCall)cOpAssignment_1_0_0_1.eContents().get(0);
		private final Assignment cRightOperandAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightOperandIQLLogicalAndExpressionParserRuleCall_1_1_0 = (RuleCall)cRightOperandAssignment_1_1.eContents().get(0);
		
		//IQLLogicalOrExpression returns IQLExpression:
		//	IQLLogicalAndExpression (=> ({IQLLogicalOrExpression.leftOperand=current} op=OpLogicalOr)
		//	rightOperand=IQLLogicalAndExpression)*;
		public ParserRule getRule() { return rule; }

		//IQLLogicalAndExpression (=> ({IQLLogicalOrExpression.leftOperand=current} op=OpLogicalOr)
		//rightOperand=IQLLogicalAndExpression)*
		public Group getGroup() { return cGroup; }

		//IQLLogicalAndExpression
		public RuleCall getIQLLogicalAndExpressionParserRuleCall_0() { return cIQLLogicalAndExpressionParserRuleCall_0; }

		//(=> ({IQLLogicalOrExpression.leftOperand=current} op=OpLogicalOr) rightOperand=IQLLogicalAndExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//=> ({IQLLogicalOrExpression.leftOperand=current} op=OpLogicalOr)
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{IQLLogicalOrExpression.leftOperand=current} op=OpLogicalOr
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{IQLLogicalOrExpression.leftOperand=current}
		public Action getIQLLogicalOrExpressionLeftOperandAction_1_0_0_0() { return cIQLLogicalOrExpressionLeftOperandAction_1_0_0_0; }

		//op=OpLogicalOr
		public Assignment getOpAssignment_1_0_0_1() { return cOpAssignment_1_0_0_1; }

		//OpLogicalOr
		public RuleCall getOpOpLogicalOrParserRuleCall_1_0_0_1_0() { return cOpOpLogicalOrParserRuleCall_1_0_0_1_0; }

		//rightOperand=IQLLogicalAndExpression
		public Assignment getRightOperandAssignment_1_1() { return cRightOperandAssignment_1_1; }

		//IQLLogicalAndExpression
		public RuleCall getRightOperandIQLLogicalAndExpressionParserRuleCall_1_1_0() { return cRightOperandIQLLogicalAndExpressionParserRuleCall_1_1_0; }
	}

	public class OpLogicalOrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OpLogicalOr");
		private final Keyword cVerticalLineVerticalLineKeyword = (Keyword)rule.eContents().get(1);
		
		//OpLogicalOr:
		//	"||";
		public ParserRule getRule() { return rule; }

		//"||"
		public Keyword getVerticalLineVerticalLineKeyword() { return cVerticalLineVerticalLineKeyword; }
	}

	public class IQLLogicalAndExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IQLLogicalAndExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIQLEqualityExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cIQLLogicalAndExpressionLeftOperandAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cOpAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final RuleCall cOpOpLogicalAndParserRuleCall_1_0_0_1_0 = (RuleCall)cOpAssignment_1_0_0_1.eContents().get(0);
		private final Assignment cRightOperandAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightOperandIQLEqualityExpressionParserRuleCall_1_1_0 = (RuleCall)cRightOperandAssignment_1_1.eContents().get(0);
		
		//IQLLogicalAndExpression returns IQLExpression:
		//	IQLEqualityExpression (=> ({IQLLogicalAndExpression.leftOperand=current} op=OpLogicalAnd)
		//	rightOperand=IQLEqualityExpression)*;
		public ParserRule getRule() { return rule; }

		//IQLEqualityExpression (=> ({IQLLogicalAndExpression.leftOperand=current} op=OpLogicalAnd)
		//rightOperand=IQLEqualityExpression)*
		public Group getGroup() { return cGroup; }

		//IQLEqualityExpression
		public RuleCall getIQLEqualityExpressionParserRuleCall_0() { return cIQLEqualityExpressionParserRuleCall_0; }

		//(=> ({IQLLogicalAndExpression.leftOperand=current} op=OpLogicalAnd) rightOperand=IQLEqualityExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//=> ({IQLLogicalAndExpression.leftOperand=current} op=OpLogicalAnd)
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{IQLLogicalAndExpression.leftOperand=current} op=OpLogicalAnd
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{IQLLogicalAndExpression.leftOperand=current}
		public Action getIQLLogicalAndExpressionLeftOperandAction_1_0_0_0() { return cIQLLogicalAndExpressionLeftOperandAction_1_0_0_0; }

		//op=OpLogicalAnd
		public Assignment getOpAssignment_1_0_0_1() { return cOpAssignment_1_0_0_1; }

		//OpLogicalAnd
		public RuleCall getOpOpLogicalAndParserRuleCall_1_0_0_1_0() { return cOpOpLogicalAndParserRuleCall_1_0_0_1_0; }

		//rightOperand=IQLEqualityExpression
		public Assignment getRightOperandAssignment_1_1() { return cRightOperandAssignment_1_1; }

		//IQLEqualityExpression
		public RuleCall getRightOperandIQLEqualityExpressionParserRuleCall_1_1_0() { return cRightOperandIQLEqualityExpressionParserRuleCall_1_1_0; }
	}

	public class OpLogicalAndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OpLogicalAnd");
		private final Keyword cAmpersandAmpersandKeyword = (Keyword)rule.eContents().get(1);
		
		//OpLogicalAnd:
		//	"&&";
		public ParserRule getRule() { return rule; }

		//"&&"
		public Keyword getAmpersandAmpersandKeyword() { return cAmpersandAmpersandKeyword; }
	}

	public class IQLEqualityExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IQLEqualityExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIQLRelationalExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cIQLEqualityExpressionLeftOperandAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cOpAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final RuleCall cOpOpEqualityParserRuleCall_1_0_0_1_0 = (RuleCall)cOpAssignment_1_0_0_1.eContents().get(0);
		private final Assignment cRightOperandAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightOperandIQLRelationalExpressionParserRuleCall_1_1_0 = (RuleCall)cRightOperandAssignment_1_1.eContents().get(0);
		
		//IQLEqualityExpression returns IQLExpression:
		//	IQLRelationalExpression (=> ({IQLEqualityExpression.leftOperand=current} op=OpEquality)
		//	rightOperand=IQLRelationalExpression)*;
		public ParserRule getRule() { return rule; }

		//IQLRelationalExpression (=> ({IQLEqualityExpression.leftOperand=current} op=OpEquality)
		//rightOperand=IQLRelationalExpression)*
		public Group getGroup() { return cGroup; }

		//IQLRelationalExpression
		public RuleCall getIQLRelationalExpressionParserRuleCall_0() { return cIQLRelationalExpressionParserRuleCall_0; }

		//(=> ({IQLEqualityExpression.leftOperand=current} op=OpEquality) rightOperand=IQLRelationalExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//=> ({IQLEqualityExpression.leftOperand=current} op=OpEquality)
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{IQLEqualityExpression.leftOperand=current} op=OpEquality
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{IQLEqualityExpression.leftOperand=current}
		public Action getIQLEqualityExpressionLeftOperandAction_1_0_0_0() { return cIQLEqualityExpressionLeftOperandAction_1_0_0_0; }

		//op=OpEquality
		public Assignment getOpAssignment_1_0_0_1() { return cOpAssignment_1_0_0_1; }

		//OpEquality
		public RuleCall getOpOpEqualityParserRuleCall_1_0_0_1_0() { return cOpOpEqualityParserRuleCall_1_0_0_1_0; }

		//rightOperand=IQLRelationalExpression
		public Assignment getRightOperandAssignment_1_1() { return cRightOperandAssignment_1_1; }

		//IQLRelationalExpression
		public RuleCall getRightOperandIQLRelationalExpressionParserRuleCall_1_1_0() { return cRightOperandIQLRelationalExpressionParserRuleCall_1_1_0; }
	}

	public class OpEqualityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OpEquality");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cEqualsSignEqualsSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cExclamationMarkEqualsSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//OpEquality:
		//	"==" | "!=";
		public ParserRule getRule() { return rule; }

		//"==" | "!="
		public Alternatives getAlternatives() { return cAlternatives; }

		//"=="
		public Keyword getEqualsSignEqualsSignKeyword_0() { return cEqualsSignEqualsSignKeyword_0; }

		//"!="
		public Keyword getExclamationMarkEqualsSignKeyword_1() { return cExclamationMarkEqualsSignKeyword_1; }
	}

	public class IQLRelationalExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IQLRelationalExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIQLAdditiveExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Group cGroup_1_0_0_0 = (Group)cGroup_1_0_0.eContents().get(0);
		private final Action cIQLInstanceOfExpressionLeftOperandAction_1_0_0_0_0 = (Action)cGroup_1_0_0_0.eContents().get(0);
		private final Keyword cInstanceofKeyword_1_0_0_0_1 = (Keyword)cGroup_1_0_0_0.eContents().get(1);
		private final Assignment cTargetRefAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cTargetRefJvmTypeReferenceParserRuleCall_1_0_1_0 = (RuleCall)cTargetRefAssignment_1_0_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Group cGroup_1_1_0 = (Group)cGroup_1_1.eContents().get(0);
		private final Group cGroup_1_1_0_0 = (Group)cGroup_1_1_0.eContents().get(0);
		private final Action cIQLRelationalExpressionLeftOperandAction_1_1_0_0_0 = (Action)cGroup_1_1_0_0.eContents().get(0);
		private final Assignment cOpAssignment_1_1_0_0_1 = (Assignment)cGroup_1_1_0_0.eContents().get(1);
		private final RuleCall cOpOpRelationalParserRuleCall_1_1_0_0_1_0 = (RuleCall)cOpAssignment_1_1_0_0_1.eContents().get(0);
		private final Assignment cRightOperandAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cRightOperandIQLAdditiveExpressionParserRuleCall_1_1_1_0 = (RuleCall)cRightOperandAssignment_1_1_1.eContents().get(0);
		
		//IQLRelationalExpression returns IQLExpression:
		//	IQLAdditiveExpression (=> ({IQLInstanceOfExpression.leftOperand=current} "instanceof") targetRef=JvmTypeReference |
		//	=> ({IQLRelationalExpression.leftOperand=current} op=OpRelational) rightOperand=IQLAdditiveExpression)*;
		public ParserRule getRule() { return rule; }

		//IQLAdditiveExpression (=> ({IQLInstanceOfExpression.leftOperand=current} "instanceof") targetRef=JvmTypeReference | =>
		//({IQLRelationalExpression.leftOperand=current} op=OpRelational) rightOperand=IQLAdditiveExpression)*
		public Group getGroup() { return cGroup; }

		//IQLAdditiveExpression
		public RuleCall getIQLAdditiveExpressionParserRuleCall_0() { return cIQLAdditiveExpressionParserRuleCall_0; }

		//(=> ({IQLInstanceOfExpression.leftOperand=current} "instanceof") targetRef=JvmTypeReference | =>
		//({IQLRelationalExpression.leftOperand=current} op=OpRelational) rightOperand=IQLAdditiveExpression)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//=> ({IQLInstanceOfExpression.leftOperand=current} "instanceof") targetRef=JvmTypeReference
		public Group getGroup_1_0() { return cGroup_1_0; }

		//=> ({IQLInstanceOfExpression.leftOperand=current} "instanceof")
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{IQLInstanceOfExpression.leftOperand=current} "instanceof"
		public Group getGroup_1_0_0_0() { return cGroup_1_0_0_0; }

		//{IQLInstanceOfExpression.leftOperand=current}
		public Action getIQLInstanceOfExpressionLeftOperandAction_1_0_0_0_0() { return cIQLInstanceOfExpressionLeftOperandAction_1_0_0_0_0; }

		//"instanceof"
		public Keyword getInstanceofKeyword_1_0_0_0_1() { return cInstanceofKeyword_1_0_0_0_1; }

		//targetRef=JvmTypeReference
		public Assignment getTargetRefAssignment_1_0_1() { return cTargetRefAssignment_1_0_1; }

		//JvmTypeReference
		public RuleCall getTargetRefJvmTypeReferenceParserRuleCall_1_0_1_0() { return cTargetRefJvmTypeReferenceParserRuleCall_1_0_1_0; }

		//=> ({IQLRelationalExpression.leftOperand=current} op=OpRelational) rightOperand=IQLAdditiveExpression
		public Group getGroup_1_1() { return cGroup_1_1; }

		//=> ({IQLRelationalExpression.leftOperand=current} op=OpRelational)
		public Group getGroup_1_1_0() { return cGroup_1_1_0; }

		//{IQLRelationalExpression.leftOperand=current} op=OpRelational
		public Group getGroup_1_1_0_0() { return cGroup_1_1_0_0; }

		//{IQLRelationalExpression.leftOperand=current}
		public Action getIQLRelationalExpressionLeftOperandAction_1_1_0_0_0() { return cIQLRelationalExpressionLeftOperandAction_1_1_0_0_0; }

		//op=OpRelational
		public Assignment getOpAssignment_1_1_0_0_1() { return cOpAssignment_1_1_0_0_1; }

		//OpRelational
		public RuleCall getOpOpRelationalParserRuleCall_1_1_0_0_1_0() { return cOpOpRelationalParserRuleCall_1_1_0_0_1_0; }

		//rightOperand=IQLAdditiveExpression
		public Assignment getRightOperandAssignment_1_1_1() { return cRightOperandAssignment_1_1_1; }

		//IQLAdditiveExpression
		public RuleCall getRightOperandIQLAdditiveExpressionParserRuleCall_1_1_1_0() { return cRightOperandIQLAdditiveExpressionParserRuleCall_1_1_1_0; }
	}

	public class OpRelationalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OpRelational");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cGreaterThanSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cGreaterThanSignEqualsSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cLessThanSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cLessThanSignEqualsSignKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//OpRelational:
		//	">" | ">=" | "<" | "<=";
		public ParserRule getRule() { return rule; }

		//">" | ">=" | "<" | "<="
		public Alternatives getAlternatives() { return cAlternatives; }

		//">"
		public Keyword getGreaterThanSignKeyword_0() { return cGreaterThanSignKeyword_0; }

		//">="
		public Keyword getGreaterThanSignEqualsSignKeyword_1() { return cGreaterThanSignEqualsSignKeyword_1; }

		//"<"
		public Keyword getLessThanSignKeyword_2() { return cLessThanSignKeyword_2; }

		//"<="
		public Keyword getLessThanSignEqualsSignKeyword_3() { return cLessThanSignEqualsSignKeyword_3; }
	}

	public class IQLAdditiveExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IQLAdditiveExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIQLMultiplicativeExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cIQLAdditiveExpressionLeftOperandAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cOpAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final RuleCall cOpOpAddParserRuleCall_1_0_0_1_0 = (RuleCall)cOpAssignment_1_0_0_1.eContents().get(0);
		private final Assignment cRightOperandAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightOperandIQLMultiplicativeExpressionParserRuleCall_1_1_0 = (RuleCall)cRightOperandAssignment_1_1.eContents().get(0);
		
		//IQLAdditiveExpression returns IQLExpression:
		//	IQLMultiplicativeExpression (=> ({IQLAdditiveExpression.leftOperand=current} op=OpAdd)
		//	rightOperand=IQLMultiplicativeExpression)*;
		public ParserRule getRule() { return rule; }

		//IQLMultiplicativeExpression (=> ({IQLAdditiveExpression.leftOperand=current} op=OpAdd)
		//rightOperand=IQLMultiplicativeExpression)*
		public Group getGroup() { return cGroup; }

		//IQLMultiplicativeExpression
		public RuleCall getIQLMultiplicativeExpressionParserRuleCall_0() { return cIQLMultiplicativeExpressionParserRuleCall_0; }

		//(=> ({IQLAdditiveExpression.leftOperand=current} op=OpAdd) rightOperand=IQLMultiplicativeExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//=> ({IQLAdditiveExpression.leftOperand=current} op=OpAdd)
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{IQLAdditiveExpression.leftOperand=current} op=OpAdd
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{IQLAdditiveExpression.leftOperand=current}
		public Action getIQLAdditiveExpressionLeftOperandAction_1_0_0_0() { return cIQLAdditiveExpressionLeftOperandAction_1_0_0_0; }

		//op=OpAdd
		public Assignment getOpAssignment_1_0_0_1() { return cOpAssignment_1_0_0_1; }

		//OpAdd
		public RuleCall getOpOpAddParserRuleCall_1_0_0_1_0() { return cOpOpAddParserRuleCall_1_0_0_1_0; }

		//rightOperand=IQLMultiplicativeExpression
		public Assignment getRightOperandAssignment_1_1() { return cRightOperandAssignment_1_1; }

		//IQLMultiplicativeExpression
		public RuleCall getRightOperandIQLMultiplicativeExpressionParserRuleCall_1_1_0() { return cRightOperandIQLMultiplicativeExpressionParserRuleCall_1_1_0; }
	}

	public class OpAddElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OpAdd");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPlusSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//OpAdd:
		//	"+" | "-";
		public ParserRule getRule() { return rule; }

		//"+" | "-"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"+"
		public Keyword getPlusSignKeyword_0() { return cPlusSignKeyword_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }
	}

	public class IQLMultiplicativeExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IQLMultiplicativeExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIQLUnaryExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cIQLMultiplicativeExpressionLeftOperandAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cOpAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final RuleCall cOpOpMultiParserRuleCall_1_0_0_1_0 = (RuleCall)cOpAssignment_1_0_0_1.eContents().get(0);
		private final Assignment cRightOperandAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightOperandIQLUnaryExpressionParserRuleCall_1_1_0 = (RuleCall)cRightOperandAssignment_1_1.eContents().get(0);
		
		//IQLMultiplicativeExpression returns IQLExpression:
		//	IQLUnaryExpression (=> ({IQLMultiplicativeExpression.leftOperand=current} op=OpMulti)
		//	rightOperand=IQLUnaryExpression)*;
		public ParserRule getRule() { return rule; }

		//IQLUnaryExpression (=> ({IQLMultiplicativeExpression.leftOperand=current} op=OpMulti) rightOperand=IQLUnaryExpression)*
		public Group getGroup() { return cGroup; }

		//IQLUnaryExpression
		public RuleCall getIQLUnaryExpressionParserRuleCall_0() { return cIQLUnaryExpressionParserRuleCall_0; }

		//(=> ({IQLMultiplicativeExpression.leftOperand=current} op=OpMulti) rightOperand=IQLUnaryExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//=> ({IQLMultiplicativeExpression.leftOperand=current} op=OpMulti)
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{IQLMultiplicativeExpression.leftOperand=current} op=OpMulti
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{IQLMultiplicativeExpression.leftOperand=current}
		public Action getIQLMultiplicativeExpressionLeftOperandAction_1_0_0_0() { return cIQLMultiplicativeExpressionLeftOperandAction_1_0_0_0; }

		//op=OpMulti
		public Assignment getOpAssignment_1_0_0_1() { return cOpAssignment_1_0_0_1; }

		//OpMulti
		public RuleCall getOpOpMultiParserRuleCall_1_0_0_1_0() { return cOpOpMultiParserRuleCall_1_0_0_1_0; }

		//rightOperand=IQLUnaryExpression
		public Assignment getRightOperandAssignment_1_1() { return cRightOperandAssignment_1_1; }

		//IQLUnaryExpression
		public RuleCall getRightOperandIQLUnaryExpressionParserRuleCall_1_1_0() { return cRightOperandIQLUnaryExpressionParserRuleCall_1_1_0; }
	}

	public class OpMultiElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OpMulti");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cAsteriskKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cSolidusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cPercentSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//OpMulti:
		//	"*" | "/" | "%";
		public ParserRule getRule() { return rule; }

		//"*" | "/" | "%"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"*"
		public Keyword getAsteriskKeyword_0() { return cAsteriskKeyword_0; }

		//"/"
		public Keyword getSolidusKeyword_1() { return cSolidusKeyword_1; }

		//"%"
		public Keyword getPercentSignKeyword_2() { return cPercentSignKeyword_2; }
	}

	public class IQLUnaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IQLUnaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cGroup_0.eContents().get(0);
		private final Action cIQLPlusMinusExpressionAction_0_0_0 = (Action)cGroup_0_0.eContents().get(0);
		private final Assignment cOpAssignment_0_0_1 = (Assignment)cGroup_0_0.eContents().get(1);
		private final RuleCall cOpOpUnaryPlusMinusParserRuleCall_0_0_1_0 = (RuleCall)cOpAssignment_0_0_1.eContents().get(0);
		private final Assignment cOperandAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cOperandIQLMemberCallExpressionParserRuleCall_0_1_0 = (RuleCall)cOperandAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Action cIQLBooleanNotExpressionAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Assignment cOpAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cOpOpUnaryBooleanNotParserRuleCall_1_0_1_0 = (RuleCall)cOpAssignment_1_0_1.eContents().get(0);
		private final Assignment cOperandAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperandIQLMemberCallExpressionParserRuleCall_1_1_0 = (RuleCall)cOperandAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cGroup_2.eContents().get(0);
		private final Action cIQLPrefixExpressionAction_2_0_0 = (Action)cGroup_2_0.eContents().get(0);
		private final Assignment cOpAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cOpOpPrefixParserRuleCall_2_0_1_0 = (RuleCall)cOpAssignment_2_0_1.eContents().get(0);
		private final Assignment cOperandAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cOperandIQLMemberCallExpressionParserRuleCall_2_1_0 = (RuleCall)cOperandAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cGroup_3.eContents().get(0);
		private final Group cGroup_3_0_0 = (Group)cGroup_3_0.eContents().get(0);
		private final Action cIQLTypeCastExpressionAction_3_0_0_0 = (Action)cGroup_3_0_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3_0_0_1 = (Keyword)cGroup_3_0_0.eContents().get(1);
		private final Assignment cTargetRefAssignment_3_0_0_2 = (Assignment)cGroup_3_0_0.eContents().get(2);
		private final RuleCall cTargetRefJvmTypeReferenceParserRuleCall_3_0_0_2_0 = (RuleCall)cTargetRefAssignment_3_0_0_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_0_0_3 = (Keyword)cGroup_3_0_0.eContents().get(3);
		private final Assignment cOperandAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cOperandIQLMemberCallExpressionParserRuleCall_3_1_0 = (RuleCall)cOperandAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final RuleCall cIQLMemberCallExpressionParserRuleCall_4_0 = (RuleCall)cGroup_4.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Group cGroup_4_1_0 = (Group)cGroup_4_1.eContents().get(0);
		private final Action cIQLPostfixExpressionOperandAction_4_1_0_0 = (Action)cGroup_4_1_0.eContents().get(0);
		private final Assignment cOpAssignment_4_1_0_1 = (Assignment)cGroup_4_1_0.eContents().get(1);
		private final RuleCall cOpOpPostfixParserRuleCall_4_1_0_1_0 = (RuleCall)cOpAssignment_4_1_0_1.eContents().get(0);
		
		//IQLUnaryExpression returns IQLExpression:
		//	({IQLPlusMinusExpression} op=OpUnaryPlusMinus) operand=IQLMemberCallExpression | ({IQLBooleanNotExpression}
		//	op=OpUnaryBooleanNot) operand=IQLMemberCallExpression | ({IQLPrefixExpression} op=OpPrefix)
		//	operand=IQLMemberCallExpression | => ({IQLTypeCastExpression} "(" targetRef=JvmTypeReference ")")
		//	operand=IQLMemberCallExpression | IQLMemberCallExpression => ({IQLPostfixExpression.operand=current} op=OpPostfix)?;
		public ParserRule getRule() { return rule; }

		//({IQLPlusMinusExpression} op=OpUnaryPlusMinus) operand=IQLMemberCallExpression | ({IQLBooleanNotExpression}
		//op=OpUnaryBooleanNot) operand=IQLMemberCallExpression | ({IQLPrefixExpression} op=OpPrefix)
		//operand=IQLMemberCallExpression | => ({IQLTypeCastExpression} "(" targetRef=JvmTypeReference ")")
		//operand=IQLMemberCallExpression | IQLMemberCallExpression => ({IQLPostfixExpression.operand=current} op=OpPostfix)?
		public Alternatives getAlternatives() { return cAlternatives; }

		//({IQLPlusMinusExpression} op=OpUnaryPlusMinus) operand=IQLMemberCallExpression
		public Group getGroup_0() { return cGroup_0; }

		//{IQLPlusMinusExpression} op=OpUnaryPlusMinus
		public Group getGroup_0_0() { return cGroup_0_0; }

		//{IQLPlusMinusExpression}
		public Action getIQLPlusMinusExpressionAction_0_0_0() { return cIQLPlusMinusExpressionAction_0_0_0; }

		//op=OpUnaryPlusMinus
		public Assignment getOpAssignment_0_0_1() { return cOpAssignment_0_0_1; }

		//OpUnaryPlusMinus
		public RuleCall getOpOpUnaryPlusMinusParserRuleCall_0_0_1_0() { return cOpOpUnaryPlusMinusParserRuleCall_0_0_1_0; }

		//operand=IQLMemberCallExpression
		public Assignment getOperandAssignment_0_1() { return cOperandAssignment_0_1; }

		//IQLMemberCallExpression
		public RuleCall getOperandIQLMemberCallExpressionParserRuleCall_0_1_0() { return cOperandIQLMemberCallExpressionParserRuleCall_0_1_0; }

		//({IQLBooleanNotExpression} op=OpUnaryBooleanNot) operand=IQLMemberCallExpression
		public Group getGroup_1() { return cGroup_1; }

		//{IQLBooleanNotExpression} op=OpUnaryBooleanNot
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{IQLBooleanNotExpression}
		public Action getIQLBooleanNotExpressionAction_1_0_0() { return cIQLBooleanNotExpressionAction_1_0_0; }

		//op=OpUnaryBooleanNot
		public Assignment getOpAssignment_1_0_1() { return cOpAssignment_1_0_1; }

		//OpUnaryBooleanNot
		public RuleCall getOpOpUnaryBooleanNotParserRuleCall_1_0_1_0() { return cOpOpUnaryBooleanNotParserRuleCall_1_0_1_0; }

		//operand=IQLMemberCallExpression
		public Assignment getOperandAssignment_1_1() { return cOperandAssignment_1_1; }

		//IQLMemberCallExpression
		public RuleCall getOperandIQLMemberCallExpressionParserRuleCall_1_1_0() { return cOperandIQLMemberCallExpressionParserRuleCall_1_1_0; }

		//({IQLPrefixExpression} op=OpPrefix) operand=IQLMemberCallExpression
		public Group getGroup_2() { return cGroup_2; }

		//{IQLPrefixExpression} op=OpPrefix
		public Group getGroup_2_0() { return cGroup_2_0; }

		//{IQLPrefixExpression}
		public Action getIQLPrefixExpressionAction_2_0_0() { return cIQLPrefixExpressionAction_2_0_0; }

		//op=OpPrefix
		public Assignment getOpAssignment_2_0_1() { return cOpAssignment_2_0_1; }

		//OpPrefix
		public RuleCall getOpOpPrefixParserRuleCall_2_0_1_0() { return cOpOpPrefixParserRuleCall_2_0_1_0; }

		//operand=IQLMemberCallExpression
		public Assignment getOperandAssignment_2_1() { return cOperandAssignment_2_1; }

		//IQLMemberCallExpression
		public RuleCall getOperandIQLMemberCallExpressionParserRuleCall_2_1_0() { return cOperandIQLMemberCallExpressionParserRuleCall_2_1_0; }

		//=> ({IQLTypeCastExpression} "(" targetRef=JvmTypeReference ")") operand=IQLMemberCallExpression
		public Group getGroup_3() { return cGroup_3; }

		//=> ({IQLTypeCastExpression} "(" targetRef=JvmTypeReference ")")
		public Group getGroup_3_0() { return cGroup_3_0; }

		//{IQLTypeCastExpression} "(" targetRef=JvmTypeReference ")"
		public Group getGroup_3_0_0() { return cGroup_3_0_0; }

		//{IQLTypeCastExpression}
		public Action getIQLTypeCastExpressionAction_3_0_0_0() { return cIQLTypeCastExpressionAction_3_0_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_3_0_0_1() { return cLeftParenthesisKeyword_3_0_0_1; }

		//targetRef=JvmTypeReference
		public Assignment getTargetRefAssignment_3_0_0_2() { return cTargetRefAssignment_3_0_0_2; }

		//JvmTypeReference
		public RuleCall getTargetRefJvmTypeReferenceParserRuleCall_3_0_0_2_0() { return cTargetRefJvmTypeReferenceParserRuleCall_3_0_0_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3_0_0_3() { return cRightParenthesisKeyword_3_0_0_3; }

		//operand=IQLMemberCallExpression
		public Assignment getOperandAssignment_3_1() { return cOperandAssignment_3_1; }

		//IQLMemberCallExpression
		public RuleCall getOperandIQLMemberCallExpressionParserRuleCall_3_1_0() { return cOperandIQLMemberCallExpressionParserRuleCall_3_1_0; }

		//IQLMemberCallExpression => ({IQLPostfixExpression.operand=current} op=OpPostfix)?
		public Group getGroup_4() { return cGroup_4; }

		//IQLMemberCallExpression
		public RuleCall getIQLMemberCallExpressionParserRuleCall_4_0() { return cIQLMemberCallExpressionParserRuleCall_4_0; }

		//=> ({IQLPostfixExpression.operand=current} op=OpPostfix)?
		public Group getGroup_4_1() { return cGroup_4_1; }

		//{IQLPostfixExpression.operand=current} op=OpPostfix
		public Group getGroup_4_1_0() { return cGroup_4_1_0; }

		//{IQLPostfixExpression.operand=current}
		public Action getIQLPostfixExpressionOperandAction_4_1_0_0() { return cIQLPostfixExpressionOperandAction_4_1_0_0; }

		//op=OpPostfix
		public Assignment getOpAssignment_4_1_0_1() { return cOpAssignment_4_1_0_1; }

		//OpPostfix
		public RuleCall getOpOpPostfixParserRuleCall_4_1_0_1_0() { return cOpOpPostfixParserRuleCall_4_1_0_1_0; }
	}

	public class OpUnaryPlusMinusElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OpUnaryPlusMinus");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cPlusSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//OpUnaryPlusMinus:
		//	"-" | "+";
		public ParserRule getRule() { return rule; }

		//"-" | "+"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"-"
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }

		//"+"
		public Keyword getPlusSignKeyword_1() { return cPlusSignKeyword_1; }
	}

	public class OpUnaryBooleanNotElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OpUnaryBooleanNot");
		private final Keyword cExclamationMarkKeyword = (Keyword)rule.eContents().get(1);
		
		//OpUnaryBooleanNot:
		//	"!";
		public ParserRule getRule() { return rule; }

		//"!"
		public Keyword getExclamationMarkKeyword() { return cExclamationMarkKeyword; }
	}

	public class OpPrefixElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OpPrefix");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPlusSignPlusSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cHyphenMinusHyphenMinusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//OpPrefix:
		//	"++" | "--";
		public ParserRule getRule() { return rule; }

		//"++" | "--"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"++"
		public Keyword getPlusSignPlusSignKeyword_0() { return cPlusSignPlusSignKeyword_0; }

		//"--"
		public Keyword getHyphenMinusHyphenMinusKeyword_1() { return cHyphenMinusHyphenMinusKeyword_1; }
	}

	public class OpPostfixElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OpPostfix");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPlusSignPlusSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cHyphenMinusHyphenMinusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//OpPostfix:
		//	"++" | "--";
		public ParserRule getRule() { return rule; }

		//"++" | "--"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"++"
		public Keyword getPlusSignPlusSignKeyword_0() { return cPlusSignPlusSignKeyword_0; }

		//"--"
		public Keyword getHyphenMinusHyphenMinusKeyword_1() { return cHyphenMinusHyphenMinusKeyword_1; }
	}

	public class IQLMemberCallExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IQLMemberCallExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIQLOtherExpressionsParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cIQLArrayExpressionLeftOperandAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Assignment cExpressionsAssignment_1_0_0_2 = (Assignment)cGroup_1_0_0.eContents().get(2);
		private final RuleCall cExpressionsIQLExpressionParserRuleCall_1_0_0_2_0 = (RuleCall)cExpressionsAssignment_1_0_0_2.eContents().get(0);
		private final Group cGroup_1_0_0_3 = (Group)cGroup_1_0_0.eContents().get(3);
		private final Keyword cCommaKeyword_1_0_0_3_0 = (Keyword)cGroup_1_0_0_3.eContents().get(0);
		private final Assignment cExpressionsAssignment_1_0_0_3_1 = (Assignment)cGroup_1_0_0_3.eContents().get(1);
		private final RuleCall cExpressionsIQLExpressionParserRuleCall_1_0_0_3_1_0 = (RuleCall)cExpressionsAssignment_1_0_0_3_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_0_0_4 = (Keyword)cGroup_1_0_0.eContents().get(4);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Group cGroup_1_1_0 = (Group)cGroup_1_1.eContents().get(0);
		private final Group cGroup_1_1_0_0 = (Group)cGroup_1_1_0.eContents().get(0);
		private final Action cIQLMemberSelectionExpressionLeftOperandAction_1_1_0_0_0 = (Action)cGroup_1_1_0_0.eContents().get(0);
		private final Keyword cFullStopKeyword_1_1_0_0_1 = (Keyword)cGroup_1_1_0_0.eContents().get(1);
		private final Assignment cSelAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cSelIQLMemberSelectionParserRuleCall_1_1_1_0 = (RuleCall)cSelAssignment_1_1_1.eContents().get(0);
		
		//IQLMemberCallExpression returns IQLExpression:
		//	IQLOtherExpressions (=> ({IQLArrayExpression.leftOperand=current} "[" expressions+=IQLExpression (","
		//	expressions+=IQLExpression)? "]") | => ({IQLMemberSelectionExpression.leftOperand=current} ".")
		//	sel=IQLMemberSelection)*;
		public ParserRule getRule() { return rule; }

		//IQLOtherExpressions (=> ({IQLArrayExpression.leftOperand=current} "[" expressions+=IQLExpression (","
		//expressions+=IQLExpression)? "]") | => ({IQLMemberSelectionExpression.leftOperand=current} ".")
		//sel=IQLMemberSelection)*
		public Group getGroup() { return cGroup; }

		//IQLOtherExpressions
		public RuleCall getIQLOtherExpressionsParserRuleCall_0() { return cIQLOtherExpressionsParserRuleCall_0; }

		//(=> ({IQLArrayExpression.leftOperand=current} "[" expressions+=IQLExpression ("," expressions+=IQLExpression)? "]") | =>
		//({IQLMemberSelectionExpression.leftOperand=current} ".") sel=IQLMemberSelection)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//=> ({IQLArrayExpression.leftOperand=current} "[" expressions+=IQLExpression ("," expressions+=IQLExpression)? "]")
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{IQLArrayExpression.leftOperand=current} "[" expressions+=IQLExpression ("," expressions+=IQLExpression)? "]"
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{IQLArrayExpression.leftOperand=current}
		public Action getIQLArrayExpressionLeftOperandAction_1_0_0_0() { return cIQLArrayExpressionLeftOperandAction_1_0_0_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1_0_0_1() { return cLeftSquareBracketKeyword_1_0_0_1; }

		//expressions+=IQLExpression
		public Assignment getExpressionsAssignment_1_0_0_2() { return cExpressionsAssignment_1_0_0_2; }

		//IQLExpression
		public RuleCall getExpressionsIQLExpressionParserRuleCall_1_0_0_2_0() { return cExpressionsIQLExpressionParserRuleCall_1_0_0_2_0; }

		//("," expressions+=IQLExpression)?
		public Group getGroup_1_0_0_3() { return cGroup_1_0_0_3; }

		//","
		public Keyword getCommaKeyword_1_0_0_3_0() { return cCommaKeyword_1_0_0_3_0; }

		//expressions+=IQLExpression
		public Assignment getExpressionsAssignment_1_0_0_3_1() { return cExpressionsAssignment_1_0_0_3_1; }

		//IQLExpression
		public RuleCall getExpressionsIQLExpressionParserRuleCall_1_0_0_3_1_0() { return cExpressionsIQLExpressionParserRuleCall_1_0_0_3_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_0_0_4() { return cRightSquareBracketKeyword_1_0_0_4; }

		//=> ({IQLMemberSelectionExpression.leftOperand=current} ".") sel=IQLMemberSelection
		public Group getGroup_1_1() { return cGroup_1_1; }

		//=> ({IQLMemberSelectionExpression.leftOperand=current} ".")
		public Group getGroup_1_1_0() { return cGroup_1_1_0; }

		//{IQLMemberSelectionExpression.leftOperand=current} "."
		public Group getGroup_1_1_0_0() { return cGroup_1_1_0_0; }

		//{IQLMemberSelectionExpression.leftOperand=current}
		public Action getIQLMemberSelectionExpressionLeftOperandAction_1_1_0_0_0() { return cIQLMemberSelectionExpressionLeftOperandAction_1_1_0_0_0; }

		//"."
		public Keyword getFullStopKeyword_1_1_0_0_1() { return cFullStopKeyword_1_1_0_0_1; }

		//sel=IQLMemberSelection
		public Assignment getSelAssignment_1_1_1() { return cSelAssignment_1_1_1; }

		//IQLMemberSelection
		public RuleCall getSelIQLMemberSelectionParserRuleCall_1_1_1_0() { return cSelIQLMemberSelectionParserRuleCall_1_1_1_0; }
	}

	public class IQLMemberSelectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IQLMemberSelection");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cMemberAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cMemberJvmMemberCrossReference_0_0 = (CrossReference)cMemberAssignment_0.eContents().get(0);
		private final RuleCall cMemberJvmMemberIDTerminalRuleCall_0_0_1 = (RuleCall)cMemberJvmMemberCrossReference_0_0.eContents().get(1);
		private final Assignment cArgsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cArgsIQLArgumentsListParserRuleCall_1_0 = (RuleCall)cArgsAssignment_1.eContents().get(0);
		
		//IQLMemberSelection:
		//	member=[jvm::JvmMember] args=IQLArgumentsList?;
		public ParserRule getRule() { return rule; }

		//member=[jvm::JvmMember] args=IQLArgumentsList?
		public Group getGroup() { return cGroup; }

		//member=[jvm::JvmMember]
		public Assignment getMemberAssignment_0() { return cMemberAssignment_0; }

		//[jvm::JvmMember]
		public CrossReference getMemberJvmMemberCrossReference_0_0() { return cMemberJvmMemberCrossReference_0_0; }

		//ID
		public RuleCall getMemberJvmMemberIDTerminalRuleCall_0_0_1() { return cMemberJvmMemberIDTerminalRuleCall_0_0_1; }

		//args=IQLArgumentsList?
		public Assignment getArgsAssignment_1() { return cArgsAssignment_1; }

		//IQLArgumentsList
		public RuleCall getArgsIQLArgumentsListParserRuleCall_1_0() { return cArgsIQLArgumentsListParserRuleCall_1_0; }
	}

	public class IQLOtherExpressionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IQLOtherExpressions");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cIQLJvmElementCallExpressionAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cElementAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final CrossReference cElementJvmIdentifiableElementCrossReference_0_1_0 = (CrossReference)cElementAssignment_0_1.eContents().get(0);
		private final RuleCall cElementJvmIdentifiableElementQualifiedNameParserRuleCall_0_1_0_1 = (RuleCall)cElementJvmIdentifiableElementCrossReference_0_1_0.eContents().get(1);
		private final Assignment cArgsAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cArgsIQLArgumentsListParserRuleCall_0_2_0 = (RuleCall)cArgsAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cIQLThisExpressionAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cThisKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cIQLSuperExpressionAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cSuperKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cIQLParenthesisExpressionAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cExprAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cExprIQLExpressionParserRuleCall_3_2_0 = (RuleCall)cExprAssignment_3_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cIQLNewExpressionAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Keyword cNewKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Alternatives cAlternatives_4_2 = (Alternatives)cGroup_4.eContents().get(2);
		private final Assignment cRefAssignment_4_2_0 = (Assignment)cAlternatives_4_2.eContents().get(0);
		private final RuleCall cRefIQLArrayTypeRefParserRuleCall_4_2_0_0 = (RuleCall)cRefAssignment_4_2_0.eContents().get(0);
		private final Group cGroup_4_2_1 = (Group)cAlternatives_4_2.eContents().get(1);
		private final Assignment cRefAssignment_4_2_1_0 = (Assignment)cGroup_4_2_1.eContents().get(0);
		private final RuleCall cRefIQLSimpleTypeRefParserRuleCall_4_2_1_0_0 = (RuleCall)cRefAssignment_4_2_1_0.eContents().get(0);
		private final Alternatives cAlternatives_4_2_1_1 = (Alternatives)cGroup_4_2_1.eContents().get(1);
		private final Group cGroup_4_2_1_1_0 = (Group)cAlternatives_4_2_1_1.eContents().get(0);
		private final Assignment cArgsListAssignment_4_2_1_1_0_0 = (Assignment)cGroup_4_2_1_1_0.eContents().get(0);
		private final RuleCall cArgsListIQLArgumentsListParserRuleCall_4_2_1_1_0_0_0 = (RuleCall)cArgsListAssignment_4_2_1_1_0_0.eContents().get(0);
		private final Assignment cArgsMapAssignment_4_2_1_1_0_1 = (Assignment)cGroup_4_2_1_1_0.eContents().get(1);
		private final RuleCall cArgsMapIQLArgumentsMapParserRuleCall_4_2_1_1_0_1_0 = (RuleCall)cArgsMapAssignment_4_2_1_1_0_1.eContents().get(0);
		private final Assignment cArgsMapAssignment_4_2_1_1_1 = (Assignment)cAlternatives_4_2_1_1.eContents().get(1);
		private final RuleCall cArgsMapIQLArgumentsMapParserRuleCall_4_2_1_1_1_0 = (RuleCall)cArgsMapAssignment_4_2_1_1_1.eContents().get(0);
		private final RuleCall cIQLLiteralExpressionParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//IQLOtherExpressions returns IQLExpression:
		//	{IQLJvmElementCallExpression} element=[jvm::JvmIdentifiableElement|QualifiedName] args=IQLArgumentsList? |
		//	{IQLThisExpression} "this" | {IQLSuperExpression} "super" | {IQLParenthesisExpression} "(" expr=IQLExpression ")" |
		//	{IQLNewExpression} "new" (ref=IQLArrayTypeRef | ref=IQLSimpleTypeRef (argsList=IQLArgumentsList
		//	argsMap=IQLArgumentsMap? | argsMap=IQLArgumentsMap)) | IQLLiteralExpression;
		public ParserRule getRule() { return rule; }

		//{IQLJvmElementCallExpression} element=[jvm::JvmIdentifiableElement|QualifiedName] args=IQLArgumentsList? |
		//{IQLThisExpression} "this" | {IQLSuperExpression} "super" | {IQLParenthesisExpression} "(" expr=IQLExpression ")" |
		//{IQLNewExpression} "new" (ref=IQLArrayTypeRef | ref=IQLSimpleTypeRef (argsList=IQLArgumentsList
		//argsMap=IQLArgumentsMap? | argsMap=IQLArgumentsMap)) | IQLLiteralExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//{IQLJvmElementCallExpression} element=[jvm::JvmIdentifiableElement|QualifiedName] args=IQLArgumentsList?
		public Group getGroup_0() { return cGroup_0; }

		//{IQLJvmElementCallExpression}
		public Action getIQLJvmElementCallExpressionAction_0_0() { return cIQLJvmElementCallExpressionAction_0_0; }

		//element=[jvm::JvmIdentifiableElement|QualifiedName]
		public Assignment getElementAssignment_0_1() { return cElementAssignment_0_1; }

		//[jvm::JvmIdentifiableElement|QualifiedName]
		public CrossReference getElementJvmIdentifiableElementCrossReference_0_1_0() { return cElementJvmIdentifiableElementCrossReference_0_1_0; }

		//QualifiedName
		public RuleCall getElementJvmIdentifiableElementQualifiedNameParserRuleCall_0_1_0_1() { return cElementJvmIdentifiableElementQualifiedNameParserRuleCall_0_1_0_1; }

		//args=IQLArgumentsList?
		public Assignment getArgsAssignment_0_2() { return cArgsAssignment_0_2; }

		//IQLArgumentsList
		public RuleCall getArgsIQLArgumentsListParserRuleCall_0_2_0() { return cArgsIQLArgumentsListParserRuleCall_0_2_0; }

		//{IQLThisExpression} "this"
		public Group getGroup_1() { return cGroup_1; }

		//{IQLThisExpression}
		public Action getIQLThisExpressionAction_1_0() { return cIQLThisExpressionAction_1_0; }

		//"this"
		public Keyword getThisKeyword_1_1() { return cThisKeyword_1_1; }

		//{IQLSuperExpression} "super"
		public Group getGroup_2() { return cGroup_2; }

		//{IQLSuperExpression}
		public Action getIQLSuperExpressionAction_2_0() { return cIQLSuperExpressionAction_2_0; }

		//"super"
		public Keyword getSuperKeyword_2_1() { return cSuperKeyword_2_1; }

		//{IQLParenthesisExpression} "(" expr=IQLExpression ")"
		public Group getGroup_3() { return cGroup_3; }

		//{IQLParenthesisExpression}
		public Action getIQLParenthesisExpressionAction_3_0() { return cIQLParenthesisExpressionAction_3_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_3_1() { return cLeftParenthesisKeyword_3_1; }

		//expr=IQLExpression
		public Assignment getExprAssignment_3_2() { return cExprAssignment_3_2; }

		//IQLExpression
		public RuleCall getExprIQLExpressionParserRuleCall_3_2_0() { return cExprIQLExpressionParserRuleCall_3_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3_3() { return cRightParenthesisKeyword_3_3; }

		//{IQLNewExpression} "new" (ref=IQLArrayTypeRef | ref=IQLSimpleTypeRef (argsList=IQLArgumentsList argsMap=IQLArgumentsMap?
		//| argsMap=IQLArgumentsMap))
		public Group getGroup_4() { return cGroup_4; }

		//{IQLNewExpression}
		public Action getIQLNewExpressionAction_4_0() { return cIQLNewExpressionAction_4_0; }

		//"new"
		public Keyword getNewKeyword_4_1() { return cNewKeyword_4_1; }

		//ref=IQLArrayTypeRef | ref=IQLSimpleTypeRef (argsList=IQLArgumentsList argsMap=IQLArgumentsMap? |
		//argsMap=IQLArgumentsMap)
		public Alternatives getAlternatives_4_2() { return cAlternatives_4_2; }

		//ref=IQLArrayTypeRef
		public Assignment getRefAssignment_4_2_0() { return cRefAssignment_4_2_0; }

		//IQLArrayTypeRef
		public RuleCall getRefIQLArrayTypeRefParserRuleCall_4_2_0_0() { return cRefIQLArrayTypeRefParserRuleCall_4_2_0_0; }

		//ref=IQLSimpleTypeRef (argsList=IQLArgumentsList argsMap=IQLArgumentsMap? | argsMap=IQLArgumentsMap)
		public Group getGroup_4_2_1() { return cGroup_4_2_1; }

		//ref=IQLSimpleTypeRef
		public Assignment getRefAssignment_4_2_1_0() { return cRefAssignment_4_2_1_0; }

		//IQLSimpleTypeRef
		public RuleCall getRefIQLSimpleTypeRefParserRuleCall_4_2_1_0_0() { return cRefIQLSimpleTypeRefParserRuleCall_4_2_1_0_0; }

		//argsList=IQLArgumentsList argsMap=IQLArgumentsMap? | argsMap=IQLArgumentsMap
		public Alternatives getAlternatives_4_2_1_1() { return cAlternatives_4_2_1_1; }

		//argsList=IQLArgumentsList argsMap=IQLArgumentsMap?
		public Group getGroup_4_2_1_1_0() { return cGroup_4_2_1_1_0; }

		//argsList=IQLArgumentsList
		public Assignment getArgsListAssignment_4_2_1_1_0_0() { return cArgsListAssignment_4_2_1_1_0_0; }

		//IQLArgumentsList
		public RuleCall getArgsListIQLArgumentsListParserRuleCall_4_2_1_1_0_0_0() { return cArgsListIQLArgumentsListParserRuleCall_4_2_1_1_0_0_0; }

		//argsMap=IQLArgumentsMap?
		public Assignment getArgsMapAssignment_4_2_1_1_0_1() { return cArgsMapAssignment_4_2_1_1_0_1; }

		//IQLArgumentsMap
		public RuleCall getArgsMapIQLArgumentsMapParserRuleCall_4_2_1_1_0_1_0() { return cArgsMapIQLArgumentsMapParserRuleCall_4_2_1_1_0_1_0; }

		//argsMap=IQLArgumentsMap
		public Assignment getArgsMapAssignment_4_2_1_1_1() { return cArgsMapAssignment_4_2_1_1_1; }

		//IQLArgumentsMap
		public RuleCall getArgsMapIQLArgumentsMapParserRuleCall_4_2_1_1_1_0() { return cArgsMapIQLArgumentsMapParserRuleCall_4_2_1_1_1_0; }

		//IQLLiteralExpression
		public RuleCall getIQLLiteralExpressionParserRuleCall_5() { return cIQLLiteralExpressionParserRuleCall_5; }
	}

	public class IQLLiteralExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IQLLiteralExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cIQLLiteralExpressionIntAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cValueAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_0_1_0 = (RuleCall)cValueAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cIQLLiteralExpressionDoubleAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValueDOUBLETerminalRuleCall_1_1_0 = (RuleCall)cValueAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cIQLLiteralExpressionStringAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cValueAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_2_1_0 = (RuleCall)cValueAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cIQLLiteralExpressionBooleanAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Assignment cValueAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cValueBOOLEANParserRuleCall_3_1_0 = (RuleCall)cValueAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cIQLLiteralExpressionRangeAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Assignment cValueAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cValueRANGETerminalRuleCall_4_1_0 = (RuleCall)cValueAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Action cIQLLiteralExpressionTypeAction_5_0 = (Action)cGroup_5.eContents().get(0);
		private final Keyword cClassKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cValueAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cValueJvmTypeReferenceParserRuleCall_5_2_0 = (RuleCall)cValueAssignment_5_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5_3 = (Keyword)cGroup_5.eContents().get(3);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Action cIQLLiteralExpressionNullAction_6_0 = (Action)cGroup_6.eContents().get(0);
		private final Keyword cNullKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final RuleCall cIQLLiteralExpressionListParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cIQLLiteralExpressionMapParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		
		//IQLLiteralExpression returns IQLExpression:
		//	{IQLLiteralExpressionInt} value=INT | {IQLLiteralExpressionDouble} value=DOUBLE | {IQLLiteralExpressionString}
		//	value=STRING | {IQLLiteralExpressionBoolean} value=BOOLEAN | {IQLLiteralExpressionRange} value=RANGE |
		//	{IQLLiteralExpressionType} "class(" value=JvmTypeReference ")" | {IQLLiteralExpressionNull} "null" | =>
		//	IQLLiteralExpressionList | IQLLiteralExpressionMap;
		public ParserRule getRule() { return rule; }

		//{IQLLiteralExpressionInt} value=INT | {IQLLiteralExpressionDouble} value=DOUBLE | {IQLLiteralExpressionString}
		//value=STRING | {IQLLiteralExpressionBoolean} value=BOOLEAN | {IQLLiteralExpressionRange} value=RANGE |
		//{IQLLiteralExpressionType} "class(" value=JvmTypeReference ")" | {IQLLiteralExpressionNull} "null" | =>
		//IQLLiteralExpressionList | IQLLiteralExpressionMap
		public Alternatives getAlternatives() { return cAlternatives; }

		//{IQLLiteralExpressionInt} value=INT
		public Group getGroup_0() { return cGroup_0; }

		//{IQLLiteralExpressionInt}
		public Action getIQLLiteralExpressionIntAction_0_0() { return cIQLLiteralExpressionIntAction_0_0; }

		//value=INT
		public Assignment getValueAssignment_0_1() { return cValueAssignment_0_1; }

		//INT
		public RuleCall getValueINTTerminalRuleCall_0_1_0() { return cValueINTTerminalRuleCall_0_1_0; }

		//{IQLLiteralExpressionDouble} value=DOUBLE
		public Group getGroup_1() { return cGroup_1; }

		//{IQLLiteralExpressionDouble}
		public Action getIQLLiteralExpressionDoubleAction_1_0() { return cIQLLiteralExpressionDoubleAction_1_0; }

		//value=DOUBLE
		public Assignment getValueAssignment_1_1() { return cValueAssignment_1_1; }

		//DOUBLE
		public RuleCall getValueDOUBLETerminalRuleCall_1_1_0() { return cValueDOUBLETerminalRuleCall_1_1_0; }

		//{IQLLiteralExpressionString} value=STRING
		public Group getGroup_2() { return cGroup_2; }

		//{IQLLiteralExpressionString}
		public Action getIQLLiteralExpressionStringAction_2_0() { return cIQLLiteralExpressionStringAction_2_0; }

		//value=STRING
		public Assignment getValueAssignment_2_1() { return cValueAssignment_2_1; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_2_1_0() { return cValueSTRINGTerminalRuleCall_2_1_0; }

		//{IQLLiteralExpressionBoolean} value=BOOLEAN
		public Group getGroup_3() { return cGroup_3; }

		//{IQLLiteralExpressionBoolean}
		public Action getIQLLiteralExpressionBooleanAction_3_0() { return cIQLLiteralExpressionBooleanAction_3_0; }

		//value=BOOLEAN
		public Assignment getValueAssignment_3_1() { return cValueAssignment_3_1; }

		//BOOLEAN
		public RuleCall getValueBOOLEANParserRuleCall_3_1_0() { return cValueBOOLEANParserRuleCall_3_1_0; }

		//{IQLLiteralExpressionRange} value=RANGE
		public Group getGroup_4() { return cGroup_4; }

		//{IQLLiteralExpressionRange}
		public Action getIQLLiteralExpressionRangeAction_4_0() { return cIQLLiteralExpressionRangeAction_4_0; }

		//value=RANGE
		public Assignment getValueAssignment_4_1() { return cValueAssignment_4_1; }

		//RANGE
		public RuleCall getValueRANGETerminalRuleCall_4_1_0() { return cValueRANGETerminalRuleCall_4_1_0; }

		//{IQLLiteralExpressionType} "class(" value=JvmTypeReference ")"
		public Group getGroup_5() { return cGroup_5; }

		//{IQLLiteralExpressionType}
		public Action getIQLLiteralExpressionTypeAction_5_0() { return cIQLLiteralExpressionTypeAction_5_0; }

		//"class("
		public Keyword getClassKeyword_5_1() { return cClassKeyword_5_1; }

		//value=JvmTypeReference
		public Assignment getValueAssignment_5_2() { return cValueAssignment_5_2; }

		//JvmTypeReference
		public RuleCall getValueJvmTypeReferenceParserRuleCall_5_2_0() { return cValueJvmTypeReferenceParserRuleCall_5_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5_3() { return cRightParenthesisKeyword_5_3; }

		//{IQLLiteralExpressionNull} "null"
		public Group getGroup_6() { return cGroup_6; }

		//{IQLLiteralExpressionNull}
		public Action getIQLLiteralExpressionNullAction_6_0() { return cIQLLiteralExpressionNullAction_6_0; }

		//"null"
		public Keyword getNullKeyword_6_1() { return cNullKeyword_6_1; }

		//=> IQLLiteralExpressionList
		public RuleCall getIQLLiteralExpressionListParserRuleCall_7() { return cIQLLiteralExpressionListParserRuleCall_7; }

		//IQLLiteralExpressionMap
		public RuleCall getIQLLiteralExpressionMapParserRuleCall_8() { return cIQLLiteralExpressionMapParserRuleCall_8; }
	}

	public class IQLLiteralExpressionListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IQLLiteralExpressionList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIQLLiteralExpressionListAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cElementsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cElementsIQLExpressionParserRuleCall_2_0_0 = (RuleCall)cElementsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cElementsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cElementsIQLExpressionParserRuleCall_2_1_1_0 = (RuleCall)cElementsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//IQLLiteralExpressionList returns IQLExpression:
		//	{IQLLiteralExpressionList} "[" (elements+=IQLExpression ("," elements+=IQLExpression)*)? "]";
		public ParserRule getRule() { return rule; }

		//{IQLLiteralExpressionList} "[" (elements+=IQLExpression ("," elements+=IQLExpression)*)? "]"
		public Group getGroup() { return cGroup; }

		//{IQLLiteralExpressionList}
		public Action getIQLLiteralExpressionListAction_0() { return cIQLLiteralExpressionListAction_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }

		//(elements+=IQLExpression ("," elements+=IQLExpression)*)?
		public Group getGroup_2() { return cGroup_2; }

		//elements+=IQLExpression
		public Assignment getElementsAssignment_2_0() { return cElementsAssignment_2_0; }

		//IQLExpression
		public RuleCall getElementsIQLExpressionParserRuleCall_2_0_0() { return cElementsIQLExpressionParserRuleCall_2_0_0; }

		//("," elements+=IQLExpression)*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }

		//elements+=IQLExpression
		public Assignment getElementsAssignment_2_1_1() { return cElementsAssignment_2_1_1; }

		//IQLExpression
		public RuleCall getElementsIQLExpressionParserRuleCall_2_1_1_0() { return cElementsIQLExpressionParserRuleCall_2_1_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}

	public class IQLLiteralExpressionMapElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IQLLiteralExpressionMap");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIQLLiteralExpressionMapAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cElementsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cElementsIQLLiteralExpressionMapKeyValueParserRuleCall_2_0_0 = (RuleCall)cElementsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cElementsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cElementsIQLLiteralExpressionMapKeyValueParserRuleCall_2_1_1_0 = (RuleCall)cElementsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//IQLLiteralExpressionMap returns IQLExpression:
		//	{IQLLiteralExpressionMap} "[" (elements+=IQLLiteralExpressionMapKeyValue (","
		//	elements+=IQLLiteralExpressionMapKeyValue)*)? "]";
		public ParserRule getRule() { return rule; }

		//{IQLLiteralExpressionMap} "[" (elements+=IQLLiteralExpressionMapKeyValue (","
		//elements+=IQLLiteralExpressionMapKeyValue)*)? "]"
		public Group getGroup() { return cGroup; }

		//{IQLLiteralExpressionMap}
		public Action getIQLLiteralExpressionMapAction_0() { return cIQLLiteralExpressionMapAction_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }

		//(elements+=IQLLiteralExpressionMapKeyValue ("," elements+=IQLLiteralExpressionMapKeyValue)*)?
		public Group getGroup_2() { return cGroup_2; }

		//elements+=IQLLiteralExpressionMapKeyValue
		public Assignment getElementsAssignment_2_0() { return cElementsAssignment_2_0; }

		//IQLLiteralExpressionMapKeyValue
		public RuleCall getElementsIQLLiteralExpressionMapKeyValueParserRuleCall_2_0_0() { return cElementsIQLLiteralExpressionMapKeyValueParserRuleCall_2_0_0; }

		//("," elements+=IQLLiteralExpressionMapKeyValue)*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }

		//elements+=IQLLiteralExpressionMapKeyValue
		public Assignment getElementsAssignment_2_1_1() { return cElementsAssignment_2_1_1; }

		//IQLLiteralExpressionMapKeyValue
		public RuleCall getElementsIQLLiteralExpressionMapKeyValueParserRuleCall_2_1_1_0() { return cElementsIQLLiteralExpressionMapKeyValueParserRuleCall_2_1_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}

	public class IQLLiteralExpressionMapKeyValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IQLLiteralExpressionMapKeyValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cKeyIQLExpressionParserRuleCall_0_0 = (RuleCall)cKeyAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueIQLExpressionParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//IQLLiteralExpressionMapKeyValue:
		//	key=IQLExpression ":" value=IQLExpression;
		public ParserRule getRule() { return rule; }

		//key=IQLExpression ":" value=IQLExpression
		public Group getGroup() { return cGroup; }

		//key=IQLExpression
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }

		//IQLExpression
		public RuleCall getKeyIQLExpressionParserRuleCall_0_0() { return cKeyIQLExpressionParserRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//value=IQLExpression
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//IQLExpression
		public RuleCall getValueIQLExpressionParserRuleCall_2_0() { return cValueIQLExpressionParserRuleCall_2_0; }
	}

	public class QualifiedNameWithWildcardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedNameWithWildcard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cQualifiedNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cColonColonAsteriskKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		///////////////////////////////////////////////
		///////////////////////////////////////////////
		///////////////////////////////////////////////
		//QualifiedNameWithWildcard:
		//	QualifiedName "::*"?;
		public ParserRule getRule() { return rule; }

		//QualifiedName "::*"?
		public Group getGroup() { return cGroup; }

		//QualifiedName
		public RuleCall getQualifiedNameParserRuleCall_0() { return cQualifiedNameParserRuleCall_0; }

		//"::*"?
		public Keyword getColonColonAsteriskKeyword_1() { return cColonColonAsteriskKeyword_1; }
	}

	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cColonColonKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//	ID ("::" ID)*;
		public ParserRule getRule() { return rule; }

		//ID ("::" ID)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//("::" ID)*
		public Group getGroup_1() { return cGroup_1; }

		//"::"
		public Keyword getColonColonKeyword_1_0() { return cColonColonKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}

	public class IQLJavaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IQLJava");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDollarSignAsteriskKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTextAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTextIQLJavaTextParserRuleCall_1_0 = (RuleCall)cTextAssignment_1.eContents().get(0);
		private final Keyword cAsteriskDollarSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//IQLJava hidden(SL_COMMENT, ML_COMMENT):
		//	"$*" text=IQLJavaText "*$";
		public ParserRule getRule() { return rule; }

		//"$*" text=IQLJavaText "*$"
		public Group getGroup() { return cGroup; }

		//"$*"
		public Keyword getDollarSignAsteriskKeyword_0() { return cDollarSignAsteriskKeyword_0; }

		//text=IQLJavaText
		public Assignment getTextAssignment_1() { return cTextAssignment_1; }

		//IQLJavaText
		public RuleCall getTextIQLJavaTextParserRuleCall_1_0() { return cTextIQLJavaTextParserRuleCall_1_0; }

		//"*$"
		public Keyword getAsteriskDollarSignKeyword_2() { return cAsteriskDollarSignKeyword_2; }
	}

	public class IQLJavaTextElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IQLJavaText");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIQL_JAVA_KEYWORDSParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cWSTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cBOOLEANParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cDOUBLETerminalRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cSTRINGTerminalRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cINTTerminalRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cANY_OTHERTerminalRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final Keyword cPlusSignKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cPlusSignEqualsSignKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Keyword cHyphenMinusKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		private final Keyword cHyphenMinusEqualsSignKeyword_11 = (Keyword)cAlternatives.eContents().get(11);
		private final Keyword cAsteriskKeyword_12 = (Keyword)cAlternatives.eContents().get(12);
		private final Keyword cAsteriskEqualsSignKeyword_13 = (Keyword)cAlternatives.eContents().get(13);
		private final Keyword cSolidusKeyword_14 = (Keyword)cAlternatives.eContents().get(14);
		private final Keyword cSolidusEqualsSignKeyword_15 = (Keyword)cAlternatives.eContents().get(15);
		private final Keyword cPercentSignKeyword_16 = (Keyword)cAlternatives.eContents().get(16);
		private final Keyword cPercentSignEqualsSignKeyword_17 = (Keyword)cAlternatives.eContents().get(17);
		private final Keyword cPlusSignPlusSignKeyword_18 = (Keyword)cAlternatives.eContents().get(18);
		private final Keyword cHyphenMinusHyphenMinusKeyword_19 = (Keyword)cAlternatives.eContents().get(19);
		private final Keyword cGreaterThanSignKeyword_20 = (Keyword)cAlternatives.eContents().get(20);
		private final Keyword cGreaterThanSignEqualsSignKeyword_21 = (Keyword)cAlternatives.eContents().get(21);
		private final Keyword cLessThanSignKeyword_22 = (Keyword)cAlternatives.eContents().get(22);
		private final Keyword cLessThanSignEqualsSignKeyword_23 = (Keyword)cAlternatives.eContents().get(23);
		private final Keyword cExclamationMarkKeyword_24 = (Keyword)cAlternatives.eContents().get(24);
		private final Keyword cExclamationMarkEqualsSignKeyword_25 = (Keyword)cAlternatives.eContents().get(25);
		private final Keyword cAmpersandAmpersandKeyword_26 = (Keyword)cAlternatives.eContents().get(26);
		private final Keyword cVerticalLineVerticalLineKeyword_27 = (Keyword)cAlternatives.eContents().get(27);
		private final Keyword cEqualsSignEqualsSignKeyword_28 = (Keyword)cAlternatives.eContents().get(28);
		private final Keyword cEqualsSignKeyword_29 = (Keyword)cAlternatives.eContents().get(29);
		private final Keyword cTildeKeyword_30 = (Keyword)cAlternatives.eContents().get(30);
		private final Keyword cQuestionMarkColonKeyword_31 = (Keyword)cAlternatives.eContents().get(31);
		private final Keyword cVerticalLineKeyword_32 = (Keyword)cAlternatives.eContents().get(32);
		private final Keyword cVerticalLineEqualsSignKeyword_33 = (Keyword)cAlternatives.eContents().get(33);
		private final Keyword cCircumflexAccentKeyword_34 = (Keyword)cAlternatives.eContents().get(34);
		private final Keyword cCircumflexAccentEqualsSignKeyword_35 = (Keyword)cAlternatives.eContents().get(35);
		private final Keyword cAmpersandKeyword_36 = (Keyword)cAlternatives.eContents().get(36);
		private final Keyword cAmpersandEqualsSignKeyword_37 = (Keyword)cAlternatives.eContents().get(37);
		private final Keyword cGreaterThanSignGreaterThanSignKeyword_38 = (Keyword)cAlternatives.eContents().get(38);
		private final Keyword cGreaterThanSignGreaterThanSignEqualsSignKeyword_39 = (Keyword)cAlternatives.eContents().get(39);
		private final Keyword cLessThanSignLessThanSignKeyword_40 = (Keyword)cAlternatives.eContents().get(40);
		private final Keyword cLessThanSignLessThanSignEqualsSignKeyword_41 = (Keyword)cAlternatives.eContents().get(41);
		private final Keyword cGreaterThanSignGreaterThanSignGreaterThanSignKeyword_42 = (Keyword)cAlternatives.eContents().get(42);
		private final Keyword cGreaterThanSignGreaterThanSignGreaterThanSignEqualsSignKeyword_43 = (Keyword)cAlternatives.eContents().get(43);
		private final Keyword cLeftSquareBracketKeyword_44 = (Keyword)cAlternatives.eContents().get(44);
		private final Keyword cRightSquareBracketKeyword_45 = (Keyword)cAlternatives.eContents().get(45);
		private final Keyword cLeftCurlyBracketKeyword_46 = (Keyword)cAlternatives.eContents().get(46);
		private final Keyword cRightCurlyBracketKeyword_47 = (Keyword)cAlternatives.eContents().get(47);
		private final Keyword cLeftParenthesisKeyword_48 = (Keyword)cAlternatives.eContents().get(48);
		private final Keyword cRightParenthesisKeyword_49 = (Keyword)cAlternatives.eContents().get(49);
		private final Keyword cFullStopKeyword_50 = (Keyword)cAlternatives.eContents().get(50);
		private final Keyword cColonKeyword_51 = (Keyword)cAlternatives.eContents().get(51);
		private final Keyword cSemicolonKeyword_52 = (Keyword)cAlternatives.eContents().get(52);
		private final Keyword cCommaKeyword_53 = (Keyword)cAlternatives.eContents().get(53);
		private final Keyword cNullKeyword_54 = (Keyword)cAlternatives.eContents().get(54);
		
		//IQLJavaText:
		//	(IQL_JAVA_KEYWORDS | WS | ID | BOOLEAN | DOUBLE | STRING | INT | ANY_OTHER | "+" | "+=" | "-" | "-=" | "*" | "*=" |
		//	"/" | "/=" | "%" | "%=" | "++" | "--" | ">" | ">=" | "<" | "<=" | "!" | "!=" | "&&" | "||" | "==" | "=" | "~" | "?:"
		//	| "|" | "|=" | "^" | "^=" | "&" | "&=" | ">>" | ">>=" | "<<" | "<<=" | ">>>" | ">>>=" | "[" | "]" | "{" | "}" | "(" |
		//	")" | "." | ":" | ";" | "," | "null")*;
		public ParserRule getRule() { return rule; }

		//(IQL_JAVA_KEYWORDS | WS | ID | BOOLEAN | DOUBLE | STRING | INT | ANY_OTHER | "+" | "+=" | "-" | "-=" | "*" | "*=" | "/"
		//| "/=" | "%" | "%=" | "++" | "--" | ">" | ">=" | "<" | "<=" | "!" | "!=" | "&&" | "||" | "==" | "=" | "~" | "?:" | "|"
		//| "|=" | "^" | "^=" | "&" | "&=" | ">>" | ">>=" | "<<" | "<<=" | ">>>" | ">>>=" | "[" | "]" | "{" | "}" | "(" | ")" |
		//"." | ":" | ";" | "," | "null")*
		public Alternatives getAlternatives() { return cAlternatives; }

		//IQL_JAVA_KEYWORDS
		public RuleCall getIQL_JAVA_KEYWORDSParserRuleCall_0() { return cIQL_JAVA_KEYWORDSParserRuleCall_0; }

		//WS
		public RuleCall getWSTerminalRuleCall_1() { return cWSTerminalRuleCall_1; }

		//ID
		public RuleCall getIDTerminalRuleCall_2() { return cIDTerminalRuleCall_2; }

		//BOOLEAN
		public RuleCall getBOOLEANParserRuleCall_3() { return cBOOLEANParserRuleCall_3; }

		//DOUBLE
		public RuleCall getDOUBLETerminalRuleCall_4() { return cDOUBLETerminalRuleCall_4; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_5() { return cSTRINGTerminalRuleCall_5; }

		//INT
		public RuleCall getINTTerminalRuleCall_6() { return cINTTerminalRuleCall_6; }

		//ANY_OTHER
		public RuleCall getANY_OTHERTerminalRuleCall_7() { return cANY_OTHERTerminalRuleCall_7; }

		//"+"
		public Keyword getPlusSignKeyword_8() { return cPlusSignKeyword_8; }

		//"+="
		public Keyword getPlusSignEqualsSignKeyword_9() { return cPlusSignEqualsSignKeyword_9; }

		//"-"
		public Keyword getHyphenMinusKeyword_10() { return cHyphenMinusKeyword_10; }

		//"-="
		public Keyword getHyphenMinusEqualsSignKeyword_11() { return cHyphenMinusEqualsSignKeyword_11; }

		//"*"
		public Keyword getAsteriskKeyword_12() { return cAsteriskKeyword_12; }

		//"*="
		public Keyword getAsteriskEqualsSignKeyword_13() { return cAsteriskEqualsSignKeyword_13; }

		//"/"
		public Keyword getSolidusKeyword_14() { return cSolidusKeyword_14; }

		//"/="
		public Keyword getSolidusEqualsSignKeyword_15() { return cSolidusEqualsSignKeyword_15; }

		//"%"
		public Keyword getPercentSignKeyword_16() { return cPercentSignKeyword_16; }

		//"%="
		public Keyword getPercentSignEqualsSignKeyword_17() { return cPercentSignEqualsSignKeyword_17; }

		//"++"
		public Keyword getPlusSignPlusSignKeyword_18() { return cPlusSignPlusSignKeyword_18; }

		//"--"
		public Keyword getHyphenMinusHyphenMinusKeyword_19() { return cHyphenMinusHyphenMinusKeyword_19; }

		//">"
		public Keyword getGreaterThanSignKeyword_20() { return cGreaterThanSignKeyword_20; }

		//">="
		public Keyword getGreaterThanSignEqualsSignKeyword_21() { return cGreaterThanSignEqualsSignKeyword_21; }

		//"<"
		public Keyword getLessThanSignKeyword_22() { return cLessThanSignKeyword_22; }

		//"<="
		public Keyword getLessThanSignEqualsSignKeyword_23() { return cLessThanSignEqualsSignKeyword_23; }

		//"!"
		public Keyword getExclamationMarkKeyword_24() { return cExclamationMarkKeyword_24; }

		//"!="
		public Keyword getExclamationMarkEqualsSignKeyword_25() { return cExclamationMarkEqualsSignKeyword_25; }

		//"&&"
		public Keyword getAmpersandAmpersandKeyword_26() { return cAmpersandAmpersandKeyword_26; }

		//"||"
		public Keyword getVerticalLineVerticalLineKeyword_27() { return cVerticalLineVerticalLineKeyword_27; }

		//"=="
		public Keyword getEqualsSignEqualsSignKeyword_28() { return cEqualsSignEqualsSignKeyword_28; }

		//"="
		public Keyword getEqualsSignKeyword_29() { return cEqualsSignKeyword_29; }

		//"~"
		public Keyword getTildeKeyword_30() { return cTildeKeyword_30; }

		//"?:"
		public Keyword getQuestionMarkColonKeyword_31() { return cQuestionMarkColonKeyword_31; }

		//"|"
		public Keyword getVerticalLineKeyword_32() { return cVerticalLineKeyword_32; }

		//"|="
		public Keyword getVerticalLineEqualsSignKeyword_33() { return cVerticalLineEqualsSignKeyword_33; }

		//"^"
		public Keyword getCircumflexAccentKeyword_34() { return cCircumflexAccentKeyword_34; }

		//"^="
		public Keyword getCircumflexAccentEqualsSignKeyword_35() { return cCircumflexAccentEqualsSignKeyword_35; }

		//"&"
		public Keyword getAmpersandKeyword_36() { return cAmpersandKeyword_36; }

		//"&="
		public Keyword getAmpersandEqualsSignKeyword_37() { return cAmpersandEqualsSignKeyword_37; }

		//">>"
		public Keyword getGreaterThanSignGreaterThanSignKeyword_38() { return cGreaterThanSignGreaterThanSignKeyword_38; }

		//">>="
		public Keyword getGreaterThanSignGreaterThanSignEqualsSignKeyword_39() { return cGreaterThanSignGreaterThanSignEqualsSignKeyword_39; }

		//"<<"
		public Keyword getLessThanSignLessThanSignKeyword_40() { return cLessThanSignLessThanSignKeyword_40; }

		//"<<="
		public Keyword getLessThanSignLessThanSignEqualsSignKeyword_41() { return cLessThanSignLessThanSignEqualsSignKeyword_41; }

		//">>>"
		public Keyword getGreaterThanSignGreaterThanSignGreaterThanSignKeyword_42() { return cGreaterThanSignGreaterThanSignGreaterThanSignKeyword_42; }

		//">>>="
		public Keyword getGreaterThanSignGreaterThanSignGreaterThanSignEqualsSignKeyword_43() { return cGreaterThanSignGreaterThanSignGreaterThanSignEqualsSignKeyword_43; }

		//"["
		public Keyword getLeftSquareBracketKeyword_44() { return cLeftSquareBracketKeyword_44; }

		//"]"
		public Keyword getRightSquareBracketKeyword_45() { return cRightSquareBracketKeyword_45; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_46() { return cLeftCurlyBracketKeyword_46; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_47() { return cRightCurlyBracketKeyword_47; }

		//"("
		public Keyword getLeftParenthesisKeyword_48() { return cLeftParenthesisKeyword_48; }

		//")"
		public Keyword getRightParenthesisKeyword_49() { return cRightParenthesisKeyword_49; }

		//"."
		public Keyword getFullStopKeyword_50() { return cFullStopKeyword_50; }

		//":"
		public Keyword getColonKeyword_51() { return cColonKeyword_51; }

		//";"
		public Keyword getSemicolonKeyword_52() { return cSemicolonKeyword_52; }

		//","
		public Keyword getCommaKeyword_53() { return cCommaKeyword_53; }

		//"null"
		public Keyword getNullKeyword_54() { return cNullKeyword_54; }
	}

	public class IQL_JAVA_KEYWORDSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IQL_JAVA_KEYWORDS");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cBreakKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cCaseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cClassKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cContinueKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cDefaultKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cDoKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cElseKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cExtendsKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cForKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cIfKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Keyword cImplementsKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		private final Keyword cInstanceofKeyword_11 = (Keyword)cAlternatives.eContents().get(11);
		private final Keyword cInterfaceKeyword_12 = (Keyword)cAlternatives.eContents().get(12);
		private final Keyword cNewKeyword_13 = (Keyword)cAlternatives.eContents().get(13);
		private final Keyword cPackageKeyword_14 = (Keyword)cAlternatives.eContents().get(14);
		private final Keyword cReturnKeyword_15 = (Keyword)cAlternatives.eContents().get(15);
		private final Keyword cSuperKeyword_16 = (Keyword)cAlternatives.eContents().get(16);
		private final Keyword cSwitchKeyword_17 = (Keyword)cAlternatives.eContents().get(17);
		private final Keyword cThisKeyword_18 = (Keyword)cAlternatives.eContents().get(18);
		private final Keyword cWhileKeyword_19 = (Keyword)cAlternatives.eContents().get(19);
		private final Keyword cAbstractKeyword_20 = (Keyword)cAlternatives.eContents().get(20);
		private final Keyword cAssertKeyword_21 = (Keyword)cAlternatives.eContents().get(21);
		private final Keyword cCatchKeyword_22 = (Keyword)cAlternatives.eContents().get(22);
		private final Keyword cConstKeyword_23 = (Keyword)cAlternatives.eContents().get(23);
		private final Keyword cEnumKeyword_24 = (Keyword)cAlternatives.eContents().get(24);
		private final Keyword cFinalKeyword_25 = (Keyword)cAlternatives.eContents().get(25);
		private final Keyword cFinallyKeyword_26 = (Keyword)cAlternatives.eContents().get(26);
		private final Keyword cGotoKeyword_27 = (Keyword)cAlternatives.eContents().get(27);
		private final Keyword cImportKeyword_28 = (Keyword)cAlternatives.eContents().get(28);
		private final Keyword cNativeKeyword_29 = (Keyword)cAlternatives.eContents().get(29);
		private final Keyword cPrivateKeyword_30 = (Keyword)cAlternatives.eContents().get(30);
		private final Keyword cProtectedKeyword_31 = (Keyword)cAlternatives.eContents().get(31);
		private final Keyword cPublicKeyword_32 = (Keyword)cAlternatives.eContents().get(32);
		private final Keyword cStaticKeyword_33 = (Keyword)cAlternatives.eContents().get(33);
		private final Keyword cSynchronizedKeyword_34 = (Keyword)cAlternatives.eContents().get(34);
		private final Keyword cThrowKeyword_35 = (Keyword)cAlternatives.eContents().get(35);
		private final Keyword cThrowsKeyword_36 = (Keyword)cAlternatives.eContents().get(36);
		private final Keyword cTransientKeyword_37 = (Keyword)cAlternatives.eContents().get(37);
		private final Keyword cTryKeyword_38 = (Keyword)cAlternatives.eContents().get(38);
		private final Keyword cVolatileKeyword_39 = (Keyword)cAlternatives.eContents().get(39);
		private final Keyword cStrictfpKeyword_40 = (Keyword)cAlternatives.eContents().get(40);
		
		//IQL_JAVA_KEYWORDS:
		//	"break" | "case" | "class" | "continue" | "default" | "do" | "else" | "extends" | "for" | "if" | "implements" |
		//	"instanceof" | "interface" | "new" | "package" | "return" | "super" | "switch" | "this" | "while" | "abstract" |
		//	"assert" | "catch" | "const" | "enum" | "final" | "finally" | "goto" | "import" | "native" | "private" | "protected"
		//	| "public" | "static" | "synchronized" | "throw" | "throws" | "transient" | "try" | "volatile" | "strictfp";
		public ParserRule getRule() { return rule; }

		//"break" | "case" | "class" | "continue" | "default" | "do" | "else" | "extends" | "for" | "if" | "implements" |
		//"instanceof" | "interface" | "new" | "package" | "return" | "super" | "switch" | "this" | "while" | "abstract" |
		//"assert" | "catch" | "const" | "enum" | "final" | "finally" | "goto" | "import" | "native" | "private" | "protected" |
		//"public" | "static" | "synchronized" | "throw" | "throws" | "transient" | "try" | "volatile" | "strictfp"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"break"
		public Keyword getBreakKeyword_0() { return cBreakKeyword_0; }

		//"case"
		public Keyword getCaseKeyword_1() { return cCaseKeyword_1; }

		//"class"
		public Keyword getClassKeyword_2() { return cClassKeyword_2; }

		//"continue"
		public Keyword getContinueKeyword_3() { return cContinueKeyword_3; }

		//"default"
		public Keyword getDefaultKeyword_4() { return cDefaultKeyword_4; }

		//"do"
		public Keyword getDoKeyword_5() { return cDoKeyword_5; }

		//"else"
		public Keyword getElseKeyword_6() { return cElseKeyword_6; }

		//"extends"
		public Keyword getExtendsKeyword_7() { return cExtendsKeyword_7; }

		//"for"
		public Keyword getForKeyword_8() { return cForKeyword_8; }

		//"if"
		public Keyword getIfKeyword_9() { return cIfKeyword_9; }

		//"implements"
		public Keyword getImplementsKeyword_10() { return cImplementsKeyword_10; }

		//"instanceof"
		public Keyword getInstanceofKeyword_11() { return cInstanceofKeyword_11; }

		//"interface"
		public Keyword getInterfaceKeyword_12() { return cInterfaceKeyword_12; }

		//"new"
		public Keyword getNewKeyword_13() { return cNewKeyword_13; }

		//"package"
		public Keyword getPackageKeyword_14() { return cPackageKeyword_14; }

		//"return"
		public Keyword getReturnKeyword_15() { return cReturnKeyword_15; }

		//"super"
		public Keyword getSuperKeyword_16() { return cSuperKeyword_16; }

		//"switch"
		public Keyword getSwitchKeyword_17() { return cSwitchKeyword_17; }

		//"this"
		public Keyword getThisKeyword_18() { return cThisKeyword_18; }

		//"while"
		public Keyword getWhileKeyword_19() { return cWhileKeyword_19; }

		//"abstract"
		public Keyword getAbstractKeyword_20() { return cAbstractKeyword_20; }

		//"assert"
		public Keyword getAssertKeyword_21() { return cAssertKeyword_21; }

		//"catch"
		public Keyword getCatchKeyword_22() { return cCatchKeyword_22; }

		//"const"
		public Keyword getConstKeyword_23() { return cConstKeyword_23; }

		//"enum"
		public Keyword getEnumKeyword_24() { return cEnumKeyword_24; }

		//"final"
		public Keyword getFinalKeyword_25() { return cFinalKeyword_25; }

		//"finally"
		public Keyword getFinallyKeyword_26() { return cFinallyKeyword_26; }

		//"goto"
		public Keyword getGotoKeyword_27() { return cGotoKeyword_27; }

		//"import"
		public Keyword getImportKeyword_28() { return cImportKeyword_28; }

		//"native"
		public Keyword getNativeKeyword_29() { return cNativeKeyword_29; }

		//"private"
		public Keyword getPrivateKeyword_30() { return cPrivateKeyword_30; }

		//"protected"
		public Keyword getProtectedKeyword_31() { return cProtectedKeyword_31; }

		//"public"
		public Keyword getPublicKeyword_32() { return cPublicKeyword_32; }

		//"static"
		public Keyword getStaticKeyword_33() { return cStaticKeyword_33; }

		//"synchronized"
		public Keyword getSynchronizedKeyword_34() { return cSynchronizedKeyword_34; }

		//"throw"
		public Keyword getThrowKeyword_35() { return cThrowKeyword_35; }

		//"throws"
		public Keyword getThrowsKeyword_36() { return cThrowsKeyword_36; }

		//"transient"
		public Keyword getTransientKeyword_37() { return cTransientKeyword_37; }

		//"try"
		public Keyword getTryKeyword_38() { return cTryKeyword_38; }

		//"volatile"
		public Keyword getVolatileKeyword_39() { return cVolatileKeyword_39; }

		//"strictfp"
		public Keyword getStrictfpKeyword_40() { return cStrictfpKeyword_40; }
	}

	public class BOOLEANElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BOOLEAN");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//BOOLEAN returns ecore::EBoolean:
		//	"true" | "false";
		public ParserRule getRule() { return rule; }

		//"true" | "false"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"true"
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }

		//"false"
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}
	
	
	private final IQLModelElements pIQLModel;
	private final IQLModelElementElements pIQLModelElement;
	private final IQLNamespaceElements pIQLNamespace;
	private final IQLClassElements pIQLClass;
	private final IQLInterfaceElements pIQLInterface;
	private final IQLJavaMetadataElements pIQLJavaMetadata;
	private final IQLAttributeElements pIQLAttribute;
	private final JvmTypeReferenceElements pJvmTypeReference;
	private final IQLSimpleTypeRefElements pIQLSimpleTypeRef;
	private final IQLArrayTypeRefElements pIQLArrayTypeRef;
	private final IQLArrayTypeElements pIQLArrayType;
	private final ArrayBracketsElements pArrayBrackets;
	private final JvmFormalParameterElements pJvmFormalParameter;
	private final IQLMethodElements pIQLMethod;
	private final IQLMethodDeclarationElements pIQLMethodDeclaration;
	private final IQLJavaMemberElements pIQLJavaMember;
	private final IQLMetadataListElements pIQLMetadataList;
	private final IQLMetadataElements pIQLMetadata;
	private final IQLMetadataValueElements pIQLMetadataValue;
	private final IQLMetadataValueSingleElements pIQLMetadataValueSingle;
	private final IQLMetadataValueListElements pIQLMetadataValueList;
	private final IQLMetadataValueMapElements pIQLMetadataValueMap;
	private final IQLMetadataValueMapElementElements pIQLMetadataValueMapElement;
	private final IQLVariableDeclarationElements pIQLVariableDeclaration;
	private final IQLVariableInitializationElements pIQLVariableInitialization;
	private final IQLArgumentsListElements pIQLArgumentsList;
	private final IQLArgumentsMapElements pIQLArgumentsMap;
	private final IQLArgumentsMapKeyValueElements pIQLArgumentsMapKeyValue;
	private final IQLStatementElements pIQLStatement;
	private final IQLStatementBlockElements pIQLStatementBlock;
	private final IQLJavaStatementElements pIQLJavaStatement;
	private final IQLIfStatementElements pIQLIfStatement;
	private final IQLWhileStatementElements pIQLWhileStatement;
	private final IQLDoWhileStatementElements pIQLDoWhileStatement;
	private final IQLForStatementElements pIQLForStatement;
	private final IQLForEachStatementElements pIQLForEachStatement;
	private final IQLSwitchStatementElements pIQLSwitchStatement;
	private final IQLCasePartElements pIQLCasePart;
	private final IQLExpressionStatementElements pIQLExpressionStatement;
	private final IQLVariableStatementElements pIQLVariableStatement;
	private final IQLConstructorCallStatementElements pIQLConstructorCallStatement;
	private final IQLBreakStatementElements pIQLBreakStatement;
	private final IQLContinueStatementElements pIQLContinueStatement;
	private final IQLReturnStatementElements pIQLReturnStatement;
	private final IQLExpressionElements pIQLExpression;
	private final IQLAssignmentExpressionElements pIQLAssignmentExpression;
	private final OpAssignElements pOpAssign;
	private final IQLLogicalOrExpressionElements pIQLLogicalOrExpression;
	private final OpLogicalOrElements pOpLogicalOr;
	private final IQLLogicalAndExpressionElements pIQLLogicalAndExpression;
	private final OpLogicalAndElements pOpLogicalAnd;
	private final IQLEqualityExpressionElements pIQLEqualityExpression;
	private final OpEqualityElements pOpEquality;
	private final IQLRelationalExpressionElements pIQLRelationalExpression;
	private final OpRelationalElements pOpRelational;
	private final IQLAdditiveExpressionElements pIQLAdditiveExpression;
	private final OpAddElements pOpAdd;
	private final IQLMultiplicativeExpressionElements pIQLMultiplicativeExpression;
	private final OpMultiElements pOpMulti;
	private final IQLUnaryExpressionElements pIQLUnaryExpression;
	private final OpUnaryPlusMinusElements pOpUnaryPlusMinus;
	private final OpUnaryBooleanNotElements pOpUnaryBooleanNot;
	private final OpPrefixElements pOpPrefix;
	private final OpPostfixElements pOpPostfix;
	private final IQLMemberCallExpressionElements pIQLMemberCallExpression;
	private final IQLMemberSelectionElements pIQLMemberSelection;
	private final IQLOtherExpressionsElements pIQLOtherExpressions;
	private final IQLLiteralExpressionElements pIQLLiteralExpression;
	private final IQLLiteralExpressionListElements pIQLLiteralExpressionList;
	private final IQLLiteralExpressionMapElements pIQLLiteralExpressionMap;
	private final IQLLiteralExpressionMapKeyValueElements pIQLLiteralExpressionMapKeyValue;
	private final QualifiedNameWithWildcardElements pQualifiedNameWithWildcard;
	private final QualifiedNameElements pQualifiedName;
	private final TerminalRule tRANGE;
	private final IQLJavaElements pIQLJava;
	private final IQLJavaTextElements pIQLJavaText;
	private final IQL_JAVA_KEYWORDSElements pIQL_JAVA_KEYWORDS;
	private final BOOLEANElements pBOOLEAN;
	private final TerminalRule tINT;
	private final TerminalRule tDOUBLE;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public BasicIQLGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pIQLModel = new IQLModelElements();
		this.pIQLModelElement = new IQLModelElementElements();
		this.pIQLNamespace = new IQLNamespaceElements();
		this.pIQLClass = new IQLClassElements();
		this.pIQLInterface = new IQLInterfaceElements();
		this.pIQLJavaMetadata = new IQLJavaMetadataElements();
		this.pIQLAttribute = new IQLAttributeElements();
		this.pJvmTypeReference = new JvmTypeReferenceElements();
		this.pIQLSimpleTypeRef = new IQLSimpleTypeRefElements();
		this.pIQLArrayTypeRef = new IQLArrayTypeRefElements();
		this.pIQLArrayType = new IQLArrayTypeElements();
		this.pArrayBrackets = new ArrayBracketsElements();
		this.pJvmFormalParameter = new JvmFormalParameterElements();
		this.pIQLMethod = new IQLMethodElements();
		this.pIQLMethodDeclaration = new IQLMethodDeclarationElements();
		this.pIQLJavaMember = new IQLJavaMemberElements();
		this.pIQLMetadataList = new IQLMetadataListElements();
		this.pIQLMetadata = new IQLMetadataElements();
		this.pIQLMetadataValue = new IQLMetadataValueElements();
		this.pIQLMetadataValueSingle = new IQLMetadataValueSingleElements();
		this.pIQLMetadataValueList = new IQLMetadataValueListElements();
		this.pIQLMetadataValueMap = new IQLMetadataValueMapElements();
		this.pIQLMetadataValueMapElement = new IQLMetadataValueMapElementElements();
		this.pIQLVariableDeclaration = new IQLVariableDeclarationElements();
		this.pIQLVariableInitialization = new IQLVariableInitializationElements();
		this.pIQLArgumentsList = new IQLArgumentsListElements();
		this.pIQLArgumentsMap = new IQLArgumentsMapElements();
		this.pIQLArgumentsMapKeyValue = new IQLArgumentsMapKeyValueElements();
		this.pIQLStatement = new IQLStatementElements();
		this.pIQLStatementBlock = new IQLStatementBlockElements();
		this.pIQLJavaStatement = new IQLJavaStatementElements();
		this.pIQLIfStatement = new IQLIfStatementElements();
		this.pIQLWhileStatement = new IQLWhileStatementElements();
		this.pIQLDoWhileStatement = new IQLDoWhileStatementElements();
		this.pIQLForStatement = new IQLForStatementElements();
		this.pIQLForEachStatement = new IQLForEachStatementElements();
		this.pIQLSwitchStatement = new IQLSwitchStatementElements();
		this.pIQLCasePart = new IQLCasePartElements();
		this.pIQLExpressionStatement = new IQLExpressionStatementElements();
		this.pIQLVariableStatement = new IQLVariableStatementElements();
		this.pIQLConstructorCallStatement = new IQLConstructorCallStatementElements();
		this.pIQLBreakStatement = new IQLBreakStatementElements();
		this.pIQLContinueStatement = new IQLContinueStatementElements();
		this.pIQLReturnStatement = new IQLReturnStatementElements();
		this.pIQLExpression = new IQLExpressionElements();
		this.pIQLAssignmentExpression = new IQLAssignmentExpressionElements();
		this.pOpAssign = new OpAssignElements();
		this.pIQLLogicalOrExpression = new IQLLogicalOrExpressionElements();
		this.pOpLogicalOr = new OpLogicalOrElements();
		this.pIQLLogicalAndExpression = new IQLLogicalAndExpressionElements();
		this.pOpLogicalAnd = new OpLogicalAndElements();
		this.pIQLEqualityExpression = new IQLEqualityExpressionElements();
		this.pOpEquality = new OpEqualityElements();
		this.pIQLRelationalExpression = new IQLRelationalExpressionElements();
		this.pOpRelational = new OpRelationalElements();
		this.pIQLAdditiveExpression = new IQLAdditiveExpressionElements();
		this.pOpAdd = new OpAddElements();
		this.pIQLMultiplicativeExpression = new IQLMultiplicativeExpressionElements();
		this.pOpMulti = new OpMultiElements();
		this.pIQLUnaryExpression = new IQLUnaryExpressionElements();
		this.pOpUnaryPlusMinus = new OpUnaryPlusMinusElements();
		this.pOpUnaryBooleanNot = new OpUnaryBooleanNotElements();
		this.pOpPrefix = new OpPrefixElements();
		this.pOpPostfix = new OpPostfixElements();
		this.pIQLMemberCallExpression = new IQLMemberCallExpressionElements();
		this.pIQLMemberSelection = new IQLMemberSelectionElements();
		this.pIQLOtherExpressions = new IQLOtherExpressionsElements();
		this.pIQLLiteralExpression = new IQLLiteralExpressionElements();
		this.pIQLLiteralExpressionList = new IQLLiteralExpressionListElements();
		this.pIQLLiteralExpressionMap = new IQLLiteralExpressionMapElements();
		this.pIQLLiteralExpressionMapKeyValue = new IQLLiteralExpressionMapKeyValueElements();
		this.pQualifiedNameWithWildcard = new QualifiedNameWithWildcardElements();
		this.pQualifiedName = new QualifiedNameElements();
		this.tRANGE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "RANGE");
		this.pIQLJava = new IQLJavaElements();
		this.pIQLJavaText = new IQLJavaTextElements();
		this.pIQL_JAVA_KEYWORDS = new IQL_JAVA_KEYWORDSElements();
		this.pBOOLEAN = new BOOLEANElements();
		this.tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "INT");
		this.tDOUBLE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "DOUBLE");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("de.uniol.inf.is.odysseus.iql.basic.BasicIQL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//IQLModel:
	//	("namespace" name=QualifiedName ";")? namespaces+=IQLNamespace* elements+=IQLModelElement*;
	public IQLModelElements getIQLModelAccess() {
		return pIQLModel;
	}
	
	public ParserRule getIQLModelRule() {
		return getIQLModelAccess().getRule();
	}

	//IQLModelElement:
	//	javametadata+=IQLJavaMetadata* inner=(IQLClass | IQLInterface);
	public IQLModelElementElements getIQLModelElementAccess() {
		return pIQLModelElement;
	}
	
	public ParserRule getIQLModelElementRule() {
		return getIQLModelElementAccess().getRule();
	}

	//IQLNamespace:
	//	"use" static?="static"? importedNamespace=QualifiedNameWithWildcard ";";
	public IQLNamespaceElements getIQLNamespaceAccess() {
		return pIQLNamespace;
	}
	
	public ParserRule getIQLNamespaceRule() {
		return getIQLNamespaceAccess().getRule();
	}

	//IQLClass returns jvm::JvmGenericType:
	//	{IQLClass} "class" simpleName=ID ("extends" extendedClass=JvmTypeReference)? ("implements"
	//	extendedInterfaces+=JvmTypeReference ("," extendedInterfaces+=JvmTypeReference)*)? "{" members+=(IQLAttribute |
	//	IQLMethod | IQLJavaMember)* "}";
	public IQLClassElements getIQLClassAccess() {
		return pIQLClass;
	}
	
	public ParserRule getIQLClassRule() {
		return getIQLClassAccess().getRule();
	}

	//IQLInterface returns jvm::JvmGenericType:
	//	{IQLInterface} "interface" simpleName=ID ("extends" extendedInterfaces+=JvmTypeReference (","
	//	extendedInterfaces+=JvmTypeReference)?)? "{" members+=(IQLMethodDeclaration | IQLJavaMember)* "}";
	public IQLInterfaceElements getIQLInterfaceAccess() {
		return pIQLInterface;
	}
	
	public ParserRule getIQLInterfaceRule() {
		return getIQLInterfaceAccess().getRule();
	}

	//IQLJavaMetadata:
	//	java=IQLJava;
	public IQLJavaMetadataElements getIQLJavaMetadataAccess() {
		return pIQLJavaMetadata;
	}
	
	public ParserRule getIQLJavaMetadataRule() {
		return getIQLJavaMetadataAccess().getRule();
	}

	///////////////////////////////////////////////
	///////////////////////////////////////////////
	///////////////////////////////////////////////
	//IQLAttribute returns jvm::JvmField:
	//	{IQLAttribute} type=JvmTypeReference simpleName=ID init=IQLVariableInitialization? ";";
	public IQLAttributeElements getIQLAttributeAccess() {
		return pIQLAttribute;
	}
	
	public ParserRule getIQLAttributeRule() {
		return getIQLAttributeAccess().getRule();
	}

	//JvmTypeReference returns jvm::JvmTypeReference:
	//	IQLSimpleTypeRef | IQLArrayTypeRef;
	public JvmTypeReferenceElements getJvmTypeReferenceAccess() {
		return pJvmTypeReference;
	}
	
	public ParserRule getJvmTypeReferenceRule() {
		return getJvmTypeReferenceAccess().getRule();
	}

	//IQLSimpleTypeRef returns jvm::JvmTypeReference:
	//	{IQLSimpleTypeRef} type=[jvm::JvmType|QualifiedName];
	public IQLSimpleTypeRefElements getIQLSimpleTypeRefAccess() {
		return pIQLSimpleTypeRef;
	}
	
	public ParserRule getIQLSimpleTypeRefRule() {
		return getIQLSimpleTypeRefAccess().getRule();
	}

	//IQLArrayTypeRef returns jvm::JvmTypeReference:
	//	{IQLArrayTypeRef} type=IQLArrayType;
	public IQLArrayTypeRefElements getIQLArrayTypeRefAccess() {
		return pIQLArrayTypeRef;
	}
	
	public ParserRule getIQLArrayTypeRefRule() {
		return getIQLArrayTypeRefAccess().getRule();
	}

	//IQLArrayType returns jvm::JvmType:
	//	{IQLArrayType} componentType=[jvm::JvmType|QualifiedName] dimensions+=ArrayBrackets+;
	public IQLArrayTypeElements getIQLArrayTypeAccess() {
		return pIQLArrayType;
	}
	
	public ParserRule getIQLArrayTypeRule() {
		return getIQLArrayTypeAccess().getRule();
	}

	//ArrayBrackets:
	//	"[" "]";
	public ArrayBracketsElements getArrayBracketsAccess() {
		return pArrayBrackets;
	}
	
	public ParserRule getArrayBracketsRule() {
		return getArrayBracketsAccess().getRule();
	}

	//JvmFormalParameter returns jvm::JvmFormalParameter:
	//	parameterType=JvmTypeReference name=ID;
	public JvmFormalParameterElements getJvmFormalParameterAccess() {
		return pJvmFormalParameter;
	}
	
	public ParserRule getJvmFormalParameterRule() {
		return getJvmFormalParameterAccess().getRule();
	}

	//IQLMethod returns jvm::JvmOperation:
	//	{IQLMethod} override?="override"? simpleName=ID ("(" (parameters+=JvmFormalParameter (","
	//	parameters+=JvmFormalParameter)*)? ")")? (":" returnType=JvmTypeReference)? body=IQLStatementBlock;
	public IQLMethodElements getIQLMethodAccess() {
		return pIQLMethod;
	}
	
	public ParserRule getIQLMethodRule() {
		return getIQLMethodAccess().getRule();
	}

	//IQLMethodDeclaration returns jvm::JvmOperation:
	//	{IQLMethodDeclaration} simpleName=ID "(" (parameters+=JvmFormalParameter ("," parameters+=JvmFormalParameter)*)? ")"
	//	(":" returnType=JvmTypeReference)? ";";
	public IQLMethodDeclarationElements getIQLMethodDeclarationAccess() {
		return pIQLMethodDeclaration;
	}
	
	public ParserRule getIQLMethodDeclarationRule() {
		return getIQLMethodDeclarationAccess().getRule();
	}

	//IQLJavaMember returns jvm::JvmMember:
	//	{IQLJavaMember} java=IQLJava;
	public IQLJavaMemberElements getIQLJavaMemberAccess() {
		return pIQLJavaMember;
	}
	
	public ParserRule getIQLJavaMemberRule() {
		return getIQLJavaMemberAccess().getRule();
	}

	///////////////////////////////////////////////
	///////////////////////////////////////////////
	///////////////////////////////////////////////
	//IQLMetadataList:
	//	elements+=IQLMetadata ("," elements+=IQLMetadata)*;
	public IQLMetadataListElements getIQLMetadataListAccess() {
		return pIQLMetadataList;
	}
	
	public ParserRule getIQLMetadataListRule() {
		return getIQLMetadataListAccess().getRule();
	}

	//IQLMetadata:
	//	name=ID ("=" value=IQLMetadataValue)?;
	public IQLMetadataElements getIQLMetadataAccess() {
		return pIQLMetadata;
	}
	
	public ParserRule getIQLMetadataRule() {
		return getIQLMetadataAccess().getRule();
	}

	//IQLMetadataValue:
	//	IQLMetadataValueSingle | IQLMetadataValueList | IQLMetadataValueMap;
	public IQLMetadataValueElements getIQLMetadataValueAccess() {
		return pIQLMetadataValue;
	}
	
	public ParserRule getIQLMetadataValueRule() {
		return getIQLMetadataValueAccess().getRule();
	}

	//IQLMetadataValueSingle returns IQLMetadataValue:
	//	{IQLMetadataValueSingleInt} value=INT | {IQLMetadataValueSingleDouble} value=DOUBLE | {IQLMetadataValueSingleString}
	//	value=STRING | {IQLMetadataValueSingleBoolean} value=BOOLEAN | {IQLMetadataValueSingleTypeRef} value=JvmTypeReference
	//	| {IQLMetadataValueSingleNull} "null";
	public IQLMetadataValueSingleElements getIQLMetadataValueSingleAccess() {
		return pIQLMetadataValueSingle;
	}
	
	public ParserRule getIQLMetadataValueSingleRule() {
		return getIQLMetadataValueSingleAccess().getRule();
	}

	//IQLMetadataValueList returns IQLMetadataValue:
	//	{IQLMetadataValueList} "[" (elements+=IQLMetadataValue ("," elements+=IQLMetadataValue)*)? "]";
	public IQLMetadataValueListElements getIQLMetadataValueListAccess() {
		return pIQLMetadataValueList;
	}
	
	public ParserRule getIQLMetadataValueListRule() {
		return getIQLMetadataValueListAccess().getRule();
	}

	//IQLMetadataValueMap returns IQLMetadataValue:
	//	{IQLMetadataValueMap} "{" (elements+=IQLMetadataValueMapElement ("," elements+=IQLMetadataValueMapElement)*)? "}";
	public IQLMetadataValueMapElements getIQLMetadataValueMapAccess() {
		return pIQLMetadataValueMap;
	}
	
	public ParserRule getIQLMetadataValueMapRule() {
		return getIQLMetadataValueMapAccess().getRule();
	}

	//IQLMetadataValueMapElement:
	//	key=IQLMetadataValue "=" value=IQLMetadataValue;
	public IQLMetadataValueMapElementElements getIQLMetadataValueMapElementAccess() {
		return pIQLMetadataValueMapElement;
	}
	
	public ParserRule getIQLMetadataValueMapElementRule() {
		return getIQLMetadataValueMapElementAccess().getRule();
	}

	///////////////////////////////////////////////
	///////////////////////////////////////////////
	///////////////////////////////////////////////
	//IQLVariableDeclaration returns jvm::JvmIdentifiableElement:
	//	{IQLVariableDeclaration} ref=JvmTypeReference name=ID;
	public IQLVariableDeclarationElements getIQLVariableDeclarationAccess() {
		return pIQLVariableDeclaration;
	}
	
	public ParserRule getIQLVariableDeclarationRule() {
		return getIQLVariableDeclarationAccess().getRule();
	}

	//IQLVariableInitialization:
	//	{IQLVariableInitialization} (argsList=IQLArgumentsList argsMap=IQLArgumentsMap?) | argsMap=IQLArgumentsMap | "="
	//	value=IQLExpression;
	public IQLVariableInitializationElements getIQLVariableInitializationAccess() {
		return pIQLVariableInitialization;
	}
	
	public ParserRule getIQLVariableInitializationRule() {
		return getIQLVariableInitializationAccess().getRule();
	}

	//IQLArgumentsList:
	//	{IQLArgumentsList} "(" (elements+=IQLExpression ("," elements+=IQLExpression)*)? ")";
	public IQLArgumentsListElements getIQLArgumentsListAccess() {
		return pIQLArgumentsList;
	}
	
	public ParserRule getIQLArgumentsListRule() {
		return getIQLArgumentsListAccess().getRule();
	}

	//IQLArgumentsMap:
	//	{IQLArgumentsMap} "{" (elements+=IQLArgumentsMapKeyValue ("," elements+=IQLArgumentsMapKeyValue)*)? "}";
	public IQLArgumentsMapElements getIQLArgumentsMapAccess() {
		return pIQLArgumentsMap;
	}
	
	public ParserRule getIQLArgumentsMapRule() {
		return getIQLArgumentsMapAccess().getRule();
	}

	//IQLArgumentsMapKeyValue:
	//	key=[jvm::JvmIdentifiableElement|QualifiedName] "=" value=IQLExpression;
	public IQLArgumentsMapKeyValueElements getIQLArgumentsMapKeyValueAccess() {
		return pIQLArgumentsMapKeyValue;
	}
	
	public ParserRule getIQLArgumentsMapKeyValueRule() {
		return getIQLArgumentsMapKeyValueAccess().getRule();
	}

	///////////////////////////////////////////////
	///////////////////////////////////////////////
	///////////////////////////////////////////////
	//IQLStatement:
	//	IQLStatementBlock | IQLExpressionStatement | IQLIfStatement | IQLWhileStatement | IQLDoWhileStatement |
	//	IQLForStatement | IQLForEachStatement | IQLSwitchStatement | IQLVariableStatement | IQLBreakStatement |
	//	IQLContinueStatement | IQLReturnStatement | IQLConstructorCallStatement | IQLJavaStatement;
	public IQLStatementElements getIQLStatementAccess() {
		return pIQLStatement;
	}
	
	public ParserRule getIQLStatementRule() {
		return getIQLStatementAccess().getRule();
	}

	//IQLStatementBlock returns IQLStatement:
	//	{IQLStatementBlock} "{" statements+=IQLStatement* "}";
	public IQLStatementBlockElements getIQLStatementBlockAccess() {
		return pIQLStatementBlock;
	}
	
	public ParserRule getIQLStatementBlockRule() {
		return getIQLStatementBlockAccess().getRule();
	}

	//IQLJavaStatement returns IQLStatement:
	//	{IQLJavaStatement} java=IQLJava;
	public IQLJavaStatementElements getIQLJavaStatementAccess() {
		return pIQLJavaStatement;
	}
	
	public ParserRule getIQLJavaStatementRule() {
		return getIQLJavaStatementAccess().getRule();
	}

	//IQLIfStatement returns IQLStatement:
	//	{IQLIfStatement} "if" "(" predicate=IQLExpression ")" thenBody=IQLStatement ("else" elseBody=IQLStatement)?;
	public IQLIfStatementElements getIQLIfStatementAccess() {
		return pIQLIfStatement;
	}
	
	public ParserRule getIQLIfStatementRule() {
		return getIQLIfStatementAccess().getRule();
	}

	//IQLWhileStatement returns IQLStatement:
	//	{IQLWhileStatement} "while" "(" predicate=IQLExpression ")" body=IQLStatement;
	public IQLWhileStatementElements getIQLWhileStatementAccess() {
		return pIQLWhileStatement;
	}
	
	public ParserRule getIQLWhileStatementRule() {
		return getIQLWhileStatementAccess().getRule();
	}

	//IQLDoWhileStatement returns IQLStatement:
	//	{IQLDoWhileStatement} "do" body=IQLStatement "while" "(" predicate=IQLExpression ")" ";";
	public IQLDoWhileStatementElements getIQLDoWhileStatementAccess() {
		return pIQLDoWhileStatement;
	}
	
	public ParserRule getIQLDoWhileStatementRule() {
		return getIQLDoWhileStatementAccess().getRule();
	}

	//IQLForStatement returns IQLStatement:
	//	{IQLForStatement} "for" "(" var=IQLVariableDeclaration "=" value=IQLExpression ";" predicate=IQLExpression ";"
	//	updateExpr=IQLExpression ")" body=IQLStatement;
	public IQLForStatementElements getIQLForStatementAccess() {
		return pIQLForStatement;
	}
	
	public ParserRule getIQLForStatementRule() {
		return getIQLForStatementAccess().getRule();
	}

	//IQLForEachStatement returns IQLStatement:
	//	{IQLForEachStatement} "for" "(" var=IQLVariableDeclaration ":" forExpression=IQLExpression ")" body=IQLStatement;
	public IQLForEachStatementElements getIQLForEachStatementAccess() {
		return pIQLForEachStatement;
	}
	
	public ParserRule getIQLForEachStatementRule() {
		return getIQLForEachStatementAccess().getRule();
	}

	//IQLSwitchStatement returns IQLStatement:
	//	{IQLSwitchStatement} "switch" "(" expr=IQLExpression ")" "{" cases+=IQLCasePart* ("default" ":"
	//	statements+=IQLStatement*)? "}";
	public IQLSwitchStatementElements getIQLSwitchStatementAccess() {
		return pIQLSwitchStatement;
	}
	
	public ParserRule getIQLSwitchStatementRule() {
		return getIQLSwitchStatementAccess().getRule();
	}

	//IQLCasePart:
	//	{IQLCasePart} "case" expr=IQLLiteralExpression ":" statements+=IQLStatement*;
	public IQLCasePartElements getIQLCasePartAccess() {
		return pIQLCasePart;
	}
	
	public ParserRule getIQLCasePartRule() {
		return getIQLCasePartAccess().getRule();
	}

	//IQLExpressionStatement returns IQLStatement:
	//	{IQLExpressionStatement} expression=IQLExpression ";";
	public IQLExpressionStatementElements getIQLExpressionStatementAccess() {
		return pIQLExpressionStatement;
	}
	
	public ParserRule getIQLExpressionStatementRule() {
		return getIQLExpressionStatementAccess().getRule();
	}

	//IQLVariableStatement returns IQLStatement:
	//	{IQLVariableStatement} var=IQLVariableDeclaration init=IQLVariableInitialization ";";
	public IQLVariableStatementElements getIQLVariableStatementAccess() {
		return pIQLVariableStatement;
	}
	
	public ParserRule getIQLVariableStatementRule() {
		return getIQLVariableStatementAccess().getRule();
	}

	//IQLConstructorCallStatement returns IQLStatement:
	//	{IQLConstructorCallStatement} (this?="this" | super?="super") args=IQLArgumentsList ";";
	public IQLConstructorCallStatementElements getIQLConstructorCallStatementAccess() {
		return pIQLConstructorCallStatement;
	}
	
	public ParserRule getIQLConstructorCallStatementRule() {
		return getIQLConstructorCallStatementAccess().getRule();
	}

	//IQLBreakStatement returns IQLStatement:
	//	{IQLBreakStatement} "break" ";";
	public IQLBreakStatementElements getIQLBreakStatementAccess() {
		return pIQLBreakStatement;
	}
	
	public ParserRule getIQLBreakStatementRule() {
		return getIQLBreakStatementAccess().getRule();
	}

	//IQLContinueStatement returns IQLStatement:
	//	{IQLContinueStatement} "continue" ";";
	public IQLContinueStatementElements getIQLContinueStatementAccess() {
		return pIQLContinueStatement;
	}
	
	public ParserRule getIQLContinueStatementRule() {
		return getIQLContinueStatementAccess().getRule();
	}

	//IQLReturnStatement returns IQLStatement:
	//	{IQLReturnStatement} "return" expression=IQLExpression? ";";
	public IQLReturnStatementElements getIQLReturnStatementAccess() {
		return pIQLReturnStatement;
	}
	
	public ParserRule getIQLReturnStatementRule() {
		return getIQLReturnStatementAccess().getRule();
	}

	///////////////////////////////////////////////
	///////////////////////////////////////////////
	///////////////////////////////////////////////
	//IQLExpression:
	//	IQLAssignmentExpression;
	public IQLExpressionElements getIQLExpressionAccess() {
		return pIQLExpression;
	}
	
	public ParserRule getIQLExpressionRule() {
		return getIQLExpressionAccess().getRule();
	}

	//IQLAssignmentExpression returns IQLExpression:
	//	IQLLogicalOrExpression (=> ({IQLAssignmentExpression.leftOperand=current} op=OpAssign)
	//	rightOperand=IQLAssignmentExpression)?;
	public IQLAssignmentExpressionElements getIQLAssignmentExpressionAccess() {
		return pIQLAssignmentExpression;
	}
	
	public ParserRule getIQLAssignmentExpressionRule() {
		return getIQLAssignmentExpressionAccess().getRule();
	}

	//OpAssign:
	//	"=" | "+=" | "-=" | "*=" | "/=" | "%=";
	public OpAssignElements getOpAssignAccess() {
		return pOpAssign;
	}
	
	public ParserRule getOpAssignRule() {
		return getOpAssignAccess().getRule();
	}

	//IQLLogicalOrExpression returns IQLExpression:
	//	IQLLogicalAndExpression (=> ({IQLLogicalOrExpression.leftOperand=current} op=OpLogicalOr)
	//	rightOperand=IQLLogicalAndExpression)*;
	public IQLLogicalOrExpressionElements getIQLLogicalOrExpressionAccess() {
		return pIQLLogicalOrExpression;
	}
	
	public ParserRule getIQLLogicalOrExpressionRule() {
		return getIQLLogicalOrExpressionAccess().getRule();
	}

	//OpLogicalOr:
	//	"||";
	public OpLogicalOrElements getOpLogicalOrAccess() {
		return pOpLogicalOr;
	}
	
	public ParserRule getOpLogicalOrRule() {
		return getOpLogicalOrAccess().getRule();
	}

	//IQLLogicalAndExpression returns IQLExpression:
	//	IQLEqualityExpression (=> ({IQLLogicalAndExpression.leftOperand=current} op=OpLogicalAnd)
	//	rightOperand=IQLEqualityExpression)*;
	public IQLLogicalAndExpressionElements getIQLLogicalAndExpressionAccess() {
		return pIQLLogicalAndExpression;
	}
	
	public ParserRule getIQLLogicalAndExpressionRule() {
		return getIQLLogicalAndExpressionAccess().getRule();
	}

	//OpLogicalAnd:
	//	"&&";
	public OpLogicalAndElements getOpLogicalAndAccess() {
		return pOpLogicalAnd;
	}
	
	public ParserRule getOpLogicalAndRule() {
		return getOpLogicalAndAccess().getRule();
	}

	//IQLEqualityExpression returns IQLExpression:
	//	IQLRelationalExpression (=> ({IQLEqualityExpression.leftOperand=current} op=OpEquality)
	//	rightOperand=IQLRelationalExpression)*;
	public IQLEqualityExpressionElements getIQLEqualityExpressionAccess() {
		return pIQLEqualityExpression;
	}
	
	public ParserRule getIQLEqualityExpressionRule() {
		return getIQLEqualityExpressionAccess().getRule();
	}

	//OpEquality:
	//	"==" | "!=";
	public OpEqualityElements getOpEqualityAccess() {
		return pOpEquality;
	}
	
	public ParserRule getOpEqualityRule() {
		return getOpEqualityAccess().getRule();
	}

	//IQLRelationalExpression returns IQLExpression:
	//	IQLAdditiveExpression (=> ({IQLInstanceOfExpression.leftOperand=current} "instanceof") targetRef=JvmTypeReference |
	//	=> ({IQLRelationalExpression.leftOperand=current} op=OpRelational) rightOperand=IQLAdditiveExpression)*;
	public IQLRelationalExpressionElements getIQLRelationalExpressionAccess() {
		return pIQLRelationalExpression;
	}
	
	public ParserRule getIQLRelationalExpressionRule() {
		return getIQLRelationalExpressionAccess().getRule();
	}

	//OpRelational:
	//	">" | ">=" | "<" | "<=";
	public OpRelationalElements getOpRelationalAccess() {
		return pOpRelational;
	}
	
	public ParserRule getOpRelationalRule() {
		return getOpRelationalAccess().getRule();
	}

	//IQLAdditiveExpression returns IQLExpression:
	//	IQLMultiplicativeExpression (=> ({IQLAdditiveExpression.leftOperand=current} op=OpAdd)
	//	rightOperand=IQLMultiplicativeExpression)*;
	public IQLAdditiveExpressionElements getIQLAdditiveExpressionAccess() {
		return pIQLAdditiveExpression;
	}
	
	public ParserRule getIQLAdditiveExpressionRule() {
		return getIQLAdditiveExpressionAccess().getRule();
	}

	//OpAdd:
	//	"+" | "-";
	public OpAddElements getOpAddAccess() {
		return pOpAdd;
	}
	
	public ParserRule getOpAddRule() {
		return getOpAddAccess().getRule();
	}

	//IQLMultiplicativeExpression returns IQLExpression:
	//	IQLUnaryExpression (=> ({IQLMultiplicativeExpression.leftOperand=current} op=OpMulti)
	//	rightOperand=IQLUnaryExpression)*;
	public IQLMultiplicativeExpressionElements getIQLMultiplicativeExpressionAccess() {
		return pIQLMultiplicativeExpression;
	}
	
	public ParserRule getIQLMultiplicativeExpressionRule() {
		return getIQLMultiplicativeExpressionAccess().getRule();
	}

	//OpMulti:
	//	"*" | "/" | "%";
	public OpMultiElements getOpMultiAccess() {
		return pOpMulti;
	}
	
	public ParserRule getOpMultiRule() {
		return getOpMultiAccess().getRule();
	}

	//IQLUnaryExpression returns IQLExpression:
	//	({IQLPlusMinusExpression} op=OpUnaryPlusMinus) operand=IQLMemberCallExpression | ({IQLBooleanNotExpression}
	//	op=OpUnaryBooleanNot) operand=IQLMemberCallExpression | ({IQLPrefixExpression} op=OpPrefix)
	//	operand=IQLMemberCallExpression | => ({IQLTypeCastExpression} "(" targetRef=JvmTypeReference ")")
	//	operand=IQLMemberCallExpression | IQLMemberCallExpression => ({IQLPostfixExpression.operand=current} op=OpPostfix)?;
	public IQLUnaryExpressionElements getIQLUnaryExpressionAccess() {
		return pIQLUnaryExpression;
	}
	
	public ParserRule getIQLUnaryExpressionRule() {
		return getIQLUnaryExpressionAccess().getRule();
	}

	//OpUnaryPlusMinus:
	//	"-" | "+";
	public OpUnaryPlusMinusElements getOpUnaryPlusMinusAccess() {
		return pOpUnaryPlusMinus;
	}
	
	public ParserRule getOpUnaryPlusMinusRule() {
		return getOpUnaryPlusMinusAccess().getRule();
	}

	//OpUnaryBooleanNot:
	//	"!";
	public OpUnaryBooleanNotElements getOpUnaryBooleanNotAccess() {
		return pOpUnaryBooleanNot;
	}
	
	public ParserRule getOpUnaryBooleanNotRule() {
		return getOpUnaryBooleanNotAccess().getRule();
	}

	//OpPrefix:
	//	"++" | "--";
	public OpPrefixElements getOpPrefixAccess() {
		return pOpPrefix;
	}
	
	public ParserRule getOpPrefixRule() {
		return getOpPrefixAccess().getRule();
	}

	//OpPostfix:
	//	"++" | "--";
	public OpPostfixElements getOpPostfixAccess() {
		return pOpPostfix;
	}
	
	public ParserRule getOpPostfixRule() {
		return getOpPostfixAccess().getRule();
	}

	//IQLMemberCallExpression returns IQLExpression:
	//	IQLOtherExpressions (=> ({IQLArrayExpression.leftOperand=current} "[" expressions+=IQLExpression (","
	//	expressions+=IQLExpression)? "]") | => ({IQLMemberSelectionExpression.leftOperand=current} ".")
	//	sel=IQLMemberSelection)*;
	public IQLMemberCallExpressionElements getIQLMemberCallExpressionAccess() {
		return pIQLMemberCallExpression;
	}
	
	public ParserRule getIQLMemberCallExpressionRule() {
		return getIQLMemberCallExpressionAccess().getRule();
	}

	//IQLMemberSelection:
	//	member=[jvm::JvmMember] args=IQLArgumentsList?;
	public IQLMemberSelectionElements getIQLMemberSelectionAccess() {
		return pIQLMemberSelection;
	}
	
	public ParserRule getIQLMemberSelectionRule() {
		return getIQLMemberSelectionAccess().getRule();
	}

	//IQLOtherExpressions returns IQLExpression:
	//	{IQLJvmElementCallExpression} element=[jvm::JvmIdentifiableElement|QualifiedName] args=IQLArgumentsList? |
	//	{IQLThisExpression} "this" | {IQLSuperExpression} "super" | {IQLParenthesisExpression} "(" expr=IQLExpression ")" |
	//	{IQLNewExpression} "new" (ref=IQLArrayTypeRef | ref=IQLSimpleTypeRef (argsList=IQLArgumentsList
	//	argsMap=IQLArgumentsMap? | argsMap=IQLArgumentsMap)) | IQLLiteralExpression;
	public IQLOtherExpressionsElements getIQLOtherExpressionsAccess() {
		return pIQLOtherExpressions;
	}
	
	public ParserRule getIQLOtherExpressionsRule() {
		return getIQLOtherExpressionsAccess().getRule();
	}

	//IQLLiteralExpression returns IQLExpression:
	//	{IQLLiteralExpressionInt} value=INT | {IQLLiteralExpressionDouble} value=DOUBLE | {IQLLiteralExpressionString}
	//	value=STRING | {IQLLiteralExpressionBoolean} value=BOOLEAN | {IQLLiteralExpressionRange} value=RANGE |
	//	{IQLLiteralExpressionType} "class(" value=JvmTypeReference ")" | {IQLLiteralExpressionNull} "null" | =>
	//	IQLLiteralExpressionList | IQLLiteralExpressionMap;
	public IQLLiteralExpressionElements getIQLLiteralExpressionAccess() {
		return pIQLLiteralExpression;
	}
	
	public ParserRule getIQLLiteralExpressionRule() {
		return getIQLLiteralExpressionAccess().getRule();
	}

	//IQLLiteralExpressionList returns IQLExpression:
	//	{IQLLiteralExpressionList} "[" (elements+=IQLExpression ("," elements+=IQLExpression)*)? "]";
	public IQLLiteralExpressionListElements getIQLLiteralExpressionListAccess() {
		return pIQLLiteralExpressionList;
	}
	
	public ParserRule getIQLLiteralExpressionListRule() {
		return getIQLLiteralExpressionListAccess().getRule();
	}

	//IQLLiteralExpressionMap returns IQLExpression:
	//	{IQLLiteralExpressionMap} "[" (elements+=IQLLiteralExpressionMapKeyValue (","
	//	elements+=IQLLiteralExpressionMapKeyValue)*)? "]";
	public IQLLiteralExpressionMapElements getIQLLiteralExpressionMapAccess() {
		return pIQLLiteralExpressionMap;
	}
	
	public ParserRule getIQLLiteralExpressionMapRule() {
		return getIQLLiteralExpressionMapAccess().getRule();
	}

	//IQLLiteralExpressionMapKeyValue:
	//	key=IQLExpression ":" value=IQLExpression;
	public IQLLiteralExpressionMapKeyValueElements getIQLLiteralExpressionMapKeyValueAccess() {
		return pIQLLiteralExpressionMapKeyValue;
	}
	
	public ParserRule getIQLLiteralExpressionMapKeyValueRule() {
		return getIQLLiteralExpressionMapKeyValueAccess().getRule();
	}

	///////////////////////////////////////////////
	///////////////////////////////////////////////
	///////////////////////////////////////////////
	//QualifiedNameWithWildcard:
	//	QualifiedName "::*"?;
	public QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return pQualifiedNameWithWildcard;
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}

	//QualifiedName:
	//	ID ("::" ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//terminal RANGE:
	//	INT ".." INT;
	public TerminalRule getRANGERule() {
		return tRANGE;
	} 

	//IQLJava hidden(SL_COMMENT, ML_COMMENT):
	//	"$*" text=IQLJavaText "*$";
	public IQLJavaElements getIQLJavaAccess() {
		return pIQLJava;
	}
	
	public ParserRule getIQLJavaRule() {
		return getIQLJavaAccess().getRule();
	}

	//IQLJavaText:
	//	(IQL_JAVA_KEYWORDS | WS | ID | BOOLEAN | DOUBLE | STRING | INT | ANY_OTHER | "+" | "+=" | "-" | "-=" | "*" | "*=" |
	//	"/" | "/=" | "%" | "%=" | "++" | "--" | ">" | ">=" | "<" | "<=" | "!" | "!=" | "&&" | "||" | "==" | "=" | "~" | "?:"
	//	| "|" | "|=" | "^" | "^=" | "&" | "&=" | ">>" | ">>=" | "<<" | "<<=" | ">>>" | ">>>=" | "[" | "]" | "{" | "}" | "(" |
	//	")" | "." | ":" | ";" | "," | "null")*;
	public IQLJavaTextElements getIQLJavaTextAccess() {
		return pIQLJavaText;
	}
	
	public ParserRule getIQLJavaTextRule() {
		return getIQLJavaTextAccess().getRule();
	}

	//IQL_JAVA_KEYWORDS:
	//	"break" | "case" | "class" | "continue" | "default" | "do" | "else" | "extends" | "for" | "if" | "implements" |
	//	"instanceof" | "interface" | "new" | "package" | "return" | "super" | "switch" | "this" | "while" | "abstract" |
	//	"assert" | "catch" | "const" | "enum" | "final" | "finally" | "goto" | "import" | "native" | "private" | "protected"
	//	| "public" | "static" | "synchronized" | "throw" | "throws" | "transient" | "try" | "volatile" | "strictfp";
	public IQL_JAVA_KEYWORDSElements getIQL_JAVA_KEYWORDSAccess() {
		return pIQL_JAVA_KEYWORDS;
	}
	
	public ParserRule getIQL_JAVA_KEYWORDSRule() {
		return getIQL_JAVA_KEYWORDSAccess().getRule();
	}

	//BOOLEAN returns ecore::EBoolean:
	//	"true" | "false";
	public BOOLEANElements getBOOLEANAccess() {
		return pBOOLEAN;
	}
	
	public ParserRule getBOOLEANRule() {
		return getBOOLEANAccess().getRule();
	}

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return tINT;
	} 

	//terminal DOUBLE returns ecore::EDouble:
	//	"0".."9"* "." "0".."9"+;
	public TerminalRule getDOUBLERule() {
		return tDOUBLE;
	} 

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
