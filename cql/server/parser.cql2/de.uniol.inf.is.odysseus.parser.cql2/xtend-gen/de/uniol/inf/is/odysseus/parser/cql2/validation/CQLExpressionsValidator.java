/**
 * Ã˜ * generated by Xtext 2.10.0
 */
package de.uniol.inf.is.odysseus.parser.cql2.validation;

import com.google.common.base.Objects;
import com.google.inject.Inject;
import de.uniol.inf.is.odysseus.parser.cql2.cQL.AndPredicate;
import de.uniol.inf.is.odysseus.parser.cql2.cQL.AttributeRef;
import de.uniol.inf.is.odysseus.parser.cql2.cQL.CQLPackage;
import de.uniol.inf.is.odysseus.parser.cql2.cQL.Comparision;
import de.uniol.inf.is.odysseus.parser.cql2.cQL.Equality;
import de.uniol.inf.is.odysseus.parser.cql2.cQL.Expression;
import de.uniol.inf.is.odysseus.parser.cql2.cQL.Minus;
import de.uniol.inf.is.odysseus.parser.cql2.cQL.MulOrDiv;
import de.uniol.inf.is.odysseus.parser.cql2.cQL.NOT;
import de.uniol.inf.is.odysseus.parser.cql2.cQL.OrPredicate;
import de.uniol.inf.is.odysseus.parser.cql2.cQL.Plus;
import de.uniol.inf.is.odysseus.parser.cql2.typing.ExpressionsType;
import de.uniol.inf.is.odysseus.parser.cql2.typing.ExpressionsTypeProvider;
import de.uniol.inf.is.odysseus.parser.cql2.validation.AbstractCQLValidator;
import java.util.List;
import org.eclipse.emf.ecore.EAttribute;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.validation.Check;
import org.eclipse.xtext.validation.EValidatorRegistrar;
import org.eclipse.xtext.xbase.lib.Conversions;
import org.eclipse.xtext.xbase.lib.Extension;

/**
 * This class contains custom validation rules.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
@Deprecated
@SuppressWarnings("all")
public class CQLExpressionsValidator extends AbstractCQLValidator {
  @Inject
  @Override
  public void register(final EValidatorRegistrar register) {
  }
  
  public final static String WRONG_TYPE = "de.uniol.inf.is.odysseus.parser.cql2.WrongType";
  
  @Inject
  @Extension
  private ExpressionsTypeProvider _expressionsTypeProvider;
  
  private void checkExpectedBoolean(final Expression e, final EReference ref) {
    this.checkExpectedType(e, ref, ExpressionsTypeProvider.boolType);
  }
  
  private void checkExpectedNumber(final Expression e, final EReference ref) {
    this.checkExpectedType(e, ref, ExpressionsTypeProvider.intType, ExpressionsTypeProvider.floatType);
  }
  
  public void checkExpectedType(final Expression e, final EReference ref, final ExpressionsType... type) {
    final ExpressionsType actualType = this.getTypeAndNotNull(e, ref);
    boolean _contains = ((List<ExpressionsType>)Conversions.doWrapArray(type)).contains(actualType);
    boolean _not = (!_contains);
    if (_not) {
      this.error(((("expected " + e) + " type, but was actually ") + actualType), ref, CQLExpressionsValidator.WRONG_TYPE);
    }
  }
  
  public ExpressionsType getTypeAndNotNull(final Expression e, final EReference ref) {
    ExpressionsType _typeFor = null;
    if (e!=null) {
      _typeFor=this._expressionsTypeProvider.typeFor(e);
    }
    ExpressionsType type = _typeFor;
    if ((type == null)) {
      this.error("null type", ref, CQLExpressionsValidator.WRONG_TYPE);
    }
    return type;
  }
  
  @Check
  public void checkType(final Plus type) {
    Expression _left = type.getLeft();
    this.checkExpectedNumber(_left, CQLPackage.Literals.PLUS__LEFT);
    Expression _right = type.getRight();
    this.checkExpectedNumber(_right, CQLPackage.Literals.PLUS__RIGHT);
  }
  
  @Check
  public void checkType(final MulOrDiv type) {
    Expression _left = type.getLeft();
    this.checkExpectedNumber(_left, CQLPackage.Literals.PLUS__LEFT);
    Expression _right = type.getRight();
    this.checkExpectedNumber(_right, CQLPackage.Literals.PLUS__RIGHT);
  }
  
  @Check
  public void checkType(final Minus type) {
    Expression _left = type.getLeft();
    this.checkExpectedNumber(_left, CQLPackage.Literals.PLUS__LEFT);
    Expression _right = type.getRight();
    this.checkExpectedNumber(_right, CQLPackage.Literals.PLUS__RIGHT);
  }
  
  @Check
  public void checkType(final NOT type) {
    Expression _expression = type.getExpression();
    this.checkExpectedBoolean(_expression, CQLPackage.Literals.NOT__EXPRESSION);
  }
  
  @Check
  public void checkType(final AndPredicate type) {
    Expression _left = type.getLeft();
    this.checkExpectedBoolean(_left, CQLPackage.Literals.AND_PREDICATE__LEFT);
    Expression _right = type.getRight();
    this.checkExpectedBoolean(_right, CQLPackage.Literals.AND_PREDICATE__RIGHT);
  }
  
  @Check
  public void checkType(final OrPredicate type) {
    Expression _left = type.getLeft();
    this.checkExpectedBoolean(_left, CQLPackage.Literals.OR_PREDICATE__LEFT);
    Expression _right = type.getRight();
    this.checkExpectedBoolean(_right, CQLPackage.Literals.OR_PREDICATE__RIGHT);
  }
  
  @Check
  public void checkType(final Equality type) {
    Expression _left = type.getLeft();
    final ExpressionsType left = this.getTypeAndNotNull(_left, CQLPackage.Literals.EQUALITY__LEFT);
    Expression _right = type.getRight();
    final ExpressionsType right = this.getTypeAndNotNull(_right, CQLPackage.Literals.EQUALITY__RIGHT);
    this.checkExpectedSame(left, right);
  }
  
  @Check
  public void checkType(final Comparision type) {
    Expression _left = type.getLeft();
    final ExpressionsType left = this.getTypeAndNotNull(_left, CQLPackage.Literals.COMPARISION__LEFT);
    Expression _right = type.getRight();
    final ExpressionsType right = this.getTypeAndNotNull(_right, CQLPackage.Literals.COMPARISION__RIGHT);
    this.checkExpectedSame(left, right);
    this.checkNotBoolean(left, CQLPackage.Literals.COMPARISION__LEFT);
    this.checkNotBoolean(left, CQLPackage.Literals.COMPARISION__RIGHT);
  }
  
  @Check
  public ExpressionsType checkType(final AttributeRef type) {
    ExpressionsType _typeFor = null;
    if (type!=null) {
      _typeFor=this._expressionsTypeProvider.typeFor(type);
    }
    return _typeFor;
  }
  
  public void checkExpectedSame(final ExpressionsType left, final ExpressionsType right) {
    if ((((left != null) && (right != null)) && (right != left))) {
      EAttribute _eIDAttribute = CQLPackage.Literals.EQUALITY.getEIDAttribute();
      this.error(
        ((("expected the same type, but was " + left) + ", ") + right), _eIDAttribute, 
        CQLExpressionsValidator.WRONG_TYPE);
    }
  }
  
  public void checkNotBoolean(final ExpressionsType type, final EReference ref) {
    boolean _equals = Objects.equal(type, ExpressionsTypeProvider.boolType);
    if (_equals) {
      this.error("cannot be boolean", ref, CQLExpressionsValidator.WRONG_TYPE);
    }
  }
}
