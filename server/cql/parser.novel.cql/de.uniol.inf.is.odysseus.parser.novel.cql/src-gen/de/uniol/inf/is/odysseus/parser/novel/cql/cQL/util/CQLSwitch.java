/**
 * generated by Xtext 2.10.0
 */
package de.uniol.inf.is.odysseus.parser.novel.cql.cQL.util;

import de.uniol.inf.is.odysseus.parser.novel.cql.cQL.*;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.util.Switch;

/**
 * <!-- begin-user-doc -->
 * The <b>Switch</b> for the model's inheritance hierarchy.
 * It supports the call {@link #doSwitch(EObject) doSwitch(object)}
 * to invoke the <code>caseXXX</code> method for each class of the model,
 * starting with the actual class of the object
 * and proceeding up the inheritance hierarchy
 * until a non-null result is returned,
 * which is the result of the switch.
 * <!-- end-user-doc -->
 * @see de.uniol.inf.is.odysseus.parser.novel.cql.cQL.CQLPackage
 * @generated
 */
public class CQLSwitch<T> extends Switch<T>
{
  /**
   * The cached model package
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static CQLPackage modelPackage;

  /**
   * Creates an instance of the switch.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public CQLSwitch()
  {
    if (modelPackage == null)
    {
      modelPackage = CQLPackage.eINSTANCE;
    }
  }

  /**
   * Checks whether this is a switch for the given package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param ePackage the package in question.
   * @return whether this is a switch for the given package.
   * @generated
   */
  @Override
  protected boolean isSwitchFor(EPackage ePackage)
  {
    return ePackage == modelPackage;
  }

  /**
   * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the first non-null result returned by a <code>caseXXX</code> call.
   * @generated
   */
  @Override
  protected T doSwitch(int classifierID, EObject theEObject)
  {
    switch (classifierID)
    {
      case CQLPackage.MODEL:
      {
        Model model = (Model)theEObject;
        T result = caseModel(model);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CQLPackage.STATEMENT:
      {
        Statement statement = (Statement)theEObject;
        T result = caseStatement(statement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CQLPackage.COMMAND:
      {
        Command command = (Command)theEObject;
        T result = caseCommand(command);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CQLPackage.SELECT:
      {
        Select select = (Select)theEObject;
        T result = caseSelect(select);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CQLPackage.INNER_SELECT:
      {
        InnerSelect innerSelect = (InnerSelect)theEObject;
        T result = caseInnerSelect(innerSelect);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CQLPackage.INNER_SELECT2:
      {
        InnerSelect2 innerSelect2 = (InnerSelect2)theEObject;
        T result = caseInnerSelect2(innerSelect2);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CQLPackage.SELECT_ARGUMENT:
      {
        SelectArgument selectArgument = (SelectArgument)theEObject;
        T result = caseSelectArgument(selectArgument);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CQLPackage.SOURCE:
      {
        Source source = (Source)theEObject;
        T result = caseSource(source);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CQLPackage.ATTRIBUTE:
      {
        Attribute attribute = (Attribute)theEObject;
        T result = caseAttribute(attribute);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CQLPackage.ATTRIBUTE_WITH_NESTED_STATEMENT:
      {
        AttributeWithNestedStatement attributeWithNestedStatement = (AttributeWithNestedStatement)theEObject;
        T result = caseAttributeWithNestedStatement(attributeWithNestedStatement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CQLPackage.SELECT_EXPRESSION:
      {
        SelectExpression selectExpression = (SelectExpression)theEObject;
        T result = caseSelectExpression(selectExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CQLPackage.EXPRESSION_COMPONENT:
      {
        ExpressionComponent expressionComponent = (ExpressionComponent)theEObject;
        T result = caseExpressionComponent(expressionComponent);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CQLPackage.STARTHING:
      {
        Starthing starthing = (Starthing)theEObject;
        T result = caseStarthing(starthing);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CQLPackage.SET_OPERATOR:
      {
        SetOperator setOperator = (SetOperator)theEObject;
        T result = caseSetOperator(setOperator);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CQLPackage.ALIAS:
      {
        Alias alias = (Alias)theEObject;
        T result = caseAlias(alias);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CQLPackage.ACCESS_FRAMEWORK:
      {
        AccessFramework accessFramework = (AccessFramework)theEObject;
        T result = caseAccessFramework(accessFramework);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CQLPackage.SCHEMA_DEFINITION:
      {
        SchemaDefinition schemaDefinition = (SchemaDefinition)theEObject;
        T result = caseSchemaDefinition(schemaDefinition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CQLPackage.CREATE:
      {
        Create create = (Create)theEObject;
        T result = caseCreate(create);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CQLPackage.CREATE_ACCESS_FRAMEWORK:
      {
        CreateAccessFramework createAccessFramework = (CreateAccessFramework)theEObject;
        T result = caseCreateAccessFramework(createAccessFramework);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CQLPackage.CREATE_CHANNEL_FRAMEWORK_VIA_PORT:
      {
        CreateChannelFrameworkViaPort createChannelFrameworkViaPort = (CreateChannelFrameworkViaPort)theEObject;
        T result = caseCreateChannelFrameworkViaPort(createChannelFrameworkViaPort);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CQLPackage.CREATE_CHANNEL_FORMAT_VIA_FILE:
      {
        CreateChannelFormatViaFile createChannelFormatViaFile = (CreateChannelFormatViaFile)theEObject;
        T result = caseCreateChannelFormatViaFile(createChannelFormatViaFile);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CQLPackage.CREATE_DATABASE_STREAM:
      {
        CreateDatabaseStream createDatabaseStream = (CreateDatabaseStream)theEObject;
        T result = caseCreateDatabaseStream(createDatabaseStream);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CQLPackage.CREATE_DATABASE_SINK:
      {
        CreateDatabaseSink createDatabaseSink = (CreateDatabaseSink)theEObject;
        T result = caseCreateDatabaseSink(createDatabaseSink);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CQLPackage.CREATE_VIEW:
      {
        CreateView createView = (CreateView)theEObject;
        T result = caseCreateView(createView);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CQLPackage.CONTEXT_STORE_TYPE:
      {
        ContextStoreType contextStoreType = (ContextStoreType)theEObject;
        T result = caseContextStoreType(contextStoreType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CQLPackage.STREAM_TO:
      {
        StreamTo streamTo = (StreamTo)theEObject;
        T result = caseStreamTo(streamTo);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CQLPackage.WINDOW_OPERATOR:
      {
        WindowOperator windowOperator = (WindowOperator)theEObject;
        T result = caseWindowOperator(windowOperator);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CQLPackage.EXPRESSIONS_MODEL:
      {
        ExpressionsModel expressionsModel = (ExpressionsModel)theEObject;
        T result = caseExpressionsModel(expressionsModel);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CQLPackage.EXPRESSION:
      {
        Expression expression = (Expression)theEObject;
        T result = caseExpression(expression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CQLPackage.SIMPLE_SOURCE:
      {
        SimpleSource simpleSource = (SimpleSource)theEObject;
        T result = caseSimpleSource(simpleSource);
        if (result == null) result = caseSource(simpleSource);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CQLPackage.NESTED_SOURCE:
      {
        NestedSource nestedSource = (NestedSource)theEObject;
        T result = caseNestedSource(nestedSource);
        if (result == null) result = caseSource(nestedSource);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CQLPackage.FUNCTION:
      {
        Function function = (Function)theEObject;
        T result = caseFunction(function);
        if (result == null) result = caseExpressionComponent(function);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CQLPackage.STAR_EXPRESSION:
      {
        StarExpression starExpression = (StarExpression)theEObject;
        T result = caseStarExpression(starExpression);
        if (result == null) result = caseSelectExpression(starExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CQLPackage.STAR:
      {
        Star star = (Star)theEObject;
        T result = caseStar(star);
        if (result == null) result = caseExpressionComponent(star);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CQLPackage.EXPRESSION_COMPONENT_AS_ATTRIBUTE:
      {
        ExpressionComponentAsAttribute expressionComponentAsAttribute = (ExpressionComponentAsAttribute)theEObject;
        T result = caseExpressionComponentAsAttribute(expressionComponentAsAttribute);
        if (result == null) result = caseExpressionComponent(expressionComponentAsAttribute);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CQLPackage.CREATE_DATA_BASE_CONNECTION_JDBC:
      {
        CreateDataBaseConnectionJDBC createDataBaseConnectionJDBC = (CreateDataBaseConnectionJDBC)theEObject;
        T result = caseCreateDataBaseConnectionJDBC(createDataBaseConnectionJDBC);
        if (result == null) result = caseCommand(createDataBaseConnectionJDBC);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CQLPackage.CREATE_DATA_BASE_CONNECTION_GENERIC:
      {
        CreateDataBaseConnectionGeneric createDataBaseConnectionGeneric = (CreateDataBaseConnectionGeneric)theEObject;
        T result = caseCreateDataBaseConnectionGeneric(createDataBaseConnectionGeneric);
        if (result == null) result = caseCommand(createDataBaseConnectionGeneric);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CQLPackage.DROP_DATABASE_CONNECTION:
      {
        DropDatabaseConnection dropDatabaseConnection = (DropDatabaseConnection)theEObject;
        T result = caseDropDatabaseConnection(dropDatabaseConnection);
        if (result == null) result = caseCommand(dropDatabaseConnection);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CQLPackage.CREATE_CONTEXT_STORE:
      {
        CreateContextStore createContextStore = (CreateContextStore)theEObject;
        T result = caseCreateContextStore(createContextStore);
        if (result == null) result = caseCommand(createContextStore);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CQLPackage.DROP_CONTEXT_STORE:
      {
        DropContextStore dropContextStore = (DropContextStore)theEObject;
        T result = caseDropContextStore(dropContextStore);
        if (result == null) result = caseCommand(dropContextStore);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CQLPackage.DROP_STREAM:
      {
        DropStream dropStream = (DropStream)theEObject;
        T result = caseDropStream(dropStream);
        if (result == null) result = caseCommand(dropStream);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CQLPackage.USER_MANAGEMENT:
      {
        UserManagement userManagement = (UserManagement)theEObject;
        T result = caseUserManagement(userManagement);
        if (result == null) result = caseCommand(userManagement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CQLPackage.RIGHTS_MANAGEMENT:
      {
        RightsManagement rightsManagement = (RightsManagement)theEObject;
        T result = caseRightsManagement(rightsManagement);
        if (result == null) result = caseCommand(rightsManagement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CQLPackage.ROLE_MANAGEMENT:
      {
        RoleManagement roleManagement = (RoleManagement)theEObject;
        T result = caseRoleManagement(roleManagement);
        if (result == null) result = caseCommand(roleManagement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CQLPackage.UNDBOUNDED_WINDOW:
      {
        UndboundedWindow undboundedWindow = (UndboundedWindow)theEObject;
        T result = caseUndboundedWindow(undboundedWindow);
        if (result == null) result = caseWindowOperator(undboundedWindow);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CQLPackage.TIMEBASED_WINDOW:
      {
        TimebasedWindow timebasedWindow = (TimebasedWindow)theEObject;
        T result = caseTimebasedWindow(timebasedWindow);
        if (result == null) result = caseWindowOperator(timebasedWindow);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CQLPackage.TUPLEBASED_WINDOW:
      {
        TuplebasedWindow tuplebasedWindow = (TuplebasedWindow)theEObject;
        T result = caseTuplebasedWindow(tuplebasedWindow);
        if (result == null) result = caseWindowOperator(tuplebasedWindow);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CQLPackage.OR_PREDICATE:
      {
        OrPredicate orPredicate = (OrPredicate)theEObject;
        T result = caseOrPredicate(orPredicate);
        if (result == null) result = caseExpression(orPredicate);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CQLPackage.AND_PREDICATE:
      {
        AndPredicate andPredicate = (AndPredicate)theEObject;
        T result = caseAndPredicate(andPredicate);
        if (result == null) result = caseExpression(andPredicate);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CQLPackage.EQUALITY:
      {
        Equality equality = (Equality)theEObject;
        T result = caseEquality(equality);
        if (result == null) result = caseExpression(equality);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CQLPackage.COMPARISION:
      {
        Comparision comparision = (Comparision)theEObject;
        T result = caseComparision(comparision);
        if (result == null) result = caseExpression(comparision);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CQLPackage.PLUS:
      {
        Plus plus = (Plus)theEObject;
        T result = casePlus(plus);
        if (result == null) result = caseExpression(plus);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CQLPackage.MINUS:
      {
        Minus minus = (Minus)theEObject;
        T result = caseMinus(minus);
        if (result == null) result = caseExpression(minus);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CQLPackage.MUL_OR_DIV:
      {
        MulOrDiv mulOrDiv = (MulOrDiv)theEObject;
        T result = caseMulOrDiv(mulOrDiv);
        if (result == null) result = caseExpression(mulOrDiv);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CQLPackage.BRACKET:
      {
        Bracket bracket = (Bracket)theEObject;
        T result = caseBracket(bracket);
        if (result == null) result = caseExpression(bracket);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CQLPackage.NOT:
      {
        NOT not = (NOT)theEObject;
        T result = caseNOT(not);
        if (result == null) result = caseExpression(not);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CQLPackage.INT_CONSTANT:
      {
        IntConstant intConstant = (IntConstant)theEObject;
        T result = caseIntConstant(intConstant);
        if (result == null) result = caseExpression(intConstant);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CQLPackage.FLOAT_CONSTANT:
      {
        FloatConstant floatConstant = (FloatConstant)theEObject;
        T result = caseFloatConstant(floatConstant);
        if (result == null) result = caseExpression(floatConstant);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CQLPackage.STRING_CONSTANT:
      {
        StringConstant stringConstant = (StringConstant)theEObject;
        T result = caseStringConstant(stringConstant);
        if (result == null) result = caseExpression(stringConstant);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CQLPackage.BOOL_CONSTANT:
      {
        BoolConstant boolConstant = (BoolConstant)theEObject;
        T result = caseBoolConstant(boolConstant);
        if (result == null) result = caseExpression(boolConstant);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CQLPackage.ATTRIBUTE_REF:
      {
        AttributeRef attributeRef = (AttributeRef)theEObject;
        T result = caseAttributeRef(attributeRef);
        if (result == null) result = caseExpression(attributeRef);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CQLPackage.MATRIX:
      {
        Matrix matrix = (Matrix)theEObject;
        T result = caseMatrix(matrix);
        if (result == null) result = caseExpression(matrix);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CQLPackage.VECTOR:
      {
        Vector vector = (Vector)theEObject;
        T result = caseVector(vector);
        if (result == null) result = caseExpression(vector);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      default: return defaultCase(theEObject);
    }
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Model</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Model</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseModel(Model object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Statement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Statement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStatement(Statement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Command</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Command</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCommand(Command object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Select</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Select</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSelect(Select object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Inner Select</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Inner Select</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseInnerSelect(InnerSelect object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Inner Select2</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Inner Select2</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseInnerSelect2(InnerSelect2 object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Select Argument</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Select Argument</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSelectArgument(SelectArgument object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Source</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Source</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSource(Source object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Attribute</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Attribute</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAttribute(Attribute object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Attribute With Nested Statement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Attribute With Nested Statement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAttributeWithNestedStatement(AttributeWithNestedStatement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Select Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Select Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSelectExpression(SelectExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Expression Component</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Expression Component</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExpressionComponent(ExpressionComponent object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Starthing</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Starthing</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStarthing(Starthing object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Set Operator</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Set Operator</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSetOperator(SetOperator object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Alias</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Alias</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAlias(Alias object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Access Framework</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Access Framework</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAccessFramework(AccessFramework object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Schema Definition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Schema Definition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSchemaDefinition(SchemaDefinition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Create</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Create</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCreate(Create object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Create Access Framework</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Create Access Framework</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCreateAccessFramework(CreateAccessFramework object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Create Channel Framework Via Port</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Create Channel Framework Via Port</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCreateChannelFrameworkViaPort(CreateChannelFrameworkViaPort object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Create Channel Format Via File</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Create Channel Format Via File</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCreateChannelFormatViaFile(CreateChannelFormatViaFile object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Create Database Stream</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Create Database Stream</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCreateDatabaseStream(CreateDatabaseStream object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Create Database Sink</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Create Database Sink</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCreateDatabaseSink(CreateDatabaseSink object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Create View</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Create View</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCreateView(CreateView object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Context Store Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Context Store Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseContextStoreType(ContextStoreType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Stream To</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Stream To</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStreamTo(StreamTo object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Window Operator</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Window Operator</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseWindowOperator(WindowOperator object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Expressions Model</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Expressions Model</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExpressionsModel(ExpressionsModel object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExpression(Expression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Simple Source</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Simple Source</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSimpleSource(SimpleSource object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Nested Source</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Nested Source</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNestedSource(NestedSource object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Function</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Function</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFunction(Function object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Star Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Star Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStarExpression(StarExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Star</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Star</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStar(Star object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Expression Component As Attribute</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Expression Component As Attribute</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExpressionComponentAsAttribute(ExpressionComponentAsAttribute object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Create Data Base Connection JDBC</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Create Data Base Connection JDBC</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCreateDataBaseConnectionJDBC(CreateDataBaseConnectionJDBC object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Create Data Base Connection Generic</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Create Data Base Connection Generic</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCreateDataBaseConnectionGeneric(CreateDataBaseConnectionGeneric object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Drop Database Connection</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Drop Database Connection</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDropDatabaseConnection(DropDatabaseConnection object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Create Context Store</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Create Context Store</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCreateContextStore(CreateContextStore object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Drop Context Store</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Drop Context Store</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDropContextStore(DropContextStore object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Drop Stream</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Drop Stream</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDropStream(DropStream object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>User Management</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>User Management</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseUserManagement(UserManagement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Rights Management</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Rights Management</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRightsManagement(RightsManagement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Role Management</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Role Management</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRoleManagement(RoleManagement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Undbounded Window</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Undbounded Window</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseUndboundedWindow(UndboundedWindow object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Timebased Window</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Timebased Window</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTimebasedWindow(TimebasedWindow object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Tuplebased Window</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Tuplebased Window</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTuplebasedWindow(TuplebasedWindow object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Or Predicate</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Or Predicate</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOrPredicate(OrPredicate object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>And Predicate</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>And Predicate</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAndPredicate(AndPredicate object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Equality</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Equality</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEquality(Equality object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Comparision</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Comparision</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseComparision(Comparision object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Plus</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Plus</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePlus(Plus object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Minus</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Minus</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMinus(Minus object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Mul Or Div</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Mul Or Div</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMulOrDiv(MulOrDiv object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Bracket</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Bracket</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBracket(Bracket object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>NOT</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>NOT</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNOT(NOT object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Int Constant</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Int Constant</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseIntConstant(IntConstant object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Float Constant</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Float Constant</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFloatConstant(FloatConstant object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>String Constant</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>String Constant</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStringConstant(StringConstant object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Bool Constant</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Bool Constant</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBoolConstant(BoolConstant object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Attribute Ref</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Attribute Ref</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAttributeRef(AttributeRef object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Matrix</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Matrix</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMatrix(Matrix object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Vector</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Vector</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseVector(Vector object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EObject</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch, but this is the last case anyway.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EObject</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject)
   * @generated
   */
  @Override
  public T defaultCase(EObject object)
  {
    return null;
  }

} //CQLSwitch
