/*
 * generated by Xtext 2.10.0
 */
package de.uniol.inf.is.odysseus.parser.novel.cql.serializer;

import com.google.inject.Inject;
import de.uniol.inf.is.odysseus.parser.novel.cql.services.CQLGrammarAccess;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.GroupAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;

@SuppressWarnings("all")
public class CQLSyntacticSequencer extends AbstractSyntacticSequencer {

	protected CQLGrammarAccess grammarAccess;
	protected AbstractElementAlias match_ChannelFormatView_SemicolonKeyword_5_q;
	protected AbstractElementAlias match_Drop___IFKeyword_2_0_EXISTSKeyword_2_1__q;
	protected AbstractElementAlias match_Select_AsteriskKeyword_2_0_q;
	protected AbstractElementAlias match_Statement_SemicolonKeyword_1_q;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (CQLGrammarAccess) access;
		match_ChannelFormatView_SemicolonKeyword_5_q = new TokenAlias(false, true, grammarAccess.getChannelFormatViewAccess().getSemicolonKeyword_5());
		match_Drop___IFKeyword_2_0_EXISTSKeyword_2_1__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getDropAccess().getIFKeyword_2_0()), new TokenAlias(false, false, grammarAccess.getDropAccess().getEXISTSKeyword_2_1()));
		match_Select_AsteriskKeyword_2_0_q = new TokenAlias(false, true, grammarAccess.getSelectAccess().getAsteriskKeyword_2_0());
		match_Statement_SemicolonKeyword_1_q = new TokenAlias(false, true, grammarAccess.getStatementAccess().getSemicolonKeyword_1());
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		return "";
	}
	
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_ChannelFormatView_SemicolonKeyword_5_q.equals(syntax))
				emit_ChannelFormatView_SemicolonKeyword_5_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Drop___IFKeyword_2_0_EXISTSKeyword_2_1__q.equals(syntax))
				emit_Drop___IFKeyword_2_0_EXISTSKeyword_2_1__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Select_AsteriskKeyword_2_0_q.equals(syntax))
				emit_Select_AsteriskKeyword_2_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Statement_SemicolonKeyword_1_q.equals(syntax))
				emit_Statement_SemicolonKeyword_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     ';'?
	 *
	 * This ambiguous syntax occurs at:
	 *     select=Select (ambiguity) ')' (rule end)
	 */
	protected void emit_ChannelFormatView_SemicolonKeyword_5_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('IF' 'EXISTS')?
	 *
	 * This ambiguous syntax occurs at:
	 *     name='SINK' (ambiguity) (rule end)
	 *     name='STREAM' (ambiguity) (rule end)
	 */
	protected void emit_Drop___IFKeyword_2_0_EXISTSKeyword_2_1__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '*'?
	 *
	 * This ambiguous syntax occurs at:
	 *     distinct='DISTINCT' (ambiguity) 'FROM' sources+=Source
	 *     name='SELECT' (ambiguity) 'FROM' sources+=Source
	 */
	protected void emit_Select_AsteriskKeyword_2_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ';'?
	 *
	 * This ambiguous syntax occurs at:
	 *     type=Create (ambiguity) (rule end)
	 *     type=Drop (ambiguity) (rule end)
	 *     type=Select (ambiguity) (rule end)
	 *     type=StreamTo (ambiguity) (rule end)
	 */
	protected void emit_Statement_SemicolonKeyword_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
