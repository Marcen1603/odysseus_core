/**
 * generated by Xtext 2.10.0
 */
package de.uniol.inf.is.odysseus.parser.novel.cql.cQL.impl;

import de.uniol.inf.is.odysseus.parser.novel.cql.cQL.Aggregation;
import de.uniol.inf.is.odysseus.parser.novel.cql.cQL.Alias;
import de.uniol.inf.is.odysseus.parser.novel.cql.cQL.Attribute;
import de.uniol.inf.is.odysseus.parser.novel.cql.cQL.CQLPackage;
import de.uniol.inf.is.odysseus.parser.novel.cql.cQL.ExpressionsModel;
import de.uniol.inf.is.odysseus.parser.novel.cql.cQL.Nested_Statement;
import de.uniol.inf.is.odysseus.parser.novel.cql.cQL.Select_Statement;
import de.uniol.inf.is.odysseus.parser.novel.cql.cQL.Source;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Select Statement</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link de.uniol.inf.is.odysseus.parser.novel.cql.cQL.impl.Select_StatementImpl#getName <em>Name</em>}</li>
 *   <li>{@link de.uniol.inf.is.odysseus.parser.novel.cql.cQL.impl.Select_StatementImpl#getDistinct <em>Distinct</em>}</li>
 *   <li>{@link de.uniol.inf.is.odysseus.parser.novel.cql.cQL.impl.Select_StatementImpl#getAttributes <em>Attributes</em>}</li>
 *   <li>{@link de.uniol.inf.is.odysseus.parser.novel.cql.cQL.impl.Select_StatementImpl#getAggregations <em>Aggregations</em>}</li>
 *   <li>{@link de.uniol.inf.is.odysseus.parser.novel.cql.cQL.impl.Select_StatementImpl#getSources <em>Sources</em>}</li>
 *   <li>{@link de.uniol.inf.is.odysseus.parser.novel.cql.cQL.impl.Select_StatementImpl#getNested <em>Nested</em>}</li>
 *   <li>{@link de.uniol.inf.is.odysseus.parser.novel.cql.cQL.impl.Select_StatementImpl#getNestedAliases <em>Nested Aliases</em>}</li>
 *   <li>{@link de.uniol.inf.is.odysseus.parser.novel.cql.cQL.impl.Select_StatementImpl#getPredicates <em>Predicates</em>}</li>
 *   <li>{@link de.uniol.inf.is.odysseus.parser.novel.cql.cQL.impl.Select_StatementImpl#getOrder <em>Order</em>}</li>
 *   <li>{@link de.uniol.inf.is.odysseus.parser.novel.cql.cQL.impl.Select_StatementImpl#getHaving <em>Having</em>}</li>
 * </ul>
 *
 * @generated
 */
public class Select_StatementImpl extends Nested_StatementImpl implements Select_Statement
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The default value of the '{@link #getDistinct() <em>Distinct</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDistinct()
   * @generated
   * @ordered
   */
  protected static final String DISTINCT_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getDistinct() <em>Distinct</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDistinct()
   * @generated
   * @ordered
   */
  protected String distinct = DISTINCT_EDEFAULT;

  /**
   * The cached value of the '{@link #getAttributes() <em>Attributes</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAttributes()
   * @generated
   * @ordered
   */
  protected EList<Attribute> attributes;

  /**
   * The cached value of the '{@link #getAggregations() <em>Aggregations</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAggregations()
   * @generated
   * @ordered
   */
  protected EList<Aggregation> aggregations;

  /**
   * The cached value of the '{@link #getSources() <em>Sources</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSources()
   * @generated
   * @ordered
   */
  protected EList<Source> sources;

  /**
   * The cached value of the '{@link #getNested() <em>Nested</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNested()
   * @generated
   * @ordered
   */
  protected EList<Nested_Statement> nested;

  /**
   * The cached value of the '{@link #getNestedAliases() <em>Nested Aliases</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNestedAliases()
   * @generated
   * @ordered
   */
  protected EList<Alias> nestedAliases;

  /**
   * The cached value of the '{@link #getPredicates() <em>Predicates</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPredicates()
   * @generated
   * @ordered
   */
  protected ExpressionsModel predicates;

  /**
   * The cached value of the '{@link #getOrder() <em>Order</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOrder()
   * @generated
   * @ordered
   */
  protected EList<Attribute> order;

  /**
   * The cached value of the '{@link #getHaving() <em>Having</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getHaving()
   * @generated
   * @ordered
   */
  protected ExpressionsModel having;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected Select_StatementImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return CQLPackage.Literals.SELECT_STATEMENT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CQLPackage.SELECT_STATEMENT__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getDistinct()
  {
    return distinct;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setDistinct(String newDistinct)
  {
    String oldDistinct = distinct;
    distinct = newDistinct;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CQLPackage.SELECT_STATEMENT__DISTINCT, oldDistinct, distinct));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Attribute> getAttributes()
  {
    if (attributes == null)
    {
      attributes = new EObjectContainmentEList<Attribute>(Attribute.class, this, CQLPackage.SELECT_STATEMENT__ATTRIBUTES);
    }
    return attributes;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Aggregation> getAggregations()
  {
    if (aggregations == null)
    {
      aggregations = new EObjectContainmentEList<Aggregation>(Aggregation.class, this, CQLPackage.SELECT_STATEMENT__AGGREGATIONS);
    }
    return aggregations;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Source> getSources()
  {
    if (sources == null)
    {
      sources = new EObjectContainmentEList<Source>(Source.class, this, CQLPackage.SELECT_STATEMENT__SOURCES);
    }
    return sources;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Nested_Statement> getNested()
  {
    if (nested == null)
    {
      nested = new EObjectContainmentEList<Nested_Statement>(Nested_Statement.class, this, CQLPackage.SELECT_STATEMENT__NESTED);
    }
    return nested;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Alias> getNestedAliases()
  {
    if (nestedAliases == null)
    {
      nestedAliases = new EObjectContainmentEList<Alias>(Alias.class, this, CQLPackage.SELECT_STATEMENT__NESTED_ALIASES);
    }
    return nestedAliases;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ExpressionsModel getPredicates()
  {
    return predicates;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetPredicates(ExpressionsModel newPredicates, NotificationChain msgs)
  {
    ExpressionsModel oldPredicates = predicates;
    predicates = newPredicates;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, CQLPackage.SELECT_STATEMENT__PREDICATES, oldPredicates, newPredicates);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setPredicates(ExpressionsModel newPredicates)
  {
    if (newPredicates != predicates)
    {
      NotificationChain msgs = null;
      if (predicates != null)
        msgs = ((InternalEObject)predicates).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - CQLPackage.SELECT_STATEMENT__PREDICATES, null, msgs);
      if (newPredicates != null)
        msgs = ((InternalEObject)newPredicates).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - CQLPackage.SELECT_STATEMENT__PREDICATES, null, msgs);
      msgs = basicSetPredicates(newPredicates, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CQLPackage.SELECT_STATEMENT__PREDICATES, newPredicates, newPredicates));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Attribute> getOrder()
  {
    if (order == null)
    {
      order = new EObjectContainmentEList<Attribute>(Attribute.class, this, CQLPackage.SELECT_STATEMENT__ORDER);
    }
    return order;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ExpressionsModel getHaving()
  {
    return having;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetHaving(ExpressionsModel newHaving, NotificationChain msgs)
  {
    ExpressionsModel oldHaving = having;
    having = newHaving;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, CQLPackage.SELECT_STATEMENT__HAVING, oldHaving, newHaving);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setHaving(ExpressionsModel newHaving)
  {
    if (newHaving != having)
    {
      NotificationChain msgs = null;
      if (having != null)
        msgs = ((InternalEObject)having).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - CQLPackage.SELECT_STATEMENT__HAVING, null, msgs);
      if (newHaving != null)
        msgs = ((InternalEObject)newHaving).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - CQLPackage.SELECT_STATEMENT__HAVING, null, msgs);
      msgs = basicSetHaving(newHaving, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CQLPackage.SELECT_STATEMENT__HAVING, newHaving, newHaving));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case CQLPackage.SELECT_STATEMENT__ATTRIBUTES:
        return ((InternalEList<?>)getAttributes()).basicRemove(otherEnd, msgs);
      case CQLPackage.SELECT_STATEMENT__AGGREGATIONS:
        return ((InternalEList<?>)getAggregations()).basicRemove(otherEnd, msgs);
      case CQLPackage.SELECT_STATEMENT__SOURCES:
        return ((InternalEList<?>)getSources()).basicRemove(otherEnd, msgs);
      case CQLPackage.SELECT_STATEMENT__NESTED:
        return ((InternalEList<?>)getNested()).basicRemove(otherEnd, msgs);
      case CQLPackage.SELECT_STATEMENT__NESTED_ALIASES:
        return ((InternalEList<?>)getNestedAliases()).basicRemove(otherEnd, msgs);
      case CQLPackage.SELECT_STATEMENT__PREDICATES:
        return basicSetPredicates(null, msgs);
      case CQLPackage.SELECT_STATEMENT__ORDER:
        return ((InternalEList<?>)getOrder()).basicRemove(otherEnd, msgs);
      case CQLPackage.SELECT_STATEMENT__HAVING:
        return basicSetHaving(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case CQLPackage.SELECT_STATEMENT__NAME:
        return getName();
      case CQLPackage.SELECT_STATEMENT__DISTINCT:
        return getDistinct();
      case CQLPackage.SELECT_STATEMENT__ATTRIBUTES:
        return getAttributes();
      case CQLPackage.SELECT_STATEMENT__AGGREGATIONS:
        return getAggregations();
      case CQLPackage.SELECT_STATEMENT__SOURCES:
        return getSources();
      case CQLPackage.SELECT_STATEMENT__NESTED:
        return getNested();
      case CQLPackage.SELECT_STATEMENT__NESTED_ALIASES:
        return getNestedAliases();
      case CQLPackage.SELECT_STATEMENT__PREDICATES:
        return getPredicates();
      case CQLPackage.SELECT_STATEMENT__ORDER:
        return getOrder();
      case CQLPackage.SELECT_STATEMENT__HAVING:
        return getHaving();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case CQLPackage.SELECT_STATEMENT__NAME:
        setName((String)newValue);
        return;
      case CQLPackage.SELECT_STATEMENT__DISTINCT:
        setDistinct((String)newValue);
        return;
      case CQLPackage.SELECT_STATEMENT__ATTRIBUTES:
        getAttributes().clear();
        getAttributes().addAll((Collection<? extends Attribute>)newValue);
        return;
      case CQLPackage.SELECT_STATEMENT__AGGREGATIONS:
        getAggregations().clear();
        getAggregations().addAll((Collection<? extends Aggregation>)newValue);
        return;
      case CQLPackage.SELECT_STATEMENT__SOURCES:
        getSources().clear();
        getSources().addAll((Collection<? extends Source>)newValue);
        return;
      case CQLPackage.SELECT_STATEMENT__NESTED:
        getNested().clear();
        getNested().addAll((Collection<? extends Nested_Statement>)newValue);
        return;
      case CQLPackage.SELECT_STATEMENT__NESTED_ALIASES:
        getNestedAliases().clear();
        getNestedAliases().addAll((Collection<? extends Alias>)newValue);
        return;
      case CQLPackage.SELECT_STATEMENT__PREDICATES:
        setPredicates((ExpressionsModel)newValue);
        return;
      case CQLPackage.SELECT_STATEMENT__ORDER:
        getOrder().clear();
        getOrder().addAll((Collection<? extends Attribute>)newValue);
        return;
      case CQLPackage.SELECT_STATEMENT__HAVING:
        setHaving((ExpressionsModel)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case CQLPackage.SELECT_STATEMENT__NAME:
        setName(NAME_EDEFAULT);
        return;
      case CQLPackage.SELECT_STATEMENT__DISTINCT:
        setDistinct(DISTINCT_EDEFAULT);
        return;
      case CQLPackage.SELECT_STATEMENT__ATTRIBUTES:
        getAttributes().clear();
        return;
      case CQLPackage.SELECT_STATEMENT__AGGREGATIONS:
        getAggregations().clear();
        return;
      case CQLPackage.SELECT_STATEMENT__SOURCES:
        getSources().clear();
        return;
      case CQLPackage.SELECT_STATEMENT__NESTED:
        getNested().clear();
        return;
      case CQLPackage.SELECT_STATEMENT__NESTED_ALIASES:
        getNestedAliases().clear();
        return;
      case CQLPackage.SELECT_STATEMENT__PREDICATES:
        setPredicates((ExpressionsModel)null);
        return;
      case CQLPackage.SELECT_STATEMENT__ORDER:
        getOrder().clear();
        return;
      case CQLPackage.SELECT_STATEMENT__HAVING:
        setHaving((ExpressionsModel)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case CQLPackage.SELECT_STATEMENT__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case CQLPackage.SELECT_STATEMENT__DISTINCT:
        return DISTINCT_EDEFAULT == null ? distinct != null : !DISTINCT_EDEFAULT.equals(distinct);
      case CQLPackage.SELECT_STATEMENT__ATTRIBUTES:
        return attributes != null && !attributes.isEmpty();
      case CQLPackage.SELECT_STATEMENT__AGGREGATIONS:
        return aggregations != null && !aggregations.isEmpty();
      case CQLPackage.SELECT_STATEMENT__SOURCES:
        return sources != null && !sources.isEmpty();
      case CQLPackage.SELECT_STATEMENT__NESTED:
        return nested != null && !nested.isEmpty();
      case CQLPackage.SELECT_STATEMENT__NESTED_ALIASES:
        return nestedAliases != null && !nestedAliases.isEmpty();
      case CQLPackage.SELECT_STATEMENT__PREDICATES:
        return predicates != null;
      case CQLPackage.SELECT_STATEMENT__ORDER:
        return order != null && !order.isEmpty();
      case CQLPackage.SELECT_STATEMENT__HAVING:
        return having != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(", distinct: ");
    result.append(distinct);
    result.append(')');
    return result.toString();
  }

} //Select_StatementImpl
