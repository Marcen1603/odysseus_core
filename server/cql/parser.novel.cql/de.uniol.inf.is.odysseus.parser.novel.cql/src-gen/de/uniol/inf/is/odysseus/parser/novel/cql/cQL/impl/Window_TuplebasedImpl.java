/**
 * generated by Xtext 2.10.0
 */
package de.uniol.inf.is.odysseus.parser.novel.cql.cQL.impl;

import de.uniol.inf.is.odysseus.parser.novel.cql.cQL.Attribute;
import de.uniol.inf.is.odysseus.parser.novel.cql.cQL.CQLPackage;
import de.uniol.inf.is.odysseus.parser.novel.cql.cQL.Window_Tuplebased;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Window Tuplebased</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link de.uniol.inf.is.odysseus.parser.novel.cql.cQL.impl.Window_TuplebasedImpl#getSize <em>Size</em>}</li>
 *   <li>{@link de.uniol.inf.is.odysseus.parser.novel.cql.cQL.impl.Window_TuplebasedImpl#getAdvance_size <em>Advance size</em>}</li>
 *   <li>{@link de.uniol.inf.is.odysseus.parser.novel.cql.cQL.impl.Window_TuplebasedImpl#getPartition_attribute <em>Partition attribute</em>}</li>
 * </ul>
 *
 * @generated
 */
public class Window_TuplebasedImpl extends MinimalEObjectImpl.Container implements Window_Tuplebased
{
  /**
   * The default value of the '{@link #getSize() <em>Size</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSize()
   * @generated
   * @ordered
   */
  protected static final int SIZE_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getSize() <em>Size</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSize()
   * @generated
   * @ordered
   */
  protected int size = SIZE_EDEFAULT;

  /**
   * The default value of the '{@link #getAdvance_size() <em>Advance size</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAdvance_size()
   * @generated
   * @ordered
   */
  protected static final int ADVANCE_SIZE_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getAdvance_size() <em>Advance size</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAdvance_size()
   * @generated
   * @ordered
   */
  protected int advance_size = ADVANCE_SIZE_EDEFAULT;

  /**
   * The cached value of the '{@link #getPartition_attribute() <em>Partition attribute</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPartition_attribute()
   * @generated
   * @ordered
   */
  protected Attribute partition_attribute;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected Window_TuplebasedImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return CQLPackage.Literals.WINDOW_TUPLEBASED;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public int getSize()
  {
    return size;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setSize(int newSize)
  {
    int oldSize = size;
    size = newSize;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CQLPackage.WINDOW_TUPLEBASED__SIZE, oldSize, size));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public int getAdvance_size()
  {
    return advance_size;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setAdvance_size(int newAdvance_size)
  {
    int oldAdvance_size = advance_size;
    advance_size = newAdvance_size;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CQLPackage.WINDOW_TUPLEBASED__ADVANCE_SIZE, oldAdvance_size, advance_size));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Attribute getPartition_attribute()
  {
    return partition_attribute;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetPartition_attribute(Attribute newPartition_attribute, NotificationChain msgs)
  {
    Attribute oldPartition_attribute = partition_attribute;
    partition_attribute = newPartition_attribute;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, CQLPackage.WINDOW_TUPLEBASED__PARTITION_ATTRIBUTE, oldPartition_attribute, newPartition_attribute);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setPartition_attribute(Attribute newPartition_attribute)
  {
    if (newPartition_attribute != partition_attribute)
    {
      NotificationChain msgs = null;
      if (partition_attribute != null)
        msgs = ((InternalEObject)partition_attribute).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - CQLPackage.WINDOW_TUPLEBASED__PARTITION_ATTRIBUTE, null, msgs);
      if (newPartition_attribute != null)
        msgs = ((InternalEObject)newPartition_attribute).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - CQLPackage.WINDOW_TUPLEBASED__PARTITION_ATTRIBUTE, null, msgs);
      msgs = basicSetPartition_attribute(newPartition_attribute, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CQLPackage.WINDOW_TUPLEBASED__PARTITION_ATTRIBUTE, newPartition_attribute, newPartition_attribute));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case CQLPackage.WINDOW_TUPLEBASED__PARTITION_ATTRIBUTE:
        return basicSetPartition_attribute(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case CQLPackage.WINDOW_TUPLEBASED__SIZE:
        return getSize();
      case CQLPackage.WINDOW_TUPLEBASED__ADVANCE_SIZE:
        return getAdvance_size();
      case CQLPackage.WINDOW_TUPLEBASED__PARTITION_ATTRIBUTE:
        return getPartition_attribute();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case CQLPackage.WINDOW_TUPLEBASED__SIZE:
        setSize((Integer)newValue);
        return;
      case CQLPackage.WINDOW_TUPLEBASED__ADVANCE_SIZE:
        setAdvance_size((Integer)newValue);
        return;
      case CQLPackage.WINDOW_TUPLEBASED__PARTITION_ATTRIBUTE:
        setPartition_attribute((Attribute)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case CQLPackage.WINDOW_TUPLEBASED__SIZE:
        setSize(SIZE_EDEFAULT);
        return;
      case CQLPackage.WINDOW_TUPLEBASED__ADVANCE_SIZE:
        setAdvance_size(ADVANCE_SIZE_EDEFAULT);
        return;
      case CQLPackage.WINDOW_TUPLEBASED__PARTITION_ATTRIBUTE:
        setPartition_attribute((Attribute)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case CQLPackage.WINDOW_TUPLEBASED__SIZE:
        return size != SIZE_EDEFAULT;
      case CQLPackage.WINDOW_TUPLEBASED__ADVANCE_SIZE:
        return advance_size != ADVANCE_SIZE_EDEFAULT;
      case CQLPackage.WINDOW_TUPLEBASED__PARTITION_ATTRIBUTE:
        return partition_attribute != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (size: ");
    result.append(size);
    result.append(", advance_size: ");
    result.append(advance_size);
    result.append(')');
    return result.toString();
  }

} //Window_TuplebasedImpl
