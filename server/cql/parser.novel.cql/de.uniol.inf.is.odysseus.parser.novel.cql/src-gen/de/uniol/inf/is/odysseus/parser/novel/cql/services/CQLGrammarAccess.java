/*
 * generated by Xtext 2.10.0
 */
package de.uniol.inf.is.odysseus.parser.novel.cql.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class CQLGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.parser.novel.cql.CQL.Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cComponentsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cComponentsAlternatives_0_0 = (Alternatives)cComponentsAssignment_0.eContents().get(0);
		private final RuleCall cComponentsStatementParserRuleCall_0_0_0 = (RuleCall)cComponentsAlternatives_0_0.eContents().get(0);
		private final RuleCall cComponentsCommandParserRuleCall_0_0_1 = (RuleCall)cComponentsAlternatives_0_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Model:
		//	(components+=(Statement | Command) ';'?)*;
		@Override public ParserRule getRule() { return rule; }
		
		//(components+=(Statement | Command) ';'?)*
		public Group getGroup() { return cGroup; }
		
		//components+=(Statement | Command)
		public Assignment getComponentsAssignment_0() { return cComponentsAssignment_0; }
		
		//(Statement | Command)
		public Alternatives getComponentsAlternatives_0_0() { return cComponentsAlternatives_0_0; }
		
		//Statement
		public RuleCall getComponentsStatementParserRuleCall_0_0_0() { return cComponentsStatementParserRuleCall_0_0_0; }
		
		//Command
		public RuleCall getComponentsCommandParserRuleCall_0_0_1() { return cComponentsCommandParserRuleCall_0_0_1; }
		
		//';'?
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}
	public class BOOLEANElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.parser.novel.cql.CQL.BOOLEAN");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cFALSEKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cTRUEKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//BOOLEAN:
		//	'FALSE' | 'TRUE';
		@Override public ParserRule getRule() { return rule; }
		
		//'FALSE' | 'TRUE'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'FALSE'
		public Keyword getFALSEKeyword_0() { return cFALSEKeyword_0; }
		
		//'TRUE'
		public Keyword getTRUEKeyword_1() { return cTRUEKeyword_1; }
	}
	public class QualifiedAttributenameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.parser.novel.cql.CQL.QualifiedAttributename");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cQualifiedSourcenameParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Keyword cFullStopKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final RuleCall cQualifiedSourcenameParserRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Keyword cFullStopKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Keyword cAsteriskKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//QualifiedAttributename:
		//	ID
		//	| QualifiedSourcename '.' ID | QualifiedSourcename '.' '*';
		@Override public ParserRule getRule() { return rule; }
		
		//ID | QualifiedSourcename '.' ID | QualifiedSourcename '.' '*'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//QualifiedSourcename '.' ID
		public Group getGroup_1() { return cGroup_1; }
		
		//QualifiedSourcename
		public RuleCall getQualifiedSourcenameParserRuleCall_1_0() { return cQualifiedSourcenameParserRuleCall_1_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1_1() { return cFullStopKeyword_1_1; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_2() { return cIDTerminalRuleCall_1_2; }
		
		//QualifiedSourcename '.' '*'
		public Group getGroup_2() { return cGroup_2; }
		
		//QualifiedSourcename
		public RuleCall getQualifiedSourcenameParserRuleCall_2_0() { return cQualifiedSourcenameParserRuleCall_2_0; }
		
		//'.'
		public Keyword getFullStopKeyword_2_1() { return cFullStopKeyword_2_1; }
		
		//'*'
		public Keyword getAsteriskKeyword_2_2() { return cAsteriskKeyword_2_2; }
	}
	public class QualifiedAttributenameWithoutSpecialCharsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.parser.novel.cql.CQL.QualifiedAttributenameWithoutSpecialChars");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cQualifiedSourcenameParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Keyword cFullStopKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		
		//QualifiedAttributenameWithoutSpecialChars:
		//	ID | QualifiedSourcename '.' ID;
		@Override public ParserRule getRule() { return rule; }
		
		//ID | QualifiedSourcename '.' ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//QualifiedSourcename '.' ID
		public Group getGroup_1() { return cGroup_1; }
		
		//QualifiedSourcename
		public RuleCall getQualifiedSourcenameParserRuleCall_1_0() { return cQualifiedSourcenameParserRuleCall_1_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1_1() { return cFullStopKeyword_1_1; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_2() { return cIDTerminalRuleCall_1_2; }
	}
	public class QualifiedSourcenameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.parser.novel.cql.CQL.QualifiedSourcename");
		private final RuleCall cIDTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//QualifiedSourcename:
		//	ID;
		@Override public ParserRule getRule() { return rule; }
		
		//ID
		public RuleCall getIDTerminalRuleCall() { return cIDTerminalRuleCall; }
	}
	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.parser.novel.cql.CQL.Statement");
		private final Assignment cTypeAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cTypeAlternatives_0 = (Alternatives)cTypeAssignment.eContents().get(0);
		private final RuleCall cTypeSelectParserRuleCall_0_0 = (RuleCall)cTypeAlternatives_0.eContents().get(0);
		private final RuleCall cTypeCreateParserRuleCall_0_1 = (RuleCall)cTypeAlternatives_0.eContents().get(1);
		private final RuleCall cTypeStreamToParserRuleCall_0_2 = (RuleCall)cTypeAlternatives_0.eContents().get(2);
		
		//Statement:
		//	type=(Select
		//	| Create
		//	| StreamTo);
		@Override public ParserRule getRule() { return rule; }
		
		//type=(Select | Create | StreamTo)
		public Assignment getTypeAssignment() { return cTypeAssignment; }
		
		//(Select | Create | StreamTo)
		public Alternatives getTypeAlternatives_0() { return cTypeAlternatives_0; }
		
		//Select
		public RuleCall getTypeSelectParserRuleCall_0_0() { return cTypeSelectParserRuleCall_0_0; }
		
		//Create
		public RuleCall getTypeCreateParserRuleCall_0_1() { return cTypeCreateParserRuleCall_0_1; }
		
		//StreamTo
		public RuleCall getTypeStreamToParserRuleCall_0_2() { return cTypeStreamToParserRuleCall_0_2; }
	}
	public class CommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.parser.novel.cql.CQL.Command");
		private final Assignment cTypeAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cTypeAlternatives_0 = (Alternatives)cTypeAssignment.eContents().get(0);
		private final RuleCall cTypeDropStreamParserRuleCall_0_0 = (RuleCall)cTypeAlternatives_0.eContents().get(0);
		private final RuleCall cTypeUserManagementParserRuleCall_0_1 = (RuleCall)cTypeAlternatives_0.eContents().get(1);
		private final RuleCall cTypeRightsManagementParserRuleCall_0_2 = (RuleCall)cTypeAlternatives_0.eContents().get(2);
		private final RuleCall cTypeRoleManagementParserRuleCall_0_3 = (RuleCall)cTypeAlternatives_0.eContents().get(3);
		private final RuleCall cTypeCreateDataBaseGenericConnectionParserRuleCall_0_4 = (RuleCall)cTypeAlternatives_0.eContents().get(4);
		private final RuleCall cTypeCreateDataBaseJDBCConnectionParserRuleCall_0_5 = (RuleCall)cTypeAlternatives_0.eContents().get(5);
		private final RuleCall cTypeDropDatabaseConnectionParserRuleCall_0_6 = (RuleCall)cTypeAlternatives_0.eContents().get(6);
		private final RuleCall cTypeCreateContextStoreParserRuleCall_0_7 = (RuleCall)cTypeAlternatives_0.eContents().get(7);
		private final RuleCall cTypeDropContextStoreParserRuleCall_0_8 = (RuleCall)cTypeAlternatives_0.eContents().get(8);
		
		//Command:
		//	type=(DropStream
		//	| UserManagement
		//	| RightsManagement
		//	| RoleManagement
		//	| CreateDataBaseGenericConnection
		//	| CreateDataBaseJDBCConnection
		//	| DropDatabaseConnection
		//	| CreateContextStore
		//	| DropContextStore);
		@Override public ParserRule getRule() { return rule; }
		
		//type=(DropStream | UserManagement | RightsManagement | RoleManagement | CreateDataBaseGenericConnection |
		//CreateDataBaseJDBCConnection | DropDatabaseConnection | CreateContextStore | DropContextStore)
		public Assignment getTypeAssignment() { return cTypeAssignment; }
		
		//(DropStream | UserManagement | RightsManagement | RoleManagement | CreateDataBaseGenericConnection |
		//CreateDataBaseJDBCConnection | DropDatabaseConnection | CreateContextStore | DropContextStore)
		public Alternatives getTypeAlternatives_0() { return cTypeAlternatives_0; }
		
		//DropStream
		public RuleCall getTypeDropStreamParserRuleCall_0_0() { return cTypeDropStreamParserRuleCall_0_0; }
		
		//UserManagement
		public RuleCall getTypeUserManagementParserRuleCall_0_1() { return cTypeUserManagementParserRuleCall_0_1; }
		
		//RightsManagement
		public RuleCall getTypeRightsManagementParserRuleCall_0_2() { return cTypeRightsManagementParserRuleCall_0_2; }
		
		//RoleManagement
		public RuleCall getTypeRoleManagementParserRuleCall_0_3() { return cTypeRoleManagementParserRuleCall_0_3; }
		
		//CreateDataBaseGenericConnection
		public RuleCall getTypeCreateDataBaseGenericConnectionParserRuleCall_0_4() { return cTypeCreateDataBaseGenericConnectionParserRuleCall_0_4; }
		
		//CreateDataBaseJDBCConnection
		public RuleCall getTypeCreateDataBaseJDBCConnectionParserRuleCall_0_5() { return cTypeCreateDataBaseJDBCConnectionParserRuleCall_0_5; }
		
		//DropDatabaseConnection
		public RuleCall getTypeDropDatabaseConnectionParserRuleCall_0_6() { return cTypeDropDatabaseConnectionParserRuleCall_0_6; }
		
		//CreateContextStore
		public RuleCall getTypeCreateContextStoreParserRuleCall_0_7() { return cTypeCreateContextStoreParserRuleCall_0_7; }
		
		//DropContextStore
		public RuleCall getTypeDropContextStoreParserRuleCall_0_8() { return cTypeDropContextStoreParserRuleCall_0_8; }
	}
	public class SelectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.parser.novel.cql.CQL.Select");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSelectAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSELECTKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDistinctAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cDistinctDISTINCTKeyword_2_0 = (Keyword)cDistinctAssignment_2.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Keyword cAsteriskKeyword_3_0 = (Keyword)cAlternatives_3.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cAlternatives_3.eContents().get(1);
		private final Assignment cArgumentsAssignment_3_1_0 = (Assignment)cGroup_3_1.eContents().get(0);
		private final RuleCall cArgumentsSelectArgumentParserRuleCall_3_1_0_0 = (RuleCall)cArgumentsAssignment_3_1_0.eContents().get(0);
		private final Group cGroup_3_1_1 = (Group)cGroup_3_1.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_1_0 = (Keyword)cGroup_3_1_1.eContents().get(0);
		private final Assignment cArgumentsAssignment_3_1_1_1 = (Assignment)cGroup_3_1_1.eContents().get(1);
		private final RuleCall cArgumentsSelectArgumentParserRuleCall_3_1_1_1_0 = (RuleCall)cArgumentsAssignment_3_1_1_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cFROMKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cSourcesAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cSourcesSourceParserRuleCall_4_1_0 = (RuleCall)cSourcesAssignment_4_1.eContents().get(0);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Keyword cCommaKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Assignment cSourcesAssignment_4_2_1 = (Assignment)cGroup_4_2.eContents().get(1);
		private final RuleCall cSourcesSourceParserRuleCall_4_2_1_0 = (RuleCall)cSourcesAssignment_4_2_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cWHEREKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cPredicatesAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cPredicatesExpressionsModelParserRuleCall_5_1_0 = (RuleCall)cPredicatesAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cGROUPKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Keyword cBYKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Assignment cOrderAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cOrderAttributeParserRuleCall_6_2_0 = (RuleCall)cOrderAssignment_6_2.eContents().get(0);
		private final Group cGroup_6_3 = (Group)cGroup_6.eContents().get(3);
		private final Keyword cCommaKeyword_6_3_0 = (Keyword)cGroup_6_3.eContents().get(0);
		private final Assignment cOrderAssignment_6_3_1 = (Assignment)cGroup_6_3.eContents().get(1);
		private final RuleCall cOrderAttributeParserRuleCall_6_3_1_0 = (RuleCall)cOrderAssignment_6_3_1.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cHAVINGKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cHavingAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cHavingExpressionsModelParserRuleCall_7_1_0 = (RuleCall)cHavingAssignment_7_1.eContents().get(0);
		
		//Select:
		//	{Select}
		//	'SELECT'
		//	distinct='DISTINCT'? ('*' | arguments+=SelectArgument+ (',' arguments+=SelectArgument)*) ('FROM' sources+=Source+ (','
		//	sources+=Source)*) ('WHERE' predicates=ExpressionsModel)? ('GROUP' 'BY' order+=Attribute+ (',' order+=Attribute)*)?
		//	('HAVING' having=ExpressionsModel)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{Select} 'SELECT' distinct='DISTINCT'? ('*' | arguments+=SelectArgument+ (',' arguments+=SelectArgument)*) ('FROM'
		//sources+=Source+ (',' sources+=Source)*) ('WHERE' predicates=ExpressionsModel)? ('GROUP' 'BY' order+=Attribute+ (','
		//order+=Attribute)*)? ('HAVING' having=ExpressionsModel)?
		public Group getGroup() { return cGroup; }
		
		//{Select}
		public Action getSelectAction_0() { return cSelectAction_0; }
		
		//'SELECT'
		public Keyword getSELECTKeyword_1() { return cSELECTKeyword_1; }
		
		//distinct='DISTINCT'?
		public Assignment getDistinctAssignment_2() { return cDistinctAssignment_2; }
		
		//'DISTINCT'
		public Keyword getDistinctDISTINCTKeyword_2_0() { return cDistinctDISTINCTKeyword_2_0; }
		
		//('*' | arguments+=SelectArgument+ (',' arguments+=SelectArgument)*)
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//'*'
		public Keyword getAsteriskKeyword_3_0() { return cAsteriskKeyword_3_0; }
		
		//arguments+=SelectArgument+ (',' arguments+=SelectArgument)*
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//arguments+=SelectArgument+
		public Assignment getArgumentsAssignment_3_1_0() { return cArgumentsAssignment_3_1_0; }
		
		//SelectArgument
		public RuleCall getArgumentsSelectArgumentParserRuleCall_3_1_0_0() { return cArgumentsSelectArgumentParserRuleCall_3_1_0_0; }
		
		//(',' arguments+=SelectArgument)*
		public Group getGroup_3_1_1() { return cGroup_3_1_1; }
		
		//','
		public Keyword getCommaKeyword_3_1_1_0() { return cCommaKeyword_3_1_1_0; }
		
		//arguments+=SelectArgument
		public Assignment getArgumentsAssignment_3_1_1_1() { return cArgumentsAssignment_3_1_1_1; }
		
		//SelectArgument
		public RuleCall getArgumentsSelectArgumentParserRuleCall_3_1_1_1_0() { return cArgumentsSelectArgumentParserRuleCall_3_1_1_1_0; }
		
		//('FROM' sources+=Source+ (',' sources+=Source)*)
		public Group getGroup_4() { return cGroup_4; }
		
		//'FROM'
		public Keyword getFROMKeyword_4_0() { return cFROMKeyword_4_0; }
		
		//sources+=Source+
		public Assignment getSourcesAssignment_4_1() { return cSourcesAssignment_4_1; }
		
		//Source
		public RuleCall getSourcesSourceParserRuleCall_4_1_0() { return cSourcesSourceParserRuleCall_4_1_0; }
		
		//(',' sources+=Source)*
		public Group getGroup_4_2() { return cGroup_4_2; }
		
		//','
		public Keyword getCommaKeyword_4_2_0() { return cCommaKeyword_4_2_0; }
		
		//sources+=Source
		public Assignment getSourcesAssignment_4_2_1() { return cSourcesAssignment_4_2_1; }
		
		//Source
		public RuleCall getSourcesSourceParserRuleCall_4_2_1_0() { return cSourcesSourceParserRuleCall_4_2_1_0; }
		
		//('WHERE' predicates=ExpressionsModel)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'WHERE'
		public Keyword getWHEREKeyword_5_0() { return cWHEREKeyword_5_0; }
		
		//predicates=ExpressionsModel
		public Assignment getPredicatesAssignment_5_1() { return cPredicatesAssignment_5_1; }
		
		//ExpressionsModel
		public RuleCall getPredicatesExpressionsModelParserRuleCall_5_1_0() { return cPredicatesExpressionsModelParserRuleCall_5_1_0; }
		
		//('GROUP' 'BY' order+=Attribute+ (',' order+=Attribute)*)?
		public Group getGroup_6() { return cGroup_6; }
		
		//'GROUP'
		public Keyword getGROUPKeyword_6_0() { return cGROUPKeyword_6_0; }
		
		//'BY'
		public Keyword getBYKeyword_6_1() { return cBYKeyword_6_1; }
		
		//order+=Attribute+
		public Assignment getOrderAssignment_6_2() { return cOrderAssignment_6_2; }
		
		//Attribute
		public RuleCall getOrderAttributeParserRuleCall_6_2_0() { return cOrderAttributeParserRuleCall_6_2_0; }
		
		//(',' order+=Attribute)*
		public Group getGroup_6_3() { return cGroup_6_3; }
		
		//','
		public Keyword getCommaKeyword_6_3_0() { return cCommaKeyword_6_3_0; }
		
		//order+=Attribute
		public Assignment getOrderAssignment_6_3_1() { return cOrderAssignment_6_3_1; }
		
		//Attribute
		public RuleCall getOrderAttributeParserRuleCall_6_3_1_0() { return cOrderAttributeParserRuleCall_6_3_1_0; }
		
		//('HAVING' having=ExpressionsModel)?
		public Group getGroup_7() { return cGroup_7; }
		
		//'HAVING'
		public Keyword getHAVINGKeyword_7_0() { return cHAVINGKeyword_7_0; }
		
		//having=ExpressionsModel
		public Assignment getHavingAssignment_7_1() { return cHavingAssignment_7_1; }
		
		//ExpressionsModel
		public RuleCall getHavingExpressionsModelParserRuleCall_7_1_0() { return cHavingExpressionsModelParserRuleCall_7_1_0; }
	}
	public class InnerSelectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.parser.novel.cql.CQL.InnerSelect");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSelectAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSelectSelectParserRuleCall_1_0 = (RuleCall)cSelectAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//InnerSelect:
		//	'(' select=Select ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'(' select=Select ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//select=Select
		public Assignment getSelectAssignment_1() { return cSelectAssignment_1; }
		
		//Select
		public RuleCall getSelectSelectParserRuleCall_1_0() { return cSelectSelectParserRuleCall_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	public class InnerSelect2Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.parser.novel.cql.CQL.InnerSelect2");
		private final Assignment cSelectAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cSelectSelectParserRuleCall_0 = (RuleCall)cSelectAssignment.eContents().get(0);
		
		//InnerSelect2:
		//	select=Select;
		@Override public ParserRule getRule() { return rule; }
		
		//select=Select
		public Assignment getSelectAssignment() { return cSelectAssignment; }
		
		//Select
		public RuleCall getSelectSelectParserRuleCall_0() { return cSelectSelectParserRuleCall_0; }
	}
	public class SelectArgumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.parser.novel.cql.CQL.SelectArgument");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cAttributeAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cAttributeAttributeParserRuleCall_0_0 = (RuleCall)cAttributeAssignment_0.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cExpressionSelectExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		
		//SelectArgument:
		//	attribute=Attribute | expression=SelectExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//attribute=Attribute | expression=SelectExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//attribute=Attribute
		public Assignment getAttributeAssignment_0() { return cAttributeAssignment_0; }
		
		//Attribute
		public RuleCall getAttributeAttributeParserRuleCall_0_0() { return cAttributeAttributeParserRuleCall_0_0; }
		
		//expression=SelectExpression
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }
		
		//SelectExpression
		public RuleCall getExpressionSelectExpressionParserRuleCall_1_0() { return cExpressionSelectExpressionParserRuleCall_1_0; }
	}
	public class SourceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.parser.novel.cql.CQL.Source");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSimpleSourceParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNestedSourceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Source:
		//	SimpleSource | NestedSource;
		@Override public ParserRule getRule() { return rule; }
		
		//SimpleSource | NestedSource
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SimpleSource
		public RuleCall getSimpleSourceParserRuleCall_0() { return cSimpleSourceParserRuleCall_0; }
		
		//NestedSource
		public RuleCall getNestedSourceParserRuleCall_1() { return cNestedSourceParserRuleCall_1; }
	}
	public class SimpleSourceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.parser.novel.cql.CQL.SimpleSource");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSimpleSourceAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedSourcenameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cWindowAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cWindowWindowOperatorParserRuleCall_2_0 = (RuleCall)cWindowAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cASKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cAliasAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cAliasAliasParserRuleCall_3_1_0 = (RuleCall)cAliasAssignment_3_1.eContents().get(0);
		
		//SimpleSource Source:
		//	{SimpleSource} name=QualifiedSourcename window=WindowOperator? ('AS' alias=Alias)?
		@Override public ParserRule getRule() { return rule; }
		
		//{SimpleSource} name=QualifiedSourcename window=WindowOperator? ('AS' alias=Alias)?
		public Group getGroup() { return cGroup; }
		
		//{SimpleSource}
		public Action getSimpleSourceAction_0() { return cSimpleSourceAction_0; }
		
		//name=QualifiedSourcename
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//QualifiedSourcename
		public RuleCall getNameQualifiedSourcenameParserRuleCall_1_0() { return cNameQualifiedSourcenameParserRuleCall_1_0; }
		
		//window=WindowOperator?
		public Assignment getWindowAssignment_2() { return cWindowAssignment_2; }
		
		//WindowOperator
		public RuleCall getWindowWindowOperatorParserRuleCall_2_0() { return cWindowWindowOperatorParserRuleCall_2_0; }
		
		//('AS' alias=Alias)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'AS'
		public Keyword getASKeyword_3_0() { return cASKeyword_3_0; }
		
		//alias=Alias
		public Assignment getAliasAssignment_3_1() { return cAliasAssignment_3_1; }
		
		//Alias
		public RuleCall getAliasAliasParserRuleCall_3_1_0() { return cAliasAliasParserRuleCall_3_1_0; }
	}
	public class NestedSourceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.parser.novel.cql.CQL.NestedSource");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNestedSourceAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cStatementAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStatementInnerSelectParserRuleCall_1_0 = (RuleCall)cStatementAssignment_1.eContents().get(0);
		private final Keyword cASKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAliasAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAliasAliasParserRuleCall_3_0 = (RuleCall)cAliasAssignment_3.eContents().get(0);
		
		//NestedSource Source:
		//	{NestedSource} statement=InnerSelect 'AS' alias=Alias
		@Override public ParserRule getRule() { return rule; }
		
		//{NestedSource} statement=InnerSelect 'AS' alias=Alias
		public Group getGroup() { return cGroup; }
		
		//{NestedSource}
		public Action getNestedSourceAction_0() { return cNestedSourceAction_0; }
		
		//statement=InnerSelect
		public Assignment getStatementAssignment_1() { return cStatementAssignment_1; }
		
		//InnerSelect
		public RuleCall getStatementInnerSelectParserRuleCall_1_0() { return cStatementInnerSelectParserRuleCall_1_0; }
		
		//'AS'
		public Keyword getASKeyword_2() { return cASKeyword_2; }
		
		//alias=Alias
		public Assignment getAliasAssignment_3() { return cAliasAssignment_3; }
		
		//Alias
		public RuleCall getAliasAliasParserRuleCall_3_0() { return cAliasAliasParserRuleCall_3_0; }
	}
	public class AttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.parser.novel.cql.CQL.Attribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameQualifiedAttributenameParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cASKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cAliasAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cAliasAliasParserRuleCall_1_1_0 = (RuleCall)cAliasAssignment_1_1.eContents().get(0);
		
		//Attribute:
		//	name=QualifiedAttributename ('AS' alias=Alias)?;
		@Override public ParserRule getRule() { return rule; }
		
		//name=QualifiedAttributename ('AS' alias=Alias)?
		public Group getGroup() { return cGroup; }
		
		//name=QualifiedAttributename
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//QualifiedAttributename
		public RuleCall getNameQualifiedAttributenameParserRuleCall_0_0() { return cNameQualifiedAttributenameParserRuleCall_0_0; }
		
		//('AS' alias=Alias)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'AS'
		public Keyword getASKeyword_1_0() { return cASKeyword_1_0; }
		
		//alias=Alias
		public Assignment getAliasAssignment_1_1() { return cAliasAssignment_1_1; }
		
		//Alias
		public RuleCall getAliasAliasParserRuleCall_1_1_0() { return cAliasAliasParserRuleCall_1_1_0; }
	}
	public class AttributeWithoutAliasDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.parser.novel.cql.CQL.AttributeWithoutAliasDefinition");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameQualifiedAttributenameParserRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//AttributeWithoutAliasDefinition Attribute:
		//	name=QualifiedAttributename
		@Override public ParserRule getRule() { return rule; }
		
		//name=QualifiedAttributename
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//QualifiedAttributename
		public RuleCall getNameQualifiedAttributenameParserRuleCall_0() { return cNameQualifiedAttributenameParserRuleCall_0; }
	}
	public class AttributeForSelectExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.parser.novel.cql.CQL.AttributeForSelectExpression");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameQualifiedAttributenameWithoutSpecialCharsParserRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//AttributeForSelectExpression Attribute:
		//	name=QualifiedAttributenameWithoutSpecialChars
		@Override public ParserRule getRule() { return rule; }
		
		//name=QualifiedAttributenameWithoutSpecialChars
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//QualifiedAttributenameWithoutSpecialChars
		public RuleCall getNameQualifiedAttributenameWithoutSpecialCharsParserRuleCall_0() { return cNameQualifiedAttributenameWithoutSpecialCharsParserRuleCall_0; }
	}
	public class AttributeWithNestedStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.parser.novel.cql.CQL.AttributeWithNestedStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cValueAttributeWithoutAliasDefinitionParserRuleCall_0_0 = (RuleCall)cValueAssignment_0.eContents().get(0);
		private final Keyword cINKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNestedAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNestedInnerSelectParserRuleCall_2_0 = (RuleCall)cNestedAssignment_2.eContents().get(0);
		
		//AttributeWithNestedStatement:
		//	value=AttributeWithoutAliasDefinition
		//	'IN'
		//	nested=InnerSelect;
		@Override public ParserRule getRule() { return rule; }
		
		//value=AttributeWithoutAliasDefinition 'IN' nested=InnerSelect
		public Group getGroup() { return cGroup; }
		
		//value=AttributeWithoutAliasDefinition
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }
		
		//AttributeWithoutAliasDefinition
		public RuleCall getValueAttributeWithoutAliasDefinitionParserRuleCall_0_0() { return cValueAttributeWithoutAliasDefinitionParserRuleCall_0_0; }
		
		//'IN'
		public Keyword getINKeyword_1() { return cINKeyword_1; }
		
		//nested=InnerSelect
		public Assignment getNestedAssignment_2() { return cNestedAssignment_2; }
		
		//InnerSelect
		public RuleCall getNestedInnerSelectParserRuleCall_2_0() { return cNestedInnerSelectParserRuleCall_2_0; }
	}
	public class AndOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.parser.novel.cql.CQL.AndOperator");
		private final Keyword cANDKeyword = (Keyword)rule.eContents().get(1);
		
		////QuantificationPredicate:
		////	ExistPredicate
		////;
		////
		////ExistPredicate returns QuantificationPredicate:
		////	{ExistPredicate}
		////	'EXISTS' statement=NestedStatement	
		////;
		////
		////AnyPredicate returns QuantificationPredicate:
		////	{ExistPredicate}
		////	'ANY' statement=NestedStatement	
		////;
		////TODO JoinVisitor, schauen wo ExistenceAo erzeugt wird
		////Operators for predicates and expressions
		//AndOperator:
		//	'AND';
		@Override public ParserRule getRule() { return rule; }
		
		//'AND'
		public Keyword getANDKeyword() { return cANDKeyword; }
	}
	public class OrOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.parser.novel.cql.CQL.OrOperator");
		private final Keyword cORKeyword = (Keyword)rule.eContents().get(1);
		
		//OrOperator:
		//	'OR';
		@Override public ParserRule getRule() { return rule; }
		
		//'OR'
		public Keyword getORKeyword() { return cORKeyword; }
	}
	public class EQUALITIY_OPERATORElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.parser.novel.cql.CQL.EQUALITIY_OPERATOR");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cEqualsSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cExclamationMarkEqualsSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//EQUALITIY_OPERATOR:
		//	'=' | '!=';
		@Override public ParserRule getRule() { return rule; }
		
		//'=' | '!='
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'='
		public Keyword getEqualsSignKeyword_0() { return cEqualsSignKeyword_0; }
		
		//'!='
		public Keyword getExclamationMarkEqualsSignKeyword_1() { return cExclamationMarkEqualsSignKeyword_1; }
	}
	public class COMPARE_OPERATORElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.parser.novel.cql.CQL.COMPARE_OPERATOR");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cGreaterThanSignEqualsSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cLessThanSignEqualsSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cLessThanSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cGreaterThanSignKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//COMPARE_OPERATOR:
		//	'>=' | '<=' | '<' | '>';
		@Override public ParserRule getRule() { return rule; }
		
		//'>=' | '<=' | '<' | '>'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'>='
		public Keyword getGreaterThanSignEqualsSignKeyword_0() { return cGreaterThanSignEqualsSignKeyword_0; }
		
		//'<='
		public Keyword getLessThanSignEqualsSignKeyword_1() { return cLessThanSignEqualsSignKeyword_1; }
		
		//'<'
		public Keyword getLessThanSignKeyword_2() { return cLessThanSignKeyword_2; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_3() { return cGreaterThanSignKeyword_3; }
	}
	public class ARITHMETIC_OPERATORElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.parser.novel.cql.CQL.ARITHMETIC_OPERATOR");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cADD_OPERATORParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMINUS_OPERATORParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cMUL_OR_DIV_OPERATORParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cEXPONENT_OPERATORParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//ARITHMETIC_OPERATOR:
		//	ADD_OPERATOR
		//	| MINUS_OPERATOR
		//	| MUL_OR_DIV_OPERATOR
		//	| EXPONENT_OPERATOR;
		@Override public ParserRule getRule() { return rule; }
		
		//ADD_OPERATOR | MINUS_OPERATOR | MUL_OR_DIV_OPERATOR | EXPONENT_OPERATOR
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ADD_OPERATOR
		public RuleCall getADD_OPERATORParserRuleCall_0() { return cADD_OPERATORParserRuleCall_0; }
		
		//MINUS_OPERATOR
		public RuleCall getMINUS_OPERATORParserRuleCall_1() { return cMINUS_OPERATORParserRuleCall_1; }
		
		//MUL_OR_DIV_OPERATOR
		public RuleCall getMUL_OR_DIV_OPERATORParserRuleCall_2() { return cMUL_OR_DIV_OPERATORParserRuleCall_2; }
		
		//EXPONENT_OPERATOR
		public RuleCall getEXPONENT_OPERATORParserRuleCall_3() { return cEXPONENT_OPERATORParserRuleCall_3; }
	}
	public class EXPONENT_OPERATORElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.parser.novel.cql.CQL.EXPONENT_OPERATOR");
		private final Keyword cCircumflexAccentKeyword = (Keyword)rule.eContents().get(1);
		
		//EXPONENT_OPERATOR:
		//	'^';
		@Override public ParserRule getRule() { return rule; }
		
		//'^'
		public Keyword getCircumflexAccentKeyword() { return cCircumflexAccentKeyword; }
	}
	public class MUL_OR_DIV_OPERATORElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.parser.novel.cql.CQL.MUL_OR_DIV_OPERATOR");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cSolidusKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cAsteriskKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//MUL_OR_DIV_OPERATOR:
		//	'/' | '*';
		@Override public ParserRule getRule() { return rule; }
		
		//'/' | '*'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'/'
		public Keyword getSolidusKeyword_0() { return cSolidusKeyword_0; }
		
		//'*'
		public Keyword getAsteriskKeyword_1() { return cAsteriskKeyword_1; }
	}
	public class ADD_OPERATORElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.parser.novel.cql.CQL.ADD_OPERATOR");
		private final Keyword cPlusSignKeyword = (Keyword)rule.eContents().get(1);
		
		//ADD_OPERATOR:
		//	'+';
		@Override public ParserRule getRule() { return rule; }
		
		//'+'
		public Keyword getPlusSignKeyword() { return cPlusSignKeyword; }
	}
	public class MINUS_OPERATORElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.parser.novel.cql.CQL.MINUS_OPERATOR");
		private final Keyword cHyphenMinusKeyword = (Keyword)rule.eContents().get(1);
		
		//MINUS_OPERATOR:
		//	'-';
		@Override public ParserRule getRule() { return rule; }
		
		//'-'
		public Keyword getHyphenMinusKeyword() { return cHyphenMinusKeyword; }
	}
	public class SelectExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.parser.novel.cql.CQL.SelectExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cAlternatives_0.eContents().get(0);
		private final Assignment cExpressionsAssignment_0_0_0 = (Assignment)cGroup_0_0.eContents().get(0);
		private final RuleCall cExpressionsExpressionComponentParserRuleCall_0_0_0_0 = (RuleCall)cExpressionsAssignment_0_0_0.eContents().get(0);
		private final Group cGroup_0_0_1 = (Group)cGroup_0_0.eContents().get(1);
		private final Assignment cOperatorsAssignment_0_0_1_0 = (Assignment)cGroup_0_0_1.eContents().get(0);
		private final RuleCall cOperatorsARITHMETIC_OPERATORParserRuleCall_0_0_1_0_0 = (RuleCall)cOperatorsAssignment_0_0_1_0.eContents().get(0);
		private final Assignment cExpressionsAssignment_0_0_1_1 = (Assignment)cGroup_0_0_1.eContents().get(1);
		private final Alternatives cExpressionsAlternatives_0_0_1_1_0 = (Alternatives)cExpressionsAssignment_0_0_1_1.eContents().get(0);
		private final RuleCall cExpressionsExpressionComponentParserRuleCall_0_0_1_1_0_0 = (RuleCall)cExpressionsAlternatives_0_0_1_1_0.eContents().get(0);
		private final RuleCall cExpressionsExpressionComponentAsAttributeParserRuleCall_0_0_1_1_0_1 = (RuleCall)cExpressionsAlternatives_0_0_1_1_0.eContents().get(1);
		private final Group cGroup_0_1 = (Group)cAlternatives_0.eContents().get(1);
		private final Assignment cExpressionsAssignment_0_1_0 = (Assignment)cGroup_0_1.eContents().get(0);
		private final RuleCall cExpressionsExpressionComponentAsAttributeParserRuleCall_0_1_0_0 = (RuleCall)cExpressionsAssignment_0_1_0.eContents().get(0);
		private final Group cGroup_0_1_1 = (Group)cGroup_0_1.eContents().get(1);
		private final Assignment cOperatorsAssignment_0_1_1_0 = (Assignment)cGroup_0_1_1.eContents().get(0);
		private final RuleCall cOperatorsARITHMETIC_OPERATORParserRuleCall_0_1_1_0_0 = (RuleCall)cOperatorsAssignment_0_1_1_0.eContents().get(0);
		private final Assignment cExpressionsAssignment_0_1_1_1 = (Assignment)cGroup_0_1_1.eContents().get(1);
		private final Alternatives cExpressionsAlternatives_0_1_1_1_0 = (Alternatives)cExpressionsAssignment_0_1_1_1.eContents().get(0);
		private final RuleCall cExpressionsExpressionComponentParserRuleCall_0_1_1_1_0_0 = (RuleCall)cExpressionsAlternatives_0_1_1_1_0.eContents().get(0);
		private final RuleCall cExpressionsExpressionComponentAsAttributeParserRuleCall_0_1_1_1_0_1 = (RuleCall)cExpressionsAlternatives_0_1_1_1_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cASKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cAliasAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cAliasAliasParserRuleCall_1_1_0 = (RuleCall)cAliasAssignment_1_1.eContents().get(0);
		
		//SelectExpression:
		//	(expressions+=ExpressionComponent (operators+=ARITHMETIC_OPERATOR
		//	expressions+=(ExpressionComponent | ExpressionComponentAsAttribute))*
		//	| expressions+=ExpressionComponentAsAttribute (operators+=ARITHMETIC_OPERATOR
		//	expressions+=(ExpressionComponent | ExpressionComponentAsAttribute))) ('AS' alias=Alias)? //TODO Add SelectExpression without an alias
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(expressions+=ExpressionComponent (operators+=ARITHMETIC_OPERATOR expressions+=(ExpressionComponent |
		//ExpressionComponentAsAttribute))* | expressions+=ExpressionComponentAsAttribute (operators+=ARITHMETIC_OPERATOR
		//expressions+=(ExpressionComponent | ExpressionComponentAsAttribute))) ('AS' alias=Alias)?
		public Group getGroup() { return cGroup; }
		
		//(expressions+=ExpressionComponent (operators+=ARITHMETIC_OPERATOR expressions+=(ExpressionComponent |
		//ExpressionComponentAsAttribute))* | expressions+=ExpressionComponentAsAttribute (operators+=ARITHMETIC_OPERATOR
		//expressions+=(ExpressionComponent | ExpressionComponentAsAttribute)))
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//expressions+=ExpressionComponent (operators+=ARITHMETIC_OPERATOR expressions+=(ExpressionComponent |
		//ExpressionComponentAsAttribute))*
		public Group getGroup_0_0() { return cGroup_0_0; }
		
		//expressions+=ExpressionComponent
		public Assignment getExpressionsAssignment_0_0_0() { return cExpressionsAssignment_0_0_0; }
		
		//ExpressionComponent
		public RuleCall getExpressionsExpressionComponentParserRuleCall_0_0_0_0() { return cExpressionsExpressionComponentParserRuleCall_0_0_0_0; }
		
		//(operators+=ARITHMETIC_OPERATOR expressions+=(ExpressionComponent | ExpressionComponentAsAttribute))*
		public Group getGroup_0_0_1() { return cGroup_0_0_1; }
		
		//operators+=ARITHMETIC_OPERATOR
		public Assignment getOperatorsAssignment_0_0_1_0() { return cOperatorsAssignment_0_0_1_0; }
		
		//ARITHMETIC_OPERATOR
		public RuleCall getOperatorsARITHMETIC_OPERATORParserRuleCall_0_0_1_0_0() { return cOperatorsARITHMETIC_OPERATORParserRuleCall_0_0_1_0_0; }
		
		//expressions+=(ExpressionComponent | ExpressionComponentAsAttribute)
		public Assignment getExpressionsAssignment_0_0_1_1() { return cExpressionsAssignment_0_0_1_1; }
		
		//(ExpressionComponent | ExpressionComponentAsAttribute)
		public Alternatives getExpressionsAlternatives_0_0_1_1_0() { return cExpressionsAlternatives_0_0_1_1_0; }
		
		//ExpressionComponent
		public RuleCall getExpressionsExpressionComponentParserRuleCall_0_0_1_1_0_0() { return cExpressionsExpressionComponentParserRuleCall_0_0_1_1_0_0; }
		
		//ExpressionComponentAsAttribute
		public RuleCall getExpressionsExpressionComponentAsAttributeParserRuleCall_0_0_1_1_0_1() { return cExpressionsExpressionComponentAsAttributeParserRuleCall_0_0_1_1_0_1; }
		
		//expressions+=ExpressionComponentAsAttribute (operators+=ARITHMETIC_OPERATOR expressions+=(ExpressionComponent |
		//ExpressionComponentAsAttribute))
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//expressions+=ExpressionComponentAsAttribute
		public Assignment getExpressionsAssignment_0_1_0() { return cExpressionsAssignment_0_1_0; }
		
		//ExpressionComponentAsAttribute
		public RuleCall getExpressionsExpressionComponentAsAttributeParserRuleCall_0_1_0_0() { return cExpressionsExpressionComponentAsAttributeParserRuleCall_0_1_0_0; }
		
		//(operators+=ARITHMETIC_OPERATOR expressions+=(ExpressionComponent | ExpressionComponentAsAttribute))
		public Group getGroup_0_1_1() { return cGroup_0_1_1; }
		
		//operators+=ARITHMETIC_OPERATOR
		public Assignment getOperatorsAssignment_0_1_1_0() { return cOperatorsAssignment_0_1_1_0; }
		
		//ARITHMETIC_OPERATOR
		public RuleCall getOperatorsARITHMETIC_OPERATORParserRuleCall_0_1_1_0_0() { return cOperatorsARITHMETIC_OPERATORParserRuleCall_0_1_1_0_0; }
		
		//expressions+=(ExpressionComponent | ExpressionComponentAsAttribute)
		public Assignment getExpressionsAssignment_0_1_1_1() { return cExpressionsAssignment_0_1_1_1; }
		
		//(ExpressionComponent | ExpressionComponentAsAttribute)
		public Alternatives getExpressionsAlternatives_0_1_1_1_0() { return cExpressionsAlternatives_0_1_1_1_0; }
		
		//ExpressionComponent
		public RuleCall getExpressionsExpressionComponentParserRuleCall_0_1_1_1_0_0() { return cExpressionsExpressionComponentParserRuleCall_0_1_1_1_0_0; }
		
		//ExpressionComponentAsAttribute
		public RuleCall getExpressionsExpressionComponentAsAttributeParserRuleCall_0_1_1_1_0_1() { return cExpressionsExpressionComponentAsAttributeParserRuleCall_0_1_1_1_0_1; }
		
		//('AS' alias=Alias)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'AS'
		public Keyword getASKeyword_1_0() { return cASKeyword_1_0; }
		
		//alias=Alias
		public Assignment getAliasAssignment_1_1() { return cAliasAssignment_1_1; }
		
		//Alias
		public RuleCall getAliasAliasParserRuleCall_1_1_0() { return cAliasAliasParserRuleCall_1_1_0; }
	}
	public class SelectExpressionOnlyWithAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.parser.novel.cql.CQL.SelectExpressionOnlyWithAttribute");
		private final Assignment cExpressionsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cExpressionsExpressionComponentAsAttributeParserRuleCall_0 = (RuleCall)cExpressionsAssignment.eContents().get(0);
		
		//SelectExpressionOnlyWithAttribute SelectExpression:
		//	expressions+=ExpressionComponentAsAttribute
		@Override public ParserRule getRule() { return rule; }
		
		//expressions+=ExpressionComponentAsAttribute
		public Assignment getExpressionsAssignment() { return cExpressionsAssignment; }
		
		//ExpressionComponentAsAttribute
		public RuleCall getExpressionsExpressionComponentAsAttributeParserRuleCall_0() { return cExpressionsExpressionComponentAsAttributeParserRuleCall_0; }
	}
	public class FunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.parser.novel.cql.CQL.Function");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFunctionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Alternatives cValueAlternatives_3_0 = (Alternatives)cValueAssignment_3.eContents().get(0);
		private final RuleCall cValueSelectExpressionParserRuleCall_3_0_0 = (RuleCall)cValueAlternatives_3_0.eContents().get(0);
		private final RuleCall cValueSelectExpressionOnlyWithAttributeParserRuleCall_3_0_1 = (RuleCall)cValueAlternatives_3_0.eContents().get(1);
		private final RuleCall cValueStarExpressionParserRuleCall_3_0_2 = (RuleCall)cValueAlternatives_3_0.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		////Is either a map function or an aggregation function. This depends 
		////on the given name and is decided by the generator on runtime. Also
		////checked is that an aggregation is no part of a select expression like
		////SELECT attr1 + 10 - SUM(attr1) FROM.., but a select expression can be 
		////a part of an aggregation like AVG(attr1 + DolToEur(attr2)).//TODO Not working currently
		//Function ExpressionComponent:
		//	{Function} name=ID
		//	'('
		//	value=(SelectExpression | SelectExpressionOnlyWithAttribute | StarExpression)
		//	')'
		@Override public ParserRule getRule() { return rule; }
		
		//{Function} name=ID '(' value=(SelectExpression | SelectExpressionOnlyWithAttribute | StarExpression) ')'
		public Group getGroup() { return cGroup; }
		
		//{Function}
		public Action getFunctionAction_0() { return cFunctionAction_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//value=(SelectExpression | SelectExpressionOnlyWithAttribute | StarExpression)
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }
		
		//(SelectExpression | SelectExpressionOnlyWithAttribute | StarExpression)
		public Alternatives getValueAlternatives_3_0() { return cValueAlternatives_3_0; }
		
		//SelectExpression
		public RuleCall getValueSelectExpressionParserRuleCall_3_0_0() { return cValueSelectExpressionParserRuleCall_3_0_0; }
		
		//SelectExpressionOnlyWithAttribute
		public RuleCall getValueSelectExpressionOnlyWithAttributeParserRuleCall_3_0_1() { return cValueSelectExpressionOnlyWithAttributeParserRuleCall_3_0_1; }
		
		//StarExpression
		public RuleCall getValueStarExpressionParserRuleCall_3_0_2() { return cValueStarExpressionParserRuleCall_3_0_2; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class ExpressionComponentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.parser.novel.cql.CQL.ExpressionComponent");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cValueAlternatives_0 = (Alternatives)cValueAssignment.eContents().get(0);
		private final RuleCall cValueFunctionParserRuleCall_0_0 = (RuleCall)cValueAlternatives_0.eContents().get(0);
		private final RuleCall cValueAtomicWithoutAttributeRefParserRuleCall_0_1 = (RuleCall)cValueAlternatives_0.eContents().get(1);
		
		////Determines the structure of a component of a select expression
		//ExpressionComponent:
		//	value=(Function | AtomicWithoutAttributeRef);
		@Override public ParserRule getRule() { return rule; }
		
		//value=(Function | AtomicWithoutAttributeRef)
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//(Function | AtomicWithoutAttributeRef)
		public Alternatives getValueAlternatives_0() { return cValueAlternatives_0; }
		
		//Function
		public RuleCall getValueFunctionParserRuleCall_0_0() { return cValueFunctionParserRuleCall_0_0; }
		
		//AtomicWithoutAttributeRef
		public RuleCall getValueAtomicWithoutAttributeRefParserRuleCall_0_1() { return cValueAtomicWithoutAttributeRefParserRuleCall_0_1; }
	}
	public class StarExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.parser.novel.cql.CQL.StarExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStarExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cExpressionsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionsStarParserRuleCall_1_0 = (RuleCall)cExpressionsAssignment_1.eContents().get(0);
		
		//StarExpression SelectExpression:
		//	{StarExpression} expressions+=Star
		@Override public ParserRule getRule() { return rule; }
		
		//{StarExpression} expressions+=Star
		public Group getGroup() { return cGroup; }
		
		//{StarExpression}
		public Action getStarExpressionAction_0() { return cStarExpressionAction_0; }
		
		//expressions+=Star
		public Assignment getExpressionsAssignment_1() { return cExpressionsAssignment_1; }
		
		//Star
		public RuleCall getExpressionsStarParserRuleCall_1_0() { return cExpressionsStarParserRuleCall_1_0; }
	}
	public class StarElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.parser.novel.cql.CQL.Star");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStarAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueStarthingParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//Star ExpressionComponent:
		//	{Star} value=Starthing
		@Override public ParserRule getRule() { return rule; }
		
		//{Star} value=Starthing
		public Group getGroup() { return cGroup; }
		
		//{Star}
		public Action getStarAction_0() { return cStarAction_0; }
		
		//value=Starthing
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//Starthing
		public RuleCall getValueStarthingParserRuleCall_1_0() { return cValueStarthingParserRuleCall_1_0; }
	}
	public class StarthingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.parser.novel.cql.CQL.Starthing");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStarthingAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cAsteriskKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Starthing:
		//	{Starthing}
		//	'*';
		@Override public ParserRule getRule() { return rule; }
		
		//{Starthing} '*'
		public Group getGroup() { return cGroup; }
		
		//{Starthing}
		public Action getStarthingAction_0() { return cStarthingAction_0; }
		
		//'*'
		public Keyword getAsteriskKeyword_1() { return cAsteriskKeyword_1; }
	}
	public class ExpressionComponentAsAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.parser.novel.cql.CQL.ExpressionComponentAsAttribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cExpressionComponentAsAttributeAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueAttributeForSelectExpressionParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//ExpressionComponentAsAttribute ExpressionComponent:
		//	{ExpressionComponentAsAttribute} value=AttributeForSelectExpression
		@Override public ParserRule getRule() { return rule; }
		
		//{ExpressionComponentAsAttribute} value=AttributeForSelectExpression
		public Group getGroup() { return cGroup; }
		
		//{ExpressionComponentAsAttribute}
		public Action getExpressionComponentAsAttributeAction_0() { return cExpressionComponentAsAttributeAction_0; }
		
		//value=AttributeForSelectExpression
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//AttributeForSelectExpression
		public RuleCall getValueAttributeForSelectExpressionParserRuleCall_1_0() { return cValueAttributeForSelectExpressionParserRuleCall_1_0; }
	}
	public class SetOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.parser.novel.cql.CQL.SetOperator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftSelectParserRuleCall_0_0 = (RuleCall)cLeftAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cNameAlternatives_1_0 = (Alternatives)cNameAssignment_1.eContents().get(0);
		private final Keyword cNameUNIONKeyword_1_0_0 = (Keyword)cNameAlternatives_1_0.eContents().get(0);
		private final Keyword cNameDIFFERENCEKeyword_1_0_1 = (Keyword)cNameAlternatives_1_0.eContents().get(1);
		private final Keyword cNameINTERSECTIONKeyword_1_0_2 = (Keyword)cNameAlternatives_1_0.eContents().get(2);
		private final Assignment cRightAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRightSelectParserRuleCall_2_0 = (RuleCall)cRightAssignment_2.eContents().get(0);
		
		//SetOperator:
		//	left=Select
		//	name=('UNION' | 'DIFFERENCE' | 'INTERSECTION') right=Select;
		@Override public ParserRule getRule() { return rule; }
		
		//left=Select name=('UNION' | 'DIFFERENCE' | 'INTERSECTION') right=Select
		public Group getGroup() { return cGroup; }
		
		//left=Select
		public Assignment getLeftAssignment_0() { return cLeftAssignment_0; }
		
		//Select
		public RuleCall getLeftSelectParserRuleCall_0_0() { return cLeftSelectParserRuleCall_0_0; }
		
		//name=('UNION' | 'DIFFERENCE' | 'INTERSECTION')
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//('UNION' | 'DIFFERENCE' | 'INTERSECTION')
		public Alternatives getNameAlternatives_1_0() { return cNameAlternatives_1_0; }
		
		//'UNION'
		public Keyword getNameUNIONKeyword_1_0_0() { return cNameUNIONKeyword_1_0_0; }
		
		//'DIFFERENCE'
		public Keyword getNameDIFFERENCEKeyword_1_0_1() { return cNameDIFFERENCEKeyword_1_0_1; }
		
		//'INTERSECTION'
		public Keyword getNameINTERSECTIONKeyword_1_0_2() { return cNameINTERSECTIONKeyword_1_0_2; }
		
		//right=Select
		public Assignment getRightAssignment_2() { return cRightAssignment_2; }
		
		//Select
		public RuleCall getRightSelectParserRuleCall_2_0() { return cRightSelectParserRuleCall_2_0; }
	}
	public class AliasElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.parser.novel.cql.CQL.Alias");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Alias:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class AccessFrameworkElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.parser.novel.cql.CQL.AccessFramework");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWRAPPERKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cWrapperAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cWrapperSTRINGTerminalRuleCall_1_0 = (RuleCall)cWrapperAssignment_1.eContents().get(0);
		private final Keyword cPROTOCOLKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cProtocolAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cProtocolSTRINGTerminalRuleCall_3_0 = (RuleCall)cProtocolAssignment_3.eContents().get(0);
		private final Keyword cTRANSPORTKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cTransportAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cTransportSTRINGTerminalRuleCall_5_0 = (RuleCall)cTransportAssignment_5.eContents().get(0);
		private final Keyword cDATAHANDLERKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cDatahandlerAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cDatahandlerSTRINGTerminalRuleCall_7_0 = (RuleCall)cDatahandlerAssignment_7.eContents().get(0);
		private final Keyword cOPTIONSKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cLeftParenthesisKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Group cGroup_10 = (Group)cGroup.eContents().get(10);
		private final Assignment cKeysAssignment_10_0 = (Assignment)cGroup_10.eContents().get(0);
		private final RuleCall cKeysSTRINGTerminalRuleCall_10_0_0 = (RuleCall)cKeysAssignment_10_0.eContents().get(0);
		private final Assignment cValuesAssignment_10_1 = (Assignment)cGroup_10.eContents().get(1);
		private final RuleCall cValuesSTRINGTerminalRuleCall_10_1_0 = (RuleCall)cValuesAssignment_10_1.eContents().get(0);
		private final Group cGroup_11 = (Group)cGroup.eContents().get(11);
		private final Keyword cCommaKeyword_11_0 = (Keyword)cGroup_11.eContents().get(0);
		private final Assignment cKeysAssignment_11_1 = (Assignment)cGroup_11.eContents().get(1);
		private final RuleCall cKeysSTRINGTerminalRuleCall_11_1_0 = (RuleCall)cKeysAssignment_11_1.eContents().get(0);
		private final Assignment cValuesAssignment_11_2 = (Assignment)cGroup_11.eContents().get(2);
		private final RuleCall cValuesSTRINGTerminalRuleCall_11_2_0 = (RuleCall)cValuesAssignment_11_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_12 = (Keyword)cGroup.eContents().get(12);
		
		//AccessFramework:
		//	'WRAPPER' wrapper=STRING
		//	'PROTOCOL' protocol=STRING
		//	'TRANSPORT' transport=STRING
		//	'DATAHANDLER' datahandler=STRING
		//	'OPTIONS' '(' (keys+=STRING values+=STRING)+ (',' keys+=STRING values+=STRING)? ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'WRAPPER' wrapper=STRING 'PROTOCOL' protocol=STRING 'TRANSPORT' transport=STRING 'DATAHANDLER' datahandler=STRING
		//'OPTIONS' '(' (keys+=STRING values+=STRING)+ (',' keys+=STRING values+=STRING)? ')'
		public Group getGroup() { return cGroup; }
		
		//'WRAPPER'
		public Keyword getWRAPPERKeyword_0() { return cWRAPPERKeyword_0; }
		
		//wrapper=STRING
		public Assignment getWrapperAssignment_1() { return cWrapperAssignment_1; }
		
		//STRING
		public RuleCall getWrapperSTRINGTerminalRuleCall_1_0() { return cWrapperSTRINGTerminalRuleCall_1_0; }
		
		//'PROTOCOL'
		public Keyword getPROTOCOLKeyword_2() { return cPROTOCOLKeyword_2; }
		
		//protocol=STRING
		public Assignment getProtocolAssignment_3() { return cProtocolAssignment_3; }
		
		//STRING
		public RuleCall getProtocolSTRINGTerminalRuleCall_3_0() { return cProtocolSTRINGTerminalRuleCall_3_0; }
		
		//'TRANSPORT'
		public Keyword getTRANSPORTKeyword_4() { return cTRANSPORTKeyword_4; }
		
		//transport=STRING
		public Assignment getTransportAssignment_5() { return cTransportAssignment_5; }
		
		//STRING
		public RuleCall getTransportSTRINGTerminalRuleCall_5_0() { return cTransportSTRINGTerminalRuleCall_5_0; }
		
		//'DATAHANDLER'
		public Keyword getDATAHANDLERKeyword_6() { return cDATAHANDLERKeyword_6; }
		
		//datahandler=STRING
		public Assignment getDatahandlerAssignment_7() { return cDatahandlerAssignment_7; }
		
		//STRING
		public RuleCall getDatahandlerSTRINGTerminalRuleCall_7_0() { return cDatahandlerSTRINGTerminalRuleCall_7_0; }
		
		//'OPTIONS'
		public Keyword getOPTIONSKeyword_8() { return cOPTIONSKeyword_8; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_9() { return cLeftParenthesisKeyword_9; }
		
		//(keys+=STRING values+=STRING)+
		public Group getGroup_10() { return cGroup_10; }
		
		//keys+=STRING
		public Assignment getKeysAssignment_10_0() { return cKeysAssignment_10_0; }
		
		//STRING
		public RuleCall getKeysSTRINGTerminalRuleCall_10_0_0() { return cKeysSTRINGTerminalRuleCall_10_0_0; }
		
		//values+=STRING
		public Assignment getValuesAssignment_10_1() { return cValuesAssignment_10_1; }
		
		//STRING
		public RuleCall getValuesSTRINGTerminalRuleCall_10_1_0() { return cValuesSTRINGTerminalRuleCall_10_1_0; }
		
		//(',' keys+=STRING values+=STRING)?
		public Group getGroup_11() { return cGroup_11; }
		
		//','
		public Keyword getCommaKeyword_11_0() { return cCommaKeyword_11_0; }
		
		//keys+=STRING
		public Assignment getKeysAssignment_11_1() { return cKeysAssignment_11_1; }
		
		//STRING
		public RuleCall getKeysSTRINGTerminalRuleCall_11_1_0() { return cKeysSTRINGTerminalRuleCall_11_1_0; }
		
		//values+=STRING
		public Assignment getValuesAssignment_11_2() { return cValuesAssignment_11_2; }
		
		//STRING
		public RuleCall getValuesSTRINGTerminalRuleCall_11_2_0() { return cValuesSTRINGTerminalRuleCall_11_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_12() { return cRightParenthesisKeyword_12; }
	}
	public class SchemaDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.parser.novel.cql.CQL.SchemaDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cArgumentsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cArgumentsIDTerminalRuleCall_2_0 = (RuleCall)cArgumentsAssignment_2.eContents().get(0);
		private final Assignment cArgumentsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cArgumentsIDTerminalRuleCall_3_0 = (RuleCall)cArgumentsAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cArgumentsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cArgumentsIDTerminalRuleCall_4_1_0 = (RuleCall)cArgumentsAssignment_4_1.eContents().get(0);
		private final Assignment cArgumentsAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cArgumentsIDTerminalRuleCall_4_2_0 = (RuleCall)cArgumentsAssignment_4_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//SchemaDefinition:
		//	name=ID
		//	'('
		//	arguments+=ID arguments+=ID (',' arguments+=ID arguments+=ID)*
		//	')';
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID '(' arguments+=ID arguments+=ID (',' arguments+=ID arguments+=ID)* ')'
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//arguments+=ID
		public Assignment getArgumentsAssignment_2() { return cArgumentsAssignment_2; }
		
		//ID
		public RuleCall getArgumentsIDTerminalRuleCall_2_0() { return cArgumentsIDTerminalRuleCall_2_0; }
		
		//arguments+=ID
		public Assignment getArgumentsAssignment_3() { return cArgumentsAssignment_3; }
		
		//ID
		public RuleCall getArgumentsIDTerminalRuleCall_3_0() { return cArgumentsIDTerminalRuleCall_3_0; }
		
		//(',' arguments+=ID arguments+=ID)*
		public Group getGroup_4() { return cGroup_4; }
		
		//','
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//arguments+=ID
		public Assignment getArgumentsAssignment_4_1() { return cArgumentsAssignment_4_1; }
		
		//ID
		public RuleCall getArgumentsIDTerminalRuleCall_4_1_0() { return cArgumentsIDTerminalRuleCall_4_1_0; }
		
		//arguments+=ID
		public Assignment getArgumentsAssignment_4_2() { return cArgumentsAssignment_4_2; }
		
		//ID
		public RuleCall getArgumentsIDTerminalRuleCall_4_2_0() { return cArgumentsIDTerminalRuleCall_4_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class CreateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.parser.novel.cql.CQL.Create");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCreateAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cCREATEKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cATTACHKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cTypeAlternatives_2_0 = (Alternatives)cTypeAssignment_2.eContents().get(0);
		private final Keyword cTypeSTREAMKeyword_2_0_0 = (Keyword)cTypeAlternatives_2_0.eContents().get(0);
		private final Keyword cTypeSINKKeyword_2_0_1 = (Keyword)cTypeAlternatives_2_0.eContents().get(1);
		private final Keyword cTypeVIEWKeyword_2_0_2 = (Keyword)cTypeAlternatives_2_0.eContents().get(2);
		private final Assignment cCreateAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Alternatives cCreateAlternatives_3_0 = (Alternatives)cCreateAssignment_3.eContents().get(0);
		private final RuleCall cCreateCreateAccessFrameworkParserRuleCall_3_0_0 = (RuleCall)cCreateAlternatives_3_0.eContents().get(0);
		private final RuleCall cCreateCreateChannelFrameworkViaPortParserRuleCall_3_0_1 = (RuleCall)cCreateAlternatives_3_0.eContents().get(1);
		private final RuleCall cCreateCreateChannelFormatViaFileParserRuleCall_3_0_2 = (RuleCall)cCreateAlternatives_3_0.eContents().get(2);
		private final RuleCall cCreateCreateDatabaseStreamParserRuleCall_3_0_3 = (RuleCall)cCreateAlternatives_3_0.eContents().get(3);
		private final RuleCall cCreateCreateDatabaseSinkParserRuleCall_3_0_4 = (RuleCall)cCreateAlternatives_3_0.eContents().get(4);
		private final RuleCall cCreateCreateViewParserRuleCall_3_0_5 = (RuleCall)cCreateAlternatives_3_0.eContents().get(5);
		
		//Create:
		//	{Create} ('CREATE' | 'ATTACH') type=('STREAM' | 'SINK' | 'VIEW') create=(CreateAccessFramework
		//	| CreateChannelFrameworkViaPort
		//	| CreateChannelFormatViaFile
		//	| CreateDatabaseStream
		//	| CreateDatabaseSink
		//	| CreateView);
		@Override public ParserRule getRule() { return rule; }
		
		//{Create} ('CREATE' | 'ATTACH') type=('STREAM' | 'SINK' | 'VIEW') create=(CreateAccessFramework |
		//CreateChannelFrameworkViaPort | CreateChannelFormatViaFile | CreateDatabaseStream | CreateDatabaseSink | CreateView)
		public Group getGroup() { return cGroup; }
		
		//{Create}
		public Action getCreateAction_0() { return cCreateAction_0; }
		
		//('CREATE' | 'ATTACH')
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'CREATE'
		public Keyword getCREATEKeyword_1_0() { return cCREATEKeyword_1_0; }
		
		//'ATTACH'
		public Keyword getATTACHKeyword_1_1() { return cATTACHKeyword_1_1; }
		
		//type=('STREAM' | 'SINK' | 'VIEW')
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//('STREAM' | 'SINK' | 'VIEW')
		public Alternatives getTypeAlternatives_2_0() { return cTypeAlternatives_2_0; }
		
		//'STREAM'
		public Keyword getTypeSTREAMKeyword_2_0_0() { return cTypeSTREAMKeyword_2_0_0; }
		
		//'SINK'
		public Keyword getTypeSINKKeyword_2_0_1() { return cTypeSINKKeyword_2_0_1; }
		
		//'VIEW'
		public Keyword getTypeVIEWKeyword_2_0_2() { return cTypeVIEWKeyword_2_0_2; }
		
		//create=(CreateAccessFramework | CreateChannelFrameworkViaPort | CreateChannelFormatViaFile | CreateDatabaseStream |
		//CreateDatabaseSink | CreateView)
		public Assignment getCreateAssignment_3() { return cCreateAssignment_3; }
		
		//(CreateAccessFramework | CreateChannelFrameworkViaPort | CreateChannelFormatViaFile | CreateDatabaseStream |
		//CreateDatabaseSink | CreateView)
		public Alternatives getCreateAlternatives_3_0() { return cCreateAlternatives_3_0; }
		
		//CreateAccessFramework
		public RuleCall getCreateCreateAccessFrameworkParserRuleCall_3_0_0() { return cCreateCreateAccessFrameworkParserRuleCall_3_0_0; }
		
		//CreateChannelFrameworkViaPort
		public RuleCall getCreateCreateChannelFrameworkViaPortParserRuleCall_3_0_1() { return cCreateCreateChannelFrameworkViaPortParserRuleCall_3_0_1; }
		
		//CreateChannelFormatViaFile
		public RuleCall getCreateCreateChannelFormatViaFileParserRuleCall_3_0_2() { return cCreateCreateChannelFormatViaFileParserRuleCall_3_0_2; }
		
		//CreateDatabaseStream
		public RuleCall getCreateCreateDatabaseStreamParserRuleCall_3_0_3() { return cCreateCreateDatabaseStreamParserRuleCall_3_0_3; }
		
		//CreateDatabaseSink
		public RuleCall getCreateCreateDatabaseSinkParserRuleCall_3_0_4() { return cCreateCreateDatabaseSinkParserRuleCall_3_0_4; }
		
		//CreateView
		public RuleCall getCreateCreateViewParserRuleCall_3_0_5() { return cCreateCreateViewParserRuleCall_3_0_5; }
	}
	public class CreateAccessFrameworkElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.parser.novel.cql.CQL.CreateAccessFramework");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAttributesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAttributesSchemaDefinitionParserRuleCall_0_0 = (RuleCall)cAttributesAssignment_0.eContents().get(0);
		private final Assignment cParsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cParsAccessFrameworkParserRuleCall_1_0 = (RuleCall)cParsAssignment_1.eContents().get(0);
		
		//CreateAccessFramework:
		//	attributes=SchemaDefinition
		//	pars=AccessFramework;
		@Override public ParserRule getRule() { return rule; }
		
		//attributes=SchemaDefinition pars=AccessFramework
		public Group getGroup() { return cGroup; }
		
		//attributes=SchemaDefinition
		public Assignment getAttributesAssignment_0() { return cAttributesAssignment_0; }
		
		//SchemaDefinition
		public RuleCall getAttributesSchemaDefinitionParserRuleCall_0_0() { return cAttributesSchemaDefinitionParserRuleCall_0_0; }
		
		//pars=AccessFramework
		public Assignment getParsAssignment_1() { return cParsAssignment_1; }
		
		//AccessFramework
		public RuleCall getParsAccessFrameworkParserRuleCall_1_0() { return cParsAccessFrameworkParserRuleCall_1_0; }
	}
	public class CreateChannelFrameworkViaPortElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.parser.novel.cql.CQL.CreateChannelFrameworkViaPort");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAttributesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAttributesSchemaDefinitionParserRuleCall_0_0 = (RuleCall)cAttributesAssignment_0.eContents().get(0);
		private final Keyword cCHANNELKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cHostAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cHostIDTerminalRuleCall_2_0 = (RuleCall)cHostAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cPortAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cPortINTTerminalRuleCall_4_0 = (RuleCall)cPortAssignment_4.eContents().get(0);
		
		//CreateChannelFrameworkViaPort:
		//	attributes=SchemaDefinition
		//	'CHANNEL' host=ID ':' port=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//attributes=SchemaDefinition 'CHANNEL' host=ID ':' port=INT
		public Group getGroup() { return cGroup; }
		
		//attributes=SchemaDefinition
		public Assignment getAttributesAssignment_0() { return cAttributesAssignment_0; }
		
		//SchemaDefinition
		public RuleCall getAttributesSchemaDefinitionParserRuleCall_0_0() { return cAttributesSchemaDefinitionParserRuleCall_0_0; }
		
		//'CHANNEL'
		public Keyword getCHANNELKeyword_1() { return cCHANNELKeyword_1; }
		
		//host=ID
		public Assignment getHostAssignment_2() { return cHostAssignment_2; }
		
		//ID
		public RuleCall getHostIDTerminalRuleCall_2_0() { return cHostIDTerminalRuleCall_2_0; }
		
		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//port=INT
		public Assignment getPortAssignment_4() { return cPortAssignment_4; }
		
		//INT
		public RuleCall getPortINTTerminalRuleCall_4_0() { return cPortINTTerminalRuleCall_4_0; }
	}
	public class CreateChannelFormatViaFileElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.parser.novel.cql.CQL.CreateChannelFormatViaFile");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAttributesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAttributesSchemaDefinitionParserRuleCall_0_0 = (RuleCall)cAttributesAssignment_0.eContents().get(0);
		private final Keyword cFILEKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFilenameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFilenameSTRINGTerminalRuleCall_2_0 = (RuleCall)cFilenameAssignment_2.eContents().get(0);
		private final Keyword cASKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTypeIDTerminalRuleCall_4_0 = (RuleCall)cTypeAssignment_4.eContents().get(0);
		
		//CreateChannelFormatViaFile:
		//	attributes=SchemaDefinition
		//	'FILE' filename=STRING 'AS' type=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//attributes=SchemaDefinition 'FILE' filename=STRING 'AS' type=ID
		public Group getGroup() { return cGroup; }
		
		//attributes=SchemaDefinition
		public Assignment getAttributesAssignment_0() { return cAttributesAssignment_0; }
		
		//SchemaDefinition
		public RuleCall getAttributesSchemaDefinitionParserRuleCall_0_0() { return cAttributesSchemaDefinitionParserRuleCall_0_0; }
		
		//'FILE'
		public Keyword getFILEKeyword_1() { return cFILEKeyword_1; }
		
		//filename=STRING
		public Assignment getFilenameAssignment_2() { return cFilenameAssignment_2; }
		
		//STRING
		public RuleCall getFilenameSTRINGTerminalRuleCall_2_0() { return cFilenameSTRINGTerminalRuleCall_2_0; }
		
		//'AS'
		public Keyword getASKeyword_3() { return cASKeyword_3; }
		
		//type=ID
		public Assignment getTypeAssignment_4() { return cTypeAssignment_4; }
		
		//ID
		public RuleCall getTypeIDTerminalRuleCall_4_0() { return cTypeIDTerminalRuleCall_4_0; }
	}
	public class CreateDatabaseStreamElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.parser.novel.cql.CQL.CreateDatabaseStream");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAttributesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAttributesSchemaDefinitionParserRuleCall_0_0 = (RuleCall)cAttributesAssignment_0.eContents().get(0);
		private final Keyword cDATABASEKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDatabaseAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDatabaseIDTerminalRuleCall_2_0 = (RuleCall)cDatabaseAssignment_2.eContents().get(0);
		private final Keyword cTABLEKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTableAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTableIDTerminalRuleCall_4_0 = (RuleCall)cTableAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cEACHKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cSizeAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cSizeINTTerminalRuleCall_5_1_0 = (RuleCall)cSizeAssignment_5_1.eContents().get(0);
		private final Assignment cUnitAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cUnitIDTerminalRuleCall_5_2_0 = (RuleCall)cUnitAssignment_5_2.eContents().get(0);
		
		////TODO PQL
		//CreateDatabaseStream:
		//	attributes=SchemaDefinition
		//	'DATABASE'
		//	database=ID
		//	'TABLE'
		//	table=ID ('EACH'
		//	size=INT
		//	unit=ID)?;
		@Override public ParserRule getRule() { return rule; }
		
		//attributes=SchemaDefinition 'DATABASE' database=ID 'TABLE' table=ID ('EACH' size=INT unit=ID)?
		public Group getGroup() { return cGroup; }
		
		//attributes=SchemaDefinition
		public Assignment getAttributesAssignment_0() { return cAttributesAssignment_0; }
		
		//SchemaDefinition
		public RuleCall getAttributesSchemaDefinitionParserRuleCall_0_0() { return cAttributesSchemaDefinitionParserRuleCall_0_0; }
		
		//'DATABASE'
		public Keyword getDATABASEKeyword_1() { return cDATABASEKeyword_1; }
		
		//database=ID
		public Assignment getDatabaseAssignment_2() { return cDatabaseAssignment_2; }
		
		//ID
		public RuleCall getDatabaseIDTerminalRuleCall_2_0() { return cDatabaseIDTerminalRuleCall_2_0; }
		
		//'TABLE'
		public Keyword getTABLEKeyword_3() { return cTABLEKeyword_3; }
		
		//table=ID
		public Assignment getTableAssignment_4() { return cTableAssignment_4; }
		
		//ID
		public RuleCall getTableIDTerminalRuleCall_4_0() { return cTableIDTerminalRuleCall_4_0; }
		
		//('EACH' size=INT unit=ID)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'EACH'
		public Keyword getEACHKeyword_5_0() { return cEACHKeyword_5_0; }
		
		//size=INT
		public Assignment getSizeAssignment_5_1() { return cSizeAssignment_5_1; }
		
		//INT
		public RuleCall getSizeINTTerminalRuleCall_5_1_0() { return cSizeINTTerminalRuleCall_5_1_0; }
		
		//unit=ID
		public Assignment getUnitAssignment_5_2() { return cUnitAssignment_5_2; }
		
		//ID
		public RuleCall getUnitIDTerminalRuleCall_5_2_0() { return cUnitIDTerminalRuleCall_5_2_0; }
	}
	public class CreateDatabaseSinkElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.parser.novel.cql.CQL.CreateDatabaseSink");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cASKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cDATABASEKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDatabaseAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDatabaseIDTerminalRuleCall_3_0 = (RuleCall)cDatabaseAssignment_3.eContents().get(0);
		private final Keyword cTABLEKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cTableAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cTableIDTerminalRuleCall_5_0 = (RuleCall)cTableAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cANDKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cOptionAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final Alternatives cOptionAlternatives_6_1_0 = (Alternatives)cOptionAssignment_6_1.eContents().get(0);
		private final Keyword cOptionDROPKeyword_6_1_0_0 = (Keyword)cOptionAlternatives_6_1_0.eContents().get(0);
		private final Keyword cOptionTRUNCATEKeyword_6_1_0_1 = (Keyword)cOptionAlternatives_6_1_0.eContents().get(1);
		
		////TODO PQL
		//CreateDatabaseSink:
		//	name=ID
		//	'AS'
		//	'DATABASE'
		//	database=ID
		//	'TABLE'
		//	table=ID ('AND' option=('DROP' | 'TRUNCATE'))?;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID 'AS' 'DATABASE' database=ID 'TABLE' table=ID ('AND' option=('DROP' | 'TRUNCATE'))?
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//'AS'
		public Keyword getASKeyword_1() { return cASKeyword_1; }
		
		//'DATABASE'
		public Keyword getDATABASEKeyword_2() { return cDATABASEKeyword_2; }
		
		//database=ID
		public Assignment getDatabaseAssignment_3() { return cDatabaseAssignment_3; }
		
		//ID
		public RuleCall getDatabaseIDTerminalRuleCall_3_0() { return cDatabaseIDTerminalRuleCall_3_0; }
		
		//'TABLE'
		public Keyword getTABLEKeyword_4() { return cTABLEKeyword_4; }
		
		//table=ID
		public Assignment getTableAssignment_5() { return cTableAssignment_5; }
		
		//ID
		public RuleCall getTableIDTerminalRuleCall_5_0() { return cTableIDTerminalRuleCall_5_0; }
		
		//('AND' option=('DROP' | 'TRUNCATE'))?
		public Group getGroup_6() { return cGroup_6; }
		
		//'AND'
		public Keyword getANDKeyword_6_0() { return cANDKeyword_6_0; }
		
		//option=('DROP' | 'TRUNCATE')
		public Assignment getOptionAssignment_6_1() { return cOptionAssignment_6_1; }
		
		//('DROP' | 'TRUNCATE')
		public Alternatives getOptionAlternatives_6_1_0() { return cOptionAlternatives_6_1_0; }
		
		//'DROP'
		public Keyword getOptionDROPKeyword_6_1_0_0() { return cOptionDROPKeyword_6_1_0_0; }
		
		//'TRUNCATE'
		public Keyword getOptionTRUNCATEKeyword_6_1_0_1() { return cOptionTRUNCATEKeyword_6_1_0_1; }
	}
	public class CreateViewElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.parser.novel.cql.CQL.CreateView");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cFROMKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSelectAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSelectInnerSelectParserRuleCall_2_0 = (RuleCall)cSelectAssignment_2.eContents().get(0);
		
		//CreateView:
		//	name=ID
		//	'FROM'
		//	select=InnerSelect;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID 'FROM' select=InnerSelect
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//'FROM'
		public Keyword getFROMKeyword_1() { return cFROMKeyword_1; }
		
		//select=InnerSelect
		public Assignment getSelectAssignment_2() { return cSelectAssignment_2; }
		
		//InnerSelect
		public RuleCall getSelectInnerSelectParserRuleCall_2_0() { return cSelectInnerSelectParserRuleCall_2_0; }
	}
	public class CreateDataBaseJDBCConnectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.parser.novel.cql.CQL.CreateDataBaseJDBCConnection");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCreateDataBaseConnectionJDBCAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cCREATEKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cDATABASEKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cCONNECTIONKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNameIDTerminalRuleCall_4_0 = (RuleCall)cNameAssignment_4.eContents().get(0);
		private final Keyword cJDBCKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cServerAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cServerIDTerminalRuleCall_6_0 = (RuleCall)cServerAssignment_6.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cWITHKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Keyword cUSERKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Assignment cUserAssignment_7_2 = (Assignment)cGroup_7.eContents().get(2);
		private final RuleCall cUserIDTerminalRuleCall_7_2_0 = (RuleCall)cUserAssignment_7_2.eContents().get(0);
		private final Keyword cPASSWORDKeyword_7_3 = (Keyword)cGroup_7.eContents().get(3);
		private final Assignment cPasswordAssignment_7_4 = (Assignment)cGroup_7.eContents().get(4);
		private final RuleCall cPasswordIDTerminalRuleCall_7_4_0 = (RuleCall)cPasswordAssignment_7_4.eContents().get(0);
		private final Assignment cLazyAssignment_7_5 = (Assignment)cGroup_7.eContents().get(5);
		private final Keyword cLazyNO_LAZY_CONNECTION_CHECKKeyword_7_5_0 = (Keyword)cLazyAssignment_7_5.eContents().get(0);
		
		//CreateDataBaseJDBCConnection Command:
		//	{CreateDataBaseConnectionJDBC}
		//	'CREATE'
		//	'DATABASE'
		//	'CONNECTION'
		//	name=ID
		//	'JDBC'
		//	server=ID ('WITH'
		//	'USER'
		//	user=ID
		//	'PASSWORD'
		//	password=ID
		//	lazy='NO_LAZY_CONNECTION_CHECK'?)?
		@Override public ParserRule getRule() { return rule; }
		
		//{CreateDataBaseConnectionJDBC} 'CREATE' 'DATABASE' 'CONNECTION' name=ID 'JDBC' server=ID ('WITH' 'USER' user=ID
		//'PASSWORD' password=ID lazy='NO_LAZY_CONNECTION_CHECK'?)?
		public Group getGroup() { return cGroup; }
		
		//{CreateDataBaseConnectionJDBC}
		public Action getCreateDataBaseConnectionJDBCAction_0() { return cCreateDataBaseConnectionJDBCAction_0; }
		
		//'CREATE'
		public Keyword getCREATEKeyword_1() { return cCREATEKeyword_1; }
		
		//'DATABASE'
		public Keyword getDATABASEKeyword_2() { return cDATABASEKeyword_2; }
		
		//'CONNECTION'
		public Keyword getCONNECTIONKeyword_3() { return cCONNECTIONKeyword_3; }
		
		//name=ID
		public Assignment getNameAssignment_4() { return cNameAssignment_4; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_4_0() { return cNameIDTerminalRuleCall_4_0; }
		
		//'JDBC'
		public Keyword getJDBCKeyword_5() { return cJDBCKeyword_5; }
		
		//server=ID
		public Assignment getServerAssignment_6() { return cServerAssignment_6; }
		
		//ID
		public RuleCall getServerIDTerminalRuleCall_6_0() { return cServerIDTerminalRuleCall_6_0; }
		
		//('WITH' 'USER' user=ID 'PASSWORD' password=ID lazy='NO_LAZY_CONNECTION_CHECK'?)?
		public Group getGroup_7() { return cGroup_7; }
		
		//'WITH'
		public Keyword getWITHKeyword_7_0() { return cWITHKeyword_7_0; }
		
		//'USER'
		public Keyword getUSERKeyword_7_1() { return cUSERKeyword_7_1; }
		
		//user=ID
		public Assignment getUserAssignment_7_2() { return cUserAssignment_7_2; }
		
		//ID
		public RuleCall getUserIDTerminalRuleCall_7_2_0() { return cUserIDTerminalRuleCall_7_2_0; }
		
		//'PASSWORD'
		public Keyword getPASSWORDKeyword_7_3() { return cPASSWORDKeyword_7_3; }
		
		//password=ID
		public Assignment getPasswordAssignment_7_4() { return cPasswordAssignment_7_4; }
		
		//ID
		public RuleCall getPasswordIDTerminalRuleCall_7_4_0() { return cPasswordIDTerminalRuleCall_7_4_0; }
		
		//lazy='NO_LAZY_CONNECTION_CHECK'?
		public Assignment getLazyAssignment_7_5() { return cLazyAssignment_7_5; }
		
		//'NO_LAZY_CONNECTION_CHECK'
		public Keyword getLazyNO_LAZY_CONNECTION_CHECKKeyword_7_5_0() { return cLazyNO_LAZY_CONNECTION_CHECKKeyword_7_5_0; }
	}
	public class CreateDataBaseGenericConnectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.parser.novel.cql.CQL.CreateDataBaseGenericConnection");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCreateDataBaseConnectionGenericAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cCREATEKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cDATABASEKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cCONNECTIONKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNameIDTerminalRuleCall_4_0 = (RuleCall)cNameAssignment_4.eContents().get(0);
		private final Keyword cASKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cDriverAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cDriverIDTerminalRuleCall_6_0 = (RuleCall)cDriverAssignment_6.eContents().get(0);
		private final Keyword cTOKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cSourceAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cSourceIDTerminalRuleCall_8_0 = (RuleCall)cSourceAssignment_8.eContents().get(0);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Keyword cATKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Assignment cHostAssignment_9_1 = (Assignment)cGroup_9.eContents().get(1);
		private final RuleCall cHostIDTerminalRuleCall_9_1_0 = (RuleCall)cHostAssignment_9_1.eContents().get(0);
		private final Keyword cColonKeyword_9_2 = (Keyword)cGroup_9.eContents().get(2);
		private final Assignment cPortAssignment_9_3 = (Assignment)cGroup_9.eContents().get(3);
		private final RuleCall cPortINTTerminalRuleCall_9_3_0 = (RuleCall)cPortAssignment_9_3.eContents().get(0);
		private final Group cGroup_10 = (Group)cGroup.eContents().get(10);
		private final Keyword cWITHKeyword_10_0 = (Keyword)cGroup_10.eContents().get(0);
		private final Keyword cUSERKeyword_10_1 = (Keyword)cGroup_10.eContents().get(1);
		private final Assignment cUserAssignment_10_2 = (Assignment)cGroup_10.eContents().get(2);
		private final RuleCall cUserIDTerminalRuleCall_10_2_0 = (RuleCall)cUserAssignment_10_2.eContents().get(0);
		private final Keyword cPASSWORDKeyword_10_3 = (Keyword)cGroup_10.eContents().get(3);
		private final Assignment cPasswordAssignment_10_4 = (Assignment)cGroup_10.eContents().get(4);
		private final RuleCall cPasswordIDTerminalRuleCall_10_4_0 = (RuleCall)cPasswordAssignment_10_4.eContents().get(0);
		private final Assignment cLazyAssignment_10_5 = (Assignment)cGroup_10.eContents().get(5);
		private final Keyword cLazyNO_LAZY_CONNECTION_CHECKKeyword_10_5_0 = (Keyword)cLazyAssignment_10_5.eContents().get(0);
		
		//CreateDataBaseGenericConnection Command:
		//	{CreateDataBaseConnectionGeneric}
		//	'CREATE'
		//	'DATABASE'
		//	'CONNECTION'
		//	name=ID
		//	'AS'
		//	driver=ID
		//	'TO'
		//	source=ID ('AT'
		//	host=ID
		//	':'
		//	port=INT)? ('WITH'
		//	'USER'
		//	user=ID
		//	'PASSWORD'
		//	password=ID
		//	lazy='NO_LAZY_CONNECTION_CHECK'?)?
		@Override public ParserRule getRule() { return rule; }
		
		//{CreateDataBaseConnectionGeneric} 'CREATE' 'DATABASE' 'CONNECTION' name=ID 'AS' driver=ID 'TO' source=ID ('AT' host=ID
		//':' port=INT)? ('WITH' 'USER' user=ID 'PASSWORD' password=ID lazy='NO_LAZY_CONNECTION_CHECK'?)?
		public Group getGroup() { return cGroup; }
		
		//{CreateDataBaseConnectionGeneric}
		public Action getCreateDataBaseConnectionGenericAction_0() { return cCreateDataBaseConnectionGenericAction_0; }
		
		//'CREATE'
		public Keyword getCREATEKeyword_1() { return cCREATEKeyword_1; }
		
		//'DATABASE'
		public Keyword getDATABASEKeyword_2() { return cDATABASEKeyword_2; }
		
		//'CONNECTION'
		public Keyword getCONNECTIONKeyword_3() { return cCONNECTIONKeyword_3; }
		
		//name=ID
		public Assignment getNameAssignment_4() { return cNameAssignment_4; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_4_0() { return cNameIDTerminalRuleCall_4_0; }
		
		//'AS'
		public Keyword getASKeyword_5() { return cASKeyword_5; }
		
		//driver=ID
		public Assignment getDriverAssignment_6() { return cDriverAssignment_6; }
		
		//ID
		public RuleCall getDriverIDTerminalRuleCall_6_0() { return cDriverIDTerminalRuleCall_6_0; }
		
		//'TO'
		public Keyword getTOKeyword_7() { return cTOKeyword_7; }
		
		//source=ID
		public Assignment getSourceAssignment_8() { return cSourceAssignment_8; }
		
		//ID
		public RuleCall getSourceIDTerminalRuleCall_8_0() { return cSourceIDTerminalRuleCall_8_0; }
		
		//('AT' host=ID ':' port=INT)?
		public Group getGroup_9() { return cGroup_9; }
		
		//'AT'
		public Keyword getATKeyword_9_0() { return cATKeyword_9_0; }
		
		//host=ID
		public Assignment getHostAssignment_9_1() { return cHostAssignment_9_1; }
		
		//ID
		public RuleCall getHostIDTerminalRuleCall_9_1_0() { return cHostIDTerminalRuleCall_9_1_0; }
		
		//':'
		public Keyword getColonKeyword_9_2() { return cColonKeyword_9_2; }
		
		//port=INT
		public Assignment getPortAssignment_9_3() { return cPortAssignment_9_3; }
		
		//INT
		public RuleCall getPortINTTerminalRuleCall_9_3_0() { return cPortINTTerminalRuleCall_9_3_0; }
		
		//('WITH' 'USER' user=ID 'PASSWORD' password=ID lazy='NO_LAZY_CONNECTION_CHECK'?)?
		public Group getGroup_10() { return cGroup_10; }
		
		//'WITH'
		public Keyword getWITHKeyword_10_0() { return cWITHKeyword_10_0; }
		
		//'USER'
		public Keyword getUSERKeyword_10_1() { return cUSERKeyword_10_1; }
		
		//user=ID
		public Assignment getUserAssignment_10_2() { return cUserAssignment_10_2; }
		
		//ID
		public RuleCall getUserIDTerminalRuleCall_10_2_0() { return cUserIDTerminalRuleCall_10_2_0; }
		
		//'PASSWORD'
		public Keyword getPASSWORDKeyword_10_3() { return cPASSWORDKeyword_10_3; }
		
		//password=ID
		public Assignment getPasswordAssignment_10_4() { return cPasswordAssignment_10_4; }
		
		//ID
		public RuleCall getPasswordIDTerminalRuleCall_10_4_0() { return cPasswordIDTerminalRuleCall_10_4_0; }
		
		//lazy='NO_LAZY_CONNECTION_CHECK'?
		public Assignment getLazyAssignment_10_5() { return cLazyAssignment_10_5; }
		
		//'NO_LAZY_CONNECTION_CHECK'
		public Keyword getLazyNO_LAZY_CONNECTION_CHECKKeyword_10_5_0() { return cLazyNO_LAZY_CONNECTION_CHECKKeyword_10_5_0; }
	}
	public class DropDatabaseConnectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.parser.novel.cql.CQL.DropDatabaseConnection");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDropDatabaseConnectionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDROPKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cDATABASEKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cCONNECTIONKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNameIDTerminalRuleCall_4_0 = (RuleCall)cNameAssignment_4.eContents().get(0);
		
		//DropDatabaseConnection Command:
		//	{DropDatabaseConnection}
		//	'DROP'
		//	'DATABASE'
		//	'CONNECTION'
		//	name=ID
		@Override public ParserRule getRule() { return rule; }
		
		//{DropDatabaseConnection} 'DROP' 'DATABASE' 'CONNECTION' name=ID
		public Group getGroup() { return cGroup; }
		
		//{DropDatabaseConnection}
		public Action getDropDatabaseConnectionAction_0() { return cDropDatabaseConnectionAction_0; }
		
		//'DROP'
		public Keyword getDROPKeyword_1() { return cDROPKeyword_1; }
		
		//'DATABASE'
		public Keyword getDATABASEKeyword_2() { return cDATABASEKeyword_2; }
		
		//'CONNECTION'
		public Keyword getCONNECTIONKeyword_3() { return cCONNECTIONKeyword_3; }
		
		//name=ID
		public Assignment getNameAssignment_4() { return cNameAssignment_4; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_4_0() { return cNameIDTerminalRuleCall_4_0; }
	}
	public class ContextStoreTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.parser.novel.cql.CQL.ContextStoreType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cTypeSINGLEKeyword_0_0 = (Keyword)cTypeAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cTypeAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cTypeMULTIKeyword_1_0_0 = (Keyword)cTypeAssignment_1_0.eContents().get(0);
		private final Assignment cSizeAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cSizeINTTerminalRuleCall_1_1_0 = (RuleCall)cSizeAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cPARTITIONKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Keyword cBYKeyword_1_2_1 = (Keyword)cGroup_1_2.eContents().get(1);
		private final Assignment cPartitionAssignment_1_2_2 = (Assignment)cGroup_1_2.eContents().get(2);
		private final RuleCall cPartitionINTTerminalRuleCall_1_2_2_0 = (RuleCall)cPartitionAssignment_1_2_2.eContents().get(0);
		
		//ContextStoreType:
		//	type='SINGLE' | type='MULTI'
		//	size=INT ('PARTITION'
		//	'BY'
		//	partition=INT)?;
		@Override public ParserRule getRule() { return rule; }
		
		//type='SINGLE' | type='MULTI' size=INT ('PARTITION' 'BY' partition=INT)?
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//type='SINGLE'
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//'SINGLE'
		public Keyword getTypeSINGLEKeyword_0_0() { return cTypeSINGLEKeyword_0_0; }
		
		//type='MULTI' size=INT ('PARTITION' 'BY' partition=INT)?
		public Group getGroup_1() { return cGroup_1; }
		
		//type='MULTI'
		public Assignment getTypeAssignment_1_0() { return cTypeAssignment_1_0; }
		
		//'MULTI'
		public Keyword getTypeMULTIKeyword_1_0_0() { return cTypeMULTIKeyword_1_0_0; }
		
		//size=INT
		public Assignment getSizeAssignment_1_1() { return cSizeAssignment_1_1; }
		
		//INT
		public RuleCall getSizeINTTerminalRuleCall_1_1_0() { return cSizeINTTerminalRuleCall_1_1_0; }
		
		//('PARTITION' 'BY' partition=INT)?
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//'PARTITION'
		public Keyword getPARTITIONKeyword_1_2_0() { return cPARTITIONKeyword_1_2_0; }
		
		//'BY'
		public Keyword getBYKeyword_1_2_1() { return cBYKeyword_1_2_1; }
		
		//partition=INT
		public Assignment getPartitionAssignment_1_2_2() { return cPartitionAssignment_1_2_2; }
		
		//INT
		public RuleCall getPartitionINTTerminalRuleCall_1_2_2_0() { return cPartitionINTTerminalRuleCall_1_2_2_0; }
	}
	public class CreateContextStoreElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.parser.novel.cql.CQL.CreateContextStore");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCreateContextStoreAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cCREATEKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cCONTEXTKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cSTOREKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cAttributesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cAttributesSchemaDefinitionParserRuleCall_4_0 = (RuleCall)cAttributesAssignment_4.eContents().get(0);
		private final Keyword cASKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cContextTypeAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cContextTypeContextStoreTypeParserRuleCall_6_0 = (RuleCall)cContextTypeAssignment_6.eContents().get(0);
		
		//CreateContextStore Command:
		//	{CreateContextStore}
		//	'CREATE'
		//	'CONTEXT'
		//	'STORE'
		//	attributes=SchemaDefinition
		//	'AS'
		//	contextType=ContextStoreType
		@Override public ParserRule getRule() { return rule; }
		
		//{CreateContextStore} 'CREATE' 'CONTEXT' 'STORE' attributes=SchemaDefinition 'AS' contextType=ContextStoreType
		public Group getGroup() { return cGroup; }
		
		//{CreateContextStore}
		public Action getCreateContextStoreAction_0() { return cCreateContextStoreAction_0; }
		
		//'CREATE'
		public Keyword getCREATEKeyword_1() { return cCREATEKeyword_1; }
		
		//'CONTEXT'
		public Keyword getCONTEXTKeyword_2() { return cCONTEXTKeyword_2; }
		
		//'STORE'
		public Keyword getSTOREKeyword_3() { return cSTOREKeyword_3; }
		
		//attributes=SchemaDefinition
		public Assignment getAttributesAssignment_4() { return cAttributesAssignment_4; }
		
		//SchemaDefinition
		public RuleCall getAttributesSchemaDefinitionParserRuleCall_4_0() { return cAttributesSchemaDefinitionParserRuleCall_4_0; }
		
		//'AS'
		public Keyword getASKeyword_5() { return cASKeyword_5; }
		
		//contextType=ContextStoreType
		public Assignment getContextTypeAssignment_6() { return cContextTypeAssignment_6; }
		
		//ContextStoreType
		public RuleCall getContextTypeContextStoreTypeParserRuleCall_6_0() { return cContextTypeContextStoreTypeParserRuleCall_6_0; }
	}
	public class DropContextStoreElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.parser.novel.cql.CQL.DropContextStore");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDropContextStoreAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDROPKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cCONTEXTKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cSTOREKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNameIDTerminalRuleCall_4_0 = (RuleCall)cNameAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cIFKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cExistsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final Keyword cExistsEXISTSKeyword_5_1_0 = (Keyword)cExistsAssignment_5_1.eContents().get(0);
		
		//DropContextStore Command:
		//	{DropContextStore}
		//	'DROP'
		//	'CONTEXT'
		//	'STORE'
		//	name=ID ('IF' exists='EXISTS')?
		@Override public ParserRule getRule() { return rule; }
		
		//{DropContextStore} 'DROP' 'CONTEXT' 'STORE' name=ID ('IF' exists='EXISTS')?
		public Group getGroup() { return cGroup; }
		
		//{DropContextStore}
		public Action getDropContextStoreAction_0() { return cDropContextStoreAction_0; }
		
		//'DROP'
		public Keyword getDROPKeyword_1() { return cDROPKeyword_1; }
		
		//'CONTEXT'
		public Keyword getCONTEXTKeyword_2() { return cCONTEXTKeyword_2; }
		
		//'STORE'
		public Keyword getSTOREKeyword_3() { return cSTOREKeyword_3; }
		
		//name=ID
		public Assignment getNameAssignment_4() { return cNameAssignment_4; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_4_0() { return cNameIDTerminalRuleCall_4_0; }
		
		//('IF' exists='EXISTS')?
		public Group getGroup_5() { return cGroup_5; }
		
		//'IF'
		public Keyword getIFKeyword_5_0() { return cIFKeyword_5_0; }
		
		//exists='EXISTS'
		public Assignment getExistsAssignment_5_1() { return cExistsAssignment_5_1; }
		
		//'EXISTS'
		public Keyword getExistsEXISTSKeyword_5_1_0() { return cExistsEXISTSKeyword_5_1_0; }
	}
	public class StreamToElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.parser.novel.cql.CQL.StreamTo");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStreamToAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSTREAMKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cTOKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Assignment cStatementAssignment_4_0 = (Assignment)cAlternatives_4.eContents().get(0);
		private final RuleCall cStatementInnerSelect2ParserRuleCall_4_0_0 = (RuleCall)cStatementAssignment_4_0.eContents().get(0);
		private final Assignment cInputnameAssignment_4_1 = (Assignment)cAlternatives_4.eContents().get(1);
		private final RuleCall cInputnameIDTerminalRuleCall_4_1_0 = (RuleCall)cInputnameAssignment_4_1.eContents().get(0);
		
		//StreamTo:
		//	{StreamTo}
		//	'STREAM'
		//	'TO'
		//	name=ID (statement=InnerSelect2 | inputname=ID);
		@Override public ParserRule getRule() { return rule; }
		
		//{StreamTo} 'STREAM' 'TO' name=ID (statement=InnerSelect2 | inputname=ID)
		public Group getGroup() { return cGroup; }
		
		//{StreamTo}
		public Action getStreamToAction_0() { return cStreamToAction_0; }
		
		//'STREAM'
		public Keyword getSTREAMKeyword_1() { return cSTREAMKeyword_1; }
		
		//'TO'
		public Keyword getTOKeyword_2() { return cTOKeyword_2; }
		
		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
		
		//(statement=InnerSelect2 | inputname=ID)
		public Alternatives getAlternatives_4() { return cAlternatives_4; }
		
		//statement=InnerSelect2
		public Assignment getStatementAssignment_4_0() { return cStatementAssignment_4_0; }
		
		//InnerSelect2
		public RuleCall getStatementInnerSelect2ParserRuleCall_4_0_0() { return cStatementInnerSelect2ParserRuleCall_4_0_0; }
		
		//inputname=ID
		public Assignment getInputnameAssignment_4_1() { return cInputnameAssignment_4_1; }
		
		//ID
		public RuleCall getInputnameIDTerminalRuleCall_4_1_0() { return cInputnameIDTerminalRuleCall_4_1_0; }
	}
	public class DropStreamElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.parser.novel.cql.CQL.DropStream");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDropStreamAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDROPKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cNameAlternatives_2_0 = (Alternatives)cNameAssignment_2.eContents().get(0);
		private final Keyword cNameSINKKeyword_2_0_0 = (Keyword)cNameAlternatives_2_0.eContents().get(0);
		private final Keyword cNameSTREAMKeyword_2_0_1 = (Keyword)cNameAlternatives_2_0.eContents().get(1);
		private final Keyword cNameVIEWKeyword_2_0_2 = (Keyword)cNameAlternatives_2_0.eContents().get(2);
		private final Assignment cStreamAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cStreamIDTerminalRuleCall_3_0 = (RuleCall)cStreamAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cExistsAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final Keyword cExistsIFKeyword_4_0_0 = (Keyword)cExistsAssignment_4_0.eContents().get(0);
		private final Keyword cEXISTSKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		
		//DropStream Command:
		//	{DropStream}
		//	'DROP'
		//	name=('SINK' | 'STREAM' | 'VIEW') stream=ID (exists='IF' 'EXISTS')?
		@Override public ParserRule getRule() { return rule; }
		
		//{DropStream} 'DROP' name=('SINK' | 'STREAM' | 'VIEW') stream=ID (exists='IF' 'EXISTS')?
		public Group getGroup() { return cGroup; }
		
		//{DropStream}
		public Action getDropStreamAction_0() { return cDropStreamAction_0; }
		
		//'DROP'
		public Keyword getDROPKeyword_1() { return cDROPKeyword_1; }
		
		//name=('SINK' | 'STREAM' | 'VIEW')
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//('SINK' | 'STREAM' | 'VIEW')
		public Alternatives getNameAlternatives_2_0() { return cNameAlternatives_2_0; }
		
		//'SINK'
		public Keyword getNameSINKKeyword_2_0_0() { return cNameSINKKeyword_2_0_0; }
		
		//'STREAM'
		public Keyword getNameSTREAMKeyword_2_0_1() { return cNameSTREAMKeyword_2_0_1; }
		
		//'VIEW'
		public Keyword getNameVIEWKeyword_2_0_2() { return cNameVIEWKeyword_2_0_2; }
		
		//stream=ID
		public Assignment getStreamAssignment_3() { return cStreamAssignment_3; }
		
		//ID
		public RuleCall getStreamIDTerminalRuleCall_3_0() { return cStreamIDTerminalRuleCall_3_0; }
		
		//(exists='IF' 'EXISTS')?
		public Group getGroup_4() { return cGroup_4; }
		
		//exists='IF'
		public Assignment getExistsAssignment_4_0() { return cExistsAssignment_4_0; }
		
		//'IF'
		public Keyword getExistsIFKeyword_4_0_0() { return cExistsIFKeyword_4_0_0; }
		
		//'EXISTS'
		public Keyword getEXISTSKeyword_4_1() { return cEXISTSKeyword_4_1; }
	}
	public class UserManagementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.parser.novel.cql.CQL.UserManagement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cUserManagementAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cNameAlternatives_1_0 = (Alternatives)cNameAssignment_1.eContents().get(0);
		private final Keyword cNameCREATEKeyword_1_0_0 = (Keyword)cNameAlternatives_1_0.eContents().get(0);
		private final Keyword cNameALTERKeyword_1_0_1 = (Keyword)cNameAlternatives_1_0.eContents().get(1);
		private final Keyword cNameDROPKeyword_1_0_2 = (Keyword)cNameAlternatives_1_0.eContents().get(2);
		private final Assignment cSubjectAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cSubjectAlternatives_2_0 = (Alternatives)cSubjectAssignment_2.eContents().get(0);
		private final Keyword cSubjectUSERKeyword_2_0_0 = (Keyword)cSubjectAlternatives_2_0.eContents().get(0);
		private final Keyword cSubjectROLEKeyword_2_0_1 = (Keyword)cSubjectAlternatives_2_0.eContents().get(1);
		private final Keyword cSubjectTENANTKeyword_2_0_2 = (Keyword)cSubjectAlternatives_2_0.eContents().get(2);
		private final Assignment cSubjectNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSubjectNameIDTerminalRuleCall_3_0 = (RuleCall)cSubjectNameAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cIDFIEDKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cBYKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cPasswordAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cPasswordSTRINGTerminalRuleCall_4_2_0 = (RuleCall)cPasswordAssignment_4_2.eContents().get(0);
		
		//UserManagement Command:
		//	{UserManagement} name=('CREATE' | 'ALTER' | 'DROP') subject=('USER' | 'ROLE' | 'TENANT') subjectName=ID ('IDFIED' 'BY'
		//	password=STRING)?
		@Override public ParserRule getRule() { return rule; }
		
		//{UserManagement} name=('CREATE' | 'ALTER' | 'DROP') subject=('USER' | 'ROLE' | 'TENANT') subjectName=ID ('IDFIED' 'BY'
		//password=STRING)?
		public Group getGroup() { return cGroup; }
		
		//{UserManagement}
		public Action getUserManagementAction_0() { return cUserManagementAction_0; }
		
		//name=('CREATE' | 'ALTER' | 'DROP')
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//('CREATE' | 'ALTER' | 'DROP')
		public Alternatives getNameAlternatives_1_0() { return cNameAlternatives_1_0; }
		
		//'CREATE'
		public Keyword getNameCREATEKeyword_1_0_0() { return cNameCREATEKeyword_1_0_0; }
		
		//'ALTER'
		public Keyword getNameALTERKeyword_1_0_1() { return cNameALTERKeyword_1_0_1; }
		
		//'DROP'
		public Keyword getNameDROPKeyword_1_0_2() { return cNameDROPKeyword_1_0_2; }
		
		//subject=('USER' | 'ROLE' | 'TENANT')
		public Assignment getSubjectAssignment_2() { return cSubjectAssignment_2; }
		
		//('USER' | 'ROLE' | 'TENANT')
		public Alternatives getSubjectAlternatives_2_0() { return cSubjectAlternatives_2_0; }
		
		//'USER'
		public Keyword getSubjectUSERKeyword_2_0_0() { return cSubjectUSERKeyword_2_0_0; }
		
		//'ROLE'
		public Keyword getSubjectROLEKeyword_2_0_1() { return cSubjectROLEKeyword_2_0_1; }
		
		//'TENANT'
		public Keyword getSubjectTENANTKeyword_2_0_2() { return cSubjectTENANTKeyword_2_0_2; }
		
		//subjectName=ID
		public Assignment getSubjectNameAssignment_3() { return cSubjectNameAssignment_3; }
		
		//ID
		public RuleCall getSubjectNameIDTerminalRuleCall_3_0() { return cSubjectNameIDTerminalRuleCall_3_0; }
		
		//('IDFIED' 'BY' password=STRING)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'IDFIED'
		public Keyword getIDFIEDKeyword_4_0() { return cIDFIEDKeyword_4_0; }
		
		//'BY'
		public Keyword getBYKeyword_4_1() { return cBYKeyword_4_1; }
		
		//password=STRING
		public Assignment getPasswordAssignment_4_2() { return cPasswordAssignment_4_2; }
		
		//STRING
		public RuleCall getPasswordSTRINGTerminalRuleCall_4_2_0() { return cPasswordSTRINGTerminalRuleCall_4_2_0; }
	}
	public class RightsManagementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.parser.novel.cql.CQL.RightsManagement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cRightsManagementAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final Keyword cNameGRANTKeyword_0_1_0 = (Keyword)cNameAssignment_0_1.eContents().get(0);
		private final Assignment cOperationsAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cOperationsIDTerminalRuleCall_0_2_0 = (RuleCall)cOperationsAssignment_0_2.eContents().get(0);
		private final Group cGroup_0_3 = (Group)cGroup_0.eContents().get(3);
		private final Keyword cCommaKeyword_0_3_0 = (Keyword)cGroup_0_3.eContents().get(0);
		private final Assignment cOperationsAssignment_0_3_1 = (Assignment)cGroup_0_3.eContents().get(1);
		private final RuleCall cOperationsIDTerminalRuleCall_0_3_1_0 = (RuleCall)cOperationsAssignment_0_3_1.eContents().get(0);
		private final Group cGroup_0_4 = (Group)cGroup_0.eContents().get(4);
		private final Keyword cONKeyword_0_4_0 = (Keyword)cGroup_0_4.eContents().get(0);
		private final Assignment cOperations2Assignment_0_4_1 = (Assignment)cGroup_0_4.eContents().get(1);
		private final RuleCall cOperations2IDTerminalRuleCall_0_4_1_0 = (RuleCall)cOperations2Assignment_0_4_1.eContents().get(0);
		private final Group cGroup_0_4_2 = (Group)cGroup_0_4.eContents().get(2);
		private final Keyword cCommaKeyword_0_4_2_0 = (Keyword)cGroup_0_4_2.eContents().get(0);
		private final Assignment cOperations2Assignment_0_4_2_1 = (Assignment)cGroup_0_4_2.eContents().get(1);
		private final RuleCall cOperations2IDTerminalRuleCall_0_4_2_1_0 = (RuleCall)cOperations2Assignment_0_4_2_1.eContents().get(0);
		private final Keyword cTOKeyword_0_5 = (Keyword)cGroup_0.eContents().get(5);
		private final Assignment cUserAssignment_0_6 = (Assignment)cGroup_0.eContents().get(6);
		private final RuleCall cUserIDTerminalRuleCall_0_6_0 = (RuleCall)cUserAssignment_0_6.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cRightsManagementAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cNameREVOKEKeyword_1_1_0 = (Keyword)cNameAssignment_1_1.eContents().get(0);
		private final Assignment cOperationsAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cOperationsIDTerminalRuleCall_1_2_0 = (RuleCall)cOperationsAssignment_1_2.eContents().get(0);
		private final Group cGroup_1_3 = (Group)cGroup_1.eContents().get(3);
		private final Keyword cCommaKeyword_1_3_0 = (Keyword)cGroup_1_3.eContents().get(0);
		private final Assignment cOperationsAssignment_1_3_1 = (Assignment)cGroup_1_3.eContents().get(1);
		private final RuleCall cOperationsIDTerminalRuleCall_1_3_1_0 = (RuleCall)cOperationsAssignment_1_3_1.eContents().get(0);
		private final Group cGroup_1_4 = (Group)cGroup_1.eContents().get(4);
		private final Keyword cONKeyword_1_4_0 = (Keyword)cGroup_1_4.eContents().get(0);
		private final Assignment cOperations2Assignment_1_4_1 = (Assignment)cGroup_1_4.eContents().get(1);
		private final RuleCall cOperations2IDTerminalRuleCall_1_4_1_0 = (RuleCall)cOperations2Assignment_1_4_1.eContents().get(0);
		private final Group cGroup_1_4_2 = (Group)cGroup_1_4.eContents().get(2);
		private final Keyword cCommaKeyword_1_4_2_0 = (Keyword)cGroup_1_4_2.eContents().get(0);
		private final Assignment cOperations2Assignment_1_4_2_1 = (Assignment)cGroup_1_4_2.eContents().get(1);
		private final RuleCall cOperations2IDTerminalRuleCall_1_4_2_1_0 = (RuleCall)cOperations2Assignment_1_4_2_1.eContents().get(0);
		private final Keyword cFROMKeyword_1_5 = (Keyword)cGroup_1.eContents().get(5);
		private final Assignment cUserAssignment_1_6 = (Assignment)cGroup_1.eContents().get(6);
		private final RuleCall cUserIDTerminalRuleCall_1_6_0 = (RuleCall)cUserAssignment_1_6.eContents().get(0);
		
		//RightsManagement Command:
		//	{RightsManagement} name='GRANT'
		//	operations+=ID (',' operations+=ID)* ('ON' operations2+=ID (',' operations2+=ID)*)?
		//	'TO' user=ID | {RightsManagement} name='REVOKE'
		//	operations+=ID (',' operations+=ID)* ('ON' operations2+=ID (',' operations2+=ID)*)?
		//	'FROM' user=ID
		@Override public ParserRule getRule() { return rule; }
		
		//{RightsManagement} name='GRANT' operations+=ID (',' operations+=ID)* ('ON' operations2+=ID (',' operations2+=ID)*)? 'TO'
		//user=ID | {RightsManagement} name='REVOKE' operations+=ID (',' operations+=ID)* ('ON' operations2+=ID (','
		//operations2+=ID)*)? 'FROM' user=ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{RightsManagement} name='GRANT' operations+=ID (',' operations+=ID)* ('ON' operations2+=ID (',' operations2+=ID)*)? 'TO'
		//user=ID
		public Group getGroup_0() { return cGroup_0; }
		
		//{RightsManagement}
		public Action getRightsManagementAction_0_0() { return cRightsManagementAction_0_0; }
		
		//name='GRANT'
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }
		
		//'GRANT'
		public Keyword getNameGRANTKeyword_0_1_0() { return cNameGRANTKeyword_0_1_0; }
		
		//operations+=ID
		public Assignment getOperationsAssignment_0_2() { return cOperationsAssignment_0_2; }
		
		//ID
		public RuleCall getOperationsIDTerminalRuleCall_0_2_0() { return cOperationsIDTerminalRuleCall_0_2_0; }
		
		//(',' operations+=ID)*
		public Group getGroup_0_3() { return cGroup_0_3; }
		
		//','
		public Keyword getCommaKeyword_0_3_0() { return cCommaKeyword_0_3_0; }
		
		//operations+=ID
		public Assignment getOperationsAssignment_0_3_1() { return cOperationsAssignment_0_3_1; }
		
		//ID
		public RuleCall getOperationsIDTerminalRuleCall_0_3_1_0() { return cOperationsIDTerminalRuleCall_0_3_1_0; }
		
		//('ON' operations2+=ID (',' operations2+=ID)*)?
		public Group getGroup_0_4() { return cGroup_0_4; }
		
		//'ON'
		public Keyword getONKeyword_0_4_0() { return cONKeyword_0_4_0; }
		
		//operations2+=ID
		public Assignment getOperations2Assignment_0_4_1() { return cOperations2Assignment_0_4_1; }
		
		//ID
		public RuleCall getOperations2IDTerminalRuleCall_0_4_1_0() { return cOperations2IDTerminalRuleCall_0_4_1_0; }
		
		//(',' operations2+=ID)*
		public Group getGroup_0_4_2() { return cGroup_0_4_2; }
		
		//','
		public Keyword getCommaKeyword_0_4_2_0() { return cCommaKeyword_0_4_2_0; }
		
		//operations2+=ID
		public Assignment getOperations2Assignment_0_4_2_1() { return cOperations2Assignment_0_4_2_1; }
		
		//ID
		public RuleCall getOperations2IDTerminalRuleCall_0_4_2_1_0() { return cOperations2IDTerminalRuleCall_0_4_2_1_0; }
		
		//'TO'
		public Keyword getTOKeyword_0_5() { return cTOKeyword_0_5; }
		
		//user=ID
		public Assignment getUserAssignment_0_6() { return cUserAssignment_0_6; }
		
		//ID
		public RuleCall getUserIDTerminalRuleCall_0_6_0() { return cUserIDTerminalRuleCall_0_6_0; }
		
		//{RightsManagement} name='REVOKE' operations+=ID (',' operations+=ID)* ('ON' operations2+=ID (',' operations2+=ID)*)?
		//'FROM' user=ID
		public Group getGroup_1() { return cGroup_1; }
		
		//{RightsManagement}
		public Action getRightsManagementAction_1_0() { return cRightsManagementAction_1_0; }
		
		//name='REVOKE'
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }
		
		//'REVOKE'
		public Keyword getNameREVOKEKeyword_1_1_0() { return cNameREVOKEKeyword_1_1_0; }
		
		//operations+=ID
		public Assignment getOperationsAssignment_1_2() { return cOperationsAssignment_1_2; }
		
		//ID
		public RuleCall getOperationsIDTerminalRuleCall_1_2_0() { return cOperationsIDTerminalRuleCall_1_2_0; }
		
		//(',' operations+=ID)*
		public Group getGroup_1_3() { return cGroup_1_3; }
		
		//','
		public Keyword getCommaKeyword_1_3_0() { return cCommaKeyword_1_3_0; }
		
		//operations+=ID
		public Assignment getOperationsAssignment_1_3_1() { return cOperationsAssignment_1_3_1; }
		
		//ID
		public RuleCall getOperationsIDTerminalRuleCall_1_3_1_0() { return cOperationsIDTerminalRuleCall_1_3_1_0; }
		
		//('ON' operations2+=ID (',' operations2+=ID)*)?
		public Group getGroup_1_4() { return cGroup_1_4; }
		
		//'ON'
		public Keyword getONKeyword_1_4_0() { return cONKeyword_1_4_0; }
		
		//operations2+=ID
		public Assignment getOperations2Assignment_1_4_1() { return cOperations2Assignment_1_4_1; }
		
		//ID
		public RuleCall getOperations2IDTerminalRuleCall_1_4_1_0() { return cOperations2IDTerminalRuleCall_1_4_1_0; }
		
		//(',' operations2+=ID)*
		public Group getGroup_1_4_2() { return cGroup_1_4_2; }
		
		//','
		public Keyword getCommaKeyword_1_4_2_0() { return cCommaKeyword_1_4_2_0; }
		
		//operations2+=ID
		public Assignment getOperations2Assignment_1_4_2_1() { return cOperations2Assignment_1_4_2_1; }
		
		//ID
		public RuleCall getOperations2IDTerminalRuleCall_1_4_2_1_0() { return cOperations2IDTerminalRuleCall_1_4_2_1_0; }
		
		//'FROM'
		public Keyword getFROMKeyword_1_5() { return cFROMKeyword_1_5; }
		
		//user=ID
		public Assignment getUserAssignment_1_6() { return cUserAssignment_1_6; }
		
		//ID
		public RuleCall getUserIDTerminalRuleCall_1_6_0() { return cUserIDTerminalRuleCall_1_6_0; }
	}
	public class RoleManagementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.parser.novel.cql.CQL.RoleManagement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cRoleManagementAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final Keyword cNameGRANTKeyword_0_1_0 = (Keyword)cNameAssignment_0_1.eContents().get(0);
		private final Keyword cROLEKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cOperationsAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cOperationsIDTerminalRuleCall_0_3_0 = (RuleCall)cOperationsAssignment_0_3.eContents().get(0);
		private final Group cGroup_0_4 = (Group)cGroup_0.eContents().get(4);
		private final Keyword cCommaKeyword_0_4_0 = (Keyword)cGroup_0_4.eContents().get(0);
		private final Assignment cOperationsAssignment_0_4_1 = (Assignment)cGroup_0_4.eContents().get(1);
		private final RuleCall cOperationsIDTerminalRuleCall_0_4_1_0 = (RuleCall)cOperationsAssignment_0_4_1.eContents().get(0);
		private final Keyword cTOKeyword_0_5 = (Keyword)cGroup_0.eContents().get(5);
		private final Assignment cUserAssignment_0_6 = (Assignment)cGroup_0.eContents().get(6);
		private final RuleCall cUserIDTerminalRuleCall_0_6_0 = (RuleCall)cUserAssignment_0_6.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cRoleManagementAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cNameREVOKEKeyword_1_1_0 = (Keyword)cNameAssignment_1_1.eContents().get(0);
		private final Keyword cROLEKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cOperationsAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cOperationsIDTerminalRuleCall_1_3_0 = (RuleCall)cOperationsAssignment_1_3.eContents().get(0);
		private final Group cGroup_1_4 = (Group)cGroup_1.eContents().get(4);
		private final Keyword cCommaKeyword_1_4_0 = (Keyword)cGroup_1_4.eContents().get(0);
		private final Assignment cOperationsAssignment_1_4_1 = (Assignment)cGroup_1_4.eContents().get(1);
		private final RuleCall cOperationsIDTerminalRuleCall_1_4_1_0 = (RuleCall)cOperationsAssignment_1_4_1.eContents().get(0);
		private final Keyword cFROMKeyword_1_5 = (Keyword)cGroup_1.eContents().get(5);
		private final Assignment cUserAssignment_1_6 = (Assignment)cGroup_1.eContents().get(6);
		private final RuleCall cUserIDTerminalRuleCall_1_6_0 = (RuleCall)cUserAssignment_1_6.eContents().get(0);
		
		//RoleManagement Command:
		//	{RoleManagement} name='GRANT'
		//	'ROLE' operations+=ID (',' operations+=ID)*
		//	'TO' user=ID | {RoleManagement} name='REVOKE'
		//	'ROLE' operations+=ID (',' operations+=ID)*
		//	'FROM' user=ID
		@Override public ParserRule getRule() { return rule; }
		
		//{RoleManagement} name='GRANT' 'ROLE' operations+=ID (',' operations+=ID)* 'TO' user=ID | {RoleManagement} name='REVOKE'
		//'ROLE' operations+=ID (',' operations+=ID)* 'FROM' user=ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{RoleManagement} name='GRANT' 'ROLE' operations+=ID (',' operations+=ID)* 'TO' user=ID
		public Group getGroup_0() { return cGroup_0; }
		
		//{RoleManagement}
		public Action getRoleManagementAction_0_0() { return cRoleManagementAction_0_0; }
		
		//name='GRANT'
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }
		
		//'GRANT'
		public Keyword getNameGRANTKeyword_0_1_0() { return cNameGRANTKeyword_0_1_0; }
		
		//'ROLE'
		public Keyword getROLEKeyword_0_2() { return cROLEKeyword_0_2; }
		
		//operations+=ID
		public Assignment getOperationsAssignment_0_3() { return cOperationsAssignment_0_3; }
		
		//ID
		public RuleCall getOperationsIDTerminalRuleCall_0_3_0() { return cOperationsIDTerminalRuleCall_0_3_0; }
		
		//(',' operations+=ID)*
		public Group getGroup_0_4() { return cGroup_0_4; }
		
		//','
		public Keyword getCommaKeyword_0_4_0() { return cCommaKeyword_0_4_0; }
		
		//operations+=ID
		public Assignment getOperationsAssignment_0_4_1() { return cOperationsAssignment_0_4_1; }
		
		//ID
		public RuleCall getOperationsIDTerminalRuleCall_0_4_1_0() { return cOperationsIDTerminalRuleCall_0_4_1_0; }
		
		//'TO'
		public Keyword getTOKeyword_0_5() { return cTOKeyword_0_5; }
		
		//user=ID
		public Assignment getUserAssignment_0_6() { return cUserAssignment_0_6; }
		
		//ID
		public RuleCall getUserIDTerminalRuleCall_0_6_0() { return cUserIDTerminalRuleCall_0_6_0; }
		
		//{RoleManagement} name='REVOKE' 'ROLE' operations+=ID (',' operations+=ID)* 'FROM' user=ID
		public Group getGroup_1() { return cGroup_1; }
		
		//{RoleManagement}
		public Action getRoleManagementAction_1_0() { return cRoleManagementAction_1_0; }
		
		//name='REVOKE'
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }
		
		//'REVOKE'
		public Keyword getNameREVOKEKeyword_1_1_0() { return cNameREVOKEKeyword_1_1_0; }
		
		//'ROLE'
		public Keyword getROLEKeyword_1_2() { return cROLEKeyword_1_2; }
		
		//operations+=ID
		public Assignment getOperationsAssignment_1_3() { return cOperationsAssignment_1_3; }
		
		//ID
		public RuleCall getOperationsIDTerminalRuleCall_1_3_0() { return cOperationsIDTerminalRuleCall_1_3_0; }
		
		//(',' operations+=ID)*
		public Group getGroup_1_4() { return cGroup_1_4; }
		
		//','
		public Keyword getCommaKeyword_1_4_0() { return cCommaKeyword_1_4_0; }
		
		//operations+=ID
		public Assignment getOperationsAssignment_1_4_1() { return cOperationsAssignment_1_4_1; }
		
		//ID
		public RuleCall getOperationsIDTerminalRuleCall_1_4_1_0() { return cOperationsIDTerminalRuleCall_1_4_1_0; }
		
		//'FROM'
		public Keyword getFROMKeyword_1_5() { return cFROMKeyword_1_5; }
		
		//user=ID
		public Assignment getUserAssignment_1_6() { return cUserAssignment_1_6; }
		
		//ID
		public RuleCall getUserIDTerminalRuleCall_1_6_0() { return cUserIDTerminalRuleCall_1_6_0; }
	}
	public class WindowOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.parser.novel.cql.CQL.WindowOperator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cUnboundedWindowParserRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final RuleCall cTimebasedWindowParserRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		private final RuleCall cTuplebasedWindowParserRuleCall_1_2 = (RuleCall)cAlternatives_1.eContents().get(2);
		private final Keyword cRightSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//WindowOperator:
		//	'[' (UnboundedWindow
		//	| TimebasedWindow
		//	| TuplebasedWindow)
		//	']';
		@Override public ParserRule getRule() { return rule; }
		
		//'[' (UnboundedWindow | TimebasedWindow | TuplebasedWindow) ']'
		public Group getGroup() { return cGroup; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//(UnboundedWindow | TimebasedWindow | TuplebasedWindow)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//UnboundedWindow
		public RuleCall getUnboundedWindowParserRuleCall_1_0() { return cUnboundedWindowParserRuleCall_1_0; }
		
		//TimebasedWindow
		public RuleCall getTimebasedWindowParserRuleCall_1_1() { return cTimebasedWindowParserRuleCall_1_1; }
		
		//TuplebasedWindow
		public RuleCall getTuplebasedWindowParserRuleCall_1_2() { return cTuplebasedWindowParserRuleCall_1_2; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2() { return cRightSquareBracketKeyword_2; }
	}
	public class UnboundedWindowElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.parser.novel.cql.CQL.UnboundedWindow");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cUndboundedWindowAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cUNBOUNDEDKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//UnboundedWindow WindowOperator:
		//	{UndboundedWindow}
		//	'UNBOUNDED'
		@Override public ParserRule getRule() { return rule; }
		
		//{UndboundedWindow} 'UNBOUNDED'
		public Group getGroup() { return cGroup; }
		
		//{UndboundedWindow}
		public Action getUndboundedWindowAction_0() { return cUndboundedWindowAction_0; }
		
		//'UNBOUNDED'
		public Keyword getUNBOUNDEDKeyword_1() { return cUNBOUNDEDKeyword_1; }
	}
	public class TimebasedWindowElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.parser.novel.cql.CQL.TimebasedWindow");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTimebasedWindowAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSIZEKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSizeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSizeINTTerminalRuleCall_2_0 = (RuleCall)cSizeAssignment_2.eContents().get(0);
		private final Assignment cUnitAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cUnitIDTerminalRuleCall_3_0 = (RuleCall)cUnitAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cADVANCEKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cAdvance_sizeAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cAdvance_sizeINTTerminalRuleCall_4_1_0 = (RuleCall)cAdvance_sizeAssignment_4_1.eContents().get(0);
		private final Assignment cAdvance_unitAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cAdvance_unitIDTerminalRuleCall_4_2_0 = (RuleCall)cAdvance_unitAssignment_4_2.eContents().get(0);
		private final Keyword cTIMEKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//TimebasedWindow WindowOperator:
		//	{TimebasedWindow}
		//	'SIZE' size=INT unit=ID ('ADVANCE' advance_size=INT advance_unit=ID)?
		//	'TIME'
		@Override public ParserRule getRule() { return rule; }
		
		//{TimebasedWindow} 'SIZE' size=INT unit=ID ('ADVANCE' advance_size=INT advance_unit=ID)? 'TIME'
		public Group getGroup() { return cGroup; }
		
		//{TimebasedWindow}
		public Action getTimebasedWindowAction_0() { return cTimebasedWindowAction_0; }
		
		//'SIZE'
		public Keyword getSIZEKeyword_1() { return cSIZEKeyword_1; }
		
		//size=INT
		public Assignment getSizeAssignment_2() { return cSizeAssignment_2; }
		
		//INT
		public RuleCall getSizeINTTerminalRuleCall_2_0() { return cSizeINTTerminalRuleCall_2_0; }
		
		//unit=ID
		public Assignment getUnitAssignment_3() { return cUnitAssignment_3; }
		
		//ID
		public RuleCall getUnitIDTerminalRuleCall_3_0() { return cUnitIDTerminalRuleCall_3_0; }
		
		//('ADVANCE' advance_size=INT advance_unit=ID)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'ADVANCE'
		public Keyword getADVANCEKeyword_4_0() { return cADVANCEKeyword_4_0; }
		
		//advance_size=INT
		public Assignment getAdvance_sizeAssignment_4_1() { return cAdvance_sizeAssignment_4_1; }
		
		//INT
		public RuleCall getAdvance_sizeINTTerminalRuleCall_4_1_0() { return cAdvance_sizeINTTerminalRuleCall_4_1_0; }
		
		//advance_unit=ID
		public Assignment getAdvance_unitAssignment_4_2() { return cAdvance_unitAssignment_4_2; }
		
		//ID
		public RuleCall getAdvance_unitIDTerminalRuleCall_4_2_0() { return cAdvance_unitIDTerminalRuleCall_4_2_0; }
		
		//'TIME'
		public Keyword getTIMEKeyword_5() { return cTIMEKeyword_5; }
	}
	public class TuplebasedWindowElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.parser.novel.cql.CQL.TuplebasedWindow");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTuplebasedWindowAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSIZEKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSizeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSizeINTTerminalRuleCall_2_0 = (RuleCall)cSizeAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cADVANCEKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cAdvance_sizeAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cAdvance_sizeINTTerminalRuleCall_3_1_0 = (RuleCall)cAdvance_sizeAssignment_3_1.eContents().get(0);
		private final Keyword cTUPLEKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cPARTITIONKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cBYKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cPartition_attributeAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cPartition_attributeAttributeParserRuleCall_5_2_0 = (RuleCall)cPartition_attributeAssignment_5_2.eContents().get(0);
		
		//TuplebasedWindow WindowOperator:
		//	{TuplebasedWindow}
		//	'SIZE' size=INT ('ADVANCE' advance_size=INT)?
		//	'TUPLE' ('PARTITION' 'BY' partition_attribute=Attribute)?
		@Override public ParserRule getRule() { return rule; }
		
		//{TuplebasedWindow} 'SIZE' size=INT ('ADVANCE' advance_size=INT)? 'TUPLE' ('PARTITION' 'BY'
		//partition_attribute=Attribute)?
		public Group getGroup() { return cGroup; }
		
		//{TuplebasedWindow}
		public Action getTuplebasedWindowAction_0() { return cTuplebasedWindowAction_0; }
		
		//'SIZE'
		public Keyword getSIZEKeyword_1() { return cSIZEKeyword_1; }
		
		//size=INT
		public Assignment getSizeAssignment_2() { return cSizeAssignment_2; }
		
		//INT
		public RuleCall getSizeINTTerminalRuleCall_2_0() { return cSizeINTTerminalRuleCall_2_0; }
		
		//('ADVANCE' advance_size=INT)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'ADVANCE'
		public Keyword getADVANCEKeyword_3_0() { return cADVANCEKeyword_3_0; }
		
		//advance_size=INT
		public Assignment getAdvance_sizeAssignment_3_1() { return cAdvance_sizeAssignment_3_1; }
		
		//INT
		public RuleCall getAdvance_sizeINTTerminalRuleCall_3_1_0() { return cAdvance_sizeINTTerminalRuleCall_3_1_0; }
		
		//'TUPLE'
		public Keyword getTUPLEKeyword_4() { return cTUPLEKeyword_4; }
		
		//('PARTITION' 'BY' partition_attribute=Attribute)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'PARTITION'
		public Keyword getPARTITIONKeyword_5_0() { return cPARTITIONKeyword_5_0; }
		
		//'BY'
		public Keyword getBYKeyword_5_1() { return cBYKeyword_5_1; }
		
		//partition_attribute=Attribute
		public Assignment getPartition_attributeAssignment_5_2() { return cPartition_attributeAssignment_5_2; }
		
		//Attribute
		public RuleCall getPartition_attributeAttributeParserRuleCall_5_2_0() { return cPartition_attributeAttributeParserRuleCall_5_2_0; }
	}
	public class ExpressionsModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.parser.novel.cql.CQL.ExpressionsModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cExpressionsModelAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cElementsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cElementsExpressionParserRuleCall_1_0 = (RuleCall)cElementsAssignment_1.eContents().get(0);
		
		//// Expression DSL ///////////////////////////////////////////////////////
		//ExpressionsModel:
		//	{ExpressionsModel} elements+=Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//{ExpressionsModel} elements+=Expression
		public Group getGroup() { return cGroup; }
		
		//{ExpressionsModel}
		public Action getExpressionsModelAction_0() { return cExpressionsModelAction_0; }
		
		//elements+=Expression
		public Assignment getElementsAssignment_1() { return cElementsAssignment_1; }
		
		//Expression
		public RuleCall getElementsExpressionParserRuleCall_1_0() { return cElementsExpressionParserRuleCall_1_0; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.parser.novel.cql.CQL.Expression");
		private final RuleCall cOrPredicateParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Expression:
		//	OrPredicate;
		@Override public ParserRule getRule() { return rule; }
		
		//OrPredicate
		public RuleCall getOrPredicateParserRuleCall() { return cOrPredicateParserRuleCall; }
	}
	public class OrPredicateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.parser.novel.cql.CQL.OrPredicate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAndPredicateParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOrPredicateLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final RuleCall cOrOperatorParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAndPredicateParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//OrPredicate Expression:
		//	AndPredicate ({OrPredicate.left=current} OrOperator right=AndPredicate)*
		@Override public ParserRule getRule() { return rule; }
		
		//AndPredicate ({OrPredicate.left=current} OrOperator right=AndPredicate)*
		public Group getGroup() { return cGroup; }
		
		//AndPredicate
		public RuleCall getAndPredicateParserRuleCall_0() { return cAndPredicateParserRuleCall_0; }
		
		//({OrPredicate.left=current} OrOperator right=AndPredicate)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{OrPredicate.left=current}
		public Action getOrPredicateLeftAction_1_0() { return cOrPredicateLeftAction_1_0; }
		
		//OrOperator
		public RuleCall getOrOperatorParserRuleCall_1_1() { return cOrOperatorParserRuleCall_1_1; }
		
		//right=AndPredicate
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//AndPredicate
		public RuleCall getRightAndPredicateParserRuleCall_1_2_0() { return cRightAndPredicateParserRuleCall_1_2_0; }
	}
	public class AndPredicateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.parser.novel.cql.CQL.AndPredicate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cEqualitiyParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAndPredicateLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final RuleCall cAndOperatorParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightEqualitiyParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//AndPredicate Expression:
		//	Equalitiy ({AndPredicate.left=current} AndOperator right=Equalitiy)*
		@Override public ParserRule getRule() { return rule; }
		
		//Equalitiy ({AndPredicate.left=current} AndOperator right=Equalitiy)*
		public Group getGroup() { return cGroup; }
		
		//Equalitiy
		public RuleCall getEqualitiyParserRuleCall_0() { return cEqualitiyParserRuleCall_0; }
		
		//({AndPredicate.left=current} AndOperator right=Equalitiy)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{AndPredicate.left=current}
		public Action getAndPredicateLeftAction_1_0() { return cAndPredicateLeftAction_1_0; }
		
		//AndOperator
		public RuleCall getAndOperatorParserRuleCall_1_1() { return cAndOperatorParserRuleCall_1_1; }
		
		//right=Equalitiy
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Equalitiy
		public RuleCall getRightEqualitiyParserRuleCall_1_2_0() { return cRightEqualitiyParserRuleCall_1_2_0; }
	}
	public class EqualitiyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.parser.novel.cql.CQL.Equalitiy");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cComparisonParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cEqualityLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOpEQUALITIY_OPERATORParserRuleCall_1_1_0 = (RuleCall)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightComparisonParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Equalitiy Expression:
		//	Comparison ({Equality.left=current} op=EQUALITIY_OPERATOR
		//	right=Comparison)*
		@Override public ParserRule getRule() { return rule; }
		
		//Comparison ({Equality.left=current} op=EQUALITIY_OPERATOR right=Comparison)*
		public Group getGroup() { return cGroup; }
		
		//Comparison
		public RuleCall getComparisonParserRuleCall_0() { return cComparisonParserRuleCall_0; }
		
		//({Equality.left=current} op=EQUALITIY_OPERATOR right=Comparison)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Equality.left=current}
		public Action getEqualityLeftAction_1_0() { return cEqualityLeftAction_1_0; }
		
		//op=EQUALITIY_OPERATOR
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//EQUALITIY_OPERATOR
		public RuleCall getOpEQUALITIY_OPERATORParserRuleCall_1_1_0() { return cOpEQUALITIY_OPERATORParserRuleCall_1_1_0; }
		
		//right=Comparison
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Comparison
		public RuleCall getRightComparisonParserRuleCall_1_2_0() { return cRightComparisonParserRuleCall_1_2_0; }
	}
	public class ComparisonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.parser.novel.cql.CQL.Comparison");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPlusOrMinusParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cComparisionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOpCOMPARE_OPERATORParserRuleCall_1_1_0 = (RuleCall)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightPlusOrMinusParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Comparison Expression:
		//	PlusOrMinus ({Comparision.left=current} op=COMPARE_OPERATOR
		//	right=PlusOrMinus)*
		@Override public ParserRule getRule() { return rule; }
		
		//PlusOrMinus ({Comparision.left=current} op=COMPARE_OPERATOR right=PlusOrMinus)*
		public Group getGroup() { return cGroup; }
		
		//PlusOrMinus
		public RuleCall getPlusOrMinusParserRuleCall_0() { return cPlusOrMinusParserRuleCall_0; }
		
		//({Comparision.left=current} op=COMPARE_OPERATOR right=PlusOrMinus)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Comparision.left=current}
		public Action getComparisionLeftAction_1_0() { return cComparisionLeftAction_1_0; }
		
		//op=COMPARE_OPERATOR
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//COMPARE_OPERATOR
		public RuleCall getOpCOMPARE_OPERATORParserRuleCall_1_1_0() { return cOpCOMPARE_OPERATORParserRuleCall_1_1_0; }
		
		//right=PlusOrMinus
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//PlusOrMinus
		public RuleCall getRightPlusOrMinusParserRuleCall_1_2_0() { return cRightPlusOrMinusParserRuleCall_1_2_0; }
	}
	public class PlusOrMinusElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.parser.novel.cql.CQL.PlusOrMinus");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMulOrDivParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cPlusLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cPlusSignKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cMinusLeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_0_1_1 = (Keyword)cGroup_1_0_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightMulOrDivParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//PlusOrMinus Expression:
		//	MulOrDiv (({Plus.left=current} '+' | {Minus.left=current} '-') right=MulOrDiv)*
		@Override public ParserRule getRule() { return rule; }
		
		//MulOrDiv (({Plus.left=current} '+' | {Minus.left=current} '-') right=MulOrDiv)*
		public Group getGroup() { return cGroup; }
		
		//MulOrDiv
		public RuleCall getMulOrDivParserRuleCall_0() { return cMulOrDivParserRuleCall_0; }
		
		//(({Plus.left=current} '+' | {Minus.left=current} '-') right=MulOrDiv)*
		public Group getGroup_1() { return cGroup_1; }
		
		//({Plus.left=current} '+' | {Minus.left=current} '-')
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//{Plus.left=current} '+'
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{Plus.left=current}
		public Action getPlusLeftAction_1_0_0_0() { return cPlusLeftAction_1_0_0_0; }
		
		//'+'
		public Keyword getPlusSignKeyword_1_0_0_1() { return cPlusSignKeyword_1_0_0_1; }
		
		//{Minus.left=current} '-'
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }
		
		//{Minus.left=current}
		public Action getMinusLeftAction_1_0_1_0() { return cMinusLeftAction_1_0_1_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1_0_1_1() { return cHyphenMinusKeyword_1_0_1_1; }
		
		//right=MulOrDiv
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//MulOrDiv
		public RuleCall getRightMulOrDivParserRuleCall_1_1_0() { return cRightMulOrDivParserRuleCall_1_1_0; }
	}
	public class MulOrDivElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.parser.novel.cql.CQL.MulOrDiv");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimaryParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cMulOrDivLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final Keyword cOpSolidusKeyword_1_1_0_0 = (Keyword)cOpAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOpAsteriskKeyword_1_1_0_1 = (Keyword)cOpAlternatives_1_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightPrimaryParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//MulOrDiv Expression:
		//	Primary ({MulOrDiv.left=current} op=('/' | '*') right=Primary)*
		@Override public ParserRule getRule() { return rule; }
		
		//Primary ({MulOrDiv.left=current} op=('/' | '*') right=Primary)*
		public Group getGroup() { return cGroup; }
		
		//Primary
		public RuleCall getPrimaryParserRuleCall_0() { return cPrimaryParserRuleCall_0; }
		
		//({MulOrDiv.left=current} op=('/' | '*') right=Primary)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{MulOrDiv.left=current}
		public Action getMulOrDivLeftAction_1_0() { return cMulOrDivLeftAction_1_0; }
		
		//op=('/' | '*')
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//('/' | '*')
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }
		
		//'/'
		public Keyword getOpSolidusKeyword_1_1_0_0() { return cOpSolidusKeyword_1_1_0_0; }
		
		//'*'
		public Keyword getOpAsteriskKeyword_1_1_0_1() { return cOpAsteriskKeyword_1_1_0_1; }
		
		//right=Primary
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Primary
		public RuleCall getRightPrimaryParserRuleCall_1_2_0() { return cRightPrimaryParserRuleCall_1_2_0; }
	}
	public class PrimaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.parser.novel.cql.CQL.Primary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cBracketAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cInnerAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cInnerExpressionParserRuleCall_0_2_0 = (RuleCall)cInnerAssignment_0_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cNOTAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cNOTKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cExpressionAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cExpressionPrimaryParserRuleCall_1_2_0 = (RuleCall)cExpressionAssignment_1_2.eContents().get(0);
		private final RuleCall cAtomicParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Primary Expression:
		//	{Bracket} '(' inner=Expression ')' | {NOT} 'NOT' expression=Primary | Atomic
		@Override public ParserRule getRule() { return rule; }
		
		//{Bracket} '(' inner=Expression ')' | {NOT} 'NOT' expression=Primary | Atomic
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{Bracket} '(' inner=Expression ')'
		public Group getGroup_0() { return cGroup_0; }
		
		//{Bracket}
		public Action getBracketAction_0_0() { return cBracketAction_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_1() { return cLeftParenthesisKeyword_0_1; }
		
		//inner=Expression
		public Assignment getInnerAssignment_0_2() { return cInnerAssignment_0_2; }
		
		//Expression
		public RuleCall getInnerExpressionParserRuleCall_0_2_0() { return cInnerExpressionParserRuleCall_0_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_3() { return cRightParenthesisKeyword_0_3; }
		
		//{NOT} 'NOT' expression=Primary
		public Group getGroup_1() { return cGroup_1; }
		
		//{NOT}
		public Action getNOTAction_1_0() { return cNOTAction_1_0; }
		
		//'NOT'
		public Keyword getNOTKeyword_1_1() { return cNOTKeyword_1_1; }
		
		//expression=Primary
		public Assignment getExpressionAssignment_1_2() { return cExpressionAssignment_1_2; }
		
		//Primary
		public RuleCall getExpressionPrimaryParserRuleCall_1_2_0() { return cExpressionPrimaryParserRuleCall_1_2_0; }
		
		//Atomic
		public RuleCall getAtomicParserRuleCall_2() { return cAtomicParserRuleCall_2; }
	}
	public class AtomicElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.parser.novel.cql.CQL.Atomic");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cIntConstantAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cValueAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_0_1_0 = (RuleCall)cValueAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cFloatConstantAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValueFLOATTerminalRuleCall_1_1_0 = (RuleCall)cValueAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cStringConstantAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cValueAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_2_1_0 = (RuleCall)cValueAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cBoolConstantAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Assignment cValueAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cValueBOOLEANParserRuleCall_3_1_0 = (RuleCall)cValueAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cAttributeRefAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Alternatives cAlternatives_4_1 = (Alternatives)cGroup_4.eContents().get(1);
		private final Assignment cValueAssignment_4_1_0 = (Assignment)cAlternatives_4_1.eContents().get(0);
		private final RuleCall cValueAttributeWithoutAliasDefinitionParserRuleCall_4_1_0_0 = (RuleCall)cValueAssignment_4_1_0.eContents().get(0);
		private final Assignment cValueAssignment_4_1_1 = (Assignment)cAlternatives_4_1.eContents().get(1);
		private final RuleCall cValueAttributeWithNestedStatementParserRuleCall_4_1_1_0 = (RuleCall)cValueAssignment_4_1_1.eContents().get(0);
		
		//Atomic Expression:
		//	{IntConstant} value=INT
		//	| {FloatConstant} value=FLOAT
		//	| {StringConstant} value=STRING
		//	| {BoolConstant} value=BOOLEAN
		//	| {AttributeRef} (value=AttributeWithoutAliasDefinition | value=AttributeWithNestedStatement)
		@Override public ParserRule getRule() { return rule; }
		
		//{IntConstant} value=INT | {FloatConstant} value=FLOAT | {StringConstant} value=STRING | {BoolConstant} value=BOOLEAN |
		//{AttributeRef} (value=AttributeWithoutAliasDefinition | value=AttributeWithNestedStatement)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{IntConstant} value=INT
		public Group getGroup_0() { return cGroup_0; }
		
		//{IntConstant}
		public Action getIntConstantAction_0_0() { return cIntConstantAction_0_0; }
		
		//value=INT
		public Assignment getValueAssignment_0_1() { return cValueAssignment_0_1; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_0_1_0() { return cValueINTTerminalRuleCall_0_1_0; }
		
		//{FloatConstant} value=FLOAT
		public Group getGroup_1() { return cGroup_1; }
		
		//{FloatConstant}
		public Action getFloatConstantAction_1_0() { return cFloatConstantAction_1_0; }
		
		//value=FLOAT
		public Assignment getValueAssignment_1_1() { return cValueAssignment_1_1; }
		
		//FLOAT
		public RuleCall getValueFLOATTerminalRuleCall_1_1_0() { return cValueFLOATTerminalRuleCall_1_1_0; }
		
		//{StringConstant} value=STRING
		public Group getGroup_2() { return cGroup_2; }
		
		//{StringConstant}
		public Action getStringConstantAction_2_0() { return cStringConstantAction_2_0; }
		
		//value=STRING
		public Assignment getValueAssignment_2_1() { return cValueAssignment_2_1; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_2_1_0() { return cValueSTRINGTerminalRuleCall_2_1_0; }
		
		//{BoolConstant} value=BOOLEAN
		public Group getGroup_3() { return cGroup_3; }
		
		//{BoolConstant}
		public Action getBoolConstantAction_3_0() { return cBoolConstantAction_3_0; }
		
		//value=BOOLEAN
		public Assignment getValueAssignment_3_1() { return cValueAssignment_3_1; }
		
		//BOOLEAN
		public RuleCall getValueBOOLEANParserRuleCall_3_1_0() { return cValueBOOLEANParserRuleCall_3_1_0; }
		
		//{AttributeRef} (value=AttributeWithoutAliasDefinition | value=AttributeWithNestedStatement)
		public Group getGroup_4() { return cGroup_4; }
		
		//{AttributeRef}
		public Action getAttributeRefAction_4_0() { return cAttributeRefAction_4_0; }
		
		//(value=AttributeWithoutAliasDefinition | value=AttributeWithNestedStatement)
		public Alternatives getAlternatives_4_1() { return cAlternatives_4_1; }
		
		//value=AttributeWithoutAliasDefinition
		public Assignment getValueAssignment_4_1_0() { return cValueAssignment_4_1_0; }
		
		//AttributeWithoutAliasDefinition
		public RuleCall getValueAttributeWithoutAliasDefinitionParserRuleCall_4_1_0_0() { return cValueAttributeWithoutAliasDefinitionParserRuleCall_4_1_0_0; }
		
		//value=AttributeWithNestedStatement
		public Assignment getValueAssignment_4_1_1() { return cValueAssignment_4_1_1; }
		
		//AttributeWithNestedStatement
		public RuleCall getValueAttributeWithNestedStatementParserRuleCall_4_1_1_0() { return cValueAttributeWithNestedStatementParserRuleCall_4_1_1_0; }
	}
	public class AtomicWithoutAttributeRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.parser.novel.cql.CQL.AtomicWithoutAttributeRef");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cIntConstantAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cValueAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_0_1_0 = (RuleCall)cValueAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cFloatConstantAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValueFLOATTerminalRuleCall_1_1_0 = (RuleCall)cValueAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cStringConstantAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cValueAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_2_1_0 = (RuleCall)cValueAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cBoolConstantAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Assignment cValueAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cValueBOOLEANParserRuleCall_3_1_0 = (RuleCall)cValueAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cMatrixAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Assignment cValueAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cValueMATRIX_FLOATTerminalRuleCall_4_1_0 = (RuleCall)cValueAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Action cVectorAction_5_0 = (Action)cGroup_5.eContents().get(0);
		private final Assignment cValueAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cValueVECTOR_FLOATTerminalRuleCall_5_1_0 = (RuleCall)cValueAssignment_5_1.eContents().get(0);
		
		//AtomicWithoutAttributeRef Expression:
		//	{IntConstant} value=INT
		//	| {FloatConstant} value=FLOAT
		//	| {StringConstant} value=STRING
		//	| {BoolConstant} value=BOOLEAN
		//	| {Matrix} value=MATRIX_FLOAT | {Vector} value=VECTOR_FLOAT
		@Override public ParserRule getRule() { return rule; }
		
		//{IntConstant} value=INT | {FloatConstant} value=FLOAT | {StringConstant} value=STRING | {BoolConstant} value=BOOLEAN |
		//{Matrix} value=MATRIX_FLOAT | {Vector} value=VECTOR_FLOAT
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{IntConstant} value=INT
		public Group getGroup_0() { return cGroup_0; }
		
		//{IntConstant}
		public Action getIntConstantAction_0_0() { return cIntConstantAction_0_0; }
		
		//value=INT
		public Assignment getValueAssignment_0_1() { return cValueAssignment_0_1; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_0_1_0() { return cValueINTTerminalRuleCall_0_1_0; }
		
		//{FloatConstant} value=FLOAT
		public Group getGroup_1() { return cGroup_1; }
		
		//{FloatConstant}
		public Action getFloatConstantAction_1_0() { return cFloatConstantAction_1_0; }
		
		//value=FLOAT
		public Assignment getValueAssignment_1_1() { return cValueAssignment_1_1; }
		
		//FLOAT
		public RuleCall getValueFLOATTerminalRuleCall_1_1_0() { return cValueFLOATTerminalRuleCall_1_1_0; }
		
		//{StringConstant} value=STRING
		public Group getGroup_2() { return cGroup_2; }
		
		//{StringConstant}
		public Action getStringConstantAction_2_0() { return cStringConstantAction_2_0; }
		
		//value=STRING
		public Assignment getValueAssignment_2_1() { return cValueAssignment_2_1; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_2_1_0() { return cValueSTRINGTerminalRuleCall_2_1_0; }
		
		//{BoolConstant} value=BOOLEAN
		public Group getGroup_3() { return cGroup_3; }
		
		//{BoolConstant}
		public Action getBoolConstantAction_3_0() { return cBoolConstantAction_3_0; }
		
		//value=BOOLEAN
		public Assignment getValueAssignment_3_1() { return cValueAssignment_3_1; }
		
		//BOOLEAN
		public RuleCall getValueBOOLEANParserRuleCall_3_1_0() { return cValueBOOLEANParserRuleCall_3_1_0; }
		
		//{Matrix} value=MATRIX_FLOAT
		public Group getGroup_4() { return cGroup_4; }
		
		//{Matrix}
		public Action getMatrixAction_4_0() { return cMatrixAction_4_0; }
		
		//value=MATRIX_FLOAT
		public Assignment getValueAssignment_4_1() { return cValueAssignment_4_1; }
		
		//MATRIX_FLOAT
		public RuleCall getValueMATRIX_FLOATTerminalRuleCall_4_1_0() { return cValueMATRIX_FLOATTerminalRuleCall_4_1_0; }
		
		//{Vector} value=VECTOR_FLOAT
		public Group getGroup_5() { return cGroup_5; }
		
		//{Vector}
		public Action getVectorAction_5_0() { return cVectorAction_5_0; }
		
		//value=VECTOR_FLOAT
		public Assignment getValueAssignment_5_1() { return cValueAssignment_5_1; }
		
		//VECTOR_FLOAT
		public RuleCall getValueVECTOR_FLOATTerminalRuleCall_5_1_0() { return cValueVECTOR_FLOATTerminalRuleCall_5_1_0; }
	}
	
	
	private final ModelElements pModel;
	private final TerminalRule tID;
	private final TerminalRule tLETTER;
	private final TerminalRule tSPECIAL_CHARS;
	private final TerminalRule tFLOAT;
	private final BOOLEANElements pBOOLEAN;
	private final TerminalRule tBIT;
	private final TerminalRule tBYTE;
	private final TerminalRule tVECTOR_FLOAT;
	private final TerminalRule tMATRIX_FLOAT;
	private final QualifiedAttributenameElements pQualifiedAttributename;
	private final QualifiedAttributenameWithoutSpecialCharsElements pQualifiedAttributenameWithoutSpecialChars;
	private final QualifiedSourcenameElements pQualifiedSourcename;
	private final StatementElements pStatement;
	private final CommandElements pCommand;
	private final SelectElements pSelect;
	private final InnerSelectElements pInnerSelect;
	private final InnerSelect2Elements pInnerSelect2;
	private final SelectArgumentElements pSelectArgument;
	private final SourceElements pSource;
	private final SimpleSourceElements pSimpleSource;
	private final NestedSourceElements pNestedSource;
	private final AttributeElements pAttribute;
	private final AttributeWithoutAliasDefinitionElements pAttributeWithoutAliasDefinition;
	private final AttributeForSelectExpressionElements pAttributeForSelectExpression;
	private final AttributeWithNestedStatementElements pAttributeWithNestedStatement;
	private final AndOperatorElements pAndOperator;
	private final OrOperatorElements pOrOperator;
	private final EQUALITIY_OPERATORElements pEQUALITIY_OPERATOR;
	private final COMPARE_OPERATORElements pCOMPARE_OPERATOR;
	private final ARITHMETIC_OPERATORElements pARITHMETIC_OPERATOR;
	private final EXPONENT_OPERATORElements pEXPONENT_OPERATOR;
	private final MUL_OR_DIV_OPERATORElements pMUL_OR_DIV_OPERATOR;
	private final ADD_OPERATORElements pADD_OPERATOR;
	private final MINUS_OPERATORElements pMINUS_OPERATOR;
	private final SelectExpressionElements pSelectExpression;
	private final SelectExpressionOnlyWithAttributeElements pSelectExpressionOnlyWithAttribute;
	private final FunctionElements pFunction;
	private final ExpressionComponentElements pExpressionComponent;
	private final StarExpressionElements pStarExpression;
	private final StarElements pStar;
	private final StarthingElements pStarthing;
	private final ExpressionComponentAsAttributeElements pExpressionComponentAsAttribute;
	private final SetOperatorElements pSetOperator;
	private final AliasElements pAlias;
	private final AccessFrameworkElements pAccessFramework;
	private final SchemaDefinitionElements pSchemaDefinition;
	private final CreateElements pCreate;
	private final CreateAccessFrameworkElements pCreateAccessFramework;
	private final CreateChannelFrameworkViaPortElements pCreateChannelFrameworkViaPort;
	private final CreateChannelFormatViaFileElements pCreateChannelFormatViaFile;
	private final CreateDatabaseStreamElements pCreateDatabaseStream;
	private final CreateDatabaseSinkElements pCreateDatabaseSink;
	private final CreateViewElements pCreateView;
	private final CreateDataBaseJDBCConnectionElements pCreateDataBaseJDBCConnection;
	private final CreateDataBaseGenericConnectionElements pCreateDataBaseGenericConnection;
	private final DropDatabaseConnectionElements pDropDatabaseConnection;
	private final ContextStoreTypeElements pContextStoreType;
	private final CreateContextStoreElements pCreateContextStore;
	private final DropContextStoreElements pDropContextStore;
	private final StreamToElements pStreamTo;
	private final DropStreamElements pDropStream;
	private final UserManagementElements pUserManagement;
	private final RightsManagementElements pRightsManagement;
	private final RoleManagementElements pRoleManagement;
	private final WindowOperatorElements pWindowOperator;
	private final UnboundedWindowElements pUnboundedWindow;
	private final TimebasedWindowElements pTimebasedWindow;
	private final TuplebasedWindowElements pTuplebasedWindow;
	private final ExpressionsModelElements pExpressionsModel;
	private final ExpressionElements pExpression;
	private final OrPredicateElements pOrPredicate;
	private final AndPredicateElements pAndPredicate;
	private final EqualitiyElements pEqualitiy;
	private final ComparisonElements pComparison;
	private final PlusOrMinusElements pPlusOrMinus;
	private final MulOrDivElements pMulOrDiv;
	private final PrimaryElements pPrimary;
	private final AtomicElements pAtomic;
	private final AtomicWithoutAttributeRefElements pAtomicWithoutAttributeRef;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public CQLGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.parser.novel.cql.CQL.ID");
		this.tLETTER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.parser.novel.cql.CQL.LETTER");
		this.tSPECIAL_CHARS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.parser.novel.cql.CQL.SPECIAL_CHARS");
		this.tFLOAT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.parser.novel.cql.CQL.FLOAT");
		this.pBOOLEAN = new BOOLEANElements();
		this.tBIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.parser.novel.cql.CQL.BIT");
		this.tBYTE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.parser.novel.cql.CQL.BYTE");
		this.tVECTOR_FLOAT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.parser.novel.cql.CQL.VECTOR_FLOAT");
		this.tMATRIX_FLOAT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.parser.novel.cql.CQL.MATRIX_FLOAT");
		this.pQualifiedAttributename = new QualifiedAttributenameElements();
		this.pQualifiedAttributenameWithoutSpecialChars = new QualifiedAttributenameWithoutSpecialCharsElements();
		this.pQualifiedSourcename = new QualifiedSourcenameElements();
		this.pStatement = new StatementElements();
		this.pCommand = new CommandElements();
		this.pSelect = new SelectElements();
		this.pInnerSelect = new InnerSelectElements();
		this.pInnerSelect2 = new InnerSelect2Elements();
		this.pSelectArgument = new SelectArgumentElements();
		this.pSource = new SourceElements();
		this.pSimpleSource = new SimpleSourceElements();
		this.pNestedSource = new NestedSourceElements();
		this.pAttribute = new AttributeElements();
		this.pAttributeWithoutAliasDefinition = new AttributeWithoutAliasDefinitionElements();
		this.pAttributeForSelectExpression = new AttributeForSelectExpressionElements();
		this.pAttributeWithNestedStatement = new AttributeWithNestedStatementElements();
		this.pAndOperator = new AndOperatorElements();
		this.pOrOperator = new OrOperatorElements();
		this.pEQUALITIY_OPERATOR = new EQUALITIY_OPERATORElements();
		this.pCOMPARE_OPERATOR = new COMPARE_OPERATORElements();
		this.pARITHMETIC_OPERATOR = new ARITHMETIC_OPERATORElements();
		this.pEXPONENT_OPERATOR = new EXPONENT_OPERATORElements();
		this.pMUL_OR_DIV_OPERATOR = new MUL_OR_DIV_OPERATORElements();
		this.pADD_OPERATOR = new ADD_OPERATORElements();
		this.pMINUS_OPERATOR = new MINUS_OPERATORElements();
		this.pSelectExpression = new SelectExpressionElements();
		this.pSelectExpressionOnlyWithAttribute = new SelectExpressionOnlyWithAttributeElements();
		this.pFunction = new FunctionElements();
		this.pExpressionComponent = new ExpressionComponentElements();
		this.pStarExpression = new StarExpressionElements();
		this.pStar = new StarElements();
		this.pStarthing = new StarthingElements();
		this.pExpressionComponentAsAttribute = new ExpressionComponentAsAttributeElements();
		this.pSetOperator = new SetOperatorElements();
		this.pAlias = new AliasElements();
		this.pAccessFramework = new AccessFrameworkElements();
		this.pSchemaDefinition = new SchemaDefinitionElements();
		this.pCreate = new CreateElements();
		this.pCreateAccessFramework = new CreateAccessFrameworkElements();
		this.pCreateChannelFrameworkViaPort = new CreateChannelFrameworkViaPortElements();
		this.pCreateChannelFormatViaFile = new CreateChannelFormatViaFileElements();
		this.pCreateDatabaseStream = new CreateDatabaseStreamElements();
		this.pCreateDatabaseSink = new CreateDatabaseSinkElements();
		this.pCreateView = new CreateViewElements();
		this.pCreateDataBaseJDBCConnection = new CreateDataBaseJDBCConnectionElements();
		this.pCreateDataBaseGenericConnection = new CreateDataBaseGenericConnectionElements();
		this.pDropDatabaseConnection = new DropDatabaseConnectionElements();
		this.pContextStoreType = new ContextStoreTypeElements();
		this.pCreateContextStore = new CreateContextStoreElements();
		this.pDropContextStore = new DropContextStoreElements();
		this.pStreamTo = new StreamToElements();
		this.pDropStream = new DropStreamElements();
		this.pUserManagement = new UserManagementElements();
		this.pRightsManagement = new RightsManagementElements();
		this.pRoleManagement = new RoleManagementElements();
		this.pWindowOperator = new WindowOperatorElements();
		this.pUnboundedWindow = new UnboundedWindowElements();
		this.pTimebasedWindow = new TimebasedWindowElements();
		this.pTuplebasedWindow = new TuplebasedWindowElements();
		this.pExpressionsModel = new ExpressionsModelElements();
		this.pExpression = new ExpressionElements();
		this.pOrPredicate = new OrPredicateElements();
		this.pAndPredicate = new AndPredicateElements();
		this.pEqualitiy = new EqualitiyElements();
		this.pComparison = new ComparisonElements();
		this.pPlusOrMinus = new PlusOrMinusElements();
		this.pMulOrDiv = new MulOrDivElements();
		this.pPrimary = new PrimaryElements();
		this.pAtomic = new AtomicElements();
		this.pAtomicWithoutAttributeRef = new AtomicWithoutAttributeRefElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("de.uniol.inf.is.odysseus.parser.novel.cql.CQL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	(components+=(Statement | Command) ';'?)*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//terminal ID:
	//	LETTER (LETTER | SPECIAL_CHARS | INT)*;
	public TerminalRule getIDRule() {
		return tID;
	}
	
	//terminal LETTER:
	//	'a'..'z' | 'A'..'Z';
	public TerminalRule getLETTERRule() {
		return tLETTER;
	}
	
	//terminal SPECIAL_CHARS:
	//	':' | '_' | '{' | '}';
	public TerminalRule getSPECIAL_CHARSRule() {
		return tSPECIAL_CHARS;
	}
	
	//terminal FLOAT:
	//	INT '.' INT;
	public TerminalRule getFLOATRule() {
		return tFLOAT;
	}
	
	//BOOLEAN:
	//	'FALSE' | 'TRUE';
	public BOOLEANElements getBOOLEANAccess() {
		return pBOOLEAN;
	}
	
	public ParserRule getBOOLEANRule() {
		return getBOOLEANAccess().getRule();
	}
	
	//terminal BIT:
	//	'0' | '1';
	public TerminalRule getBITRule() {
		return tBIT;
	}
	
	//terminal BYTE:
	//	BIT BIT BIT BIT BIT BIT BIT BIT;
	public TerminalRule getBYTERule() {
		return tBYTE;
	}
	
	//terminal VECTOR_FLOAT:
	//	'[' FLOAT+ (',' FLOAT)* ']';
	public TerminalRule getVECTOR_FLOATRule() {
		return tVECTOR_FLOAT;
	}
	
	//terminal MATRIX_FLOAT:
	//	'[' FLOAT+ (',' FLOAT)* (';' FLOAT+ (',' FLOAT)*)* ']';
	public TerminalRule getMATRIX_FLOATRule() {
		return tMATRIX_FLOAT;
	}
	
	//QualifiedAttributename:
	//	ID
	//	| QualifiedSourcename '.' ID | QualifiedSourcename '.' '*';
	public QualifiedAttributenameElements getQualifiedAttributenameAccess() {
		return pQualifiedAttributename;
	}
	
	public ParserRule getQualifiedAttributenameRule() {
		return getQualifiedAttributenameAccess().getRule();
	}
	
	//QualifiedAttributenameWithoutSpecialChars:
	//	ID | QualifiedSourcename '.' ID;
	public QualifiedAttributenameWithoutSpecialCharsElements getQualifiedAttributenameWithoutSpecialCharsAccess() {
		return pQualifiedAttributenameWithoutSpecialChars;
	}
	
	public ParserRule getQualifiedAttributenameWithoutSpecialCharsRule() {
		return getQualifiedAttributenameWithoutSpecialCharsAccess().getRule();
	}
	
	//QualifiedSourcename:
	//	ID;
	public QualifiedSourcenameElements getQualifiedSourcenameAccess() {
		return pQualifiedSourcename;
	}
	
	public ParserRule getQualifiedSourcenameRule() {
		return getQualifiedSourcenameAccess().getRule();
	}
	
	//Statement:
	//	type=(Select
	//	| Create
	//	| StreamTo);
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}
	
	//Command:
	//	type=(DropStream
	//	| UserManagement
	//	| RightsManagement
	//	| RoleManagement
	//	| CreateDataBaseGenericConnection
	//	| CreateDataBaseJDBCConnection
	//	| DropDatabaseConnection
	//	| CreateContextStore
	//	| DropContextStore);
	public CommandElements getCommandAccess() {
		return pCommand;
	}
	
	public ParserRule getCommandRule() {
		return getCommandAccess().getRule();
	}
	
	//Select:
	//	{Select}
	//	'SELECT'
	//	distinct='DISTINCT'? ('*' | arguments+=SelectArgument+ (',' arguments+=SelectArgument)*) ('FROM' sources+=Source+ (','
	//	sources+=Source)*) ('WHERE' predicates=ExpressionsModel)? ('GROUP' 'BY' order+=Attribute+ (',' order+=Attribute)*)?
	//	('HAVING' having=ExpressionsModel)?;
	public SelectElements getSelectAccess() {
		return pSelect;
	}
	
	public ParserRule getSelectRule() {
		return getSelectAccess().getRule();
	}
	
	//InnerSelect:
	//	'(' select=Select ')';
	public InnerSelectElements getInnerSelectAccess() {
		return pInnerSelect;
	}
	
	public ParserRule getInnerSelectRule() {
		return getInnerSelectAccess().getRule();
	}
	
	//InnerSelect2:
	//	select=Select;
	public InnerSelect2Elements getInnerSelect2Access() {
		return pInnerSelect2;
	}
	
	public ParserRule getInnerSelect2Rule() {
		return getInnerSelect2Access().getRule();
	}
	
	//SelectArgument:
	//	attribute=Attribute | expression=SelectExpression;
	public SelectArgumentElements getSelectArgumentAccess() {
		return pSelectArgument;
	}
	
	public ParserRule getSelectArgumentRule() {
		return getSelectArgumentAccess().getRule();
	}
	
	//Source:
	//	SimpleSource | NestedSource;
	public SourceElements getSourceAccess() {
		return pSource;
	}
	
	public ParserRule getSourceRule() {
		return getSourceAccess().getRule();
	}
	
	//SimpleSource Source:
	//	{SimpleSource} name=QualifiedSourcename window=WindowOperator? ('AS' alias=Alias)?
	public SimpleSourceElements getSimpleSourceAccess() {
		return pSimpleSource;
	}
	
	public ParserRule getSimpleSourceRule() {
		return getSimpleSourceAccess().getRule();
	}
	
	//NestedSource Source:
	//	{NestedSource} statement=InnerSelect 'AS' alias=Alias
	public NestedSourceElements getNestedSourceAccess() {
		return pNestedSource;
	}
	
	public ParserRule getNestedSourceRule() {
		return getNestedSourceAccess().getRule();
	}
	
	//Attribute:
	//	name=QualifiedAttributename ('AS' alias=Alias)?;
	public AttributeElements getAttributeAccess() {
		return pAttribute;
	}
	
	public ParserRule getAttributeRule() {
		return getAttributeAccess().getRule();
	}
	
	//AttributeWithoutAliasDefinition Attribute:
	//	name=QualifiedAttributename
	public AttributeWithoutAliasDefinitionElements getAttributeWithoutAliasDefinitionAccess() {
		return pAttributeWithoutAliasDefinition;
	}
	
	public ParserRule getAttributeWithoutAliasDefinitionRule() {
		return getAttributeWithoutAliasDefinitionAccess().getRule();
	}
	
	//AttributeForSelectExpression Attribute:
	//	name=QualifiedAttributenameWithoutSpecialChars
	public AttributeForSelectExpressionElements getAttributeForSelectExpressionAccess() {
		return pAttributeForSelectExpression;
	}
	
	public ParserRule getAttributeForSelectExpressionRule() {
		return getAttributeForSelectExpressionAccess().getRule();
	}
	
	//AttributeWithNestedStatement:
	//	value=AttributeWithoutAliasDefinition
	//	'IN'
	//	nested=InnerSelect;
	public AttributeWithNestedStatementElements getAttributeWithNestedStatementAccess() {
		return pAttributeWithNestedStatement;
	}
	
	public ParserRule getAttributeWithNestedStatementRule() {
		return getAttributeWithNestedStatementAccess().getRule();
	}
	
	////QuantificationPredicate:
	////	ExistPredicate
	////;
	////
	////ExistPredicate returns QuantificationPredicate:
	////	{ExistPredicate}
	////	'EXISTS' statement=NestedStatement	
	////;
	////
	////AnyPredicate returns QuantificationPredicate:
	////	{ExistPredicate}
	////	'ANY' statement=NestedStatement	
	////;
	////TODO JoinVisitor, schauen wo ExistenceAo erzeugt wird
	////Operators for predicates and expressions
	//AndOperator:
	//	'AND';
	public AndOperatorElements getAndOperatorAccess() {
		return pAndOperator;
	}
	
	public ParserRule getAndOperatorRule() {
		return getAndOperatorAccess().getRule();
	}
	
	//OrOperator:
	//	'OR';
	public OrOperatorElements getOrOperatorAccess() {
		return pOrOperator;
	}
	
	public ParserRule getOrOperatorRule() {
		return getOrOperatorAccess().getRule();
	}
	
	//EQUALITIY_OPERATOR:
	//	'=' | '!=';
	public EQUALITIY_OPERATORElements getEQUALITIY_OPERATORAccess() {
		return pEQUALITIY_OPERATOR;
	}
	
	public ParserRule getEQUALITIY_OPERATORRule() {
		return getEQUALITIY_OPERATORAccess().getRule();
	}
	
	//COMPARE_OPERATOR:
	//	'>=' | '<=' | '<' | '>';
	public COMPARE_OPERATORElements getCOMPARE_OPERATORAccess() {
		return pCOMPARE_OPERATOR;
	}
	
	public ParserRule getCOMPARE_OPERATORRule() {
		return getCOMPARE_OPERATORAccess().getRule();
	}
	
	//ARITHMETIC_OPERATOR:
	//	ADD_OPERATOR
	//	| MINUS_OPERATOR
	//	| MUL_OR_DIV_OPERATOR
	//	| EXPONENT_OPERATOR;
	public ARITHMETIC_OPERATORElements getARITHMETIC_OPERATORAccess() {
		return pARITHMETIC_OPERATOR;
	}
	
	public ParserRule getARITHMETIC_OPERATORRule() {
		return getARITHMETIC_OPERATORAccess().getRule();
	}
	
	//EXPONENT_OPERATOR:
	//	'^';
	public EXPONENT_OPERATORElements getEXPONENT_OPERATORAccess() {
		return pEXPONENT_OPERATOR;
	}
	
	public ParserRule getEXPONENT_OPERATORRule() {
		return getEXPONENT_OPERATORAccess().getRule();
	}
	
	//MUL_OR_DIV_OPERATOR:
	//	'/' | '*';
	public MUL_OR_DIV_OPERATORElements getMUL_OR_DIV_OPERATORAccess() {
		return pMUL_OR_DIV_OPERATOR;
	}
	
	public ParserRule getMUL_OR_DIV_OPERATORRule() {
		return getMUL_OR_DIV_OPERATORAccess().getRule();
	}
	
	//ADD_OPERATOR:
	//	'+';
	public ADD_OPERATORElements getADD_OPERATORAccess() {
		return pADD_OPERATOR;
	}
	
	public ParserRule getADD_OPERATORRule() {
		return getADD_OPERATORAccess().getRule();
	}
	
	//MINUS_OPERATOR:
	//	'-';
	public MINUS_OPERATORElements getMINUS_OPERATORAccess() {
		return pMINUS_OPERATOR;
	}
	
	public ParserRule getMINUS_OPERATORRule() {
		return getMINUS_OPERATORAccess().getRule();
	}
	
	//SelectExpression:
	//	(expressions+=ExpressionComponent (operators+=ARITHMETIC_OPERATOR
	//	expressions+=(ExpressionComponent | ExpressionComponentAsAttribute))*
	//	| expressions+=ExpressionComponentAsAttribute (operators+=ARITHMETIC_OPERATOR
	//	expressions+=(ExpressionComponent | ExpressionComponentAsAttribute))) ('AS' alias=Alias)? //TODO Add SelectExpression without an alias
	//;
	public SelectExpressionElements getSelectExpressionAccess() {
		return pSelectExpression;
	}
	
	public ParserRule getSelectExpressionRule() {
		return getSelectExpressionAccess().getRule();
	}
	
	//SelectExpressionOnlyWithAttribute SelectExpression:
	//	expressions+=ExpressionComponentAsAttribute
	public SelectExpressionOnlyWithAttributeElements getSelectExpressionOnlyWithAttributeAccess() {
		return pSelectExpressionOnlyWithAttribute;
	}
	
	public ParserRule getSelectExpressionOnlyWithAttributeRule() {
		return getSelectExpressionOnlyWithAttributeAccess().getRule();
	}
	
	////Is either a map function or an aggregation function. This depends 
	////on the given name and is decided by the generator on runtime. Also
	////checked is that an aggregation is no part of a select expression like
	////SELECT attr1 + 10 - SUM(attr1) FROM.., but a select expression can be 
	////a part of an aggregation like AVG(attr1 + DolToEur(attr2)).//TODO Not working currently
	//Function ExpressionComponent:
	//	{Function} name=ID
	//	'('
	//	value=(SelectExpression | SelectExpressionOnlyWithAttribute | StarExpression)
	//	')'
	public FunctionElements getFunctionAccess() {
		return pFunction;
	}
	
	public ParserRule getFunctionRule() {
		return getFunctionAccess().getRule();
	}
	
	////Determines the structure of a component of a select expression
	//ExpressionComponent:
	//	value=(Function | AtomicWithoutAttributeRef);
	public ExpressionComponentElements getExpressionComponentAccess() {
		return pExpressionComponent;
	}
	
	public ParserRule getExpressionComponentRule() {
		return getExpressionComponentAccess().getRule();
	}
	
	//StarExpression SelectExpression:
	//	{StarExpression} expressions+=Star
	public StarExpressionElements getStarExpressionAccess() {
		return pStarExpression;
	}
	
	public ParserRule getStarExpressionRule() {
		return getStarExpressionAccess().getRule();
	}
	
	//Star ExpressionComponent:
	//	{Star} value=Starthing
	public StarElements getStarAccess() {
		return pStar;
	}
	
	public ParserRule getStarRule() {
		return getStarAccess().getRule();
	}
	
	//Starthing:
	//	{Starthing}
	//	'*';
	public StarthingElements getStarthingAccess() {
		return pStarthing;
	}
	
	public ParserRule getStarthingRule() {
		return getStarthingAccess().getRule();
	}
	
	//ExpressionComponentAsAttribute ExpressionComponent:
	//	{ExpressionComponentAsAttribute} value=AttributeForSelectExpression
	public ExpressionComponentAsAttributeElements getExpressionComponentAsAttributeAccess() {
		return pExpressionComponentAsAttribute;
	}
	
	public ParserRule getExpressionComponentAsAttributeRule() {
		return getExpressionComponentAsAttributeAccess().getRule();
	}
	
	//SetOperator:
	//	left=Select
	//	name=('UNION' | 'DIFFERENCE' | 'INTERSECTION') right=Select;
	public SetOperatorElements getSetOperatorAccess() {
		return pSetOperator;
	}
	
	public ParserRule getSetOperatorRule() {
		return getSetOperatorAccess().getRule();
	}
	
	//Alias:
	//	name=ID;
	public AliasElements getAliasAccess() {
		return pAlias;
	}
	
	public ParserRule getAliasRule() {
		return getAliasAccess().getRule();
	}
	
	//AccessFramework:
	//	'WRAPPER' wrapper=STRING
	//	'PROTOCOL' protocol=STRING
	//	'TRANSPORT' transport=STRING
	//	'DATAHANDLER' datahandler=STRING
	//	'OPTIONS' '(' (keys+=STRING values+=STRING)+ (',' keys+=STRING values+=STRING)? ')';
	public AccessFrameworkElements getAccessFrameworkAccess() {
		return pAccessFramework;
	}
	
	public ParserRule getAccessFrameworkRule() {
		return getAccessFrameworkAccess().getRule();
	}
	
	//SchemaDefinition:
	//	name=ID
	//	'('
	//	arguments+=ID arguments+=ID (',' arguments+=ID arguments+=ID)*
	//	')';
	public SchemaDefinitionElements getSchemaDefinitionAccess() {
		return pSchemaDefinition;
	}
	
	public ParserRule getSchemaDefinitionRule() {
		return getSchemaDefinitionAccess().getRule();
	}
	
	//Create:
	//	{Create} ('CREATE' | 'ATTACH') type=('STREAM' | 'SINK' | 'VIEW') create=(CreateAccessFramework
	//	| CreateChannelFrameworkViaPort
	//	| CreateChannelFormatViaFile
	//	| CreateDatabaseStream
	//	| CreateDatabaseSink
	//	| CreateView);
	public CreateElements getCreateAccess() {
		return pCreate;
	}
	
	public ParserRule getCreateRule() {
		return getCreateAccess().getRule();
	}
	
	//CreateAccessFramework:
	//	attributes=SchemaDefinition
	//	pars=AccessFramework;
	public CreateAccessFrameworkElements getCreateAccessFrameworkAccess() {
		return pCreateAccessFramework;
	}
	
	public ParserRule getCreateAccessFrameworkRule() {
		return getCreateAccessFrameworkAccess().getRule();
	}
	
	//CreateChannelFrameworkViaPort:
	//	attributes=SchemaDefinition
	//	'CHANNEL' host=ID ':' port=INT;
	public CreateChannelFrameworkViaPortElements getCreateChannelFrameworkViaPortAccess() {
		return pCreateChannelFrameworkViaPort;
	}
	
	public ParserRule getCreateChannelFrameworkViaPortRule() {
		return getCreateChannelFrameworkViaPortAccess().getRule();
	}
	
	//CreateChannelFormatViaFile:
	//	attributes=SchemaDefinition
	//	'FILE' filename=STRING 'AS' type=ID;
	public CreateChannelFormatViaFileElements getCreateChannelFormatViaFileAccess() {
		return pCreateChannelFormatViaFile;
	}
	
	public ParserRule getCreateChannelFormatViaFileRule() {
		return getCreateChannelFormatViaFileAccess().getRule();
	}
	
	////TODO PQL
	//CreateDatabaseStream:
	//	attributes=SchemaDefinition
	//	'DATABASE'
	//	database=ID
	//	'TABLE'
	//	table=ID ('EACH'
	//	size=INT
	//	unit=ID)?;
	public CreateDatabaseStreamElements getCreateDatabaseStreamAccess() {
		return pCreateDatabaseStream;
	}
	
	public ParserRule getCreateDatabaseStreamRule() {
		return getCreateDatabaseStreamAccess().getRule();
	}
	
	////TODO PQL
	//CreateDatabaseSink:
	//	name=ID
	//	'AS'
	//	'DATABASE'
	//	database=ID
	//	'TABLE'
	//	table=ID ('AND' option=('DROP' | 'TRUNCATE'))?;
	public CreateDatabaseSinkElements getCreateDatabaseSinkAccess() {
		return pCreateDatabaseSink;
	}
	
	public ParserRule getCreateDatabaseSinkRule() {
		return getCreateDatabaseSinkAccess().getRule();
	}
	
	//CreateView:
	//	name=ID
	//	'FROM'
	//	select=InnerSelect;
	public CreateViewElements getCreateViewAccess() {
		return pCreateView;
	}
	
	public ParserRule getCreateViewRule() {
		return getCreateViewAccess().getRule();
	}
	
	//CreateDataBaseJDBCConnection Command:
	//	{CreateDataBaseConnectionJDBC}
	//	'CREATE'
	//	'DATABASE'
	//	'CONNECTION'
	//	name=ID
	//	'JDBC'
	//	server=ID ('WITH'
	//	'USER'
	//	user=ID
	//	'PASSWORD'
	//	password=ID
	//	lazy='NO_LAZY_CONNECTION_CHECK'?)?
	public CreateDataBaseJDBCConnectionElements getCreateDataBaseJDBCConnectionAccess() {
		return pCreateDataBaseJDBCConnection;
	}
	
	public ParserRule getCreateDataBaseJDBCConnectionRule() {
		return getCreateDataBaseJDBCConnectionAccess().getRule();
	}
	
	//CreateDataBaseGenericConnection Command:
	//	{CreateDataBaseConnectionGeneric}
	//	'CREATE'
	//	'DATABASE'
	//	'CONNECTION'
	//	name=ID
	//	'AS'
	//	driver=ID
	//	'TO'
	//	source=ID ('AT'
	//	host=ID
	//	':'
	//	port=INT)? ('WITH'
	//	'USER'
	//	user=ID
	//	'PASSWORD'
	//	password=ID
	//	lazy='NO_LAZY_CONNECTION_CHECK'?)?
	public CreateDataBaseGenericConnectionElements getCreateDataBaseGenericConnectionAccess() {
		return pCreateDataBaseGenericConnection;
	}
	
	public ParserRule getCreateDataBaseGenericConnectionRule() {
		return getCreateDataBaseGenericConnectionAccess().getRule();
	}
	
	//DropDatabaseConnection Command:
	//	{DropDatabaseConnection}
	//	'DROP'
	//	'DATABASE'
	//	'CONNECTION'
	//	name=ID
	public DropDatabaseConnectionElements getDropDatabaseConnectionAccess() {
		return pDropDatabaseConnection;
	}
	
	public ParserRule getDropDatabaseConnectionRule() {
		return getDropDatabaseConnectionAccess().getRule();
	}
	
	//ContextStoreType:
	//	type='SINGLE' | type='MULTI'
	//	size=INT ('PARTITION'
	//	'BY'
	//	partition=INT)?;
	public ContextStoreTypeElements getContextStoreTypeAccess() {
		return pContextStoreType;
	}
	
	public ParserRule getContextStoreTypeRule() {
		return getContextStoreTypeAccess().getRule();
	}
	
	//CreateContextStore Command:
	//	{CreateContextStore}
	//	'CREATE'
	//	'CONTEXT'
	//	'STORE'
	//	attributes=SchemaDefinition
	//	'AS'
	//	contextType=ContextStoreType
	public CreateContextStoreElements getCreateContextStoreAccess() {
		return pCreateContextStore;
	}
	
	public ParserRule getCreateContextStoreRule() {
		return getCreateContextStoreAccess().getRule();
	}
	
	//DropContextStore Command:
	//	{DropContextStore}
	//	'DROP'
	//	'CONTEXT'
	//	'STORE'
	//	name=ID ('IF' exists='EXISTS')?
	public DropContextStoreElements getDropContextStoreAccess() {
		return pDropContextStore;
	}
	
	public ParserRule getDropContextStoreRule() {
		return getDropContextStoreAccess().getRule();
	}
	
	//StreamTo:
	//	{StreamTo}
	//	'STREAM'
	//	'TO'
	//	name=ID (statement=InnerSelect2 | inputname=ID);
	public StreamToElements getStreamToAccess() {
		return pStreamTo;
	}
	
	public ParserRule getStreamToRule() {
		return getStreamToAccess().getRule();
	}
	
	//DropStream Command:
	//	{DropStream}
	//	'DROP'
	//	name=('SINK' | 'STREAM' | 'VIEW') stream=ID (exists='IF' 'EXISTS')?
	public DropStreamElements getDropStreamAccess() {
		return pDropStream;
	}
	
	public ParserRule getDropStreamRule() {
		return getDropStreamAccess().getRule();
	}
	
	//UserManagement Command:
	//	{UserManagement} name=('CREATE' | 'ALTER' | 'DROP') subject=('USER' | 'ROLE' | 'TENANT') subjectName=ID ('IDFIED' 'BY'
	//	password=STRING)?
	public UserManagementElements getUserManagementAccess() {
		return pUserManagement;
	}
	
	public ParserRule getUserManagementRule() {
		return getUserManagementAccess().getRule();
	}
	
	//RightsManagement Command:
	//	{RightsManagement} name='GRANT'
	//	operations+=ID (',' operations+=ID)* ('ON' operations2+=ID (',' operations2+=ID)*)?
	//	'TO' user=ID | {RightsManagement} name='REVOKE'
	//	operations+=ID (',' operations+=ID)* ('ON' operations2+=ID (',' operations2+=ID)*)?
	//	'FROM' user=ID
	public RightsManagementElements getRightsManagementAccess() {
		return pRightsManagement;
	}
	
	public ParserRule getRightsManagementRule() {
		return getRightsManagementAccess().getRule();
	}
	
	//RoleManagement Command:
	//	{RoleManagement} name='GRANT'
	//	'ROLE' operations+=ID (',' operations+=ID)*
	//	'TO' user=ID | {RoleManagement} name='REVOKE'
	//	'ROLE' operations+=ID (',' operations+=ID)*
	//	'FROM' user=ID
	public RoleManagementElements getRoleManagementAccess() {
		return pRoleManagement;
	}
	
	public ParserRule getRoleManagementRule() {
		return getRoleManagementAccess().getRule();
	}
	
	//WindowOperator:
	//	'[' (UnboundedWindow
	//	| TimebasedWindow
	//	| TuplebasedWindow)
	//	']';
	public WindowOperatorElements getWindowOperatorAccess() {
		return pWindowOperator;
	}
	
	public ParserRule getWindowOperatorRule() {
		return getWindowOperatorAccess().getRule();
	}
	
	//UnboundedWindow WindowOperator:
	//	{UndboundedWindow}
	//	'UNBOUNDED'
	public UnboundedWindowElements getUnboundedWindowAccess() {
		return pUnboundedWindow;
	}
	
	public ParserRule getUnboundedWindowRule() {
		return getUnboundedWindowAccess().getRule();
	}
	
	//TimebasedWindow WindowOperator:
	//	{TimebasedWindow}
	//	'SIZE' size=INT unit=ID ('ADVANCE' advance_size=INT advance_unit=ID)?
	//	'TIME'
	public TimebasedWindowElements getTimebasedWindowAccess() {
		return pTimebasedWindow;
	}
	
	public ParserRule getTimebasedWindowRule() {
		return getTimebasedWindowAccess().getRule();
	}
	
	//TuplebasedWindow WindowOperator:
	//	{TuplebasedWindow}
	//	'SIZE' size=INT ('ADVANCE' advance_size=INT)?
	//	'TUPLE' ('PARTITION' 'BY' partition_attribute=Attribute)?
	public TuplebasedWindowElements getTuplebasedWindowAccess() {
		return pTuplebasedWindow;
	}
	
	public ParserRule getTuplebasedWindowRule() {
		return getTuplebasedWindowAccess().getRule();
	}
	
	//// Expression DSL ///////////////////////////////////////////////////////
	//ExpressionsModel:
	//	{ExpressionsModel} elements+=Expression;
	public ExpressionsModelElements getExpressionsModelAccess() {
		return pExpressionsModel;
	}
	
	public ParserRule getExpressionsModelRule() {
		return getExpressionsModelAccess().getRule();
	}
	
	//Expression:
	//	OrPredicate;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//OrPredicate Expression:
	//	AndPredicate ({OrPredicate.left=current} OrOperator right=AndPredicate)*
	public OrPredicateElements getOrPredicateAccess() {
		return pOrPredicate;
	}
	
	public ParserRule getOrPredicateRule() {
		return getOrPredicateAccess().getRule();
	}
	
	//AndPredicate Expression:
	//	Equalitiy ({AndPredicate.left=current} AndOperator right=Equalitiy)*
	public AndPredicateElements getAndPredicateAccess() {
		return pAndPredicate;
	}
	
	public ParserRule getAndPredicateRule() {
		return getAndPredicateAccess().getRule();
	}
	
	//Equalitiy Expression:
	//	Comparison ({Equality.left=current} op=EQUALITIY_OPERATOR
	//	right=Comparison)*
	public EqualitiyElements getEqualitiyAccess() {
		return pEqualitiy;
	}
	
	public ParserRule getEqualitiyRule() {
		return getEqualitiyAccess().getRule();
	}
	
	//Comparison Expression:
	//	PlusOrMinus ({Comparision.left=current} op=COMPARE_OPERATOR
	//	right=PlusOrMinus)*
	public ComparisonElements getComparisonAccess() {
		return pComparison;
	}
	
	public ParserRule getComparisonRule() {
		return getComparisonAccess().getRule();
	}
	
	//PlusOrMinus Expression:
	//	MulOrDiv (({Plus.left=current} '+' | {Minus.left=current} '-') right=MulOrDiv)*
	public PlusOrMinusElements getPlusOrMinusAccess() {
		return pPlusOrMinus;
	}
	
	public ParserRule getPlusOrMinusRule() {
		return getPlusOrMinusAccess().getRule();
	}
	
	//MulOrDiv Expression:
	//	Primary ({MulOrDiv.left=current} op=('/' | '*') right=Primary)*
	public MulOrDivElements getMulOrDivAccess() {
		return pMulOrDiv;
	}
	
	public ParserRule getMulOrDivRule() {
		return getMulOrDivAccess().getRule();
	}
	
	//Primary Expression:
	//	{Bracket} '(' inner=Expression ')' | {NOT} 'NOT' expression=Primary | Atomic
	public PrimaryElements getPrimaryAccess() {
		return pPrimary;
	}
	
	public ParserRule getPrimaryRule() {
		return getPrimaryAccess().getRule();
	}
	
	//Atomic Expression:
	//	{IntConstant} value=INT
	//	| {FloatConstant} value=FLOAT
	//	| {StringConstant} value=STRING
	//	| {BoolConstant} value=BOOLEAN
	//	| {AttributeRef} (value=AttributeWithoutAliasDefinition | value=AttributeWithNestedStatement)
	public AtomicElements getAtomicAccess() {
		return pAtomic;
	}
	
	public ParserRule getAtomicRule() {
		return getAtomicAccess().getRule();
	}
	
	//AtomicWithoutAttributeRef Expression:
	//	{IntConstant} value=INT
	//	| {FloatConstant} value=FLOAT
	//	| {StringConstant} value=STRING
	//	| {BoolConstant} value=BOOLEAN
	//	| {Matrix} value=MATRIX_FLOAT | {Vector} value=VECTOR_FLOAT
	public AtomicWithoutAttributeRefElements getAtomicWithoutAttributeRefAccess() {
		return pAtomicWithoutAttributeRef;
	}
	
	public ParserRule getAtomicWithoutAttributeRefRule() {
		return getAtomicWithoutAttributeRefAccess().getRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
