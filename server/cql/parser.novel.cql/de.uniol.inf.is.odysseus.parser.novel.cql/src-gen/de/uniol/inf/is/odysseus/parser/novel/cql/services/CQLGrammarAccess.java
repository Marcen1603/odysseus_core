/*
 * generated by Xtext 2.10.0
 */
package de.uniol.inf.is.odysseus.parser.novel.cql.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.UnorderedGroup;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class CQLGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.parser.novel.cql.CQL.Model");
		private final Assignment cStatementsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cStatementsStatementParserRuleCall_0 = (RuleCall)cStatementsAssignment.eContents().get(0);
		
		//Model:
		//	statements+=Statement*;
		@Override public ParserRule getRule() { return rule; }
		
		//statements+=Statement*
		public Assignment getStatementsAssignment() { return cStatementsAssignment; }
		
		//Statement
		public RuleCall getStatementsStatementParserRuleCall_0() { return cStatementsStatementParserRuleCall_0; }
	}
	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.parser.novel.cql.CQL.Statement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final RuleCall cTypeSelectParserRuleCall_0_0_0 = (RuleCall)cTypeAssignment_0_0.eContents().get(0);
		private final Assignment cTypeAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final RuleCall cTypeCreateParserRuleCall_0_1_0 = (RuleCall)cTypeAssignment_0_1.eContents().get(0);
		private final Assignment cTypeAssignment_0_2 = (Assignment)cAlternatives_0.eContents().get(2);
		private final RuleCall cTypeStreamToParserRuleCall_0_2_0 = (RuleCall)cTypeAssignment_0_2.eContents().get(0);
		private final Assignment cTypeAssignment_0_3 = (Assignment)cAlternatives_0.eContents().get(3);
		private final RuleCall cTypeDropParserRuleCall_0_3_0 = (RuleCall)cTypeAssignment_0_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Statement:
		//	(type=Select | type=Create | type=StreamTo | type=Drop) ';'?;
		@Override public ParserRule getRule() { return rule; }
		
		//(type=Select | type=Create | type=StreamTo | type=Drop) ';'?
		public Group getGroup() { return cGroup; }
		
		//(type=Select | type=Create | type=StreamTo | type=Drop)
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//type=Select
		public Assignment getTypeAssignment_0_0() { return cTypeAssignment_0_0; }
		
		//Select
		public RuleCall getTypeSelectParserRuleCall_0_0_0() { return cTypeSelectParserRuleCall_0_0_0; }
		
		//type=Create
		public Assignment getTypeAssignment_0_1() { return cTypeAssignment_0_1; }
		
		//Create
		public RuleCall getTypeCreateParserRuleCall_0_1_0() { return cTypeCreateParserRuleCall_0_1_0; }
		
		//type=StreamTo
		public Assignment getTypeAssignment_0_2() { return cTypeAssignment_0_2; }
		
		//StreamTo
		public RuleCall getTypeStreamToParserRuleCall_0_2_0() { return cTypeStreamToParserRuleCall_0_2_0; }
		
		//type=Drop
		public Assignment getTypeAssignment_0_3() { return cTypeAssignment_0_3; }
		
		//Drop
		public RuleCall getTypeDropParserRuleCall_0_3_0() { return cTypeDropParserRuleCall_0_3_0; }
		
		//';'?
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}
	public class SelectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.parser.novel.cql.CQL.Select");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameSELECTKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Assignment cDistinctAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cDistinctDISTINCTKeyword_1_0 = (Keyword)cDistinctAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Keyword cAsteriskKeyword_2_0 = (Keyword)cAlternatives_2.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_2_1 = (UnorderedGroup)cAlternatives_2.eContents().get(1);
		private final Alternatives cAlternatives_2_1_0 = (Alternatives)cUnorderedGroup_2_1.eContents().get(0);
		private final Assignment cAttributesAssignment_2_1_0_0 = (Assignment)cAlternatives_2_1_0.eContents().get(0);
		private final RuleCall cAttributesAttributeParserRuleCall_2_1_0_0_0 = (RuleCall)cAttributesAssignment_2_1_0_0.eContents().get(0);
		private final Assignment cAggregationsAssignment_2_1_0_1 = (Assignment)cAlternatives_2_1_0.eContents().get(1);
		private final RuleCall cAggregationsAggregationParserRuleCall_2_1_0_1_0 = (RuleCall)cAggregationsAssignment_2_1_0_1.eContents().get(0);
		private final Group cGroup_2_1_1 = (Group)cUnorderedGroup_2_1.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_1_0 = (Keyword)cGroup_2_1_1.eContents().get(0);
		private final Assignment cAttributesAssignment_2_1_1_1 = (Assignment)cGroup_2_1_1.eContents().get(1);
		private final RuleCall cAttributesAttributeParserRuleCall_2_1_1_1_0 = (RuleCall)cAttributesAssignment_2_1_1_1.eContents().get(0);
		private final Group cGroup_2_1_2 = (Group)cUnorderedGroup_2_1.eContents().get(2);
		private final Keyword cCommaKeyword_2_1_2_0 = (Keyword)cGroup_2_1_2.eContents().get(0);
		private final Assignment cAggregationsAssignment_2_1_2_1 = (Assignment)cGroup_2_1_2.eContents().get(1);
		private final RuleCall cAggregationsAggregationParserRuleCall_2_1_2_1_0 = (RuleCall)cAggregationsAssignment_2_1_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cFROMKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cSourcesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cSourcesSourceParserRuleCall_3_1_0 = (RuleCall)cSourcesAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cCommaKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cSourcesAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cSourcesSourceParserRuleCall_3_2_1_0 = (RuleCall)cSourcesAssignment_3_2_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cWHEREKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cPredicatesAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cPredicatesExpressionsModelParserRuleCall_4_1_0 = (RuleCall)cPredicatesAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cGROUPKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cBYKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cOrderAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cOrderAttributeParserRuleCall_5_2_0 = (RuleCall)cOrderAssignment_5_2.eContents().get(0);
		private final Group cGroup_5_3 = (Group)cGroup_5.eContents().get(3);
		private final Keyword cCommaKeyword_5_3_0 = (Keyword)cGroup_5_3.eContents().get(0);
		private final Assignment cOrderAssignment_5_3_1 = (Assignment)cGroup_5_3.eContents().get(1);
		private final RuleCall cOrderAttributeParserRuleCall_5_3_1_0 = (RuleCall)cOrderAssignment_5_3_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cHAVINGKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cHavingAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cHavingExpressionsModelParserRuleCall_6_1_0 = (RuleCall)cHavingAssignment_6_1.eContents().get(0);
		
		//Select:
		//	name='SELECT'
		//	distinct='DISTINCT'? ('*' | (attributes+=Attribute | aggregations+=Aggregation)+
		//	& (',' attributes+=Attribute)*
		//	& (',' aggregations+=Aggregation)*) ('FROM' sources+=Source+ (',' sources+=Source)*) ('WHERE'
		//	predicates=ExpressionsModel)? ('GROUP' 'BY' order+=Attribute+ (',' order+=Attribute)*)? ('HAVING'
		//	having=ExpressionsModel)?;
		@Override public ParserRule getRule() { return rule; }
		
		//name='SELECT' distinct='DISTINCT'? ('*' | (attributes+=Attribute | aggregations+=Aggregation)+ & (','
		//attributes+=Attribute)* & (',' aggregations+=Aggregation)*) ('FROM' sources+=Source+ (',' sources+=Source)*) ('WHERE'
		//predicates=ExpressionsModel)? ('GROUP' 'BY' order+=Attribute+ (',' order+=Attribute)*)? ('HAVING'
		//having=ExpressionsModel)?
		public Group getGroup() { return cGroup; }
		
		//name='SELECT'
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//'SELECT'
		public Keyword getNameSELECTKeyword_0_0() { return cNameSELECTKeyword_0_0; }
		
		//distinct='DISTINCT'?
		public Assignment getDistinctAssignment_1() { return cDistinctAssignment_1; }
		
		//'DISTINCT'
		public Keyword getDistinctDISTINCTKeyword_1_0() { return cDistinctDISTINCTKeyword_1_0; }
		
		//('*' | (attributes+=Attribute | aggregations+=Aggregation)+ & (',' attributes+=Attribute)* & (','
		//aggregations+=Aggregation)*)
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//'*'
		public Keyword getAsteriskKeyword_2_0() { return cAsteriskKeyword_2_0; }
		
		//(attributes+=Attribute | aggregations+=Aggregation)+ & (',' attributes+=Attribute)* & (',' aggregations+=Aggregation)*
		public UnorderedGroup getUnorderedGroup_2_1() { return cUnorderedGroup_2_1; }
		
		//(attributes+=Attribute | aggregations+=Aggregation)+
		public Alternatives getAlternatives_2_1_0() { return cAlternatives_2_1_0; }
		
		//attributes+=Attribute
		public Assignment getAttributesAssignment_2_1_0_0() { return cAttributesAssignment_2_1_0_0; }
		
		//Attribute
		public RuleCall getAttributesAttributeParserRuleCall_2_1_0_0_0() { return cAttributesAttributeParserRuleCall_2_1_0_0_0; }
		
		//aggregations+=Aggregation
		public Assignment getAggregationsAssignment_2_1_0_1() { return cAggregationsAssignment_2_1_0_1; }
		
		//Aggregation
		public RuleCall getAggregationsAggregationParserRuleCall_2_1_0_1_0() { return cAggregationsAggregationParserRuleCall_2_1_0_1_0; }
		
		//(',' attributes+=Attribute)*
		public Group getGroup_2_1_1() { return cGroup_2_1_1; }
		
		//','
		public Keyword getCommaKeyword_2_1_1_0() { return cCommaKeyword_2_1_1_0; }
		
		//attributes+=Attribute
		public Assignment getAttributesAssignment_2_1_1_1() { return cAttributesAssignment_2_1_1_1; }
		
		//Attribute
		public RuleCall getAttributesAttributeParserRuleCall_2_1_1_1_0() { return cAttributesAttributeParserRuleCall_2_1_1_1_0; }
		
		//(',' aggregations+=Aggregation)*
		public Group getGroup_2_1_2() { return cGroup_2_1_2; }
		
		//','
		public Keyword getCommaKeyword_2_1_2_0() { return cCommaKeyword_2_1_2_0; }
		
		//aggregations+=Aggregation
		public Assignment getAggregationsAssignment_2_1_2_1() { return cAggregationsAssignment_2_1_2_1; }
		
		//Aggregation
		public RuleCall getAggregationsAggregationParserRuleCall_2_1_2_1_0() { return cAggregationsAggregationParserRuleCall_2_1_2_1_0; }
		
		//('FROM' sources+=Source+ (',' sources+=Source)*)
		public Group getGroup_3() { return cGroup_3; }
		
		//'FROM'
		public Keyword getFROMKeyword_3_0() { return cFROMKeyword_3_0; }
		
		//sources+=Source+
		public Assignment getSourcesAssignment_3_1() { return cSourcesAssignment_3_1; }
		
		//Source
		public RuleCall getSourcesSourceParserRuleCall_3_1_0() { return cSourcesSourceParserRuleCall_3_1_0; }
		
		//(',' sources+=Source)*
		public Group getGroup_3_2() { return cGroup_3_2; }
		
		//','
		public Keyword getCommaKeyword_3_2_0() { return cCommaKeyword_3_2_0; }
		
		//sources+=Source
		public Assignment getSourcesAssignment_3_2_1() { return cSourcesAssignment_3_2_1; }
		
		//Source
		public RuleCall getSourcesSourceParserRuleCall_3_2_1_0() { return cSourcesSourceParserRuleCall_3_2_1_0; }
		
		//('WHERE' predicates=ExpressionsModel)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'WHERE'
		public Keyword getWHEREKeyword_4_0() { return cWHEREKeyword_4_0; }
		
		//predicates=ExpressionsModel
		public Assignment getPredicatesAssignment_4_1() { return cPredicatesAssignment_4_1; }
		
		//ExpressionsModel
		public RuleCall getPredicatesExpressionsModelParserRuleCall_4_1_0() { return cPredicatesExpressionsModelParserRuleCall_4_1_0; }
		
		//('GROUP' 'BY' order+=Attribute+ (',' order+=Attribute)*)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'GROUP'
		public Keyword getGROUPKeyword_5_0() { return cGROUPKeyword_5_0; }
		
		//'BY'
		public Keyword getBYKeyword_5_1() { return cBYKeyword_5_1; }
		
		//order+=Attribute+
		public Assignment getOrderAssignment_5_2() { return cOrderAssignment_5_2; }
		
		//Attribute
		public RuleCall getOrderAttributeParserRuleCall_5_2_0() { return cOrderAttributeParserRuleCall_5_2_0; }
		
		//(',' order+=Attribute)*
		public Group getGroup_5_3() { return cGroup_5_3; }
		
		//','
		public Keyword getCommaKeyword_5_3_0() { return cCommaKeyword_5_3_0; }
		
		//order+=Attribute
		public Assignment getOrderAssignment_5_3_1() { return cOrderAssignment_5_3_1; }
		
		//Attribute
		public RuleCall getOrderAttributeParserRuleCall_5_3_1_0() { return cOrderAttributeParserRuleCall_5_3_1_0; }
		
		//('HAVING' having=ExpressionsModel)?
		public Group getGroup_6() { return cGroup_6; }
		
		//'HAVING'
		public Keyword getHAVINGKeyword_6_0() { return cHAVINGKeyword_6_0; }
		
		//having=ExpressionsModel
		public Assignment getHavingAssignment_6_1() { return cHavingAssignment_6_1; }
		
		//ExpressionsModel
		public RuleCall getHavingExpressionsModelParserRuleCall_6_1_0() { return cHavingExpressionsModelParserRuleCall_6_1_0; }
	}
	public class NestedStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.parser.novel.cql.CQL.NestedStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cSelectParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//NestedStatement Select:
		//	'(' Select ')'
		@Override public ParserRule getRule() { return rule; }
		
		//'(' Select ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//Select
		public RuleCall getSelectParserRuleCall_1() { return cSelectParserRuleCall_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	public class SourceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.parser.novel.cql.CQL.Source");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cAlternatives_0.eContents().get(0);
		private final Assignment cNameAssignment_0_0_0 = (Assignment)cGroup_0_0.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0_0_0 = (RuleCall)cNameAssignment_0_0_0.eContents().get(0);
		private final Group cGroup_0_0_1 = (Group)cGroup_0_0.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0_0_1_0 = (Keyword)cGroup_0_0_1.eContents().get(0);
		private final Alternatives cAlternatives_0_0_1_1 = (Alternatives)cGroup_0_0_1.eContents().get(1);
		private final Assignment cUnboundedAssignment_0_0_1_1_0 = (Assignment)cAlternatives_0_0_1_1.eContents().get(0);
		private final RuleCall cUnboundedWindow_UnboundedParserRuleCall_0_0_1_1_0_0 = (RuleCall)cUnboundedAssignment_0_0_1_1_0.eContents().get(0);
		private final Assignment cTimeAssignment_0_0_1_1_1 = (Assignment)cAlternatives_0_0_1_1.eContents().get(1);
		private final RuleCall cTimeWindow_TimebasedParserRuleCall_0_0_1_1_1_0 = (RuleCall)cTimeAssignment_0_0_1_1_1.eContents().get(0);
		private final Assignment cTupleAssignment_0_0_1_1_2 = (Assignment)cAlternatives_0_0_1_1.eContents().get(2);
		private final RuleCall cTupleWindow_TuplebasedParserRuleCall_0_0_1_1_2_0 = (RuleCall)cTupleAssignment_0_0_1_1_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_0_0_1_2 = (Keyword)cGroup_0_0_1.eContents().get(2);
		private final Assignment cNestedAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final RuleCall cNestedNestedStatementParserRuleCall_0_1_0 = (RuleCall)cNestedAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cASKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cAliasAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cAliasAliasParserRuleCall_1_1_0 = (RuleCall)cAliasAssignment_1_1.eContents().get(0);
		
		//Source:
		//	(name=ID ('[' (unbounded=Window_Unbounded | time=Window_Timebased | tuple=Window_Tuplebased)
		//	']')?
		//	| nested=NestedStatement) ('AS' alias=Alias)?;
		@Override public ParserRule getRule() { return rule; }
		
		//(name=ID ('[' (unbounded=Window_Unbounded | time=Window_Timebased | tuple=Window_Tuplebased) ']')? |
		//nested=NestedStatement) ('AS' alias=Alias)?
		public Group getGroup() { return cGroup; }
		
		//(name=ID ('[' (unbounded=Window_Unbounded | time=Window_Timebased | tuple=Window_Tuplebased) ']')? |
		//nested=NestedStatement)
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//name=ID ('[' (unbounded=Window_Unbounded | time=Window_Timebased | tuple=Window_Tuplebased) ']')?
		public Group getGroup_0_0() { return cGroup_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_0_0_0() { return cNameAssignment_0_0_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0_0_0() { return cNameIDTerminalRuleCall_0_0_0_0; }
		
		//('[' (unbounded=Window_Unbounded | time=Window_Timebased | tuple=Window_Tuplebased) ']')?
		public Group getGroup_0_0_1() { return cGroup_0_0_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0_0_1_0() { return cLeftSquareBracketKeyword_0_0_1_0; }
		
		//(unbounded=Window_Unbounded | time=Window_Timebased | tuple=Window_Tuplebased)
		public Alternatives getAlternatives_0_0_1_1() { return cAlternatives_0_0_1_1; }
		
		//unbounded=Window_Unbounded
		public Assignment getUnboundedAssignment_0_0_1_1_0() { return cUnboundedAssignment_0_0_1_1_0; }
		
		//Window_Unbounded
		public RuleCall getUnboundedWindow_UnboundedParserRuleCall_0_0_1_1_0_0() { return cUnboundedWindow_UnboundedParserRuleCall_0_0_1_1_0_0; }
		
		//time=Window_Timebased
		public Assignment getTimeAssignment_0_0_1_1_1() { return cTimeAssignment_0_0_1_1_1; }
		
		//Window_Timebased
		public RuleCall getTimeWindow_TimebasedParserRuleCall_0_0_1_1_1_0() { return cTimeWindow_TimebasedParserRuleCall_0_0_1_1_1_0; }
		
		//tuple=Window_Tuplebased
		public Assignment getTupleAssignment_0_0_1_1_2() { return cTupleAssignment_0_0_1_1_2; }
		
		//Window_Tuplebased
		public RuleCall getTupleWindow_TuplebasedParserRuleCall_0_0_1_1_2_0() { return cTupleWindow_TuplebasedParserRuleCall_0_0_1_1_2_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_0_0_1_2() { return cRightSquareBracketKeyword_0_0_1_2; }
		
		//nested=NestedStatement
		public Assignment getNestedAssignment_0_1() { return cNestedAssignment_0_1; }
		
		//NestedStatement
		public RuleCall getNestedNestedStatementParserRuleCall_0_1_0() { return cNestedNestedStatementParserRuleCall_0_1_0; }
		
		//('AS' alias=Alias)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'AS'
		public Keyword getASKeyword_1_0() { return cASKeyword_1_0; }
		
		//alias=Alias
		public Assignment getAliasAssignment_1_1() { return cAliasAssignment_1_1; }
		
		//Alias
		public RuleCall getAliasAliasParserRuleCall_1_1_0() { return cAliasAliasParserRuleCall_1_1_0; }
	}
	public class AttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.parser.novel.cql.CQL.Attribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cASKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cAliasAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cAliasAliasParserRuleCall_1_1_0 = (RuleCall)cAliasAssignment_1_1.eContents().get(0);
		
		//Attribute:
		//	name=ID ('AS' alias=Alias)?;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ('AS' alias=Alias)?
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//('AS' alias=Alias)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'AS'
		public Keyword getASKeyword_1_0() { return cASKeyword_1_0; }
		
		//alias=Alias
		public Assignment getAliasAssignment_1_1() { return cAliasAssignment_1_1; }
		
		//Alias
		public RuleCall getAliasAliasParserRuleCall_1_1_0() { return cAliasAliasParserRuleCall_1_1_0; }
	}
	public class AttributeWithoutAliasElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.parser.novel.cql.CQL.AttributeWithoutAlias");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//AttributeWithoutAlias Attribute:
		//	name=ID
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class AttributeWithNestedStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.parser.novel.cql.CQL.AttributeWithNestedStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cValueAttributeWithoutAliasParserRuleCall_0_0 = (RuleCall)cValueAssignment_0.eContents().get(0);
		private final Keyword cINKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNestedAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNestedNestedStatementParserRuleCall_2_0 = (RuleCall)cNestedAssignment_2.eContents().get(0);
		
		//AttributeWithNestedStatement:
		//	value=AttributeWithoutAlias
		//	'IN'
		//	nested=NestedStatement;
		@Override public ParserRule getRule() { return rule; }
		
		//value=AttributeWithoutAlias 'IN' nested=NestedStatement
		public Group getGroup() { return cGroup; }
		
		//value=AttributeWithoutAlias
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }
		
		//AttributeWithoutAlias
		public RuleCall getValueAttributeWithoutAliasParserRuleCall_0_0() { return cValueAttributeWithoutAliasParserRuleCall_0_0; }
		
		//'IN'
		public Keyword getINKeyword_1() { return cINKeyword_1; }
		
		//nested=NestedStatement
		public Assignment getNestedAssignment_2() { return cNestedAssignment_2; }
		
		//NestedStatement
		public RuleCall getNestedNestedStatementParserRuleCall_2_0() { return cNestedNestedStatementParserRuleCall_2_0; }
	}
	public class AggregationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.parser.novel.cql.CQL.Aggregation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAttributeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAttributeAttributeWithoutAliasParserRuleCall_2_0 = (RuleCall)cAttributeAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cASKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cAliasAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cAliasAliasParserRuleCall_4_1_0 = (RuleCall)cAliasAssignment_4_1.eContents().get(0);
		
		//Aggregation:
		//	name=ID
		//	'(' attribute=AttributeWithoutAlias ')' ('AS' alias=Alias)?;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID '(' attribute=AttributeWithoutAlias ')' ('AS' alias=Alias)?
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//attribute=AttributeWithoutAlias
		public Assignment getAttributeAssignment_2() { return cAttributeAssignment_2; }
		
		//AttributeWithoutAlias
		public RuleCall getAttributeAttributeWithoutAliasParserRuleCall_2_0() { return cAttributeAttributeWithoutAliasParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//('AS' alias=Alias)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'AS'
		public Keyword getASKeyword_4_0() { return cASKeyword_4_0; }
		
		//alias=Alias
		public Assignment getAliasAssignment_4_1() { return cAliasAssignment_4_1; }
		
		//Alias
		public RuleCall getAliasAliasParserRuleCall_4_1_0() { return cAliasAliasParserRuleCall_4_1_0; }
	}
	public class AliasElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.parser.novel.cql.CQL.Alias");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Alias:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class CreateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.parser.novel.cql.CQL.Create");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cNameAlternatives_0_0 = (Alternatives)cNameAssignment_0.eContents().get(0);
		private final Keyword cNameCREATEKeyword_0_0_0 = (Keyword)cNameAlternatives_0_0.eContents().get(0);
		private final Keyword cNameATTACHKeyword_0_0_1 = (Keyword)cNameAlternatives_0_0.eContents().get(1);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cChannelformatAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cChannelformatChannelFormatParserRuleCall_1_0_0 = (RuleCall)cChannelformatAssignment_1_0.eContents().get(0);
		private final Assignment cAccessframeworkAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cAccessframeworkAccessFrameworkParserRuleCall_1_1_0 = (RuleCall)cAccessframeworkAssignment_1_1.eContents().get(0);
		
		////SelectWithoutWhere returns Select:
		////	name='SELECT'
		////	(distinct='DISTINCT')?
		////	( '*' |
		////		( 
		////			(attributes+=Attribute | aggregations+=Aggregation)+  
		////			& (',' attributes+=Attribute)* 
		////			& (',' aggregations+=Aggregation)*
		////		)
		////	)
		////	('FROM' sources+=Source+ (',' sources+=Source)*)
		////	'GROUP' 'BY' order+=Attribute+ (',' order+=Attribute) //ordering+=Attribute+ ('ASC' | 'DESC')?)?
		////	'HAVING' having=ExpressionsModel
		////;
		////
		////SelectWithoutWhere returns Select:
		////	name='SELECT'
		////	(distinct='DISTINCT')?
		////	( '*' |
		////		( 
		////			(attributes+=Attribute | aggregations+=Aggregation)+  
		////			& (',' attributes+=Attribute)* 
		////			& (',' aggregations+=Aggregation)*
		////		)
		////	)
		////	('FROM' sources+=Source+ (',' sources+=Source)*)
		////	'GROUP' 'BY' order+=Attribute+ (',' order+=Attribute) //ordering+=Attribute+ ('ASC' | 'DESC')?)?
		////	'HAVING' having=ExpressionsModel
		////;
		////
		////SelectWithoutGroupBy returns Select:
		////	name='SELECT'
		////	(distinct='DISTINCT')?
		////	( '*' |
		////		( 
		////			(attributes+=Attribute | aggregations+=Aggregation)+  
		////			& (',' attributes+=Attribute)* 
		////			& (',' aggregations+=Aggregation)*
		////		)
		////	)
		////	('FROM' sources+=Source+ (',' sources+=Source)*)
		////	'WHERE' predicates=ExpressionsModel
		////;
		////
		////SelectWithoutWhereAndGroupBy returns Select:
		////	name='SELECT'
		////	(distinct='DISTINCT')?
		////	( '*' |
		////		( 
		////			(attributes+=Attribute | aggregations+=Aggregation)+  
		////			& (',' attributes+=Attribute)* 
		////			& (',' aggregations+=Aggregation)*
		////		)
		////	)
		////	('FROM' sources+=Source+ (',' sources+=Source)*)
		////;
		////Order:
		////	attribute=Attribute
		////	direction=('ASC'|'DESC')
		////;
		//Create:
		//	name=('CREATE' | 'ATTACH') (channelformat=ChannelFormat | accessframework=AccessFramework);
		@Override public ParserRule getRule() { return rule; }
		
		//name=('CREATE' | 'ATTACH') (channelformat=ChannelFormat | accessframework=AccessFramework)
		public Group getGroup() { return cGroup; }
		
		//name=('CREATE' | 'ATTACH')
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//('CREATE' | 'ATTACH')
		public Alternatives getNameAlternatives_0_0() { return cNameAlternatives_0_0; }
		
		//'CREATE'
		public Keyword getNameCREATEKeyword_0_0_0() { return cNameCREATEKeyword_0_0_0; }
		
		//'ATTACH'
		public Keyword getNameATTACHKeyword_0_0_1() { return cNameATTACHKeyword_0_0_1; }
		
		//(channelformat=ChannelFormat | accessframework=AccessFramework)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//channelformat=ChannelFormat
		public Assignment getChannelformatAssignment_1_0() { return cChannelformatAssignment_1_0; }
		
		//ChannelFormat
		public RuleCall getChannelformatChannelFormatParserRuleCall_1_0_0() { return cChannelformatChannelFormatParserRuleCall_1_0_0; }
		
		//accessframework=AccessFramework
		public Assignment getAccessframeworkAssignment_1_1() { return cAccessframeworkAssignment_1_1; }
		
		//AccessFramework
		public RuleCall getAccessframeworkAccessFrameworkParserRuleCall_1_1_0() { return cAccessframeworkAccessFrameworkParserRuleCall_1_1_0; }
	}
	public class AccessFrameworkElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.parser.novel.cql.CQL.AccessFramework");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cTypeAlternatives_0_0 = (Alternatives)cTypeAssignment_0.eContents().get(0);
		private final Keyword cTypeSTREAMKeyword_0_0_0 = (Keyword)cTypeAlternatives_0_0.eContents().get(0);
		private final Keyword cTypeSINKKeyword_0_0_1 = (Keyword)cTypeAlternatives_0_0.eContents().get(1);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAttributesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAttributesAttributeParserRuleCall_3_0 = (RuleCall)cAttributesAssignment_3.eContents().get(0);
		private final Assignment cDatatypesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDatatypesDataTypeParserRuleCall_4_0 = (RuleCall)cDatatypesAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cAttributesAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cAttributesAttributeParserRuleCall_5_1_0 = (RuleCall)cAttributesAssignment_5_1.eContents().get(0);
		private final Assignment cDatatypesAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cDatatypesDataTypeParserRuleCall_5_2_0 = (RuleCall)cDatatypesAssignment_5_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cWRAPPERKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cWrapperAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cWrapperSTRINGTerminalRuleCall_8_0 = (RuleCall)cWrapperAssignment_8.eContents().get(0);
		private final Keyword cPROTOCOLKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cProtocolAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cProtocolSTRINGTerminalRuleCall_10_0 = (RuleCall)cProtocolAssignment_10.eContents().get(0);
		private final Keyword cTRANSPORTKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Assignment cTransportAssignment_12 = (Assignment)cGroup.eContents().get(12);
		private final RuleCall cTransportSTRINGTerminalRuleCall_12_0 = (RuleCall)cTransportAssignment_12.eContents().get(0);
		private final Keyword cDATAHANDLERKeyword_13 = (Keyword)cGroup.eContents().get(13);
		private final Assignment cDatahandlerAssignment_14 = (Assignment)cGroup.eContents().get(14);
		private final RuleCall cDatahandlerSTRINGTerminalRuleCall_14_0 = (RuleCall)cDatahandlerAssignment_14.eContents().get(0);
		private final Keyword cOPTIONSKeyword_15 = (Keyword)cGroup.eContents().get(15);
		private final Keyword cLeftParenthesisKeyword_16 = (Keyword)cGroup.eContents().get(16);
		private final Group cGroup_17 = (Group)cGroup.eContents().get(17);
		private final Assignment cKeysAssignment_17_0 = (Assignment)cGroup_17.eContents().get(0);
		private final RuleCall cKeysSTRINGTerminalRuleCall_17_0_0 = (RuleCall)cKeysAssignment_17_0.eContents().get(0);
		private final Assignment cValuesAssignment_17_1 = (Assignment)cGroup_17.eContents().get(1);
		private final RuleCall cValuesSTRINGTerminalRuleCall_17_1_0 = (RuleCall)cValuesAssignment_17_1.eContents().get(0);
		private final Group cGroup_18 = (Group)cGroup.eContents().get(18);
		private final Keyword cCommaKeyword_18_0 = (Keyword)cGroup_18.eContents().get(0);
		private final Assignment cKeysAssignment_18_1 = (Assignment)cGroup_18.eContents().get(1);
		private final RuleCall cKeysSTRINGTerminalRuleCall_18_1_0 = (RuleCall)cKeysAssignment_18_1.eContents().get(0);
		private final Assignment cValuesAssignment_18_2 = (Assignment)cGroup_18.eContents().get(2);
		private final RuleCall cValuesSTRINGTerminalRuleCall_18_2_0 = (RuleCall)cValuesAssignment_18_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_19 = (Keyword)cGroup.eContents().get(19);
		
		//AccessFramework:
		//	type=('STREAM' | 'SINK') name=ID
		//	'('
		//	attributes+=Attribute+
		//	datatypes+=DataType+ (',' attributes+=Attribute datatypes+=DataType)*
		//	')'
		//	'WRAPPER' wrapper=STRING
		//	'PROTOCOL' protocol=STRING
		//	'TRANSPORT' transport=STRING
		//	'DATAHANDLER' datahandler=STRING
		//	'OPTIONS'
		//	'(' (keys+=STRING values+=STRING)+ (',' keys+=STRING values+=STRING)?
		//	')';
		@Override public ParserRule getRule() { return rule; }
		
		//type=('STREAM' | 'SINK') name=ID '(' attributes+=Attribute+ datatypes+=DataType+ (',' attributes+=Attribute
		//datatypes+=DataType)* ')' 'WRAPPER' wrapper=STRING 'PROTOCOL' protocol=STRING 'TRANSPORT' transport=STRING
		//'DATAHANDLER' datahandler=STRING 'OPTIONS' '(' (keys+=STRING values+=STRING)+ (',' keys+=STRING values+=STRING)? ')'
		public Group getGroup() { return cGroup; }
		
		//type=('STREAM' | 'SINK')
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//('STREAM' | 'SINK')
		public Alternatives getTypeAlternatives_0_0() { return cTypeAlternatives_0_0; }
		
		//'STREAM'
		public Keyword getTypeSTREAMKeyword_0_0_0() { return cTypeSTREAMKeyword_0_0_0; }
		
		//'SINK'
		public Keyword getTypeSINKKeyword_0_0_1() { return cTypeSINKKeyword_0_0_1; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//attributes+=Attribute+
		public Assignment getAttributesAssignment_3() { return cAttributesAssignment_3; }
		
		//Attribute
		public RuleCall getAttributesAttributeParserRuleCall_3_0() { return cAttributesAttributeParserRuleCall_3_0; }
		
		//datatypes+=DataType+
		public Assignment getDatatypesAssignment_4() { return cDatatypesAssignment_4; }
		
		//DataType
		public RuleCall getDatatypesDataTypeParserRuleCall_4_0() { return cDatatypesDataTypeParserRuleCall_4_0; }
		
		//(',' attributes+=Attribute datatypes+=DataType)*
		public Group getGroup_5() { return cGroup_5; }
		
		//','
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }
		
		//attributes+=Attribute
		public Assignment getAttributesAssignment_5_1() { return cAttributesAssignment_5_1; }
		
		//Attribute
		public RuleCall getAttributesAttributeParserRuleCall_5_1_0() { return cAttributesAttributeParserRuleCall_5_1_0; }
		
		//datatypes+=DataType
		public Assignment getDatatypesAssignment_5_2() { return cDatatypesAssignment_5_2; }
		
		//DataType
		public RuleCall getDatatypesDataTypeParserRuleCall_5_2_0() { return cDatatypesDataTypeParserRuleCall_5_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
		
		//'WRAPPER'
		public Keyword getWRAPPERKeyword_7() { return cWRAPPERKeyword_7; }
		
		//wrapper=STRING
		public Assignment getWrapperAssignment_8() { return cWrapperAssignment_8; }
		
		//STRING
		public RuleCall getWrapperSTRINGTerminalRuleCall_8_0() { return cWrapperSTRINGTerminalRuleCall_8_0; }
		
		//'PROTOCOL'
		public Keyword getPROTOCOLKeyword_9() { return cPROTOCOLKeyword_9; }
		
		//protocol=STRING
		public Assignment getProtocolAssignment_10() { return cProtocolAssignment_10; }
		
		//STRING
		public RuleCall getProtocolSTRINGTerminalRuleCall_10_0() { return cProtocolSTRINGTerminalRuleCall_10_0; }
		
		//'TRANSPORT'
		public Keyword getTRANSPORTKeyword_11() { return cTRANSPORTKeyword_11; }
		
		//transport=STRING
		public Assignment getTransportAssignment_12() { return cTransportAssignment_12; }
		
		//STRING
		public RuleCall getTransportSTRINGTerminalRuleCall_12_0() { return cTransportSTRINGTerminalRuleCall_12_0; }
		
		//'DATAHANDLER'
		public Keyword getDATAHANDLERKeyword_13() { return cDATAHANDLERKeyword_13; }
		
		//datahandler=STRING
		public Assignment getDatahandlerAssignment_14() { return cDatahandlerAssignment_14; }
		
		//STRING
		public RuleCall getDatahandlerSTRINGTerminalRuleCall_14_0() { return cDatahandlerSTRINGTerminalRuleCall_14_0; }
		
		//'OPTIONS'
		public Keyword getOPTIONSKeyword_15() { return cOPTIONSKeyword_15; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_16() { return cLeftParenthesisKeyword_16; }
		
		//(keys+=STRING values+=STRING)+
		public Group getGroup_17() { return cGroup_17; }
		
		//keys+=STRING
		public Assignment getKeysAssignment_17_0() { return cKeysAssignment_17_0; }
		
		//STRING
		public RuleCall getKeysSTRINGTerminalRuleCall_17_0_0() { return cKeysSTRINGTerminalRuleCall_17_0_0; }
		
		//values+=STRING
		public Assignment getValuesAssignment_17_1() { return cValuesAssignment_17_1; }
		
		//STRING
		public RuleCall getValuesSTRINGTerminalRuleCall_17_1_0() { return cValuesSTRINGTerminalRuleCall_17_1_0; }
		
		//(',' keys+=STRING values+=STRING)?
		public Group getGroup_18() { return cGroup_18; }
		
		//','
		public Keyword getCommaKeyword_18_0() { return cCommaKeyword_18_0; }
		
		//keys+=STRING
		public Assignment getKeysAssignment_18_1() { return cKeysAssignment_18_1; }
		
		//STRING
		public RuleCall getKeysSTRINGTerminalRuleCall_18_1_0() { return cKeysSTRINGTerminalRuleCall_18_1_0; }
		
		//values+=STRING
		public Assignment getValuesAssignment_18_2() { return cValuesAssignment_18_2; }
		
		//STRING
		public RuleCall getValuesSTRINGTerminalRuleCall_18_2_0() { return cValuesSTRINGTerminalRuleCall_18_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_19() { return cRightParenthesisKeyword_19; }
	}
	public class ChannelFormatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.parser.novel.cql.CQL.ChannelFormat");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cStreamAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cStreamChannelFormatStreamParserRuleCall_0_0 = (RuleCall)cStreamAssignment_0.eContents().get(0);
		private final Assignment cViewAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cViewChannelFormatViewParserRuleCall_1_0 = (RuleCall)cViewAssignment_1.eContents().get(0);
		
		//ChannelFormat:
		//	stream=ChannelFormatStream | view=ChannelFormatView;
		@Override public ParserRule getRule() { return rule; }
		
		//stream=ChannelFormatStream | view=ChannelFormatView
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//stream=ChannelFormatStream
		public Assignment getStreamAssignment_0() { return cStreamAssignment_0; }
		
		//ChannelFormatStream
		public RuleCall getStreamChannelFormatStreamParserRuleCall_0_0() { return cStreamChannelFormatStreamParserRuleCall_0_0; }
		
		//view=ChannelFormatView
		public Assignment getViewAssignment_1() { return cViewAssignment_1; }
		
		//ChannelFormatView
		public RuleCall getViewChannelFormatViewParserRuleCall_1_0() { return cViewChannelFormatViewParserRuleCall_1_0; }
	}
	public class ChannelFormatStreamElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.parser.novel.cql.CQL.ChannelFormatStream");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSTREAMKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAttributesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAttributesAttributeParserRuleCall_3_0 = (RuleCall)cAttributesAssignment_3.eContents().get(0);
		private final Assignment cDatatypesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDatatypesDataTypeParserRuleCall_4_0 = (RuleCall)cDatatypesAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cAttributesAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cAttributesAttributeParserRuleCall_5_1_0 = (RuleCall)cAttributesAssignment_5_1.eContents().get(0);
		private final Assignment cDatatypesAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cDatatypesDataTypeParserRuleCall_5_2_0 = (RuleCall)cDatatypesAssignment_5_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cCHANNELKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cHostAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cHostIDTerminalRuleCall_8_0 = (RuleCall)cHostAssignment_8.eContents().get(0);
		private final Keyword cColonKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cPortAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cPortINTTerminalRuleCall_10_0 = (RuleCall)cPortAssignment_10.eContents().get(0);
		
		//ChannelFormatStream:
		//	'STREAM'
		//	name=ID
		//	'('
		//	attributes+=Attribute+
		//	datatypes+=DataType+ (',' attributes+=Attribute datatypes+=DataType)*
		//	')'
		//	'CHANNEL' //TODO Add FILE as possible parameter --> and even more ..
		//	host=ID
		//	':'
		//	port=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'STREAM' name=ID '(' attributes+=Attribute+ datatypes+=DataType+ (',' attributes+=Attribute datatypes+=DataType)* ')'
		//'CHANNEL' //TODO Add FILE as possible parameter --> and even more ..
		//host=ID ':' port=INT
		public Group getGroup() { return cGroup; }
		
		//'STREAM'
		public Keyword getSTREAMKeyword_0() { return cSTREAMKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//attributes+=Attribute+
		public Assignment getAttributesAssignment_3() { return cAttributesAssignment_3; }
		
		//Attribute
		public RuleCall getAttributesAttributeParserRuleCall_3_0() { return cAttributesAttributeParserRuleCall_3_0; }
		
		//datatypes+=DataType+
		public Assignment getDatatypesAssignment_4() { return cDatatypesAssignment_4; }
		
		//DataType
		public RuleCall getDatatypesDataTypeParserRuleCall_4_0() { return cDatatypesDataTypeParserRuleCall_4_0; }
		
		//(',' attributes+=Attribute datatypes+=DataType)*
		public Group getGroup_5() { return cGroup_5; }
		
		//','
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }
		
		//attributes+=Attribute
		public Assignment getAttributesAssignment_5_1() { return cAttributesAssignment_5_1; }
		
		//Attribute
		public RuleCall getAttributesAttributeParserRuleCall_5_1_0() { return cAttributesAttributeParserRuleCall_5_1_0; }
		
		//datatypes+=DataType
		public Assignment getDatatypesAssignment_5_2() { return cDatatypesAssignment_5_2; }
		
		//DataType
		public RuleCall getDatatypesDataTypeParserRuleCall_5_2_0() { return cDatatypesDataTypeParserRuleCall_5_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
		
		//'CHANNEL'
		public Keyword getCHANNELKeyword_7() { return cCHANNELKeyword_7; }
		
		////TODO Add FILE as possible parameter --> and even more ..
		//host=ID
		public Assignment getHostAssignment_8() { return cHostAssignment_8; }
		
		//ID
		public RuleCall getHostIDTerminalRuleCall_8_0() { return cHostIDTerminalRuleCall_8_0; }
		
		//':'
		public Keyword getColonKeyword_9() { return cColonKeyword_9; }
		
		//port=INT
		public Assignment getPortAssignment_10() { return cPortAssignment_10; }
		
		//INT
		public RuleCall getPortINTTerminalRuleCall_10_0() { return cPortINTTerminalRuleCall_10_0; }
	}
	public class ChannelFormatViewElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.parser.novel.cql.CQL.ChannelFormatView");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVIEWKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cFROMKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cSelectAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cSelectSelectParserRuleCall_4_0 = (RuleCall)cSelectAssignment_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//ChannelFormatView:
		//	'VIEW'
		//	name=ID
		//	'FROM'
		//	'('
		//	select=Select ';'?
		//	')';
		@Override public ParserRule getRule() { return rule; }
		
		//'VIEW' name=ID 'FROM' '(' select=Select ';'? ')'
		public Group getGroup() { return cGroup; }
		
		//'VIEW'
		public Keyword getVIEWKeyword_0() { return cVIEWKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'FROM'
		public Keyword getFROMKeyword_2() { return cFROMKeyword_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//select=Select
		public Assignment getSelectAssignment_4() { return cSelectAssignment_4; }
		
		//Select
		public RuleCall getSelectSelectParserRuleCall_4_0() { return cSelectSelectParserRuleCall_4_0; }
		
		//';'?
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}
	public class StreamToElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.parser.novel.cql.CQL.StreamTo");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSTREAMKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cTOKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cStatementAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final RuleCall cStatementSelectParserRuleCall_3_0_0 = (RuleCall)cStatementAssignment_3_0.eContents().get(0);
		private final Assignment cInputnameAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final RuleCall cInputnameIDTerminalRuleCall_3_1_0 = (RuleCall)cInputnameAssignment_3_1.eContents().get(0);
		
		//StreamTo:
		//	'STREAM' 'TO'
		//	name=ID (statement=Select | inputname=ID);
		@Override public ParserRule getRule() { return rule; }
		
		//'STREAM' 'TO' name=ID (statement=Select | inputname=ID)
		public Group getGroup() { return cGroup; }
		
		//'STREAM'
		public Keyword getSTREAMKeyword_0() { return cSTREAMKeyword_0; }
		
		//'TO'
		public Keyword getTOKeyword_1() { return cTOKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//(statement=Select | inputname=ID)
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//statement=Select
		public Assignment getStatementAssignment_3_0() { return cStatementAssignment_3_0; }
		
		//Select
		public RuleCall getStatementSelectParserRuleCall_3_0_0() { return cStatementSelectParserRuleCall_3_0_0; }
		
		//inputname=ID
		public Assignment getInputnameAssignment_3_1() { return cInputnameAssignment_3_1; }
		
		//ID
		public RuleCall getInputnameIDTerminalRuleCall_3_1_0() { return cInputnameIDTerminalRuleCall_3_1_0; }
	}
	public class CommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.parser.novel.cql.CQL.Command");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyword1Assignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cKeyword1IDTerminalRuleCall_0_0 = (RuleCall)cKeyword1Assignment_0.eContents().get(0);
		private final Assignment cKeyword2Assignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cKeyword2IDTerminalRuleCall_1_0 = (RuleCall)cKeyword2Assignment_1.eContents().get(0);
		private final Assignment cValue1Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValue1IDTerminalRuleCall_2_0 = (RuleCall)cValue1Assignment_2.eContents().get(0);
		private final Assignment cKeyword3Assignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cKeyword3IDTerminalRuleCall_3_0 = (RuleCall)cKeyword3Assignment_3.eContents().get(0);
		private final Assignment cValue2Assignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cValue2IDTerminalRuleCall_4_0 = (RuleCall)cValue2Assignment_4.eContents().get(0);
		
		//// build generic rule for those commands
		//Command:
		//	keyword1=ID
		//	keyword2=ID
		//	value1=ID
		//	keyword3=ID
		//	value2=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//keyword1=ID keyword2=ID value1=ID keyword3=ID value2=ID
		public Group getGroup() { return cGroup; }
		
		//keyword1=ID
		public Assignment getKeyword1Assignment_0() { return cKeyword1Assignment_0; }
		
		//ID
		public RuleCall getKeyword1IDTerminalRuleCall_0_0() { return cKeyword1IDTerminalRuleCall_0_0; }
		
		//keyword2=ID
		public Assignment getKeyword2Assignment_1() { return cKeyword2Assignment_1; }
		
		//ID
		public RuleCall getKeyword2IDTerminalRuleCall_1_0() { return cKeyword2IDTerminalRuleCall_1_0; }
		
		//value1=ID
		public Assignment getValue1Assignment_2() { return cValue1Assignment_2; }
		
		//ID
		public RuleCall getValue1IDTerminalRuleCall_2_0() { return cValue1IDTerminalRuleCall_2_0; }
		
		//keyword3=ID
		public Assignment getKeyword3Assignment_3() { return cKeyword3Assignment_3; }
		
		//ID
		public RuleCall getKeyword3IDTerminalRuleCall_3_0() { return cKeyword3IDTerminalRuleCall_3_0; }
		
		//value2=ID
		public Assignment getValue2Assignment_4() { return cValue2Assignment_4; }
		
		//ID
		public RuleCall getValue2IDTerminalRuleCall_4_0() { return cValue2IDTerminalRuleCall_4_0; }
	}
	public class DropElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.parser.novel.cql.CQL.Drop");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyword1Assignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cKeyword1DROPKeyword_0_0 = (Keyword)cKeyword1Assignment_0.eContents().get(0);
		private final Assignment cKeyword2Assignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cKeyword2Alternatives_1_0 = (Alternatives)cKeyword2Assignment_1.eContents().get(0);
		private final Keyword cKeyword2SINKKeyword_1_0_0 = (Keyword)cKeyword2Alternatives_1_0.eContents().get(0);
		private final Keyword cKeyword2STREAMKeyword_1_0_1 = (Keyword)cKeyword2Alternatives_1_0.eContents().get(1);
		private final Assignment cValue1Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValue1IDTerminalRuleCall_2_0 = (RuleCall)cValue1Assignment_2.eContents().get(0);
		private final Assignment cKeyword3Assignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cKeyword3IFEXISTSKeyword_3_0 = (Keyword)cKeyword3Assignment_3.eContents().get(0);
		private final Assignment cValue2Assignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cValue2IDTerminalRuleCall_4_0 = (RuleCall)cValue2Assignment_4.eContents().get(0);
		
		//Drop Command:
		//	keyword1='DROP'
		//	keyword2=('SINK' | 'STREAM') value1=ID
		//	keyword3='IF EXISTS'?
		//	value2=ID
		@Override public ParserRule getRule() { return rule; }
		
		//keyword1='DROP' keyword2=('SINK' | 'STREAM') value1=ID keyword3='IF EXISTS'? value2=ID
		public Group getGroup() { return cGroup; }
		
		//keyword1='DROP'
		public Assignment getKeyword1Assignment_0() { return cKeyword1Assignment_0; }
		
		//'DROP'
		public Keyword getKeyword1DROPKeyword_0_0() { return cKeyword1DROPKeyword_0_0; }
		
		//keyword2=('SINK' | 'STREAM')
		public Assignment getKeyword2Assignment_1() { return cKeyword2Assignment_1; }
		
		//('SINK' | 'STREAM')
		public Alternatives getKeyword2Alternatives_1_0() { return cKeyword2Alternatives_1_0; }
		
		//'SINK'
		public Keyword getKeyword2SINKKeyword_1_0_0() { return cKeyword2SINKKeyword_1_0_0; }
		
		//'STREAM'
		public Keyword getKeyword2STREAMKeyword_1_0_1() { return cKeyword2STREAMKeyword_1_0_1; }
		
		//value1=ID
		public Assignment getValue1Assignment_2() { return cValue1Assignment_2; }
		
		//ID
		public RuleCall getValue1IDTerminalRuleCall_2_0() { return cValue1IDTerminalRuleCall_2_0; }
		
		//keyword3='IF EXISTS'?
		public Assignment getKeyword3Assignment_3() { return cKeyword3Assignment_3; }
		
		//'IF EXISTS'
		public Keyword getKeyword3IFEXISTSKeyword_3_0() { return cKeyword3IFEXISTSKeyword_3_0; }
		
		//value2=ID
		public Assignment getValue2Assignment_4() { return cValue2Assignment_4; }
		
		//ID
		public RuleCall getValue2IDTerminalRuleCall_4_0() { return cValue2IDTerminalRuleCall_4_0; }
	}
	public class Window_UnboundedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.parser.novel.cql.CQL.Window_Unbounded");
		private final Keyword cUNBOUNDEDKeyword = (Keyword)rule.eContents().get(1);
		
		//Window_Unbounded:
		//	'UNBOUNDED';
		@Override public ParserRule getRule() { return rule; }
		
		//'UNBOUNDED'
		public Keyword getUNBOUNDEDKeyword() { return cUNBOUNDEDKeyword; }
	}
	public class Window_TimebasedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.parser.novel.cql.CQL.Window_Timebased");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSIZEKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSizeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSizeINTTerminalRuleCall_1_0 = (RuleCall)cSizeAssignment_1.eContents().get(0);
		private final Assignment cUnitAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cUnitIDTerminalRuleCall_2_0 = (RuleCall)cUnitAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cADVANCEKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cAdvance_sizeAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cAdvance_sizeINTTerminalRuleCall_3_1_0 = (RuleCall)cAdvance_sizeAssignment_3_1.eContents().get(0);
		private final Assignment cAdvance_unitAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cAdvance_unitIDTerminalRuleCall_3_2_0 = (RuleCall)cAdvance_unitAssignment_3_2.eContents().get(0);
		private final Keyword cTIMEKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Window_Timebased:
		//	'SIZE' size=INT unit=ID ('ADVANCE' advance_size=INT advance_unit=ID)?
		//	'TIME';
		@Override public ParserRule getRule() { return rule; }
		
		//'SIZE' size=INT unit=ID ('ADVANCE' advance_size=INT advance_unit=ID)? 'TIME'
		public Group getGroup() { return cGroup; }
		
		//'SIZE'
		public Keyword getSIZEKeyword_0() { return cSIZEKeyword_0; }
		
		//size=INT
		public Assignment getSizeAssignment_1() { return cSizeAssignment_1; }
		
		//INT
		public RuleCall getSizeINTTerminalRuleCall_1_0() { return cSizeINTTerminalRuleCall_1_0; }
		
		//unit=ID
		public Assignment getUnitAssignment_2() { return cUnitAssignment_2; }
		
		//ID
		public RuleCall getUnitIDTerminalRuleCall_2_0() { return cUnitIDTerminalRuleCall_2_0; }
		
		//('ADVANCE' advance_size=INT advance_unit=ID)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'ADVANCE'
		public Keyword getADVANCEKeyword_3_0() { return cADVANCEKeyword_3_0; }
		
		//advance_size=INT
		public Assignment getAdvance_sizeAssignment_3_1() { return cAdvance_sizeAssignment_3_1; }
		
		//INT
		public RuleCall getAdvance_sizeINTTerminalRuleCall_3_1_0() { return cAdvance_sizeINTTerminalRuleCall_3_1_0; }
		
		//advance_unit=ID
		public Assignment getAdvance_unitAssignment_3_2() { return cAdvance_unitAssignment_3_2; }
		
		//ID
		public RuleCall getAdvance_unitIDTerminalRuleCall_3_2_0() { return cAdvance_unitIDTerminalRuleCall_3_2_0; }
		
		//'TIME'
		public Keyword getTIMEKeyword_4() { return cTIMEKeyword_4; }
	}
	public class Window_TuplebasedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.parser.novel.cql.CQL.Window_Tuplebased");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSIZEKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSizeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSizeINTTerminalRuleCall_1_0 = (RuleCall)cSizeAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cADVANCEKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cAdvance_sizeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cAdvance_sizeINTTerminalRuleCall_2_1_0 = (RuleCall)cAdvance_sizeAssignment_2_1.eContents().get(0);
		private final Keyword cTUPLEKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cPARTITIONKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cBYKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cPartition_attributeAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cPartition_attributeAttributeParserRuleCall_4_2_0 = (RuleCall)cPartition_attributeAssignment_4_2.eContents().get(0);
		
		//Window_Tuplebased: //TODO PARTITION BY only if a GROUP BY clause exists
		//	'SIZE' size=INT ('ADVANCE' advance_size=INT)? 'TUPLE' ('PARTITION' 'BY' partition_attribute=Attribute)?;
		@Override public ParserRule getRule() { return rule; }
		
		////TODO PARTITION BY only if a GROUP BY clause exists
		//'SIZE' size=INT ('ADVANCE' advance_size=INT)? 'TUPLE' ('PARTITION' 'BY' partition_attribute=Attribute)?
		public Group getGroup() { return cGroup; }
		
		////TODO PARTITION BY only if a GROUP BY clause exists
		//'SIZE'
		public Keyword getSIZEKeyword_0() { return cSIZEKeyword_0; }
		
		//size=INT
		public Assignment getSizeAssignment_1() { return cSizeAssignment_1; }
		
		//INT
		public RuleCall getSizeINTTerminalRuleCall_1_0() { return cSizeINTTerminalRuleCall_1_0; }
		
		//('ADVANCE' advance_size=INT)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'ADVANCE'
		public Keyword getADVANCEKeyword_2_0() { return cADVANCEKeyword_2_0; }
		
		//advance_size=INT
		public Assignment getAdvance_sizeAssignment_2_1() { return cAdvance_sizeAssignment_2_1; }
		
		//INT
		public RuleCall getAdvance_sizeINTTerminalRuleCall_2_1_0() { return cAdvance_sizeINTTerminalRuleCall_2_1_0; }
		
		//'TUPLE'
		public Keyword getTUPLEKeyword_3() { return cTUPLEKeyword_3; }
		
		//('PARTITION' 'BY' partition_attribute=Attribute)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'PARTITION'
		public Keyword getPARTITIONKeyword_4_0() { return cPARTITIONKeyword_4_0; }
		
		//'BY'
		public Keyword getBYKeyword_4_1() { return cBYKeyword_4_1; }
		
		//partition_attribute=Attribute
		public Assignment getPartition_attributeAssignment_4_2() { return cPartition_attributeAssignment_4_2; }
		
		//Attribute
		public RuleCall getPartition_attributeAttributeParserRuleCall_4_2_0() { return cPartition_attributeAttributeParserRuleCall_4_2_0; }
	}
	public class ExpressionsModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.parser.novel.cql.CQL.ExpressionsModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cExpressionsModelAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cElementsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cElementsExpressionParserRuleCall_1_0 = (RuleCall)cElementsAssignment_1.eContents().get(0);
		
		//ExpressionsModel:
		//	{ExpressionsModel} elements+=Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//{ExpressionsModel} elements+=Expression
		public Group getGroup() { return cGroup; }
		
		//{ExpressionsModel}
		public Action getExpressionsModelAction_0() { return cExpressionsModelAction_0; }
		
		//elements+=Expression
		public Assignment getElementsAssignment_1() { return cElementsAssignment_1; }
		
		//Expression
		public RuleCall getElementsExpressionParserRuleCall_1_0() { return cElementsExpressionParserRuleCall_1_0; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.parser.novel.cql.CQL.Expression");
		private final RuleCall cOrParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Expression:
		//	Or;
		@Override public ParserRule getRule() { return rule; }
		
		//Or
		public RuleCall getOrParserRuleCall() { return cOrParserRuleCall; }
	}
	public class OrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.parser.novel.cql.CQL.Or");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAndParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOrLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cORKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAndParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Or Expression:
		//	And ({Or.left=current} 'OR' right=And)*
		@Override public ParserRule getRule() { return rule; }
		
		//And ({Or.left=current} 'OR' right=And)*
		public Group getGroup() { return cGroup; }
		
		//And
		public RuleCall getAndParserRuleCall_0() { return cAndParserRuleCall_0; }
		
		//({Or.left=current} 'OR' right=And)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Or.left=current}
		public Action getOrLeftAction_1_0() { return cOrLeftAction_1_0; }
		
		//'OR'
		public Keyword getORKeyword_1_1() { return cORKeyword_1_1; }
		
		//right=And
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//And
		public RuleCall getRightAndParserRuleCall_1_2_0() { return cRightAndParserRuleCall_1_2_0; }
	}
	public class AndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.parser.novel.cql.CQL.And");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cEqualitiyParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAndLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cANDKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightEqualitiyParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//And Expression:
		//	Equalitiy ({And.left=current} 'AND' right=Equalitiy)*
		@Override public ParserRule getRule() { return rule; }
		
		//Equalitiy ({And.left=current} 'AND' right=Equalitiy)*
		public Group getGroup() { return cGroup; }
		
		//Equalitiy
		public RuleCall getEqualitiyParserRuleCall_0() { return cEqualitiyParserRuleCall_0; }
		
		//({And.left=current} 'AND' right=Equalitiy)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{And.left=current}
		public Action getAndLeftAction_1_0() { return cAndLeftAction_1_0; }
		
		//'AND'
		public Keyword getANDKeyword_1_1() { return cANDKeyword_1_1; }
		
		//right=Equalitiy
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Equalitiy
		public RuleCall getRightEqualitiyParserRuleCall_1_2_0() { return cRightEqualitiyParserRuleCall_1_2_0; }
	}
	public class EqualitiyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.parser.novel.cql.CQL.Equalitiy");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cComparisonParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cEqualityLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final Keyword cOpEqualsSignEqualsSignKeyword_1_1_0_0 = (Keyword)cOpAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOpExclamationMarkEqualsSignKeyword_1_1_0_1 = (Keyword)cOpAlternatives_1_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightComparisonParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Equalitiy Expression:
		//	Comparison ({Equality.left=current} op=('==' | '!=') right=Comparison)*
		@Override public ParserRule getRule() { return rule; }
		
		//Comparison ({Equality.left=current} op=('==' | '!=') right=Comparison)*
		public Group getGroup() { return cGroup; }
		
		//Comparison
		public RuleCall getComparisonParserRuleCall_0() { return cComparisonParserRuleCall_0; }
		
		//({Equality.left=current} op=('==' | '!=') right=Comparison)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Equality.left=current}
		public Action getEqualityLeftAction_1_0() { return cEqualityLeftAction_1_0; }
		
		//op=('==' | '!=')
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//('==' | '!=')
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }
		
		//'=='
		public Keyword getOpEqualsSignEqualsSignKeyword_1_1_0_0() { return cOpEqualsSignEqualsSignKeyword_1_1_0_0; }
		
		//'!='
		public Keyword getOpExclamationMarkEqualsSignKeyword_1_1_0_1() { return cOpExclamationMarkEqualsSignKeyword_1_1_0_1; }
		
		//right=Comparison
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Comparison
		public RuleCall getRightComparisonParserRuleCall_1_2_0() { return cRightComparisonParserRuleCall_1_2_0; }
	}
	public class ComparisonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.parser.novel.cql.CQL.Comparison");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPlusOrMinusParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cComparisionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final Keyword cOpGreaterThanSignEqualsSignKeyword_1_1_0_0 = (Keyword)cOpAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOpLessThanSignEqualsSignKeyword_1_1_0_1 = (Keyword)cOpAlternatives_1_1_0.eContents().get(1);
		private final Keyword cOpLessThanSignKeyword_1_1_0_2 = (Keyword)cOpAlternatives_1_1_0.eContents().get(2);
		private final Keyword cOpGreaterThanSignKeyword_1_1_0_3 = (Keyword)cOpAlternatives_1_1_0.eContents().get(3);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightPlusOrMinusParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Comparison Expression:
		//	PlusOrMinus ({Comparision.left=current} op=('>=' | '<=' | '<' | '>') right=PlusOrMinus)*
		@Override public ParserRule getRule() { return rule; }
		
		//PlusOrMinus ({Comparision.left=current} op=('>=' | '<=' | '<' | '>') right=PlusOrMinus)*
		public Group getGroup() { return cGroup; }
		
		//PlusOrMinus
		public RuleCall getPlusOrMinusParserRuleCall_0() { return cPlusOrMinusParserRuleCall_0; }
		
		//({Comparision.left=current} op=('>=' | '<=' | '<' | '>') right=PlusOrMinus)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Comparision.left=current}
		public Action getComparisionLeftAction_1_0() { return cComparisionLeftAction_1_0; }
		
		//op=('>=' | '<=' | '<' | '>')
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//('>=' | '<=' | '<' | '>')
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }
		
		//'>='
		public Keyword getOpGreaterThanSignEqualsSignKeyword_1_1_0_0() { return cOpGreaterThanSignEqualsSignKeyword_1_1_0_0; }
		
		//'<='
		public Keyword getOpLessThanSignEqualsSignKeyword_1_1_0_1() { return cOpLessThanSignEqualsSignKeyword_1_1_0_1; }
		
		//'<'
		public Keyword getOpLessThanSignKeyword_1_1_0_2() { return cOpLessThanSignKeyword_1_1_0_2; }
		
		//'>'
		public Keyword getOpGreaterThanSignKeyword_1_1_0_3() { return cOpGreaterThanSignKeyword_1_1_0_3; }
		
		//right=PlusOrMinus
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//PlusOrMinus
		public RuleCall getRightPlusOrMinusParserRuleCall_1_2_0() { return cRightPlusOrMinusParserRuleCall_1_2_0; }
	}
	public class PlusOrMinusElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.parser.novel.cql.CQL.PlusOrMinus");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMulOrDivParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cPlusLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cPlusSignKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cMinusLeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_0_1_1 = (Keyword)cGroup_1_0_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightMulOrDivParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//PlusOrMinus Expression:
		//	MulOrDiv (({Plus.left=current} '+' | {Minus.left=current} '-') right=MulOrDiv)*
		@Override public ParserRule getRule() { return rule; }
		
		//MulOrDiv (({Plus.left=current} '+' | {Minus.left=current} '-') right=MulOrDiv)*
		public Group getGroup() { return cGroup; }
		
		//MulOrDiv
		public RuleCall getMulOrDivParserRuleCall_0() { return cMulOrDivParserRuleCall_0; }
		
		//(({Plus.left=current} '+' | {Minus.left=current} '-') right=MulOrDiv)*
		public Group getGroup_1() { return cGroup_1; }
		
		//({Plus.left=current} '+' | {Minus.left=current} '-')
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//{Plus.left=current} '+'
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{Plus.left=current}
		public Action getPlusLeftAction_1_0_0_0() { return cPlusLeftAction_1_0_0_0; }
		
		//'+'
		public Keyword getPlusSignKeyword_1_0_0_1() { return cPlusSignKeyword_1_0_0_1; }
		
		//{Minus.left=current} '-'
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }
		
		//{Minus.left=current}
		public Action getMinusLeftAction_1_0_1_0() { return cMinusLeftAction_1_0_1_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1_0_1_1() { return cHyphenMinusKeyword_1_0_1_1; }
		
		//right=MulOrDiv
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//MulOrDiv
		public RuleCall getRightMulOrDivParserRuleCall_1_1_0() { return cRightMulOrDivParserRuleCall_1_1_0; }
	}
	public class MulOrDivElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.parser.novel.cql.CQL.MulOrDiv");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimaryParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cMulOrDivLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final Keyword cOpAsteriskKeyword_1_1_0_0 = (Keyword)cOpAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOpSolidusKeyword_1_1_0_1 = (Keyword)cOpAlternatives_1_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightPrimaryParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//MulOrDiv Expression:
		//	Primary ({MulOrDiv.left=current} op=('*' | '/') right=Primary)*
		@Override public ParserRule getRule() { return rule; }
		
		//Primary ({MulOrDiv.left=current} op=('*' | '/') right=Primary)*
		public Group getGroup() { return cGroup; }
		
		//Primary
		public RuleCall getPrimaryParserRuleCall_0() { return cPrimaryParserRuleCall_0; }
		
		//({MulOrDiv.left=current} op=('*' | '/') right=Primary)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{MulOrDiv.left=current}
		public Action getMulOrDivLeftAction_1_0() { return cMulOrDivLeftAction_1_0; }
		
		//op=('*' | '/')
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//('*' | '/')
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }
		
		//'*'
		public Keyword getOpAsteriskKeyword_1_1_0_0() { return cOpAsteriskKeyword_1_1_0_0; }
		
		//'/'
		public Keyword getOpSolidusKeyword_1_1_0_1() { return cOpSolidusKeyword_1_1_0_1; }
		
		//right=Primary
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Primary
		public RuleCall getRightPrimaryParserRuleCall_1_2_0() { return cRightPrimaryParserRuleCall_1_2_0; }
	}
	public class PrimaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.parser.novel.cql.CQL.Primary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cBracketAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cInnerAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cInnerExpressionParserRuleCall_0_2_0 = (RuleCall)cInnerAssignment_0_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cNOTAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cNOTKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cExpressionAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cExpressionPrimaryParserRuleCall_1_2_0 = (RuleCall)cExpressionAssignment_1_2.eContents().get(0);
		private final RuleCall cAtomicParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Primary Expression:
		//	{Bracket} '(' inner=Expression ')' | {NOT} 'NOT' expression=Primary | Atomic
		@Override public ParserRule getRule() { return rule; }
		
		//{Bracket} '(' inner=Expression ')' | {NOT} 'NOT' expression=Primary | Atomic
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{Bracket} '(' inner=Expression ')'
		public Group getGroup_0() { return cGroup_0; }
		
		//{Bracket}
		public Action getBracketAction_0_0() { return cBracketAction_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_1() { return cLeftParenthesisKeyword_0_1; }
		
		//inner=Expression
		public Assignment getInnerAssignment_0_2() { return cInnerAssignment_0_2; }
		
		//Expression
		public RuleCall getInnerExpressionParserRuleCall_0_2_0() { return cInnerExpressionParserRuleCall_0_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_3() { return cRightParenthesisKeyword_0_3; }
		
		//{NOT} 'NOT' expression=Primary
		public Group getGroup_1() { return cGroup_1; }
		
		//{NOT}
		public Action getNOTAction_1_0() { return cNOTAction_1_0; }
		
		//'NOT'
		public Keyword getNOTKeyword_1_1() { return cNOTKeyword_1_1; }
		
		//expression=Primary
		public Assignment getExpressionAssignment_1_2() { return cExpressionAssignment_1_2; }
		
		//Primary
		public RuleCall getExpressionPrimaryParserRuleCall_1_2_0() { return cExpressionPrimaryParserRuleCall_1_2_0; }
		
		//Atomic
		public RuleCall getAtomicParserRuleCall_2() { return cAtomicParserRuleCall_2; }
	}
	public class AtomicElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.parser.novel.cql.CQL.Atomic");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cIntConstantAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cValueAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_0_1_0 = (RuleCall)cValueAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cFloatConstantAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValueFLOAT_NUMBERTerminalRuleCall_1_1_0 = (RuleCall)cValueAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cStringConstantAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cValueAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_2_1_0 = (RuleCall)cValueAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cBoolConstantAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Assignment cValueAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final Alternatives cValueAlternatives_3_1_0 = (Alternatives)cValueAssignment_3_1.eContents().get(0);
		private final Keyword cValueTRUEKeyword_3_1_0_0 = (Keyword)cValueAlternatives_3_1_0.eContents().get(0);
		private final Keyword cValueFALSEKeyword_3_1_0_1 = (Keyword)cValueAlternatives_3_1_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cAttributeRefAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Alternatives cAlternatives_4_1 = (Alternatives)cGroup_4.eContents().get(1);
		private final Assignment cValueAssignment_4_1_0 = (Assignment)cAlternatives_4_1.eContents().get(0);
		private final RuleCall cValueAttributeWithoutAliasParserRuleCall_4_1_0_0 = (RuleCall)cValueAssignment_4_1_0.eContents().get(0);
		private final Assignment cValueAssignment_4_1_1 = (Assignment)cAlternatives_4_1.eContents().get(1);
		private final RuleCall cValueAttributeWithNestedStatementParserRuleCall_4_1_1_0 = (RuleCall)cValueAssignment_4_1_1.eContents().get(0);
		
		//Atomic Expression:
		//	{IntConstant} value=INT | {FloatConstant} value=FLOAT_NUMBER | {StringConstant} value=STRING | {BoolConstant}
		//	value=('TRUE' | 'FALSE') | {AttributeRef} (value=AttributeWithoutAlias | value=AttributeWithNestedStatement)
		@Override public ParserRule getRule() { return rule; }
		
		//{IntConstant} value=INT | {FloatConstant} value=FLOAT_NUMBER | {StringConstant} value=STRING | {BoolConstant}
		//value=('TRUE' | 'FALSE') | {AttributeRef} (value=AttributeWithoutAlias | value=AttributeWithNestedStatement)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{IntConstant} value=INT
		public Group getGroup_0() { return cGroup_0; }
		
		//{IntConstant}
		public Action getIntConstantAction_0_0() { return cIntConstantAction_0_0; }
		
		//value=INT
		public Assignment getValueAssignment_0_1() { return cValueAssignment_0_1; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_0_1_0() { return cValueINTTerminalRuleCall_0_1_0; }
		
		//{FloatConstant} value=FLOAT_NUMBER
		public Group getGroup_1() { return cGroup_1; }
		
		//{FloatConstant}
		public Action getFloatConstantAction_1_0() { return cFloatConstantAction_1_0; }
		
		//value=FLOAT_NUMBER
		public Assignment getValueAssignment_1_1() { return cValueAssignment_1_1; }
		
		//FLOAT_NUMBER
		public RuleCall getValueFLOAT_NUMBERTerminalRuleCall_1_1_0() { return cValueFLOAT_NUMBERTerminalRuleCall_1_1_0; }
		
		//{StringConstant} value=STRING
		public Group getGroup_2() { return cGroup_2; }
		
		//{StringConstant}
		public Action getStringConstantAction_2_0() { return cStringConstantAction_2_0; }
		
		//value=STRING
		public Assignment getValueAssignment_2_1() { return cValueAssignment_2_1; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_2_1_0() { return cValueSTRINGTerminalRuleCall_2_1_0; }
		
		//{BoolConstant} value=('TRUE' | 'FALSE')
		public Group getGroup_3() { return cGroup_3; }
		
		//{BoolConstant}
		public Action getBoolConstantAction_3_0() { return cBoolConstantAction_3_0; }
		
		//value=('TRUE' | 'FALSE')
		public Assignment getValueAssignment_3_1() { return cValueAssignment_3_1; }
		
		//('TRUE' | 'FALSE')
		public Alternatives getValueAlternatives_3_1_0() { return cValueAlternatives_3_1_0; }
		
		//'TRUE'
		public Keyword getValueTRUEKeyword_3_1_0_0() { return cValueTRUEKeyword_3_1_0_0; }
		
		//'FALSE'
		public Keyword getValueFALSEKeyword_3_1_0_1() { return cValueFALSEKeyword_3_1_0_1; }
		
		//{AttributeRef} (value=AttributeWithoutAlias | value=AttributeWithNestedStatement)
		public Group getGroup_4() { return cGroup_4; }
		
		//{AttributeRef}
		public Action getAttributeRefAction_4_0() { return cAttributeRefAction_4_0; }
		
		//(value=AttributeWithoutAlias | value=AttributeWithNestedStatement)
		public Alternatives getAlternatives_4_1() { return cAlternatives_4_1; }
		
		//value=AttributeWithoutAlias
		public Assignment getValueAssignment_4_1_0() { return cValueAssignment_4_1_0; }
		
		//AttributeWithoutAlias
		public RuleCall getValueAttributeWithoutAliasParserRuleCall_4_1_0_0() { return cValueAttributeWithoutAliasParserRuleCall_4_1_0_0; }
		
		//value=AttributeWithNestedStatement
		public Assignment getValueAssignment_4_1_1() { return cValueAssignment_4_1_1; }
		
		//AttributeWithNestedStatement
		public RuleCall getValueAttributeWithNestedStatementParserRuleCall_4_1_1_0() { return cValueAttributeWithNestedStatementParserRuleCall_4_1_1_0; }
	}
	public class DataTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.parser.novel.cql.CQL.DataType");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cValueAlternatives_0 = (Alternatives)cValueAssignment.eContents().get(0);
		private final Keyword cValueINTEGERKeyword_0_0 = (Keyword)cValueAlternatives_0.eContents().get(0);
		private final Keyword cValueDOUBLEKeyword_0_1 = (Keyword)cValueAlternatives_0.eContents().get(1);
		private final Keyword cValueFLOATKeyword_0_2 = (Keyword)cValueAlternatives_0.eContents().get(2);
		private final Keyword cValueSTRINGKeyword_0_3 = (Keyword)cValueAlternatives_0.eContents().get(3);
		private final Keyword cValueBOOLEANKeyword_0_4 = (Keyword)cValueAlternatives_0.eContents().get(4);
		private final Keyword cValueSTARTTIMESTAMPKeyword_0_5 = (Keyword)cValueAlternatives_0.eContents().get(5);
		private final Keyword cValueENDTIMESTAMPKeyword_0_6 = (Keyword)cValueAlternatives_0.eContents().get(6);
		
		////TODO have to dynamic -> use scope provider
		//DataType:
		//	value=('INTEGER' | 'DOUBLE' | 'FLOAT' | 'STRING' | 'BOOLEAN'
		//	| 'STARTTIMESTAMP' | 'ENDTIMESTAMP');
		@Override public ParserRule getRule() { return rule; }
		
		//value=('INTEGER' | 'DOUBLE' | 'FLOAT' | 'STRING' | 'BOOLEAN' | 'STARTTIMESTAMP' | 'ENDTIMESTAMP')
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//('INTEGER' | 'DOUBLE' | 'FLOAT' | 'STRING' | 'BOOLEAN' | 'STARTTIMESTAMP' | 'ENDTIMESTAMP')
		public Alternatives getValueAlternatives_0() { return cValueAlternatives_0; }
		
		//'INTEGER'
		public Keyword getValueINTEGERKeyword_0_0() { return cValueINTEGERKeyword_0_0; }
		
		//'DOUBLE'
		public Keyword getValueDOUBLEKeyword_0_1() { return cValueDOUBLEKeyword_0_1; }
		
		//'FLOAT'
		public Keyword getValueFLOATKeyword_0_2() { return cValueFLOATKeyword_0_2; }
		
		//'STRING'
		public Keyword getValueSTRINGKeyword_0_3() { return cValueSTRINGKeyword_0_3; }
		
		//'BOOLEAN'
		public Keyword getValueBOOLEANKeyword_0_4() { return cValueBOOLEANKeyword_0_4; }
		
		//'STARTTIMESTAMP'
		public Keyword getValueSTARTTIMESTAMPKeyword_0_5() { return cValueSTARTTIMESTAMPKeyword_0_5; }
		
		//'ENDTIMESTAMP'
		public Keyword getValueENDTIMESTAMPKeyword_0_6() { return cValueENDTIMESTAMPKeyword_0_6; }
	}
	
	
	private final ModelElements pModel;
	private final StatementElements pStatement;
	private final SelectElements pSelect;
	private final NestedStatementElements pNestedStatement;
	private final SourceElements pSource;
	private final AttributeElements pAttribute;
	private final AttributeWithoutAliasElements pAttributeWithoutAlias;
	private final AttributeWithNestedStatementElements pAttributeWithNestedStatement;
	private final AggregationElements pAggregation;
	private final AliasElements pAlias;
	private final CreateElements pCreate;
	private final AccessFrameworkElements pAccessFramework;
	private final ChannelFormatElements pChannelFormat;
	private final ChannelFormatStreamElements pChannelFormatStream;
	private final ChannelFormatViewElements pChannelFormatView;
	private final StreamToElements pStreamTo;
	private final CommandElements pCommand;
	private final DropElements pDrop;
	private final Window_UnboundedElements pWindow_Unbounded;
	private final Window_TimebasedElements pWindow_Timebased;
	private final Window_TuplebasedElements pWindow_Tuplebased;
	private final TerminalRule tFLOAT_NUMBER;
	private final ExpressionsModelElements pExpressionsModel;
	private final ExpressionElements pExpression;
	private final OrElements pOr;
	private final AndElements pAnd;
	private final EqualitiyElements pEqualitiy;
	private final ComparisonElements pComparison;
	private final PlusOrMinusElements pPlusOrMinus;
	private final MulOrDivElements pMulOrDiv;
	private final PrimaryElements pPrimary;
	private final AtomicElements pAtomic;
	private final DataTypeElements pDataType;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public CQLGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pStatement = new StatementElements();
		this.pSelect = new SelectElements();
		this.pNestedStatement = new NestedStatementElements();
		this.pSource = new SourceElements();
		this.pAttribute = new AttributeElements();
		this.pAttributeWithoutAlias = new AttributeWithoutAliasElements();
		this.pAttributeWithNestedStatement = new AttributeWithNestedStatementElements();
		this.pAggregation = new AggregationElements();
		this.pAlias = new AliasElements();
		this.pCreate = new CreateElements();
		this.pAccessFramework = new AccessFrameworkElements();
		this.pChannelFormat = new ChannelFormatElements();
		this.pChannelFormatStream = new ChannelFormatStreamElements();
		this.pChannelFormatView = new ChannelFormatViewElements();
		this.pStreamTo = new StreamToElements();
		this.pCommand = new CommandElements();
		this.pDrop = new DropElements();
		this.pWindow_Unbounded = new Window_UnboundedElements();
		this.pWindow_Timebased = new Window_TimebasedElements();
		this.pWindow_Tuplebased = new Window_TuplebasedElements();
		this.tFLOAT_NUMBER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.parser.novel.cql.CQL.FLOAT_NUMBER");
		this.pExpressionsModel = new ExpressionsModelElements();
		this.pExpression = new ExpressionElements();
		this.pOr = new OrElements();
		this.pAnd = new AndElements();
		this.pEqualitiy = new EqualitiyElements();
		this.pComparison = new ComparisonElements();
		this.pPlusOrMinus = new PlusOrMinusElements();
		this.pMulOrDiv = new MulOrDivElements();
		this.pPrimary = new PrimaryElements();
		this.pAtomic = new AtomicElements();
		this.pDataType = new DataTypeElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("de.uniol.inf.is.odysseus.parser.novel.cql.CQL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	statements+=Statement*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Statement:
	//	(type=Select | type=Create | type=StreamTo | type=Drop) ';'?;
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}
	
	//Select:
	//	name='SELECT'
	//	distinct='DISTINCT'? ('*' | (attributes+=Attribute | aggregations+=Aggregation)+
	//	& (',' attributes+=Attribute)*
	//	& (',' aggregations+=Aggregation)*) ('FROM' sources+=Source+ (',' sources+=Source)*) ('WHERE'
	//	predicates=ExpressionsModel)? ('GROUP' 'BY' order+=Attribute+ (',' order+=Attribute)*)? ('HAVING'
	//	having=ExpressionsModel)?;
	public SelectElements getSelectAccess() {
		return pSelect;
	}
	
	public ParserRule getSelectRule() {
		return getSelectAccess().getRule();
	}
	
	//NestedStatement Select:
	//	'(' Select ')'
	public NestedStatementElements getNestedStatementAccess() {
		return pNestedStatement;
	}
	
	public ParserRule getNestedStatementRule() {
		return getNestedStatementAccess().getRule();
	}
	
	//Source:
	//	(name=ID ('[' (unbounded=Window_Unbounded | time=Window_Timebased | tuple=Window_Tuplebased)
	//	']')?
	//	| nested=NestedStatement) ('AS' alias=Alias)?;
	public SourceElements getSourceAccess() {
		return pSource;
	}
	
	public ParserRule getSourceRule() {
		return getSourceAccess().getRule();
	}
	
	//Attribute:
	//	name=ID ('AS' alias=Alias)?;
	public AttributeElements getAttributeAccess() {
		return pAttribute;
	}
	
	public ParserRule getAttributeRule() {
		return getAttributeAccess().getRule();
	}
	
	//AttributeWithoutAlias Attribute:
	//	name=ID
	public AttributeWithoutAliasElements getAttributeWithoutAliasAccess() {
		return pAttributeWithoutAlias;
	}
	
	public ParserRule getAttributeWithoutAliasRule() {
		return getAttributeWithoutAliasAccess().getRule();
	}
	
	//AttributeWithNestedStatement:
	//	value=AttributeWithoutAlias
	//	'IN'
	//	nested=NestedStatement;
	public AttributeWithNestedStatementElements getAttributeWithNestedStatementAccess() {
		return pAttributeWithNestedStatement;
	}
	
	public ParserRule getAttributeWithNestedStatementRule() {
		return getAttributeWithNestedStatementAccess().getRule();
	}
	
	//Aggregation:
	//	name=ID
	//	'(' attribute=AttributeWithoutAlias ')' ('AS' alias=Alias)?;
	public AggregationElements getAggregationAccess() {
		return pAggregation;
	}
	
	public ParserRule getAggregationRule() {
		return getAggregationAccess().getRule();
	}
	
	//Alias:
	//	name=ID;
	public AliasElements getAliasAccess() {
		return pAlias;
	}
	
	public ParserRule getAliasRule() {
		return getAliasAccess().getRule();
	}
	
	////SelectWithoutWhere returns Select:
	////	name='SELECT'
	////	(distinct='DISTINCT')?
	////	( '*' |
	////		( 
	////			(attributes+=Attribute | aggregations+=Aggregation)+  
	////			& (',' attributes+=Attribute)* 
	////			& (',' aggregations+=Aggregation)*
	////		)
	////	)
	////	('FROM' sources+=Source+ (',' sources+=Source)*)
	////	'GROUP' 'BY' order+=Attribute+ (',' order+=Attribute) //ordering+=Attribute+ ('ASC' | 'DESC')?)?
	////	'HAVING' having=ExpressionsModel
	////;
	////
	////SelectWithoutWhere returns Select:
	////	name='SELECT'
	////	(distinct='DISTINCT')?
	////	( '*' |
	////		( 
	////			(attributes+=Attribute | aggregations+=Aggregation)+  
	////			& (',' attributes+=Attribute)* 
	////			& (',' aggregations+=Aggregation)*
	////		)
	////	)
	////	('FROM' sources+=Source+ (',' sources+=Source)*)
	////	'GROUP' 'BY' order+=Attribute+ (',' order+=Attribute) //ordering+=Attribute+ ('ASC' | 'DESC')?)?
	////	'HAVING' having=ExpressionsModel
	////;
	////
	////SelectWithoutGroupBy returns Select:
	////	name='SELECT'
	////	(distinct='DISTINCT')?
	////	( '*' |
	////		( 
	////			(attributes+=Attribute | aggregations+=Aggregation)+  
	////			& (',' attributes+=Attribute)* 
	////			& (',' aggregations+=Aggregation)*
	////		)
	////	)
	////	('FROM' sources+=Source+ (',' sources+=Source)*)
	////	'WHERE' predicates=ExpressionsModel
	////;
	////
	////SelectWithoutWhereAndGroupBy returns Select:
	////	name='SELECT'
	////	(distinct='DISTINCT')?
	////	( '*' |
	////		( 
	////			(attributes+=Attribute | aggregations+=Aggregation)+  
	////			& (',' attributes+=Attribute)* 
	////			& (',' aggregations+=Aggregation)*
	////		)
	////	)
	////	('FROM' sources+=Source+ (',' sources+=Source)*)
	////;
	////Order:
	////	attribute=Attribute
	////	direction=('ASC'|'DESC')
	////;
	//Create:
	//	name=('CREATE' | 'ATTACH') (channelformat=ChannelFormat | accessframework=AccessFramework);
	public CreateElements getCreateAccess() {
		return pCreate;
	}
	
	public ParserRule getCreateRule() {
		return getCreateAccess().getRule();
	}
	
	//AccessFramework:
	//	type=('STREAM' | 'SINK') name=ID
	//	'('
	//	attributes+=Attribute+
	//	datatypes+=DataType+ (',' attributes+=Attribute datatypes+=DataType)*
	//	')'
	//	'WRAPPER' wrapper=STRING
	//	'PROTOCOL' protocol=STRING
	//	'TRANSPORT' transport=STRING
	//	'DATAHANDLER' datahandler=STRING
	//	'OPTIONS'
	//	'(' (keys+=STRING values+=STRING)+ (',' keys+=STRING values+=STRING)?
	//	')';
	public AccessFrameworkElements getAccessFrameworkAccess() {
		return pAccessFramework;
	}
	
	public ParserRule getAccessFrameworkRule() {
		return getAccessFrameworkAccess().getRule();
	}
	
	//ChannelFormat:
	//	stream=ChannelFormatStream | view=ChannelFormatView;
	public ChannelFormatElements getChannelFormatAccess() {
		return pChannelFormat;
	}
	
	public ParserRule getChannelFormatRule() {
		return getChannelFormatAccess().getRule();
	}
	
	//ChannelFormatStream:
	//	'STREAM'
	//	name=ID
	//	'('
	//	attributes+=Attribute+
	//	datatypes+=DataType+ (',' attributes+=Attribute datatypes+=DataType)*
	//	')'
	//	'CHANNEL' //TODO Add FILE as possible parameter --> and even more ..
	//	host=ID
	//	':'
	//	port=INT;
	public ChannelFormatStreamElements getChannelFormatStreamAccess() {
		return pChannelFormatStream;
	}
	
	public ParserRule getChannelFormatStreamRule() {
		return getChannelFormatStreamAccess().getRule();
	}
	
	//ChannelFormatView:
	//	'VIEW'
	//	name=ID
	//	'FROM'
	//	'('
	//	select=Select ';'?
	//	')';
	public ChannelFormatViewElements getChannelFormatViewAccess() {
		return pChannelFormatView;
	}
	
	public ParserRule getChannelFormatViewRule() {
		return getChannelFormatViewAccess().getRule();
	}
	
	//StreamTo:
	//	'STREAM' 'TO'
	//	name=ID (statement=Select | inputname=ID);
	public StreamToElements getStreamToAccess() {
		return pStreamTo;
	}
	
	public ParserRule getStreamToRule() {
		return getStreamToAccess().getRule();
	}
	
	//// build generic rule for those commands
	//Command:
	//	keyword1=ID
	//	keyword2=ID
	//	value1=ID
	//	keyword3=ID
	//	value2=ID;
	public CommandElements getCommandAccess() {
		return pCommand;
	}
	
	public ParserRule getCommandRule() {
		return getCommandAccess().getRule();
	}
	
	//Drop Command:
	//	keyword1='DROP'
	//	keyword2=('SINK' | 'STREAM') value1=ID
	//	keyword3='IF EXISTS'?
	//	value2=ID
	public DropElements getDropAccess() {
		return pDrop;
	}
	
	public ParserRule getDropRule() {
		return getDropAccess().getRule();
	}
	
	//Window_Unbounded:
	//	'UNBOUNDED';
	public Window_UnboundedElements getWindow_UnboundedAccess() {
		return pWindow_Unbounded;
	}
	
	public ParserRule getWindow_UnboundedRule() {
		return getWindow_UnboundedAccess().getRule();
	}
	
	//Window_Timebased:
	//	'SIZE' size=INT unit=ID ('ADVANCE' advance_size=INT advance_unit=ID)?
	//	'TIME';
	public Window_TimebasedElements getWindow_TimebasedAccess() {
		return pWindow_Timebased;
	}
	
	public ParserRule getWindow_TimebasedRule() {
		return getWindow_TimebasedAccess().getRule();
	}
	
	//Window_Tuplebased: //TODO PARTITION BY only if a GROUP BY clause exists
	//	'SIZE' size=INT ('ADVANCE' advance_size=INT)? 'TUPLE' ('PARTITION' 'BY' partition_attribute=Attribute)?;
	public Window_TuplebasedElements getWindow_TuplebasedAccess() {
		return pWindow_Tuplebased;
	}
	
	public ParserRule getWindow_TuplebasedRule() {
		return getWindow_TuplebasedAccess().getRule();
	}
	
	//terminal FLOAT_NUMBER:
	//	INT '.' INT;
	public TerminalRule getFLOAT_NUMBERRule() {
		return tFLOAT_NUMBER;
	}
	
	//ExpressionsModel:
	//	{ExpressionsModel} elements+=Expression;
	public ExpressionsModelElements getExpressionsModelAccess() {
		return pExpressionsModel;
	}
	
	public ParserRule getExpressionsModelRule() {
		return getExpressionsModelAccess().getRule();
	}
	
	//Expression:
	//	Or;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//Or Expression:
	//	And ({Or.left=current} 'OR' right=And)*
	public OrElements getOrAccess() {
		return pOr;
	}
	
	public ParserRule getOrRule() {
		return getOrAccess().getRule();
	}
	
	//And Expression:
	//	Equalitiy ({And.left=current} 'AND' right=Equalitiy)*
	public AndElements getAndAccess() {
		return pAnd;
	}
	
	public ParserRule getAndRule() {
		return getAndAccess().getRule();
	}
	
	//Equalitiy Expression:
	//	Comparison ({Equality.left=current} op=('==' | '!=') right=Comparison)*
	public EqualitiyElements getEqualitiyAccess() {
		return pEqualitiy;
	}
	
	public ParserRule getEqualitiyRule() {
		return getEqualitiyAccess().getRule();
	}
	
	//Comparison Expression:
	//	PlusOrMinus ({Comparision.left=current} op=('>=' | '<=' | '<' | '>') right=PlusOrMinus)*
	public ComparisonElements getComparisonAccess() {
		return pComparison;
	}
	
	public ParserRule getComparisonRule() {
		return getComparisonAccess().getRule();
	}
	
	//PlusOrMinus Expression:
	//	MulOrDiv (({Plus.left=current} '+' | {Minus.left=current} '-') right=MulOrDiv)*
	public PlusOrMinusElements getPlusOrMinusAccess() {
		return pPlusOrMinus;
	}
	
	public ParserRule getPlusOrMinusRule() {
		return getPlusOrMinusAccess().getRule();
	}
	
	//MulOrDiv Expression:
	//	Primary ({MulOrDiv.left=current} op=('*' | '/') right=Primary)*
	public MulOrDivElements getMulOrDivAccess() {
		return pMulOrDiv;
	}
	
	public ParserRule getMulOrDivRule() {
		return getMulOrDivAccess().getRule();
	}
	
	//Primary Expression:
	//	{Bracket} '(' inner=Expression ')' | {NOT} 'NOT' expression=Primary | Atomic
	public PrimaryElements getPrimaryAccess() {
		return pPrimary;
	}
	
	public ParserRule getPrimaryRule() {
		return getPrimaryAccess().getRule();
	}
	
	//Atomic Expression:
	//	{IntConstant} value=INT | {FloatConstant} value=FLOAT_NUMBER | {StringConstant} value=STRING | {BoolConstant}
	//	value=('TRUE' | 'FALSE') | {AttributeRef} (value=AttributeWithoutAlias | value=AttributeWithNestedStatement)
	public AtomicElements getAtomicAccess() {
		return pAtomic;
	}
	
	public ParserRule getAtomicRule() {
		return getAtomicAccess().getRule();
	}
	
	////TODO have to dynamic -> use scope provider
	//DataType:
	//	value=('INTEGER' | 'DOUBLE' | 'FLOAT' | 'STRING' | 'BOOLEAN'
	//	| 'STARTTIMESTAMP' | 'ENDTIMESTAMP');
	public DataTypeElements getDataTypeAccess() {
		return pDataType;
	}
	
	public ParserRule getDataTypeRule() {
		return getDataTypeAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
