/*
 * generated by Xtext 2.10.0
 */
package de.uniol.inf.is.odysseus.parser.novel.cql.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class CQLGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.parser.novel.cql.CQL.Model");
		private final Assignment cStatementsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cStatementsStatementParserRuleCall_0 = (RuleCall)cStatementsAssignment.eContents().get(0);
		
		//Model:
		//	statements+=Statement*;
		@Override public ParserRule getRule() { return rule; }
		
		//statements+=Statement*
		public Assignment getStatementsAssignment() { return cStatementsAssignment; }
		
		//Statement
		public RuleCall getStatementsStatementParserRuleCall_0() { return cStatementsStatementParserRuleCall_0; }
	}
	public class IDOrINTElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.parser.novel.cql.CQL.IDOrINT");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//IDOrINT:
		//	ID | INT;
		@Override public ParserRule getRule() { return rule; }
		
		//ID | INT
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}
	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.parser.novel.cql.CQL.Statement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final RuleCall cTypeSelectParserRuleCall_0_0_0 = (RuleCall)cTypeAssignment_0_0.eContents().get(0);
		private final Assignment cTypeAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final RuleCall cTypeStreamToParserRuleCall_0_1_0 = (RuleCall)cTypeAssignment_0_1.eContents().get(0);
		private final Assignment cTypeAssignment_0_2 = (Assignment)cAlternatives_0.eContents().get(2);
		private final RuleCall cTypeDropParserRuleCall_0_2_0 = (RuleCall)cTypeAssignment_0_2.eContents().get(0);
		private final Assignment cTypeAssignment_0_3 = (Assignment)cAlternatives_0.eContents().get(3);
		private final RuleCall cTypeCreateStream1ParserRuleCall_0_3_0 = (RuleCall)cTypeAssignment_0_3.eContents().get(0);
		private final Assignment cTypeAssignment_0_4 = (Assignment)cAlternatives_0.eContents().get(4);
		private final RuleCall cTypeCreateSink1ParserRuleCall_0_4_0 = (RuleCall)cTypeAssignment_0_4.eContents().get(0);
		private final Assignment cTypeAssignment_0_5 = (Assignment)cAlternatives_0.eContents().get(5);
		private final RuleCall cTypeCreateStreamChannelParserRuleCall_0_5_0 = (RuleCall)cTypeAssignment_0_5.eContents().get(0);
		private final Assignment cTypeAssignment_0_6 = (Assignment)cAlternatives_0.eContents().get(6);
		private final RuleCall cTypeCreateStreamFileParserRuleCall_0_6_0 = (RuleCall)cTypeAssignment_0_6.eContents().get(0);
		private final Assignment cTypeAssignment_0_7 = (Assignment)cAlternatives_0.eContents().get(7);
		private final RuleCall cTypeCreateViewParserRuleCall_0_7_0 = (RuleCall)cTypeAssignment_0_7.eContents().get(0);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Statement:
		//	(type=Select | type=StreamTo | type=Drop | type=CreateStream1 | type=CreateSink1 | type=CreateStreamChannel |
		//	type=CreateStreamFile | type=CreateView) ';'?;
		@Override public ParserRule getRule() { return rule; }
		
		//(type=Select | type=StreamTo | type=Drop | type=CreateStream1 | type=CreateSink1 | type=CreateStreamChannel |
		//type=CreateStreamFile | type=CreateView) ';'?
		public Group getGroup() { return cGroup; }
		
		//(type=Select | type=StreamTo | type=Drop | type=CreateStream1 | type=CreateSink1 | type=CreateStreamChannel |
		//type=CreateStreamFile | type=CreateView)
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//type=Select
		public Assignment getTypeAssignment_0_0() { return cTypeAssignment_0_0; }
		
		//Select
		public RuleCall getTypeSelectParserRuleCall_0_0_0() { return cTypeSelectParserRuleCall_0_0_0; }
		
		//type=StreamTo
		public Assignment getTypeAssignment_0_1() { return cTypeAssignment_0_1; }
		
		//StreamTo
		public RuleCall getTypeStreamToParserRuleCall_0_1_0() { return cTypeStreamToParserRuleCall_0_1_0; }
		
		//type=Drop
		public Assignment getTypeAssignment_0_2() { return cTypeAssignment_0_2; }
		
		//Drop
		public RuleCall getTypeDropParserRuleCall_0_2_0() { return cTypeDropParserRuleCall_0_2_0; }
		
		//type=CreateStream1
		public Assignment getTypeAssignment_0_3() { return cTypeAssignment_0_3; }
		
		//CreateStream1
		public RuleCall getTypeCreateStream1ParserRuleCall_0_3_0() { return cTypeCreateStream1ParserRuleCall_0_3_0; }
		
		//type=CreateSink1
		public Assignment getTypeAssignment_0_4() { return cTypeAssignment_0_4; }
		
		//CreateSink1
		public RuleCall getTypeCreateSink1ParserRuleCall_0_4_0() { return cTypeCreateSink1ParserRuleCall_0_4_0; }
		
		//type=CreateStreamChannel
		public Assignment getTypeAssignment_0_5() { return cTypeAssignment_0_5; }
		
		//CreateStreamChannel
		public RuleCall getTypeCreateStreamChannelParserRuleCall_0_5_0() { return cTypeCreateStreamChannelParserRuleCall_0_5_0; }
		
		//type=CreateStreamFile
		public Assignment getTypeAssignment_0_6() { return cTypeAssignment_0_6; }
		
		//CreateStreamFile
		public RuleCall getTypeCreateStreamFileParserRuleCall_0_6_0() { return cTypeCreateStreamFileParserRuleCall_0_6_0; }
		
		//type=CreateView
		public Assignment getTypeAssignment_0_7() { return cTypeAssignment_0_7; }
		
		//CreateView
		public RuleCall getTypeCreateViewParserRuleCall_0_7_0() { return cTypeCreateViewParserRuleCall_0_7_0; }
		
		//';'?
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}
	public class SelectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.parser.novel.cql.CQL.Select");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameSELECTKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Assignment cDistinctAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cDistinctDISTINCTKeyword_1_0 = (Keyword)cDistinctAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Keyword cAsteriskKeyword_2_0 = (Keyword)cAlternatives_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Alternatives cAlternatives_2_1_0 = (Alternatives)cGroup_2_1.eContents().get(0);
		private final Assignment cAttributesAssignment_2_1_0_0 = (Assignment)cAlternatives_2_1_0.eContents().get(0);
		private final RuleCall cAttributesAttributeParserRuleCall_2_1_0_0_0 = (RuleCall)cAttributesAssignment_2_1_0_0.eContents().get(0);
		private final Assignment cAggregationsAssignment_2_1_0_1 = (Assignment)cAlternatives_2_1_0.eContents().get(1);
		private final RuleCall cAggregationsAggregationParserRuleCall_2_1_0_1_0 = (RuleCall)cAggregationsAssignment_2_1_0_1.eContents().get(0);
		private final Assignment cExpressionsAssignment_2_1_0_2 = (Assignment)cAlternatives_2_1_0.eContents().get(2);
		private final RuleCall cExpressionsSelectExpressionParserRuleCall_2_1_0_2_0 = (RuleCall)cExpressionsAssignment_2_1_0_2.eContents().get(0);
		private final Alternatives cAlternatives_2_1_1 = (Alternatives)cGroup_2_1.eContents().get(1);
		private final Group cGroup_2_1_1_0 = (Group)cAlternatives_2_1_1.eContents().get(0);
		private final Keyword cCommaKeyword_2_1_1_0_0 = (Keyword)cGroup_2_1_1_0.eContents().get(0);
		private final Assignment cAttributesAssignment_2_1_1_0_1 = (Assignment)cGroup_2_1_1_0.eContents().get(1);
		private final RuleCall cAttributesAttributeParserRuleCall_2_1_1_0_1_0 = (RuleCall)cAttributesAssignment_2_1_1_0_1.eContents().get(0);
		private final Group cGroup_2_1_1_1 = (Group)cAlternatives_2_1_1.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_1_1_0 = (Keyword)cGroup_2_1_1_1.eContents().get(0);
		private final Assignment cAggregationsAssignment_2_1_1_1_1 = (Assignment)cGroup_2_1_1_1.eContents().get(1);
		private final RuleCall cAggregationsAggregationParserRuleCall_2_1_1_1_1_0 = (RuleCall)cAggregationsAssignment_2_1_1_1_1.eContents().get(0);
		private final Group cGroup_2_1_1_2 = (Group)cAlternatives_2_1_1.eContents().get(2);
		private final Keyword cCommaKeyword_2_1_1_2_0 = (Keyword)cGroup_2_1_1_2.eContents().get(0);
		private final Assignment cExpressionsAssignment_2_1_1_2_1 = (Assignment)cGroup_2_1_1_2.eContents().get(1);
		private final RuleCall cExpressionsSelectExpressionParserRuleCall_2_1_1_2_1_0 = (RuleCall)cExpressionsAssignment_2_1_1_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cFROMKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cSourcesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cSourcesSourceParserRuleCall_3_1_0 = (RuleCall)cSourcesAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cCommaKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cSourcesAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cSourcesSourceParserRuleCall_3_2_1_0 = (RuleCall)cSourcesAssignment_3_2_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cWHEREKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cPredicatesAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cPredicatesExpressionsModelParserRuleCall_4_1_0 = (RuleCall)cPredicatesAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cGROUPKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cBYKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cOrderAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cOrderAttributeParserRuleCall_5_2_0 = (RuleCall)cOrderAssignment_5_2.eContents().get(0);
		private final Group cGroup_5_3 = (Group)cGroup_5.eContents().get(3);
		private final Keyword cCommaKeyword_5_3_0 = (Keyword)cGroup_5_3.eContents().get(0);
		private final Assignment cOrderAssignment_5_3_1 = (Assignment)cGroup_5_3.eContents().get(1);
		private final RuleCall cOrderAttributeParserRuleCall_5_3_1_0 = (RuleCall)cOrderAssignment_5_3_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cHAVINGKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cHavingAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cHavingExpressionsModelParserRuleCall_6_1_0 = (RuleCall)cHavingAssignment_6_1.eContents().get(0);
		
		//Select:
		//	name='SELECT'
		//	distinct='DISTINCT'? ('*' | (attributes+=Attribute
		//	| aggregations+=Aggregation
		//	| expressions+=SelectExpression
		//	//				| mappers+=Mapper
		//)+ (',' attributes+=Attribute | ',' aggregations+=Aggregation | ',' expressions+=SelectExpression)*) ('FROM'
		//	sources+=Source+ (',' sources+=Source)*) ('WHERE' predicates=ExpressionsModel)? ('GROUP' 'BY' order+=Attribute+ (','
		//	order+=Attribute)*)? ('HAVING' having=ExpressionsModel)?;
		@Override public ParserRule getRule() { return rule; }
		
		//name='SELECT' distinct='DISTINCT'? ('*' | (attributes+=Attribute | aggregations+=Aggregation |
		//expressions+=SelectExpression //				| mappers+=Mapper
		//)+ (',' attributes+=Attribute | ',' aggregations+=Aggregation | ',' expressions+=SelectExpression)*) ('FROM'
		//sources+=Source+ (',' sources+=Source)*) ('WHERE' predicates=ExpressionsModel)? ('GROUP' 'BY' order+=Attribute+ (','
		//order+=Attribute)*)? ('HAVING' having=ExpressionsModel)?
		public Group getGroup() { return cGroup; }
		
		//name='SELECT'
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//'SELECT'
		public Keyword getNameSELECTKeyword_0_0() { return cNameSELECTKeyword_0_0; }
		
		//distinct='DISTINCT'?
		public Assignment getDistinctAssignment_1() { return cDistinctAssignment_1; }
		
		//'DISTINCT'
		public Keyword getDistinctDISTINCTKeyword_1_0() { return cDistinctDISTINCTKeyword_1_0; }
		
		//('*' | (attributes+=Attribute | aggregations+=Aggregation | expressions+=SelectExpression //				| mappers+=Mapper
		//)+ (',' attributes+=Attribute | ',' aggregations+=Aggregation | ',' expressions+=SelectExpression)*)
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//'*'
		public Keyword getAsteriskKeyword_2_0() { return cAsteriskKeyword_2_0; }
		
		//(attributes+=Attribute | aggregations+=Aggregation | expressions+=SelectExpression //				| mappers+=Mapper
		//)+ (',' attributes+=Attribute | ',' aggregations+=Aggregation | ',' expressions+=SelectExpression)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//(attributes+=Attribute | aggregations+=Aggregation | expressions+=SelectExpression //				| mappers+=Mapper
		//)+
		public Alternatives getAlternatives_2_1_0() { return cAlternatives_2_1_0; }
		
		//attributes+=Attribute
		public Assignment getAttributesAssignment_2_1_0_0() { return cAttributesAssignment_2_1_0_0; }
		
		//Attribute
		public RuleCall getAttributesAttributeParserRuleCall_2_1_0_0_0() { return cAttributesAttributeParserRuleCall_2_1_0_0_0; }
		
		//aggregations+=Aggregation
		public Assignment getAggregationsAssignment_2_1_0_1() { return cAggregationsAssignment_2_1_0_1; }
		
		//Aggregation
		public RuleCall getAggregationsAggregationParserRuleCall_2_1_0_1_0() { return cAggregationsAggregationParserRuleCall_2_1_0_1_0; }
		
		//expressions+=SelectExpression
		public Assignment getExpressionsAssignment_2_1_0_2() { return cExpressionsAssignment_2_1_0_2; }
		
		//SelectExpression
		public RuleCall getExpressionsSelectExpressionParserRuleCall_2_1_0_2_0() { return cExpressionsSelectExpressionParserRuleCall_2_1_0_2_0; }
		
		//(',' attributes+=Attribute | ',' aggregations+=Aggregation | ',' expressions+=SelectExpression)*
		public Alternatives getAlternatives_2_1_1() { return cAlternatives_2_1_1; }
		
		//',' attributes+=Attribute
		public Group getGroup_2_1_1_0() { return cGroup_2_1_1_0; }
		
		//','
		public Keyword getCommaKeyword_2_1_1_0_0() { return cCommaKeyword_2_1_1_0_0; }
		
		//attributes+=Attribute
		public Assignment getAttributesAssignment_2_1_1_0_1() { return cAttributesAssignment_2_1_1_0_1; }
		
		//Attribute
		public RuleCall getAttributesAttributeParserRuleCall_2_1_1_0_1_0() { return cAttributesAttributeParserRuleCall_2_1_1_0_1_0; }
		
		//',' aggregations+=Aggregation
		public Group getGroup_2_1_1_1() { return cGroup_2_1_1_1; }
		
		//','
		public Keyword getCommaKeyword_2_1_1_1_0() { return cCommaKeyword_2_1_1_1_0; }
		
		//aggregations+=Aggregation
		public Assignment getAggregationsAssignment_2_1_1_1_1() { return cAggregationsAssignment_2_1_1_1_1; }
		
		//Aggregation
		public RuleCall getAggregationsAggregationParserRuleCall_2_1_1_1_1_0() { return cAggregationsAggregationParserRuleCall_2_1_1_1_1_0; }
		
		//',' expressions+=SelectExpression
		public Group getGroup_2_1_1_2() { return cGroup_2_1_1_2; }
		
		//','
		public Keyword getCommaKeyword_2_1_1_2_0() { return cCommaKeyword_2_1_1_2_0; }
		
		//expressions+=SelectExpression
		public Assignment getExpressionsAssignment_2_1_1_2_1() { return cExpressionsAssignment_2_1_1_2_1; }
		
		//SelectExpression
		public RuleCall getExpressionsSelectExpressionParserRuleCall_2_1_1_2_1_0() { return cExpressionsSelectExpressionParserRuleCall_2_1_1_2_1_0; }
		
		//('FROM' sources+=Source+ (',' sources+=Source)*)
		public Group getGroup_3() { return cGroup_3; }
		
		//'FROM'
		public Keyword getFROMKeyword_3_0() { return cFROMKeyword_3_0; }
		
		//sources+=Source+
		public Assignment getSourcesAssignment_3_1() { return cSourcesAssignment_3_1; }
		
		//Source
		public RuleCall getSourcesSourceParserRuleCall_3_1_0() { return cSourcesSourceParserRuleCall_3_1_0; }
		
		//(',' sources+=Source)*
		public Group getGroup_3_2() { return cGroup_3_2; }
		
		//','
		public Keyword getCommaKeyword_3_2_0() { return cCommaKeyword_3_2_0; }
		
		//sources+=Source
		public Assignment getSourcesAssignment_3_2_1() { return cSourcesAssignment_3_2_1; }
		
		//Source
		public RuleCall getSourcesSourceParserRuleCall_3_2_1_0() { return cSourcesSourceParserRuleCall_3_2_1_0; }
		
		//('WHERE' predicates=ExpressionsModel)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'WHERE'
		public Keyword getWHEREKeyword_4_0() { return cWHEREKeyword_4_0; }
		
		//predicates=ExpressionsModel
		public Assignment getPredicatesAssignment_4_1() { return cPredicatesAssignment_4_1; }
		
		//ExpressionsModel
		public RuleCall getPredicatesExpressionsModelParserRuleCall_4_1_0() { return cPredicatesExpressionsModelParserRuleCall_4_1_0; }
		
		//('GROUP' 'BY' order+=Attribute+ (',' order+=Attribute)*)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'GROUP'
		public Keyword getGROUPKeyword_5_0() { return cGROUPKeyword_5_0; }
		
		//'BY'
		public Keyword getBYKeyword_5_1() { return cBYKeyword_5_1; }
		
		//order+=Attribute+
		public Assignment getOrderAssignment_5_2() { return cOrderAssignment_5_2; }
		
		//Attribute
		public RuleCall getOrderAttributeParserRuleCall_5_2_0() { return cOrderAttributeParserRuleCall_5_2_0; }
		
		//(',' order+=Attribute)*
		public Group getGroup_5_3() { return cGroup_5_3; }
		
		//','
		public Keyword getCommaKeyword_5_3_0() { return cCommaKeyword_5_3_0; }
		
		//order+=Attribute
		public Assignment getOrderAssignment_5_3_1() { return cOrderAssignment_5_3_1; }
		
		//Attribute
		public RuleCall getOrderAttributeParserRuleCall_5_3_1_0() { return cOrderAttributeParserRuleCall_5_3_1_0; }
		
		//('HAVING' having=ExpressionsModel)?
		public Group getGroup_6() { return cGroup_6; }
		
		//'HAVING'
		public Keyword getHAVINGKeyword_6_0() { return cHAVINGKeyword_6_0; }
		
		//having=ExpressionsModel
		public Assignment getHavingAssignment_6_1() { return cHavingAssignment_6_1; }
		
		//ExpressionsModel
		public RuleCall getHavingExpressionsModelParserRuleCall_6_1_0() { return cHavingExpressionsModelParserRuleCall_6_1_0; }
	}
	public class NestedStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.parser.novel.cql.CQL.NestedStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cSelectParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//NestedStatement Select:
		//	'(' Select ')'
		@Override public ParserRule getRule() { return rule; }
		
		//'(' Select ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//Select
		public RuleCall getSelectParserRuleCall_1() { return cSelectParserRuleCall_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	public class SourceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.parser.novel.cql.CQL.Source");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cNameAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cNameSourceNameParserRuleCall_0_0_0 = (RuleCall)cNameAssignment_0_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Alternatives cAlternatives_0_1_1 = (Alternatives)cGroup_0_1.eContents().get(1);
		private final Assignment cUnboundedAssignment_0_1_1_0 = (Assignment)cAlternatives_0_1_1.eContents().get(0);
		private final RuleCall cUnboundedWindow_UnboundedParserRuleCall_0_1_1_0_0 = (RuleCall)cUnboundedAssignment_0_1_1_0.eContents().get(0);
		private final Assignment cTimeAssignment_0_1_1_1 = (Assignment)cAlternatives_0_1_1.eContents().get(1);
		private final RuleCall cTimeWindow_TimebasedParserRuleCall_0_1_1_1_0 = (RuleCall)cTimeAssignment_0_1_1_1.eContents().get(0);
		private final Assignment cTupleAssignment_0_1_1_2 = (Assignment)cAlternatives_0_1_1.eContents().get(2);
		private final RuleCall cTupleWindow_TuplebasedParserRuleCall_0_1_1_2_0 = (RuleCall)cTupleAssignment_0_1_1_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_0_1_2 = (Keyword)cGroup_0_1.eContents().get(2);
		private final Group cGroup_0_2 = (Group)cGroup_0.eContents().get(2);
		private final Keyword cASKeyword_0_2_0 = (Keyword)cGroup_0_2.eContents().get(0);
		private final Assignment cAliasAssignment_0_2_1 = (Assignment)cGroup_0_2.eContents().get(1);
		private final RuleCall cAliasAliasParserRuleCall_0_2_1_0 = (RuleCall)cAliasAssignment_0_2_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cNestedAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cNestedNestedStatementParserRuleCall_1_0_0 = (RuleCall)cNestedAssignment_1_0.eContents().get(0);
		private final Keyword cASKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cAliasAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cAliasAliasParserRuleCall_1_2_0 = (RuleCall)cAliasAssignment_1_2.eContents().get(0);
		
		//Source:
		//	name=SourceName ('[' (unbounded=Window_Unbounded | time=Window_Timebased | tuple=Window_Tuplebased) ']')? ('AS'
		//	alias=Alias)?
		//	| nested=NestedStatement 'AS' alias=Alias;
		@Override public ParserRule getRule() { return rule; }
		
		//name=SourceName ('[' (unbounded=Window_Unbounded | time=Window_Timebased | tuple=Window_Tuplebased) ']')? ('AS'
		//alias=Alias)? | nested=NestedStatement 'AS' alias=Alias
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//name=SourceName ('[' (unbounded=Window_Unbounded | time=Window_Timebased | tuple=Window_Tuplebased) ']')? ('AS'
		//alias=Alias)?
		public Group getGroup_0() { return cGroup_0; }
		
		//name=SourceName
		public Assignment getNameAssignment_0_0() { return cNameAssignment_0_0; }
		
		//SourceName
		public RuleCall getNameSourceNameParserRuleCall_0_0_0() { return cNameSourceNameParserRuleCall_0_0_0; }
		
		//('[' (unbounded=Window_Unbounded | time=Window_Timebased | tuple=Window_Tuplebased) ']')?
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0_1_0() { return cLeftSquareBracketKeyword_0_1_0; }
		
		//(unbounded=Window_Unbounded | time=Window_Timebased | tuple=Window_Tuplebased)
		public Alternatives getAlternatives_0_1_1() { return cAlternatives_0_1_1; }
		
		//unbounded=Window_Unbounded
		public Assignment getUnboundedAssignment_0_1_1_0() { return cUnboundedAssignment_0_1_1_0; }
		
		//Window_Unbounded
		public RuleCall getUnboundedWindow_UnboundedParserRuleCall_0_1_1_0_0() { return cUnboundedWindow_UnboundedParserRuleCall_0_1_1_0_0; }
		
		//time=Window_Timebased
		public Assignment getTimeAssignment_0_1_1_1() { return cTimeAssignment_0_1_1_1; }
		
		//Window_Timebased
		public RuleCall getTimeWindow_TimebasedParserRuleCall_0_1_1_1_0() { return cTimeWindow_TimebasedParserRuleCall_0_1_1_1_0; }
		
		//tuple=Window_Tuplebased
		public Assignment getTupleAssignment_0_1_1_2() { return cTupleAssignment_0_1_1_2; }
		
		//Window_Tuplebased
		public RuleCall getTupleWindow_TuplebasedParserRuleCall_0_1_1_2_0() { return cTupleWindow_TuplebasedParserRuleCall_0_1_1_2_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_0_1_2() { return cRightSquareBracketKeyword_0_1_2; }
		
		//('AS' alias=Alias)?
		public Group getGroup_0_2() { return cGroup_0_2; }
		
		//'AS'
		public Keyword getASKeyword_0_2_0() { return cASKeyword_0_2_0; }
		
		//alias=Alias
		public Assignment getAliasAssignment_0_2_1() { return cAliasAssignment_0_2_1; }
		
		//Alias
		public RuleCall getAliasAliasParserRuleCall_0_2_1_0() { return cAliasAliasParserRuleCall_0_2_1_0; }
		
		//nested=NestedStatement 'AS' alias=Alias
		public Group getGroup_1() { return cGroup_1; }
		
		//nested=NestedStatement
		public Assignment getNestedAssignment_1_0() { return cNestedAssignment_1_0; }
		
		//NestedStatement
		public RuleCall getNestedNestedStatementParserRuleCall_1_0_0() { return cNestedNestedStatementParserRuleCall_1_0_0; }
		
		//'AS'
		public Keyword getASKeyword_1_1() { return cASKeyword_1_1; }
		
		//alias=Alias
		public Assignment getAliasAssignment_1_2() { return cAliasAssignment_1_2; }
		
		//Alias
		public RuleCall getAliasAliasParserRuleCall_1_2_0() { return cAliasAliasParserRuleCall_1_2_0; }
	}
	public class SourceNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.parser.novel.cql.CQL.SourceName");
		private final RuleCall cIDTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		////SourceAsNestedSelect returns Source:
		////		nested=NestedStatement 'AS' alias=Alias
		////;
		//SourceName:
		//	ID;
		@Override public ParserRule getRule() { return rule; }
		
		//ID
		public RuleCall getIDTerminalRuleCall() { return cIDTerminalRuleCall; }
	}
	public class AttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.parser.novel.cql.CQL.Attribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameAttributeNameParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cASKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cAliasAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cAliasAliasParserRuleCall_1_1_0 = (RuleCall)cAliasAssignment_1_1.eContents().get(0);
		
		//Attribute:
		//	name=AttributeName ('AS' alias=Alias)?;
		@Override public ParserRule getRule() { return rule; }
		
		//name=AttributeName ('AS' alias=Alias)?
		public Group getGroup() { return cGroup; }
		
		//name=AttributeName
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//AttributeName
		public RuleCall getNameAttributeNameParserRuleCall_0_0() { return cNameAttributeNameParserRuleCall_0_0; }
		
		//('AS' alias=Alias)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'AS'
		public Keyword getASKeyword_1_0() { return cASKeyword_1_0; }
		
		//alias=Alias
		public Assignment getAliasAssignment_1_1() { return cAliasAssignment_1_1; }
		
		//Alias
		public RuleCall getAliasAliasParserRuleCall_1_1_0() { return cAliasAliasParserRuleCall_1_1_0; }
	}
	public class AttributeWithoutAliasDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.parser.novel.cql.CQL.AttributeWithoutAliasDefinition");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameAttributeNameParserRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//AttributeWithoutAliasDefinition Attribute:
		//	name=AttributeName
		@Override public ParserRule getRule() { return rule; }
		
		//name=AttributeName
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//AttributeName
		public RuleCall getNameAttributeNameParserRuleCall_0() { return cNameAttributeNameParserRuleCall_0; }
	}
	public class AttributeNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.parser.novel.cql.CQL.AttributeName");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cSourceNameParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Keyword cFullStopKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		
		//AttributeName:
		//	ID | SourceName '.' ID;
		@Override public ParserRule getRule() { return rule; }
		
		//ID | SourceName '.' ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//SourceName '.' ID
		public Group getGroup_1() { return cGroup_1; }
		
		//SourceName
		public RuleCall getSourceNameParserRuleCall_1_0() { return cSourceNameParserRuleCall_1_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1_1() { return cFullStopKeyword_1_1; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_2() { return cIDTerminalRuleCall_1_2; }
	}
	public class AttributeWithNestedStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.parser.novel.cql.CQL.AttributeWithNestedStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cValueAttributeWithoutAliasDefinitionParserRuleCall_0_0 = (RuleCall)cValueAssignment_0.eContents().get(0);
		private final Keyword cINKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNestedAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNestedNestedStatementParserRuleCall_2_0 = (RuleCall)cNestedAssignment_2.eContents().get(0);
		
		//AttributeWithNestedStatement:
		//	value=AttributeWithoutAliasDefinition
		//	'IN'
		//	nested=NestedStatement;
		@Override public ParserRule getRule() { return rule; }
		
		//value=AttributeWithoutAliasDefinition 'IN' nested=NestedStatement
		public Group getGroup() { return cGroup; }
		
		//value=AttributeWithoutAliasDefinition
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }
		
		//AttributeWithoutAliasDefinition
		public RuleCall getValueAttributeWithoutAliasDefinitionParserRuleCall_0_0() { return cValueAttributeWithoutAliasDefinitionParserRuleCall_0_0; }
		
		//'IN'
		public Keyword getINKeyword_1() { return cINKeyword_1; }
		
		//nested=NestedStatement
		public Assignment getNestedAssignment_2() { return cNestedAssignment_2; }
		
		//NestedStatement
		public RuleCall getNestedNestedStatementParserRuleCall_2_0() { return cNestedNestedStatementParserRuleCall_2_0; }
	}
	public class AggregationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.parser.novel.cql.CQL.Aggregation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cNameAlternatives_0_0 = (Alternatives)cNameAssignment_0.eContents().get(0);
		private final Keyword cNameAVGKeyword_0_0_0 = (Keyword)cNameAlternatives_0_0.eContents().get(0);
		private final Keyword cNameMINKeyword_0_0_1 = (Keyword)cNameAlternatives_0_0.eContents().get(1);
		private final Keyword cNameMAXKeyword_0_0_2 = (Keyword)cNameAlternatives_0_0.eContents().get(2);
		private final Keyword cNameCOUNTKeyword_0_0_3 = (Keyword)cNameAlternatives_0_0.eContents().get(3);
		private final Keyword cNameSUMKeyword_0_0_4 = (Keyword)cNameAlternatives_0_0.eContents().get(4);
		private final Keyword cNameMEDIANKeyword_0_0_5 = (Keyword)cNameAlternatives_0_0.eContents().get(5);
		private final Keyword cNameFIRSTKeyword_0_0_6 = (Keyword)cNameAlternatives_0_0.eContents().get(6);
		private final Keyword cNameLASTKeyword_0_0_7 = (Keyword)cNameAlternatives_0_0.eContents().get(7);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cAttributeAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cAttributeAttributeWithoutAliasDefinitionParserRuleCall_2_0_0 = (RuleCall)cAttributeAssignment_2_0.eContents().get(0);
		private final Assignment cExpressionAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cExpressionSelectExpressionWithoutAliasDefinitionParserRuleCall_2_1_0 = (RuleCall)cExpressionAssignment_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cASKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cAliasAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cAliasAliasParserRuleCall_4_1_0 = (RuleCall)cAliasAssignment_4_1.eContents().get(0);
		
		//Aggregation:
		//	name=('AVG' | 'MIN' | 'MAX' | 'COUNT' | 'SUM' | 'MEDIAN' | 'FIRST' | 'LAST')
		//	'(' (attribute=AttributeWithoutAliasDefinition | expression=SelectExpressionWithoutAliasDefinition) ')' ('AS'
		//	alias=Alias)?;
		@Override public ParserRule getRule() { return rule; }
		
		////TODO That is not supposed to be hard coded! 
		//name=('AVG' | 'MIN' | 'MAX' | 'COUNT' | 'SUM' | 'MEDIAN' | 'FIRST' | 'LAST') '('
		//(attribute=AttributeWithoutAliasDefinition | expression=SelectExpressionWithoutAliasDefinition) ')' ('AS' alias=Alias)?
		public Group getGroup() { return cGroup; }
		
		////TODO That is not supposed to be hard coded! 
		//name=('AVG' | 'MIN' | 'MAX' | 'COUNT' | 'SUM' | 'MEDIAN' | 'FIRST' | 'LAST')
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//('AVG' | 'MIN' | 'MAX' | 'COUNT' | 'SUM' | 'MEDIAN' | 'FIRST' | 'LAST')
		public Alternatives getNameAlternatives_0_0() { return cNameAlternatives_0_0; }
		
		//'AVG'
		public Keyword getNameAVGKeyword_0_0_0() { return cNameAVGKeyword_0_0_0; }
		
		//'MIN'
		public Keyword getNameMINKeyword_0_0_1() { return cNameMINKeyword_0_0_1; }
		
		//'MAX'
		public Keyword getNameMAXKeyword_0_0_2() { return cNameMAXKeyword_0_0_2; }
		
		//'COUNT'
		public Keyword getNameCOUNTKeyword_0_0_3() { return cNameCOUNTKeyword_0_0_3; }
		
		//'SUM'
		public Keyword getNameSUMKeyword_0_0_4() { return cNameSUMKeyword_0_0_4; }
		
		//'MEDIAN'
		public Keyword getNameMEDIANKeyword_0_0_5() { return cNameMEDIANKeyword_0_0_5; }
		
		//'FIRST'
		public Keyword getNameFIRSTKeyword_0_0_6() { return cNameFIRSTKeyword_0_0_6; }
		
		//'LAST'
		public Keyword getNameLASTKeyword_0_0_7() { return cNameLASTKeyword_0_0_7; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//(attribute=AttributeWithoutAliasDefinition | expression=SelectExpressionWithoutAliasDefinition)
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//attribute=AttributeWithoutAliasDefinition
		public Assignment getAttributeAssignment_2_0() { return cAttributeAssignment_2_0; }
		
		//AttributeWithoutAliasDefinition
		public RuleCall getAttributeAttributeWithoutAliasDefinitionParserRuleCall_2_0_0() { return cAttributeAttributeWithoutAliasDefinitionParserRuleCall_2_0_0; }
		
		//expression=SelectExpressionWithoutAliasDefinition
		public Assignment getExpressionAssignment_2_1() { return cExpressionAssignment_2_1; }
		
		//SelectExpressionWithoutAliasDefinition
		public RuleCall getExpressionSelectExpressionWithoutAliasDefinitionParserRuleCall_2_1_0() { return cExpressionSelectExpressionWithoutAliasDefinitionParserRuleCall_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//('AS' alias=Alias)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'AS'
		public Keyword getASKeyword_4_0() { return cASKeyword_4_0; }
		
		//alias=Alias
		public Assignment getAliasAssignment_4_1() { return cAliasAssignment_4_1; }
		
		//Alias
		public RuleCall getAliasAliasParserRuleCall_4_1_0() { return cAliasAliasParserRuleCall_4_1_0; }
	}
	public class AggregationWithoutAliasDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.parser.novel.cql.CQL.AggregationWithoutAliasDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cNameAlternatives_0_0 = (Alternatives)cNameAssignment_0.eContents().get(0);
		private final Keyword cNameAVGKeyword_0_0_0 = (Keyword)cNameAlternatives_0_0.eContents().get(0);
		private final Keyword cNameMINKeyword_0_0_1 = (Keyword)cNameAlternatives_0_0.eContents().get(1);
		private final Keyword cNameMAXKeyword_0_0_2 = (Keyword)cNameAlternatives_0_0.eContents().get(2);
		private final Keyword cNameCOUNTKeyword_0_0_3 = (Keyword)cNameAlternatives_0_0.eContents().get(3);
		private final Keyword cNameSUMKeyword_0_0_4 = (Keyword)cNameAlternatives_0_0.eContents().get(4);
		private final Keyword cNameMEDIANKeyword_0_0_5 = (Keyword)cNameAlternatives_0_0.eContents().get(5);
		private final Keyword cNameFIRSTKeyword_0_0_6 = (Keyword)cNameAlternatives_0_0.eContents().get(6);
		private final Keyword cNameLASTKeyword_0_0_7 = (Keyword)cNameAlternatives_0_0.eContents().get(7);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAttributeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAttributeAttributeWithoutAliasDefinitionParserRuleCall_2_0 = (RuleCall)cAttributeAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//AggregationWithoutAliasDefinition Aggregation:
		//	name=('AVG' | 'MIN' | 'MAX' | 'COUNT' | 'SUM' | 'MEDIAN' | 'FIRST' | 'LAST')
		//	'(' attribute=AttributeWithoutAliasDefinition ')'
		@Override public ParserRule getRule() { return rule; }
		
		//name=('AVG' | 'MIN' | 'MAX' | 'COUNT' | 'SUM' | 'MEDIAN' | 'FIRST' | 'LAST') '('
		//attribute=AttributeWithoutAliasDefinition ')'
		public Group getGroup() { return cGroup; }
		
		//name=('AVG' | 'MIN' | 'MAX' | 'COUNT' | 'SUM' | 'MEDIAN' | 'FIRST' | 'LAST')
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//('AVG' | 'MIN' | 'MAX' | 'COUNT' | 'SUM' | 'MEDIAN' | 'FIRST' | 'LAST')
		public Alternatives getNameAlternatives_0_0() { return cNameAlternatives_0_0; }
		
		//'AVG'
		public Keyword getNameAVGKeyword_0_0_0() { return cNameAVGKeyword_0_0_0; }
		
		//'MIN'
		public Keyword getNameMINKeyword_0_0_1() { return cNameMINKeyword_0_0_1; }
		
		//'MAX'
		public Keyword getNameMAXKeyword_0_0_2() { return cNameMAXKeyword_0_0_2; }
		
		//'COUNT'
		public Keyword getNameCOUNTKeyword_0_0_3() { return cNameCOUNTKeyword_0_0_3; }
		
		//'SUM'
		public Keyword getNameSUMKeyword_0_0_4() { return cNameSUMKeyword_0_0_4; }
		
		//'MEDIAN'
		public Keyword getNameMEDIANKeyword_0_0_5() { return cNameMEDIANKeyword_0_0_5; }
		
		//'FIRST'
		public Keyword getNameFIRSTKeyword_0_0_6() { return cNameFIRSTKeyword_0_0_6; }
		
		//'LAST'
		public Keyword getNameLASTKeyword_0_0_7() { return cNameLASTKeyword_0_0_7; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//attribute=AttributeWithoutAliasDefinition
		public Assignment getAttributeAssignment_2() { return cAttributeAssignment_2; }
		
		//AttributeWithoutAliasDefinition
		public RuleCall getAttributeAttributeWithoutAliasDefinitionParserRuleCall_2_0() { return cAttributeAttributeWithoutAliasDefinitionParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class ExpressionComponentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.parser.novel.cql.CQL.ExpressionComponent");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cExpressionComponentConstantOrAttributeParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Action cExpressionComponentValueAction_0_1 = (Action)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cExpressionComponentMapperOrConstantParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Action cExpressionComponentValueAction_1_1 = (Action)cGroup_1.eContents().get(1);
		
		//ExpressionComponent:
		//	ExpressionComponentConstantOrAttribute {ExpressionComponent.value=current} | ExpressionComponentMapperOrConstant
		//	{ExpressionComponent.value=current};
		@Override public ParserRule getRule() { return rule; }
		
		//ExpressionComponentConstantOrAttribute {ExpressionComponent.value=current} | ExpressionComponentMapperOrConstant
		//{ExpressionComponent.value=current}
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ExpressionComponentConstantOrAttribute {ExpressionComponent.value=current}
		public Group getGroup_0() { return cGroup_0; }
		
		//ExpressionComponentConstantOrAttribute
		public RuleCall getExpressionComponentConstantOrAttributeParserRuleCall_0_0() { return cExpressionComponentConstantOrAttributeParserRuleCall_0_0; }
		
		//{ExpressionComponent.value=current}
		public Action getExpressionComponentValueAction_0_1() { return cExpressionComponentValueAction_0_1; }
		
		//ExpressionComponentMapperOrConstant {ExpressionComponent.value=current}
		public Group getGroup_1() { return cGroup_1; }
		
		//ExpressionComponentMapperOrConstant
		public RuleCall getExpressionComponentMapperOrConstantParserRuleCall_1_0() { return cExpressionComponentMapperOrConstantParserRuleCall_1_0; }
		
		//{ExpressionComponent.value=current}
		public Action getExpressionComponentValueAction_1_1() { return cExpressionComponentValueAction_1_1; }
	}
	public class ExpressionComponentConstantOrAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.parser.novel.cql.CQL.ExpressionComponentConstantOrAttribute");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cValueAtomicWithoutAttributeRefParserRuleCall_0_0 = (RuleCall)cValueAssignment_0.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cValueAttributeWithoutAliasDefinitionParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//ExpressionComponentConstantOrAttribute ExpressionComponent:
		//	value=AtomicWithoutAttributeRef | value=AttributeWithoutAliasDefinition
		@Override public ParserRule getRule() { return rule; }
		
		//value=AtomicWithoutAttributeRef | value=AttributeWithoutAliasDefinition
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//value=AtomicWithoutAttributeRef
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }
		
		//AtomicWithoutAttributeRef
		public RuleCall getValueAtomicWithoutAttributeRefParserRuleCall_0_0() { return cValueAtomicWithoutAttributeRefParserRuleCall_0_0; }
		
		//value=AttributeWithoutAliasDefinition
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//AttributeWithoutAliasDefinition
		public RuleCall getValueAttributeWithoutAliasDefinitionParserRuleCall_1_0() { return cValueAttributeWithoutAliasDefinitionParserRuleCall_1_0; }
	}
	public class ExpressionComponentMapperOrConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.parser.novel.cql.CQL.ExpressionComponentMapperOrConstant");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cMapperParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Action cExpressionComponentValueAction_0_1 = (Action)cGroup_0.eContents().get(1);
		private final Assignment cValueAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cValueAtomicWithoutAttributeRefParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//ExpressionComponentMapperOrConstant ExpressionComponent:
		//	Mapper {ExpressionComponent.value=current} | value=AtomicWithoutAttributeRef
		@Override public ParserRule getRule() { return rule; }
		
		//Mapper {ExpressionComponent.value=current} | value=AtomicWithoutAttributeRef
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Mapper {ExpressionComponent.value=current}
		public Group getGroup_0() { return cGroup_0; }
		
		//Mapper
		public RuleCall getMapperParserRuleCall_0_0() { return cMapperParserRuleCall_0_0; }
		
		//{ExpressionComponent.value=current}
		public Action getExpressionComponentValueAction_0_1() { return cExpressionComponentValueAction_0_1; }
		
		//value=AtomicWithoutAttributeRef
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//AtomicWithoutAttributeRef
		public RuleCall getValueAtomicWithoutAttributeRefParserRuleCall_1_0() { return cValueAtomicWithoutAttributeRefParserRuleCall_1_0; }
	}
	public class ExpressionComponentOnlyAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.parser.novel.cql.CQL.ExpressionComponentOnlyAttribute");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueAttributeWithoutAliasDefinitionParserRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//ExpressionComponentOnlyAttribute ExpressionComponent:
		//	value=AttributeWithoutAliasDefinition
		@Override public ParserRule getRule() { return rule; }
		
		//value=AttributeWithoutAliasDefinition
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//AttributeWithoutAliasDefinition
		public RuleCall getValueAttributeWithoutAliasDefinitionParserRuleCall_0() { return cValueAttributeWithoutAliasDefinitionParserRuleCall_0; }
	}
	public class ExpressionComponentOnlyConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.parser.novel.cql.CQL.ExpressionComponentOnlyConstant");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueAtomicWithoutAttributeRefParserRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//ExpressionComponentOnlyConstant ExpressionComponent:
		//	value=AtomicWithoutAttributeRef
		@Override public ParserRule getRule() { return rule; }
		
		//value=AtomicWithoutAttributeRef
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//AtomicWithoutAttributeRef
		public RuleCall getValueAtomicWithoutAttributeRefParserRuleCall_0() { return cValueAtomicWithoutAttributeRefParserRuleCall_0; }
	}
	public class ExpressionComponentOnlymapperElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.parser.novel.cql.CQL.ExpressionComponentOnlymapper");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMapperParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Action cExpressionComponentValueAction_1 = (Action)cGroup.eContents().get(1);
		
		//ExpressionComponentOnlymapper ExpressionComponent:
		//	Mapper {ExpressionComponent.value=current}
		@Override public ParserRule getRule() { return rule; }
		
		//Mapper {ExpressionComponent.value=current}
		public Group getGroup() { return cGroup; }
		
		//Mapper
		public RuleCall getMapperParserRuleCall_0() { return cMapperParserRuleCall_0; }
		
		//{ExpressionComponent.value=current}
		public Action getExpressionComponentValueAction_1() { return cExpressionComponentValueAction_1; }
	}
	public class MapperElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.parser.novel.cql.CQL.Mapper");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMapperAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cNameDolToEurKeyword_1_0 = (Keyword)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueSelectExpressionWithoutAliasDefinitionParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Mapper ExpressionComponent:
		//	{Mapper} name='DolToEur' '(' value=SelectExpressionWithoutAliasDefinition ')'
		@Override public ParserRule getRule() { return rule; }
		
		//{Mapper} name='DolToEur' '(' value=SelectExpressionWithoutAliasDefinition ')'
		public Group getGroup() { return cGroup; }
		
		//{Mapper}
		public Action getMapperAction_0() { return cMapperAction_0; }
		
		//name='DolToEur'
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//'DolToEur'
		public Keyword getNameDolToEurKeyword_1_0() { return cNameDolToEurKeyword_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//value=SelectExpressionWithoutAliasDefinition
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }
		
		//SelectExpressionWithoutAliasDefinition
		public RuleCall getValueSelectExpressionWithoutAliasDefinitionParserRuleCall_3_0() { return cValueSelectExpressionWithoutAliasDefinitionParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class SelectExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.parser.novel.cql.CQL.SelectExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cAlternatives_0.eContents().get(0);
		private final Assignment cExpressionsAssignment_0_0_0 = (Assignment)cGroup_0_0.eContents().get(0);
		private final RuleCall cExpressionsExpressionComponentMapperOrConstantParserRuleCall_0_0_0_0 = (RuleCall)cExpressionsAssignment_0_0_0.eContents().get(0);
		private final Group cGroup_0_0_1 = (Group)cGroup_0_0.eContents().get(1);
		private final Assignment cOperatorsAssignment_0_0_1_0 = (Assignment)cGroup_0_0_1.eContents().get(0);
		private final Alternatives cOperatorsAlternatives_0_0_1_0_0 = (Alternatives)cOperatorsAssignment_0_0_1_0.eContents().get(0);
		private final Keyword cOperatorsPlusSignKeyword_0_0_1_0_0_0 = (Keyword)cOperatorsAlternatives_0_0_1_0_0.eContents().get(0);
		private final Keyword cOperatorsHyphenMinusKeyword_0_0_1_0_0_1 = (Keyword)cOperatorsAlternatives_0_0_1_0_0.eContents().get(1);
		private final Keyword cOperatorsAsteriskKeyword_0_0_1_0_0_2 = (Keyword)cOperatorsAlternatives_0_0_1_0_0.eContents().get(2);
		private final Keyword cOperatorsSolidusKeyword_0_0_1_0_0_3 = (Keyword)cOperatorsAlternatives_0_0_1_0_0.eContents().get(3);
		private final Assignment cExpressionsAssignment_0_0_1_1 = (Assignment)cGroup_0_0_1.eContents().get(1);
		private final Alternatives cExpressionsAlternatives_0_0_1_1_0 = (Alternatives)cExpressionsAssignment_0_0_1_1.eContents().get(0);
		private final RuleCall cExpressionsExpressionComponentConstantOrAttributeParserRuleCall_0_0_1_1_0_0 = (RuleCall)cExpressionsAlternatives_0_0_1_1_0.eContents().get(0);
		private final RuleCall cExpressionsExpressionComponentOnlymapperParserRuleCall_0_0_1_1_0_1 = (RuleCall)cExpressionsAlternatives_0_0_1_1_0.eContents().get(1);
		private final Group cGroup_0_1 = (Group)cAlternatives_0.eContents().get(1);
		private final Assignment cExpressionsAssignment_0_1_0 = (Assignment)cGroup_0_1.eContents().get(0);
		private final RuleCall cExpressionsExpressionComponentOnlyAttributeParserRuleCall_0_1_0_0 = (RuleCall)cExpressionsAssignment_0_1_0.eContents().get(0);
		private final Group cGroup_0_1_1 = (Group)cGroup_0_1.eContents().get(1);
		private final Assignment cOperatorsAssignment_0_1_1_0 = (Assignment)cGroup_0_1_1.eContents().get(0);
		private final Alternatives cOperatorsAlternatives_0_1_1_0_0 = (Alternatives)cOperatorsAssignment_0_1_1_0.eContents().get(0);
		private final Keyword cOperatorsPlusSignKeyword_0_1_1_0_0_0 = (Keyword)cOperatorsAlternatives_0_1_1_0_0.eContents().get(0);
		private final Keyword cOperatorsHyphenMinusKeyword_0_1_1_0_0_1 = (Keyword)cOperatorsAlternatives_0_1_1_0_0.eContents().get(1);
		private final Keyword cOperatorsAsteriskKeyword_0_1_1_0_0_2 = (Keyword)cOperatorsAlternatives_0_1_1_0_0.eContents().get(2);
		private final Keyword cOperatorsSolidusKeyword_0_1_1_0_0_3 = (Keyword)cOperatorsAlternatives_0_1_1_0_0.eContents().get(3);
		private final Assignment cExpressionsAssignment_0_1_1_1 = (Assignment)cGroup_0_1_1.eContents().get(1);
		private final Alternatives cExpressionsAlternatives_0_1_1_1_0 = (Alternatives)cExpressionsAssignment_0_1_1_1.eContents().get(0);
		private final RuleCall cExpressionsExpressionComponentConstantOrAttributeParserRuleCall_0_1_1_1_0_0 = (RuleCall)cExpressionsAlternatives_0_1_1_1_0.eContents().get(0);
		private final RuleCall cExpressionsExpressionComponentOnlymapperParserRuleCall_0_1_1_1_0_1 = (RuleCall)cExpressionsAlternatives_0_1_1_1_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cASKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cAliasAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cAliasAliasParserRuleCall_1_1_0 = (RuleCall)cAliasAssignment_1_1.eContents().get(0);
		
		//SelectExpression:
		//	(expressions+=ExpressionComponentMapperOrConstant (operators+=('+' | '-' | '*' | '/')
		//	expressions+=(ExpressionComponentConstantOrAttribute | ExpressionComponentOnlymapper))*
		//	| expressions+=ExpressionComponentOnlyAttribute (operators+=('+' | '-' | '*' | '/')
		//	expressions+=(ExpressionComponentConstantOrAttribute | ExpressionComponentOnlymapper))+) ('AS' alias=Alias)?;
		@Override public ParserRule getRule() { return rule; }
		
		//(expressions+=ExpressionComponentMapperOrConstant (operators+=('+' | '-' | '*' | '/')
		//expressions+=(ExpressionComponentConstantOrAttribute | ExpressionComponentOnlymapper))* |
		//expressions+=ExpressionComponentOnlyAttribute (operators+=('+' | '-' | '*' | '/')
		//expressions+=(ExpressionComponentConstantOrAttribute | ExpressionComponentOnlymapper))+) ('AS' alias=Alias)?
		public Group getGroup() { return cGroup; }
		
		//(expressions+=ExpressionComponentMapperOrConstant (operators+=('+' | '-' | '*' | '/')
		//expressions+=(ExpressionComponentConstantOrAttribute | ExpressionComponentOnlymapper))* |
		//expressions+=ExpressionComponentOnlyAttribute (operators+=('+' | '-' | '*' | '/')
		//expressions+=(ExpressionComponentConstantOrAttribute | ExpressionComponentOnlymapper))+)
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//expressions+=ExpressionComponentMapperOrConstant (operators+=('+' | '-' | '*' | '/')
		//expressions+=(ExpressionComponentConstantOrAttribute | ExpressionComponentOnlymapper))*
		public Group getGroup_0_0() { return cGroup_0_0; }
		
		//expressions+=ExpressionComponentMapperOrConstant
		public Assignment getExpressionsAssignment_0_0_0() { return cExpressionsAssignment_0_0_0; }
		
		//ExpressionComponentMapperOrConstant
		public RuleCall getExpressionsExpressionComponentMapperOrConstantParserRuleCall_0_0_0_0() { return cExpressionsExpressionComponentMapperOrConstantParserRuleCall_0_0_0_0; }
		
		//(operators+=('+' | '-' | '*' | '/') expressions+=(ExpressionComponentConstantOrAttribute |
		//ExpressionComponentOnlymapper))*
		public Group getGroup_0_0_1() { return cGroup_0_0_1; }
		
		//operators+=('+' | '-' | '*' | '/')
		public Assignment getOperatorsAssignment_0_0_1_0() { return cOperatorsAssignment_0_0_1_0; }
		
		//('+' | '-' | '*' | '/')
		public Alternatives getOperatorsAlternatives_0_0_1_0_0() { return cOperatorsAlternatives_0_0_1_0_0; }
		
		//'+'
		public Keyword getOperatorsPlusSignKeyword_0_0_1_0_0_0() { return cOperatorsPlusSignKeyword_0_0_1_0_0_0; }
		
		//'-'
		public Keyword getOperatorsHyphenMinusKeyword_0_0_1_0_0_1() { return cOperatorsHyphenMinusKeyword_0_0_1_0_0_1; }
		
		//'*'
		public Keyword getOperatorsAsteriskKeyword_0_0_1_0_0_2() { return cOperatorsAsteriskKeyword_0_0_1_0_0_2; }
		
		//'/'
		public Keyword getOperatorsSolidusKeyword_0_0_1_0_0_3() { return cOperatorsSolidusKeyword_0_0_1_0_0_3; }
		
		//expressions+=(ExpressionComponentConstantOrAttribute | ExpressionComponentOnlymapper)
		public Assignment getExpressionsAssignment_0_0_1_1() { return cExpressionsAssignment_0_0_1_1; }
		
		//(ExpressionComponentConstantOrAttribute | ExpressionComponentOnlymapper)
		public Alternatives getExpressionsAlternatives_0_0_1_1_0() { return cExpressionsAlternatives_0_0_1_1_0; }
		
		//ExpressionComponentConstantOrAttribute
		public RuleCall getExpressionsExpressionComponentConstantOrAttributeParserRuleCall_0_0_1_1_0_0() { return cExpressionsExpressionComponentConstantOrAttributeParserRuleCall_0_0_1_1_0_0; }
		
		//ExpressionComponentOnlymapper
		public RuleCall getExpressionsExpressionComponentOnlymapperParserRuleCall_0_0_1_1_0_1() { return cExpressionsExpressionComponentOnlymapperParserRuleCall_0_0_1_1_0_1; }
		
		//expressions+=ExpressionComponentOnlyAttribute (operators+=('+' | '-' | '*' | '/')
		//expressions+=(ExpressionComponentConstantOrAttribute | ExpressionComponentOnlymapper))+
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//expressions+=ExpressionComponentOnlyAttribute
		public Assignment getExpressionsAssignment_0_1_0() { return cExpressionsAssignment_0_1_0; }
		
		//ExpressionComponentOnlyAttribute
		public RuleCall getExpressionsExpressionComponentOnlyAttributeParserRuleCall_0_1_0_0() { return cExpressionsExpressionComponentOnlyAttributeParserRuleCall_0_1_0_0; }
		
		//(operators+=('+' | '-' | '*' | '/') expressions+=(ExpressionComponentConstantOrAttribute |
		//ExpressionComponentOnlymapper))+
		public Group getGroup_0_1_1() { return cGroup_0_1_1; }
		
		//operators+=('+' | '-' | '*' | '/')
		public Assignment getOperatorsAssignment_0_1_1_0() { return cOperatorsAssignment_0_1_1_0; }
		
		//('+' | '-' | '*' | '/')
		public Alternatives getOperatorsAlternatives_0_1_1_0_0() { return cOperatorsAlternatives_0_1_1_0_0; }
		
		//'+'
		public Keyword getOperatorsPlusSignKeyword_0_1_1_0_0_0() { return cOperatorsPlusSignKeyword_0_1_1_0_0_0; }
		
		//'-'
		public Keyword getOperatorsHyphenMinusKeyword_0_1_1_0_0_1() { return cOperatorsHyphenMinusKeyword_0_1_1_0_0_1; }
		
		//'*'
		public Keyword getOperatorsAsteriskKeyword_0_1_1_0_0_2() { return cOperatorsAsteriskKeyword_0_1_1_0_0_2; }
		
		//'/'
		public Keyword getOperatorsSolidusKeyword_0_1_1_0_0_3() { return cOperatorsSolidusKeyword_0_1_1_0_0_3; }
		
		//expressions+=(ExpressionComponentConstantOrAttribute | ExpressionComponentOnlymapper)
		public Assignment getExpressionsAssignment_0_1_1_1() { return cExpressionsAssignment_0_1_1_1; }
		
		//(ExpressionComponentConstantOrAttribute | ExpressionComponentOnlymapper)
		public Alternatives getExpressionsAlternatives_0_1_1_1_0() { return cExpressionsAlternatives_0_1_1_1_0; }
		
		//ExpressionComponentConstantOrAttribute
		public RuleCall getExpressionsExpressionComponentConstantOrAttributeParserRuleCall_0_1_1_1_0_0() { return cExpressionsExpressionComponentConstantOrAttributeParserRuleCall_0_1_1_1_0_0; }
		
		//ExpressionComponentOnlymapper
		public RuleCall getExpressionsExpressionComponentOnlymapperParserRuleCall_0_1_1_1_0_1() { return cExpressionsExpressionComponentOnlymapperParserRuleCall_0_1_1_1_0_1; }
		
		//('AS' alias=Alias)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'AS'
		public Keyword getASKeyword_1_0() { return cASKeyword_1_0; }
		
		//alias=Alias
		public Assignment getAliasAssignment_1_1() { return cAliasAssignment_1_1; }
		
		//Alias
		public RuleCall getAliasAliasParserRuleCall_1_1_0() { return cAliasAliasParserRuleCall_1_1_0; }
	}
	public class SelectExpressionWithoutAliasDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.parser.novel.cql.CQL.SelectExpressionWithoutAliasDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSelectExpressionWithOnlyAttributeOrConstantParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Assignment cExpressionsAssignment_1_0_0 = (Assignment)cGroup_1_0.eContents().get(0);
		private final RuleCall cExpressionsExpressionComponentMapperOrConstantParserRuleCall_1_0_0_0 = (RuleCall)cExpressionsAssignment_1_0_0.eContents().get(0);
		private final Group cGroup_1_0_1 = (Group)cGroup_1_0.eContents().get(1);
		private final Assignment cOperatorsAssignment_1_0_1_0 = (Assignment)cGroup_1_0_1.eContents().get(0);
		private final Alternatives cOperatorsAlternatives_1_0_1_0_0 = (Alternatives)cOperatorsAssignment_1_0_1_0.eContents().get(0);
		private final Keyword cOperatorsPlusSignKeyword_1_0_1_0_0_0 = (Keyword)cOperatorsAlternatives_1_0_1_0_0.eContents().get(0);
		private final Keyword cOperatorsHyphenMinusKeyword_1_0_1_0_0_1 = (Keyword)cOperatorsAlternatives_1_0_1_0_0.eContents().get(1);
		private final Keyword cOperatorsAsteriskKeyword_1_0_1_0_0_2 = (Keyword)cOperatorsAlternatives_1_0_1_0_0.eContents().get(2);
		private final Keyword cOperatorsSolidusKeyword_1_0_1_0_0_3 = (Keyword)cOperatorsAlternatives_1_0_1_0_0.eContents().get(3);
		private final Assignment cExpressionsAssignment_1_0_1_1 = (Assignment)cGroup_1_0_1.eContents().get(1);
		private final Alternatives cExpressionsAlternatives_1_0_1_1_0 = (Alternatives)cExpressionsAssignment_1_0_1_1.eContents().get(0);
		private final RuleCall cExpressionsExpressionComponentConstantOrAttributeParserRuleCall_1_0_1_1_0_0 = (RuleCall)cExpressionsAlternatives_1_0_1_1_0.eContents().get(0);
		private final RuleCall cExpressionsExpressionComponentOnlymapperParserRuleCall_1_0_1_1_0_1 = (RuleCall)cExpressionsAlternatives_1_0_1_1_0.eContents().get(1);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Assignment cExpressionsAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cExpressionsExpressionComponentOnlyAttributeParserRuleCall_1_1_0_0 = (RuleCall)cExpressionsAssignment_1_1_0.eContents().get(0);
		private final Group cGroup_1_1_1 = (Group)cGroup_1_1.eContents().get(1);
		private final Assignment cOperatorsAssignment_1_1_1_0 = (Assignment)cGroup_1_1_1.eContents().get(0);
		private final Alternatives cOperatorsAlternatives_1_1_1_0_0 = (Alternatives)cOperatorsAssignment_1_1_1_0.eContents().get(0);
		private final Keyword cOperatorsPlusSignKeyword_1_1_1_0_0_0 = (Keyword)cOperatorsAlternatives_1_1_1_0_0.eContents().get(0);
		private final Keyword cOperatorsHyphenMinusKeyword_1_1_1_0_0_1 = (Keyword)cOperatorsAlternatives_1_1_1_0_0.eContents().get(1);
		private final Keyword cOperatorsAsteriskKeyword_1_1_1_0_0_2 = (Keyword)cOperatorsAlternatives_1_1_1_0_0.eContents().get(2);
		private final Keyword cOperatorsSolidusKeyword_1_1_1_0_0_3 = (Keyword)cOperatorsAlternatives_1_1_1_0_0.eContents().get(3);
		private final Assignment cExpressionsAssignment_1_1_1_1 = (Assignment)cGroup_1_1_1.eContents().get(1);
		private final Alternatives cExpressionsAlternatives_1_1_1_1_0 = (Alternatives)cExpressionsAssignment_1_1_1_1.eContents().get(0);
		private final RuleCall cExpressionsExpressionComponentConstantOrAttributeParserRuleCall_1_1_1_1_0_0 = (RuleCall)cExpressionsAlternatives_1_1_1_1_0.eContents().get(0);
		private final RuleCall cExpressionsExpressionComponentOnlymapperParserRuleCall_1_1_1_1_0_1 = (RuleCall)cExpressionsAlternatives_1_1_1_1_0.eContents().get(1);
		
		//SelectExpressionWithoutAliasDefinition SelectExpression:
		//	SelectExpressionWithOnlyAttributeOrConstant (expressions+=ExpressionComponentMapperOrConstant (operators+=('+' | '-' |
		//	'*' | '/') expressions+=(ExpressionComponentConstantOrAttribute | ExpressionComponentOnlymapper))*
		//	| expressions+=ExpressionComponentOnlyAttribute (operators+=('+' | '-' | '*' | '/')
		//	expressions+=(ExpressionComponentConstantOrAttribute | ExpressionComponentOnlymapper))+)
		@Override public ParserRule getRule() { return rule; }
		
		//SelectExpressionWithOnlyAttributeOrConstant (expressions+=ExpressionComponentMapperOrConstant (operators+=('+' | '-' |
		//'*' | '/') expressions+=(ExpressionComponentConstantOrAttribute | ExpressionComponentOnlymapper))* |
		//expressions+=ExpressionComponentOnlyAttribute (operators+=('+' | '-' | '*' | '/')
		//expressions+=(ExpressionComponentConstantOrAttribute | ExpressionComponentOnlymapper))+)
		public Group getGroup() { return cGroup; }
		
		//SelectExpressionWithOnlyAttributeOrConstant
		public RuleCall getSelectExpressionWithOnlyAttributeOrConstantParserRuleCall_0() { return cSelectExpressionWithOnlyAttributeOrConstantParserRuleCall_0; }
		
		//(expressions+=ExpressionComponentMapperOrConstant (operators+=('+' | '-' | '*' | '/')
		//expressions+=(ExpressionComponentConstantOrAttribute | ExpressionComponentOnlymapper))* |
		//expressions+=ExpressionComponentOnlyAttribute (operators+=('+' | '-' | '*' | '/')
		//expressions+=(ExpressionComponentConstantOrAttribute | ExpressionComponentOnlymapper))+)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//expressions+=ExpressionComponentMapperOrConstant (operators+=('+' | '-' | '*' | '/')
		//expressions+=(ExpressionComponentConstantOrAttribute | ExpressionComponentOnlymapper))*
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//expressions+=ExpressionComponentMapperOrConstant
		public Assignment getExpressionsAssignment_1_0_0() { return cExpressionsAssignment_1_0_0; }
		
		//ExpressionComponentMapperOrConstant
		public RuleCall getExpressionsExpressionComponentMapperOrConstantParserRuleCall_1_0_0_0() { return cExpressionsExpressionComponentMapperOrConstantParserRuleCall_1_0_0_0; }
		
		//(operators+=('+' | '-' | '*' | '/') expressions+=(ExpressionComponentConstantOrAttribute |
		//ExpressionComponentOnlymapper))*
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }
		
		//operators+=('+' | '-' | '*' | '/')
		public Assignment getOperatorsAssignment_1_0_1_0() { return cOperatorsAssignment_1_0_1_0; }
		
		//('+' | '-' | '*' | '/')
		public Alternatives getOperatorsAlternatives_1_0_1_0_0() { return cOperatorsAlternatives_1_0_1_0_0; }
		
		//'+'
		public Keyword getOperatorsPlusSignKeyword_1_0_1_0_0_0() { return cOperatorsPlusSignKeyword_1_0_1_0_0_0; }
		
		//'-'
		public Keyword getOperatorsHyphenMinusKeyword_1_0_1_0_0_1() { return cOperatorsHyphenMinusKeyword_1_0_1_0_0_1; }
		
		//'*'
		public Keyword getOperatorsAsteriskKeyword_1_0_1_0_0_2() { return cOperatorsAsteriskKeyword_1_0_1_0_0_2; }
		
		//'/'
		public Keyword getOperatorsSolidusKeyword_1_0_1_0_0_3() { return cOperatorsSolidusKeyword_1_0_1_0_0_3; }
		
		//expressions+=(ExpressionComponentConstantOrAttribute | ExpressionComponentOnlymapper)
		public Assignment getExpressionsAssignment_1_0_1_1() { return cExpressionsAssignment_1_0_1_1; }
		
		//(ExpressionComponentConstantOrAttribute | ExpressionComponentOnlymapper)
		public Alternatives getExpressionsAlternatives_1_0_1_1_0() { return cExpressionsAlternatives_1_0_1_1_0; }
		
		//ExpressionComponentConstantOrAttribute
		public RuleCall getExpressionsExpressionComponentConstantOrAttributeParserRuleCall_1_0_1_1_0_0() { return cExpressionsExpressionComponentConstantOrAttributeParserRuleCall_1_0_1_1_0_0; }
		
		//ExpressionComponentOnlymapper
		public RuleCall getExpressionsExpressionComponentOnlymapperParserRuleCall_1_0_1_1_0_1() { return cExpressionsExpressionComponentOnlymapperParserRuleCall_1_0_1_1_0_1; }
		
		//expressions+=ExpressionComponentOnlyAttribute (operators+=('+' | '-' | '*' | '/')
		//expressions+=(ExpressionComponentConstantOrAttribute | ExpressionComponentOnlymapper))+
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//expressions+=ExpressionComponentOnlyAttribute
		public Assignment getExpressionsAssignment_1_1_0() { return cExpressionsAssignment_1_1_0; }
		
		//ExpressionComponentOnlyAttribute
		public RuleCall getExpressionsExpressionComponentOnlyAttributeParserRuleCall_1_1_0_0() { return cExpressionsExpressionComponentOnlyAttributeParserRuleCall_1_1_0_0; }
		
		//(operators+=('+' | '-' | '*' | '/') expressions+=(ExpressionComponentConstantOrAttribute |
		//ExpressionComponentOnlymapper))+
		public Group getGroup_1_1_1() { return cGroup_1_1_1; }
		
		//operators+=('+' | '-' | '*' | '/')
		public Assignment getOperatorsAssignment_1_1_1_0() { return cOperatorsAssignment_1_1_1_0; }
		
		//('+' | '-' | '*' | '/')
		public Alternatives getOperatorsAlternatives_1_1_1_0_0() { return cOperatorsAlternatives_1_1_1_0_0; }
		
		//'+'
		public Keyword getOperatorsPlusSignKeyword_1_1_1_0_0_0() { return cOperatorsPlusSignKeyword_1_1_1_0_0_0; }
		
		//'-'
		public Keyword getOperatorsHyphenMinusKeyword_1_1_1_0_0_1() { return cOperatorsHyphenMinusKeyword_1_1_1_0_0_1; }
		
		//'*'
		public Keyword getOperatorsAsteriskKeyword_1_1_1_0_0_2() { return cOperatorsAsteriskKeyword_1_1_1_0_0_2; }
		
		//'/'
		public Keyword getOperatorsSolidusKeyword_1_1_1_0_0_3() { return cOperatorsSolidusKeyword_1_1_1_0_0_3; }
		
		//expressions+=(ExpressionComponentConstantOrAttribute | ExpressionComponentOnlymapper)
		public Assignment getExpressionsAssignment_1_1_1_1() { return cExpressionsAssignment_1_1_1_1; }
		
		//(ExpressionComponentConstantOrAttribute | ExpressionComponentOnlymapper)
		public Alternatives getExpressionsAlternatives_1_1_1_1_0() { return cExpressionsAlternatives_1_1_1_1_0; }
		
		//ExpressionComponentConstantOrAttribute
		public RuleCall getExpressionsExpressionComponentConstantOrAttributeParserRuleCall_1_1_1_1_0_0() { return cExpressionsExpressionComponentConstantOrAttributeParserRuleCall_1_1_1_1_0_0; }
		
		//ExpressionComponentOnlymapper
		public RuleCall getExpressionsExpressionComponentOnlymapperParserRuleCall_1_1_1_1_0_1() { return cExpressionsExpressionComponentOnlymapperParserRuleCall_1_1_1_1_0_1; }
	}
	public class SelectExpressionWithOnlyAttributeOrConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.parser.novel.cql.CQL.SelectExpressionWithOnlyAttributeOrConstant");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExpressionsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExpressionsExpressionComponentConstantOrAttributeParserRuleCall_0_0 = (RuleCall)cExpressionsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cOperatorsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Alternatives cOperatorsAlternatives_1_0_0 = (Alternatives)cOperatorsAssignment_1_0.eContents().get(0);
		private final Keyword cOperatorsPlusSignKeyword_1_0_0_0 = (Keyword)cOperatorsAlternatives_1_0_0.eContents().get(0);
		private final Keyword cOperatorsHyphenMinusKeyword_1_0_0_1 = (Keyword)cOperatorsAlternatives_1_0_0.eContents().get(1);
		private final Keyword cOperatorsAsteriskKeyword_1_0_0_2 = (Keyword)cOperatorsAlternatives_1_0_0.eContents().get(2);
		private final Keyword cOperatorsSolidusKeyword_1_0_0_3 = (Keyword)cOperatorsAlternatives_1_0_0.eContents().get(3);
		private final Assignment cExpressionsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExpressionsExpressionComponentConstantOrAttributeParserRuleCall_1_1_0 = (RuleCall)cExpressionsAssignment_1_1.eContents().get(0);
		
		//SelectExpressionWithOnlyAttributeOrConstant SelectExpressionWithoutAliasDefinition:
		//	expressions+=ExpressionComponentConstantOrAttribute (operators+=('+' | '-' | '*' | '/')
		//	expressions+=ExpressionComponentConstantOrAttribute)*
		@Override public ParserRule getRule() { return rule; }
		
		//expressions+=ExpressionComponentConstantOrAttribute (operators+=('+' | '-' | '*' | '/')
		//expressions+=ExpressionComponentConstantOrAttribute)*
		public Group getGroup() { return cGroup; }
		
		//expressions+=ExpressionComponentConstantOrAttribute
		public Assignment getExpressionsAssignment_0() { return cExpressionsAssignment_0; }
		
		//ExpressionComponentConstantOrAttribute
		public RuleCall getExpressionsExpressionComponentConstantOrAttributeParserRuleCall_0_0() { return cExpressionsExpressionComponentConstantOrAttributeParserRuleCall_0_0; }
		
		//(operators+=('+' | '-' | '*' | '/') expressions+=ExpressionComponentConstantOrAttribute)*
		public Group getGroup_1() { return cGroup_1; }
		
		//operators+=('+' | '-' | '*' | '/')
		public Assignment getOperatorsAssignment_1_0() { return cOperatorsAssignment_1_0; }
		
		//('+' | '-' | '*' | '/')
		public Alternatives getOperatorsAlternatives_1_0_0() { return cOperatorsAlternatives_1_0_0; }
		
		//'+'
		public Keyword getOperatorsPlusSignKeyword_1_0_0_0() { return cOperatorsPlusSignKeyword_1_0_0_0; }
		
		//'-'
		public Keyword getOperatorsHyphenMinusKeyword_1_0_0_1() { return cOperatorsHyphenMinusKeyword_1_0_0_1; }
		
		//'*'
		public Keyword getOperatorsAsteriskKeyword_1_0_0_2() { return cOperatorsAsteriskKeyword_1_0_0_2; }
		
		//'/'
		public Keyword getOperatorsSolidusKeyword_1_0_0_3() { return cOperatorsSolidusKeyword_1_0_0_3; }
		
		//expressions+=ExpressionComponentConstantOrAttribute
		public Assignment getExpressionsAssignment_1_1() { return cExpressionsAssignment_1_1; }
		
		//ExpressionComponentConstantOrAttribute
		public RuleCall getExpressionsExpressionComponentConstantOrAttributeParserRuleCall_1_1_0() { return cExpressionsExpressionComponentConstantOrAttributeParserRuleCall_1_1_0; }
	}
	public class AliasElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.parser.novel.cql.CQL.Alias");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		////SelectExpressionWithoutAliasDefinition returns SelectExpression:
		////	ExpressionComponent 
		////	|(expressions+=ExpressionComponent (operators+=('+'|'-'|'*'|'/') expressions+=ExpressionComponent)*)
		////;
		////Mapper://TODO That is not supposed to be hard coded! 
		////	name=('DolToEur')
		////	'('
		////	(attribute=AttributeWithoutAliasDefinition 
		////		| innerexpression = SelectExpressionWithoutAliasDefinition2
		////	)
		////	')'
		////	('AS' alias=Alias)?
		////;
		////
		////MapperWithoutAlias returns Mapper://TODO That is not supposed to be hard coded! 
		////	name=('DolToEur')
		////	'('
		////	(attribute=AttributeWithoutAliasDefinition 
		////		| innerexpression = SelectExpressionWithoutAliasDefinition2
		////	)
		////	')'
		////;
		////
		////SelectExpressionWithOnlyMapper returns SelectExpression:
		////	leftmapper=Mapper
		////;
		////
		////SelectExpression:
		////	(leftmapper=MapperWithoutAlias
		////		| leftattribute=AttributeWithoutAliasDefinition 
		////		| leftconstant=AtomicWithoutAttributeRef
		////	)
		////	operator=('+'|'-'|'/'|'*')
		////	(innerexpression=SelectExpressionWithoutAliasDefinition)?
		////	(rightattribute=AttributeWithoutAliasDefinition | rightconstant=AtomicWithoutAttributeRef)
		////	('AS' alias=Alias)?
		////;
		////
		////SelectExpressionWithoutAliasDefinition returns SelectExpression:
		////	(leftmapper=MapperWithoutAlias
		////		| leftattribute=AttributeWithoutAliasDefinition 
		////		| leftconstant=AtomicWithoutAttributeRef
		////	)
		////	operator=('+'|'-'|'/'|'*')
		////	(innerexpression=SelectExpressionWithoutAliasDefinition)?
		////;
		////
		////SelectExpressionWithoutAliasDefinition2 returns SelectExpression:
		////	(leftmapper=MapperWithoutAlias
		////		| leftattribute=AttributeWithoutAliasDefinition 
		////		| leftconstant=AtomicWithoutAttributeRef
		////	)
		////	operator=('+'|'-'|'/'|'*')
		////	(innerexpression=SelectExpressionWithoutAliasDefinition)?
		////	(rightattribute=AttributeWithoutAliasDefinition | rightconstant=AtomicWithoutAttributeRef)
		////;
		////
		///////
		////SelectExpressionOnlyWithAttributeAndConstant returns SelectExpression:
		////	(leftattribute=AttributeWithoutAliasDefinition 
		////		| leftconstant=AtomicWithoutAttributeRef
		////	)
		////	operator=('+'|'-'|'/'|'*')
		////	(innerexpression=SelectExpressionOnlyWithAttributeAndConstant2)?
		////	(rightattribute=AttributeWithoutAliasDefinition 
		////		| rightconstant=AtomicWithoutAttributeRef
		////	)
		////;
		////
		////SelectExpressionOnlyWithAttributeAndConstant2 returns SelectExpression:
		////	(leftattribute=AttributeWithoutAliasDefinition 
		////		| leftconstant=AtomicWithoutAttributeRef
		////	)
		////	operator=('+'|'-'|'/'|'*')
		////	(innerexpression=SelectExpressionOnlyWithAttributeAndConstant2)?
		////;
		////
		////SelectExpressionOnlyWithStringConstant returns SelectExpression:
		////	leftconstant=AtomicWithOnlyStringConstant
		////	operator=('+'|'-')
		////	(innerexpression=SelectExpressionOnlyWithStringConstant2)?
		////	rightconstant=AtomicWithOnlyStringConstant
		////	('AS' alias=Alias)?
		////;
		////
		////SelectExpressionOnlyWithStringConstant2 returns SelectExpression:
		////	leftconstant=AtomicWithOnlyStringConstant
		////	operator=('+'|'-')
		////	(innerexpression=SelectExpressionOnlyWithStringConstant2)?
		////;
		////
		////SelectExpressionOnlyWithAttribute returns SelectExpression:
		////	leftattribute=AttributeWithoutAliasDefinition
		////	operator=('+'|'-'|'/'|'*')
		////	(innerexpression=SelectExpressionOnlyWithAttribute2)?
		////	rightatttriute=AttributeWithoutAliasDefinition
		////;
		////
		////SelectExpressionOnlyWithAttribute2 returns SelectExpression:
		////	leftattribute=AttributeWithoutAliasDefinition
		////	operator=('+'|'-'|'/'|'*')
		////	(innerexpression=SelectExpressionOnlyWithAttribute2)?
		////;
		//Alias:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class CreateParametersElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.parser.novel.cql.CQL.CreateParameters");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWRAPPERKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cWrapperAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cWrapperSTRINGTerminalRuleCall_1_0 = (RuleCall)cWrapperAssignment_1.eContents().get(0);
		private final Keyword cPROTOCOLKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cProtocolAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cProtocolSTRINGTerminalRuleCall_3_0 = (RuleCall)cProtocolAssignment_3.eContents().get(0);
		private final Keyword cTRANSPORTKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cTransportAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cTransportSTRINGTerminalRuleCall_5_0 = (RuleCall)cTransportAssignment_5.eContents().get(0);
		private final Keyword cDATAHANDLERKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cDatahandlerAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cDatahandlerSTRINGTerminalRuleCall_7_0 = (RuleCall)cDatahandlerAssignment_7.eContents().get(0);
		private final Keyword cOPTIONSKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cLeftParenthesisKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Group cGroup_10 = (Group)cGroup.eContents().get(10);
		private final Assignment cKeysAssignment_10_0 = (Assignment)cGroup_10.eContents().get(0);
		private final RuleCall cKeysSTRINGTerminalRuleCall_10_0_0 = (RuleCall)cKeysAssignment_10_0.eContents().get(0);
		private final Assignment cValuesAssignment_10_1 = (Assignment)cGroup_10.eContents().get(1);
		private final RuleCall cValuesSTRINGTerminalRuleCall_10_1_0 = (RuleCall)cValuesAssignment_10_1.eContents().get(0);
		private final Group cGroup_11 = (Group)cGroup.eContents().get(11);
		private final Keyword cCommaKeyword_11_0 = (Keyword)cGroup_11.eContents().get(0);
		private final Assignment cKeysAssignment_11_1 = (Assignment)cGroup_11.eContents().get(1);
		private final RuleCall cKeysSTRINGTerminalRuleCall_11_1_0 = (RuleCall)cKeysAssignment_11_1.eContents().get(0);
		private final Assignment cValuesAssignment_11_2 = (Assignment)cGroup_11.eContents().get(2);
		private final RuleCall cValuesSTRINGTerminalRuleCall_11_2_0 = (RuleCall)cValuesAssignment_11_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_12 = (Keyword)cGroup.eContents().get(12);
		
		//CreateParameters:
		//	'WRAPPER' wrapper=STRING
		//	'PROTOCOL' protocol=STRING
		//	'TRANSPORT' transport=STRING
		//	'DATAHANDLER' datahandler=STRING
		//	'OPTIONS' '(' (keys+=STRING values+=STRING)+ (',' keys+=STRING values+=STRING)? ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'WRAPPER' wrapper=STRING 'PROTOCOL' protocol=STRING 'TRANSPORT' transport=STRING 'DATAHANDLER' datahandler=STRING
		//'OPTIONS' '(' (keys+=STRING values+=STRING)+ (',' keys+=STRING values+=STRING)? ')'
		public Group getGroup() { return cGroup; }
		
		//'WRAPPER'
		public Keyword getWRAPPERKeyword_0() { return cWRAPPERKeyword_0; }
		
		//wrapper=STRING
		public Assignment getWrapperAssignment_1() { return cWrapperAssignment_1; }
		
		//STRING
		public RuleCall getWrapperSTRINGTerminalRuleCall_1_0() { return cWrapperSTRINGTerminalRuleCall_1_0; }
		
		//'PROTOCOL'
		public Keyword getPROTOCOLKeyword_2() { return cPROTOCOLKeyword_2; }
		
		//protocol=STRING
		public Assignment getProtocolAssignment_3() { return cProtocolAssignment_3; }
		
		//STRING
		public RuleCall getProtocolSTRINGTerminalRuleCall_3_0() { return cProtocolSTRINGTerminalRuleCall_3_0; }
		
		//'TRANSPORT'
		public Keyword getTRANSPORTKeyword_4() { return cTRANSPORTKeyword_4; }
		
		//transport=STRING
		public Assignment getTransportAssignment_5() { return cTransportAssignment_5; }
		
		//STRING
		public RuleCall getTransportSTRINGTerminalRuleCall_5_0() { return cTransportSTRINGTerminalRuleCall_5_0; }
		
		//'DATAHANDLER'
		public Keyword getDATAHANDLERKeyword_6() { return cDATAHANDLERKeyword_6; }
		
		//datahandler=STRING
		public Assignment getDatahandlerAssignment_7() { return cDatahandlerAssignment_7; }
		
		//STRING
		public RuleCall getDatahandlerSTRINGTerminalRuleCall_7_0() { return cDatahandlerSTRINGTerminalRuleCall_7_0; }
		
		//'OPTIONS'
		public Keyword getOPTIONSKeyword_8() { return cOPTIONSKeyword_8; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_9() { return cLeftParenthesisKeyword_9; }
		
		//(keys+=STRING values+=STRING)+
		public Group getGroup_10() { return cGroup_10; }
		
		//keys+=STRING
		public Assignment getKeysAssignment_10_0() { return cKeysAssignment_10_0; }
		
		//STRING
		public RuleCall getKeysSTRINGTerminalRuleCall_10_0_0() { return cKeysSTRINGTerminalRuleCall_10_0_0; }
		
		//values+=STRING
		public Assignment getValuesAssignment_10_1() { return cValuesAssignment_10_1; }
		
		//STRING
		public RuleCall getValuesSTRINGTerminalRuleCall_10_1_0() { return cValuesSTRINGTerminalRuleCall_10_1_0; }
		
		//(',' keys+=STRING values+=STRING)?
		public Group getGroup_11() { return cGroup_11; }
		
		//','
		public Keyword getCommaKeyword_11_0() { return cCommaKeyword_11_0; }
		
		//keys+=STRING
		public Assignment getKeysAssignment_11_1() { return cKeysAssignment_11_1; }
		
		//STRING
		public RuleCall getKeysSTRINGTerminalRuleCall_11_1_0() { return cKeysSTRINGTerminalRuleCall_11_1_0; }
		
		//values+=STRING
		public Assignment getValuesAssignment_11_2() { return cValuesAssignment_11_2; }
		
		//STRING
		public RuleCall getValuesSTRINGTerminalRuleCall_11_2_0() { return cValuesSTRINGTerminalRuleCall_11_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_12() { return cRightParenthesisKeyword_12; }
	}
	public class AttributeDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.parser.novel.cql.CQL.AttributeDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAttributesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAttributesAttributeParserRuleCall_2_0 = (RuleCall)cAttributesAssignment_2.eContents().get(0);
		private final Assignment cDatatypesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDatatypesDataTypeParserRuleCall_3_0 = (RuleCall)cDatatypesAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cAttributesAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cAttributesAttributeParserRuleCall_4_1_0 = (RuleCall)cAttributesAssignment_4_1.eContents().get(0);
		private final Assignment cDatatypesAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cDatatypesDataTypeParserRuleCall_4_2_0 = (RuleCall)cDatatypesAssignment_4_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//AttributeDefinition:
		//	name=ID
		//	'(' attributes+=Attribute+ datatypes+=DataType+ (',' attributes+=Attribute datatypes+=DataType)* ')';
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID '(' attributes+=Attribute+ datatypes+=DataType+ (',' attributes+=Attribute datatypes+=DataType)* ')'
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//attributes+=Attribute+
		public Assignment getAttributesAssignment_2() { return cAttributesAssignment_2; }
		
		//Attribute
		public RuleCall getAttributesAttributeParserRuleCall_2_0() { return cAttributesAttributeParserRuleCall_2_0; }
		
		//datatypes+=DataType+
		public Assignment getDatatypesAssignment_3() { return cDatatypesAssignment_3; }
		
		//DataType
		public RuleCall getDatatypesDataTypeParserRuleCall_3_0() { return cDatatypesDataTypeParserRuleCall_3_0; }
		
		//(',' attributes+=Attribute datatypes+=DataType)*
		public Group getGroup_4() { return cGroup_4; }
		
		//','
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//attributes+=Attribute
		public Assignment getAttributesAssignment_4_1() { return cAttributesAssignment_4_1; }
		
		//Attribute
		public RuleCall getAttributesAttributeParserRuleCall_4_1_0() { return cAttributesAttributeParserRuleCall_4_1_0; }
		
		//datatypes+=DataType
		public Assignment getDatatypesAssignment_4_2() { return cDatatypesAssignment_4_2; }
		
		//DataType
		public RuleCall getDatatypesDataTypeParserRuleCall_4_2_0() { return cDatatypesDataTypeParserRuleCall_4_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class CreateStream1Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.parser.novel.cql.CQL.CreateStream1");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeywordAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cKeywordCreateKeywordEnumRuleCall_0_0 = (RuleCall)cKeywordAssignment_0.eContents().get(0);
		private final Keyword cSTREAMKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAttributesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAttributesAttributeDefinitionParserRuleCall_2_0 = (RuleCall)cAttributesAssignment_2.eContents().get(0);
		private final Assignment cParsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cParsCreateParametersParserRuleCall_3_0 = (RuleCall)cParsAssignment_3.eContents().get(0);
		
		//CreateStream1:
		//	keyword=CreateKeyword
		//	'STREAM'
		//	attributes=AttributeDefinition
		//	pars=CreateParameters;
		@Override public ParserRule getRule() { return rule; }
		
		//keyword=CreateKeyword 'STREAM' attributes=AttributeDefinition pars=CreateParameters
		public Group getGroup() { return cGroup; }
		
		//keyword=CreateKeyword
		public Assignment getKeywordAssignment_0() { return cKeywordAssignment_0; }
		
		//CreateKeyword
		public RuleCall getKeywordCreateKeywordEnumRuleCall_0_0() { return cKeywordCreateKeywordEnumRuleCall_0_0; }
		
		//'STREAM'
		public Keyword getSTREAMKeyword_1() { return cSTREAMKeyword_1; }
		
		//attributes=AttributeDefinition
		public Assignment getAttributesAssignment_2() { return cAttributesAssignment_2; }
		
		//AttributeDefinition
		public RuleCall getAttributesAttributeDefinitionParserRuleCall_2_0() { return cAttributesAttributeDefinitionParserRuleCall_2_0; }
		
		//pars=CreateParameters
		public Assignment getParsAssignment_3() { return cParsAssignment_3; }
		
		//CreateParameters
		public RuleCall getParsCreateParametersParserRuleCall_3_0() { return cParsCreateParametersParserRuleCall_3_0; }
	}
	public class CreateSink1Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.parser.novel.cql.CQL.CreateSink1");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeywordAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cKeywordCreateKeywordEnumRuleCall_0_0 = (RuleCall)cKeywordAssignment_0.eContents().get(0);
		private final Keyword cSINKKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAttributesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAttributesAttributeDefinitionParserRuleCall_2_0 = (RuleCall)cAttributesAssignment_2.eContents().get(0);
		private final Assignment cParsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cParsCreateParametersParserRuleCall_3_0 = (RuleCall)cParsAssignment_3.eContents().get(0);
		
		//CreateSink1:
		//	keyword=CreateKeyword
		//	'SINK'
		//	attributes=AttributeDefinition
		//	pars=CreateParameters;
		@Override public ParserRule getRule() { return rule; }
		
		//keyword=CreateKeyword 'SINK' attributes=AttributeDefinition pars=CreateParameters
		public Group getGroup() { return cGroup; }
		
		//keyword=CreateKeyword
		public Assignment getKeywordAssignment_0() { return cKeywordAssignment_0; }
		
		//CreateKeyword
		public RuleCall getKeywordCreateKeywordEnumRuleCall_0_0() { return cKeywordCreateKeywordEnumRuleCall_0_0; }
		
		//'SINK'
		public Keyword getSINKKeyword_1() { return cSINKKeyword_1; }
		
		//attributes=AttributeDefinition
		public Assignment getAttributesAssignment_2() { return cAttributesAssignment_2; }
		
		//AttributeDefinition
		public RuleCall getAttributesAttributeDefinitionParserRuleCall_2_0() { return cAttributesAttributeDefinitionParserRuleCall_2_0; }
		
		//pars=CreateParameters
		public Assignment getParsAssignment_3() { return cParsAssignment_3; }
		
		//CreateParameters
		public RuleCall getParsCreateParametersParserRuleCall_3_0() { return cParsCreateParametersParserRuleCall_3_0; }
	}
	public class CreateStreamChannelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.parser.novel.cql.CQL.CreateStreamChannel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeywordAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cKeywordCreateKeywordEnumRuleCall_0_0 = (RuleCall)cKeywordAssignment_0.eContents().get(0);
		private final Keyword cSTREAMKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAttributesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAttributesAttributeDefinitionParserRuleCall_2_0 = (RuleCall)cAttributesAssignment_2.eContents().get(0);
		private final Keyword cCHANNELKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cHostAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cHostIDTerminalRuleCall_4_0 = (RuleCall)cHostAssignment_4.eContents().get(0);
		private final Keyword cColonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cPortAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cPortINTTerminalRuleCall_6_0 = (RuleCall)cPortAssignment_6.eContents().get(0);
		
		//CreateStreamChannel:
		//	keyword=CreateKeyword
		//	'STREAM'
		//	attributes=AttributeDefinition
		//	'CHANNEL' host=ID ':' port=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//keyword=CreateKeyword 'STREAM' attributes=AttributeDefinition 'CHANNEL' host=ID ':' port=INT
		public Group getGroup() { return cGroup; }
		
		//keyword=CreateKeyword
		public Assignment getKeywordAssignment_0() { return cKeywordAssignment_0; }
		
		//CreateKeyword
		public RuleCall getKeywordCreateKeywordEnumRuleCall_0_0() { return cKeywordCreateKeywordEnumRuleCall_0_0; }
		
		//'STREAM'
		public Keyword getSTREAMKeyword_1() { return cSTREAMKeyword_1; }
		
		//attributes=AttributeDefinition
		public Assignment getAttributesAssignment_2() { return cAttributesAssignment_2; }
		
		//AttributeDefinition
		public RuleCall getAttributesAttributeDefinitionParserRuleCall_2_0() { return cAttributesAttributeDefinitionParserRuleCall_2_0; }
		
		//'CHANNEL'
		public Keyword getCHANNELKeyword_3() { return cCHANNELKeyword_3; }
		
		//host=ID
		public Assignment getHostAssignment_4() { return cHostAssignment_4; }
		
		//ID
		public RuleCall getHostIDTerminalRuleCall_4_0() { return cHostIDTerminalRuleCall_4_0; }
		
		//':'
		public Keyword getColonKeyword_5() { return cColonKeyword_5; }
		
		//port=INT
		public Assignment getPortAssignment_6() { return cPortAssignment_6; }
		
		//INT
		public RuleCall getPortINTTerminalRuleCall_6_0() { return cPortINTTerminalRuleCall_6_0; }
	}
	public class CreateStreamFileElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.parser.novel.cql.CQL.CreateStreamFile");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeywordAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cKeywordCreateKeywordEnumRuleCall_0_0 = (RuleCall)cKeywordAssignment_0.eContents().get(0);
		private final Keyword cSTREAMKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAttributesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAttributesAttributeDefinitionParserRuleCall_2_0 = (RuleCall)cAttributesAssignment_2.eContents().get(0);
		private final Keyword cFILEKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cFilenameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cFilenameSTRINGTerminalRuleCall_4_0 = (RuleCall)cFilenameAssignment_4.eContents().get(0);
		private final Keyword cASKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cTypeAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cTypeIDTerminalRuleCall_6_0 = (RuleCall)cTypeAssignment_6.eContents().get(0);
		
		//CreateStreamFile:
		//	keyword=CreateKeyword
		//	'STREAM'
		//	attributes=AttributeDefinition
		//	'FILE' filename=STRING 'AS' type=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//keyword=CreateKeyword 'STREAM' attributes=AttributeDefinition 'FILE' filename=STRING 'AS' type=ID
		public Group getGroup() { return cGroup; }
		
		//keyword=CreateKeyword
		public Assignment getKeywordAssignment_0() { return cKeywordAssignment_0; }
		
		//CreateKeyword
		public RuleCall getKeywordCreateKeywordEnumRuleCall_0_0() { return cKeywordCreateKeywordEnumRuleCall_0_0; }
		
		//'STREAM'
		public Keyword getSTREAMKeyword_1() { return cSTREAMKeyword_1; }
		
		//attributes=AttributeDefinition
		public Assignment getAttributesAssignment_2() { return cAttributesAssignment_2; }
		
		//AttributeDefinition
		public RuleCall getAttributesAttributeDefinitionParserRuleCall_2_0() { return cAttributesAttributeDefinitionParserRuleCall_2_0; }
		
		//'FILE'
		public Keyword getFILEKeyword_3() { return cFILEKeyword_3; }
		
		//filename=STRING
		public Assignment getFilenameAssignment_4() { return cFilenameAssignment_4; }
		
		//STRING
		public RuleCall getFilenameSTRINGTerminalRuleCall_4_0() { return cFilenameSTRINGTerminalRuleCall_4_0; }
		
		//'AS'
		public Keyword getASKeyword_5() { return cASKeyword_5; }
		
		//type=ID
		public Assignment getTypeAssignment_6() { return cTypeAssignment_6; }
		
		//ID
		public RuleCall getTypeIDTerminalRuleCall_6_0() { return cTypeIDTerminalRuleCall_6_0; }
	}
	public class CreateViewElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.parser.novel.cql.CQL.CreateView");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVIEWKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cFROMKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSelectAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSelectNestedStatementParserRuleCall_3_0 = (RuleCall)cSelectAssignment_3.eContents().get(0);
		
		////Create:
		////	name=('CREATE'|'ATTACH') (channelformat=ChannelFormat|accessframework=AccessFramework)
		////;
		////
		////AccessFramework:
		////	type=('STREAM'|'SINK')
		////	name = ID
		////	'('
		////	attributes+= Attribute+ 
		////	datatypes+= DataType+
		////	(',' attributes+=Attribute datatypes+= DataType)*
		////	')'
		////	'WRAPPER' wrapper=STRING
		////	'PROTOCOL' protocol=STRING
		////	'TRANSPORT' transport=STRING
		////	'DATAHANDLER' datahandler=STRING
		////	'OPTIONS' 
		////		'(' 
		////			(keys+=STRING values+=STRING)+ (',' keys+=STRING values+=STRING)?
		////		')'
		////;
		////
		////ChannelFormat: (stream=ChannelFormatStream|view=ChannelFormatView);
		////
		////ChannelFormatStream:
		////	'STREAM'
		////	name = ID
		////	'('
		////	attributes+= Attribute+ 
		////	datatypes+= DataType+
		////	(',' attributes+=Attribute datatypes+= DataType)*
		////	')'
		////	(    'CHANNEL' (keys+=ID) ':'
		////		|'FILE' (keys+=STRING) 'AS'
		////	) 
		////	(values+=IDOrINT)
		////;
		//CreateView:
		//	'VIEW' name=ID 'FROM' select=NestedStatement;
		@Override public ParserRule getRule() { return rule; }
		
		//'VIEW' name=ID 'FROM' select=NestedStatement
		public Group getGroup() { return cGroup; }
		
		//'VIEW'
		public Keyword getVIEWKeyword_0() { return cVIEWKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'FROM'
		public Keyword getFROMKeyword_2() { return cFROMKeyword_2; }
		
		//select=NestedStatement
		public Assignment getSelectAssignment_3() { return cSelectAssignment_3; }
		
		//NestedStatement
		public RuleCall getSelectNestedStatementParserRuleCall_3_0() { return cSelectNestedStatementParserRuleCall_3_0; }
	}
	public class StreamToElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.parser.novel.cql.CQL.StreamTo");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSTREAMKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cTOKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cStatementAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final RuleCall cStatementSelectParserRuleCall_3_0_0 = (RuleCall)cStatementAssignment_3_0.eContents().get(0);
		private final Assignment cInputnameAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final RuleCall cInputnameIDTerminalRuleCall_3_1_0 = (RuleCall)cInputnameAssignment_3_1.eContents().get(0);
		
		//StreamTo:
		//	'STREAM' 'TO' name=ID (statement=Select | inputname=ID);
		@Override public ParserRule getRule() { return rule; }
		
		//'STREAM' 'TO' name=ID (statement=Select | inputname=ID)
		public Group getGroup() { return cGroup; }
		
		//'STREAM'
		public Keyword getSTREAMKeyword_0() { return cSTREAMKeyword_0; }
		
		//'TO'
		public Keyword getTOKeyword_1() { return cTOKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//(statement=Select | inputname=ID)
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//statement=Select
		public Assignment getStatementAssignment_3_0() { return cStatementAssignment_3_0; }
		
		//Select
		public RuleCall getStatementSelectParserRuleCall_3_0_0() { return cStatementSelectParserRuleCall_3_0_0; }
		
		//inputname=ID
		public Assignment getInputnameAssignment_3_1() { return cInputnameAssignment_3_1; }
		
		//ID
		public RuleCall getInputnameIDTerminalRuleCall_3_1_0() { return cInputnameIDTerminalRuleCall_3_1_0; }
	}
	public class CommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.parser.novel.cql.CQL.Command");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyword1Assignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cKeyword1IDTerminalRuleCall_0_0 = (RuleCall)cKeyword1Assignment_0.eContents().get(0);
		private final Assignment cKeyword2Assignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cKeyword2IDTerminalRuleCall_1_0 = (RuleCall)cKeyword2Assignment_1.eContents().get(0);
		private final Assignment cValue1Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValue1IDTerminalRuleCall_2_0 = (RuleCall)cValue1Assignment_2.eContents().get(0);
		private final Assignment cKeyword3Assignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cKeyword3IDTerminalRuleCall_3_0 = (RuleCall)cKeyword3Assignment_3.eContents().get(0);
		private final Assignment cValue2Assignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cValue2IDTerminalRuleCall_4_0 = (RuleCall)cValue2Assignment_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//// build generic rule for those commands
		//Command:
		//	keyword1=ID
		//	keyword2=ID
		//	value1=ID
		//	keyword3=ID
		//	value2=ID
		//	";"?;
		@Override public ParserRule getRule() { return rule; }
		
		//keyword1=ID keyword2=ID value1=ID keyword3=ID value2=ID ";"?
		public Group getGroup() { return cGroup; }
		
		//keyword1=ID
		public Assignment getKeyword1Assignment_0() { return cKeyword1Assignment_0; }
		
		//ID
		public RuleCall getKeyword1IDTerminalRuleCall_0_0() { return cKeyword1IDTerminalRuleCall_0_0; }
		
		//keyword2=ID
		public Assignment getKeyword2Assignment_1() { return cKeyword2Assignment_1; }
		
		//ID
		public RuleCall getKeyword2IDTerminalRuleCall_1_0() { return cKeyword2IDTerminalRuleCall_1_0; }
		
		//value1=ID
		public Assignment getValue1Assignment_2() { return cValue1Assignment_2; }
		
		//ID
		public RuleCall getValue1IDTerminalRuleCall_2_0() { return cValue1IDTerminalRuleCall_2_0; }
		
		//keyword3=ID
		public Assignment getKeyword3Assignment_3() { return cKeyword3Assignment_3; }
		
		//ID
		public RuleCall getKeyword3IDTerminalRuleCall_3_0() { return cKeyword3IDTerminalRuleCall_3_0; }
		
		//value2=ID
		public Assignment getValue2Assignment_4() { return cValue2Assignment_4; }
		
		//ID
		public RuleCall getValue2IDTerminalRuleCall_4_0() { return cValue2IDTerminalRuleCall_4_0; }
		
		//";"?
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}
	public class DropElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.parser.novel.cql.CQL.Drop");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyword1Assignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cKeyword1DROPKeyword_0_0 = (Keyword)cKeyword1Assignment_0.eContents().get(0);
		private final Assignment cKeyword2Assignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cKeyword2Alternatives_1_0 = (Alternatives)cKeyword2Assignment_1.eContents().get(0);
		private final Keyword cKeyword2SINKKeyword_1_0_0 = (Keyword)cKeyword2Alternatives_1_0.eContents().get(0);
		private final Keyword cKeyword2STREAMKeyword_1_0_1 = (Keyword)cKeyword2Alternatives_1_0.eContents().get(1);
		private final Assignment cValue1Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValue1IDTerminalRuleCall_2_0 = (RuleCall)cValue1Assignment_2.eContents().get(0);
		private final Assignment cKeyword3Assignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cKeyword3IFEXISTSKeyword_3_0 = (Keyword)cKeyword3Assignment_3.eContents().get(0);
		private final Assignment cValue2Assignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cValue2IDTerminalRuleCall_4_0 = (RuleCall)cValue2Assignment_4.eContents().get(0);
		
		//Drop Command:
		//	keyword1='DROP'
		//	keyword2=('SINK' | 'STREAM') value1=ID
		//	keyword3='IF EXISTS'?
		//	value2=ID
		@Override public ParserRule getRule() { return rule; }
		
		//keyword1='DROP' keyword2=('SINK' | 'STREAM') value1=ID keyword3='IF EXISTS'? value2=ID
		public Group getGroup() { return cGroup; }
		
		//keyword1='DROP'
		public Assignment getKeyword1Assignment_0() { return cKeyword1Assignment_0; }
		
		//'DROP'
		public Keyword getKeyword1DROPKeyword_0_0() { return cKeyword1DROPKeyword_0_0; }
		
		//keyword2=('SINK' | 'STREAM')
		public Assignment getKeyword2Assignment_1() { return cKeyword2Assignment_1; }
		
		//('SINK' | 'STREAM')
		public Alternatives getKeyword2Alternatives_1_0() { return cKeyword2Alternatives_1_0; }
		
		//'SINK'
		public Keyword getKeyword2SINKKeyword_1_0_0() { return cKeyword2SINKKeyword_1_0_0; }
		
		//'STREAM'
		public Keyword getKeyword2STREAMKeyword_1_0_1() { return cKeyword2STREAMKeyword_1_0_1; }
		
		//value1=ID
		public Assignment getValue1Assignment_2() { return cValue1Assignment_2; }
		
		//ID
		public RuleCall getValue1IDTerminalRuleCall_2_0() { return cValue1IDTerminalRuleCall_2_0; }
		
		//keyword3='IF EXISTS'?
		public Assignment getKeyword3Assignment_3() { return cKeyword3Assignment_3; }
		
		//'IF EXISTS'
		public Keyword getKeyword3IFEXISTSKeyword_3_0() { return cKeyword3IFEXISTSKeyword_3_0; }
		
		//value2=ID
		public Assignment getValue2Assignment_4() { return cValue2Assignment_4; }
		
		//ID
		public RuleCall getValue2IDTerminalRuleCall_4_0() { return cValue2IDTerminalRuleCall_4_0; }
	}
	public class Window_UnboundedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.parser.novel.cql.CQL.Window_Unbounded");
		private final Keyword cUNBOUNDEDKeyword = (Keyword)rule.eContents().get(1);
		
		//Window_Unbounded:
		//	'UNBOUNDED';
		@Override public ParserRule getRule() { return rule; }
		
		//'UNBOUNDED'
		public Keyword getUNBOUNDEDKeyword() { return cUNBOUNDEDKeyword; }
	}
	public class Window_TimebasedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.parser.novel.cql.CQL.Window_Timebased");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSIZEKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSizeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSizeINTTerminalRuleCall_1_0 = (RuleCall)cSizeAssignment_1.eContents().get(0);
		private final Assignment cUnitAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cUnitIDTerminalRuleCall_2_0 = (RuleCall)cUnitAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cADVANCEKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cAdvance_sizeAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cAdvance_sizeINTTerminalRuleCall_3_1_0 = (RuleCall)cAdvance_sizeAssignment_3_1.eContents().get(0);
		private final Assignment cAdvance_unitAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cAdvance_unitIDTerminalRuleCall_3_2_0 = (RuleCall)cAdvance_unitAssignment_3_2.eContents().get(0);
		private final Keyword cTIMEKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Window_Timebased:
		//	'SIZE' size=INT unit=ID ('ADVANCE' advance_size=INT advance_unit=ID)?
		//	'TIME';
		@Override public ParserRule getRule() { return rule; }
		
		//'SIZE' size=INT unit=ID ('ADVANCE' advance_size=INT advance_unit=ID)? 'TIME'
		public Group getGroup() { return cGroup; }
		
		//'SIZE'
		public Keyword getSIZEKeyword_0() { return cSIZEKeyword_0; }
		
		//size=INT
		public Assignment getSizeAssignment_1() { return cSizeAssignment_1; }
		
		//INT
		public RuleCall getSizeINTTerminalRuleCall_1_0() { return cSizeINTTerminalRuleCall_1_0; }
		
		//unit=ID
		public Assignment getUnitAssignment_2() { return cUnitAssignment_2; }
		
		//ID
		public RuleCall getUnitIDTerminalRuleCall_2_0() { return cUnitIDTerminalRuleCall_2_0; }
		
		//('ADVANCE' advance_size=INT advance_unit=ID)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'ADVANCE'
		public Keyword getADVANCEKeyword_3_0() { return cADVANCEKeyword_3_0; }
		
		//advance_size=INT
		public Assignment getAdvance_sizeAssignment_3_1() { return cAdvance_sizeAssignment_3_1; }
		
		//INT
		public RuleCall getAdvance_sizeINTTerminalRuleCall_3_1_0() { return cAdvance_sizeINTTerminalRuleCall_3_1_0; }
		
		//advance_unit=ID
		public Assignment getAdvance_unitAssignment_3_2() { return cAdvance_unitAssignment_3_2; }
		
		//ID
		public RuleCall getAdvance_unitIDTerminalRuleCall_3_2_0() { return cAdvance_unitIDTerminalRuleCall_3_2_0; }
		
		//'TIME'
		public Keyword getTIMEKeyword_4() { return cTIMEKeyword_4; }
	}
	public class Window_TuplebasedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.parser.novel.cql.CQL.Window_Tuplebased");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSIZEKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSizeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSizeINTTerminalRuleCall_1_0 = (RuleCall)cSizeAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cADVANCEKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cAdvance_sizeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cAdvance_sizeINTTerminalRuleCall_2_1_0 = (RuleCall)cAdvance_sizeAssignment_2_1.eContents().get(0);
		private final Keyword cTUPLEKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cPARTITIONKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cBYKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cPartition_attributeAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cPartition_attributeAttributeParserRuleCall_4_2_0 = (RuleCall)cPartition_attributeAssignment_4_2.eContents().get(0);
		
		//Window_Tuplebased: //TODO PARTITION BY only if a GROUP BY clause exists
		//	'SIZE' size=INT ('ADVANCE' advance_size=INT)? 'TUPLE' ('PARTITION' 'BY' partition_attribute=Attribute)?;
		@Override public ParserRule getRule() { return rule; }
		
		////TODO PARTITION BY only if a GROUP BY clause exists
		//'SIZE' size=INT ('ADVANCE' advance_size=INT)? 'TUPLE' ('PARTITION' 'BY' partition_attribute=Attribute)?
		public Group getGroup() { return cGroup; }
		
		////TODO PARTITION BY only if a GROUP BY clause exists
		//'SIZE'
		public Keyword getSIZEKeyword_0() { return cSIZEKeyword_0; }
		
		//size=INT
		public Assignment getSizeAssignment_1() { return cSizeAssignment_1; }
		
		//INT
		public RuleCall getSizeINTTerminalRuleCall_1_0() { return cSizeINTTerminalRuleCall_1_0; }
		
		//('ADVANCE' advance_size=INT)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'ADVANCE'
		public Keyword getADVANCEKeyword_2_0() { return cADVANCEKeyword_2_0; }
		
		//advance_size=INT
		public Assignment getAdvance_sizeAssignment_2_1() { return cAdvance_sizeAssignment_2_1; }
		
		//INT
		public RuleCall getAdvance_sizeINTTerminalRuleCall_2_1_0() { return cAdvance_sizeINTTerminalRuleCall_2_1_0; }
		
		//'TUPLE'
		public Keyword getTUPLEKeyword_3() { return cTUPLEKeyword_3; }
		
		//('PARTITION' 'BY' partition_attribute=Attribute)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'PARTITION'
		public Keyword getPARTITIONKeyword_4_0() { return cPARTITIONKeyword_4_0; }
		
		//'BY'
		public Keyword getBYKeyword_4_1() { return cBYKeyword_4_1; }
		
		//partition_attribute=Attribute
		public Assignment getPartition_attributeAssignment_4_2() { return cPartition_attributeAssignment_4_2; }
		
		//Attribute
		public RuleCall getPartition_attributeAttributeParserRuleCall_4_2_0() { return cPartition_attributeAttributeParserRuleCall_4_2_0; }
	}
	public class ExpressionsModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.parser.novel.cql.CQL.ExpressionsModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cExpressionsModelAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cElementsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cElementsExpressionParserRuleCall_1_0 = (RuleCall)cElementsAssignment_1.eContents().get(0);
		
		//// Expression DSL ///////////////////////////////////////////////////////
		//ExpressionsModel:
		//	{ExpressionsModel} elements+=Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//{ExpressionsModel} elements+=Expression
		public Group getGroup() { return cGroup; }
		
		//{ExpressionsModel}
		public Action getExpressionsModelAction_0() { return cExpressionsModelAction_0; }
		
		//elements+=Expression
		public Assignment getElementsAssignment_1() { return cElementsAssignment_1; }
		
		//Expression
		public RuleCall getElementsExpressionParserRuleCall_1_0() { return cElementsExpressionParserRuleCall_1_0; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.parser.novel.cql.CQL.Expression");
		private final RuleCall cOrParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Expression:
		//	Or;
		@Override public ParserRule getRule() { return rule; }
		
		//Or
		public RuleCall getOrParserRuleCall() { return cOrParserRuleCall; }
	}
	public class OrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.parser.novel.cql.CQL.Or");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAndParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOrLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cORKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAndParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Or Expression:
		//	And ({Or.left=current} 'OR' right=And)*
		@Override public ParserRule getRule() { return rule; }
		
		//And ({Or.left=current} 'OR' right=And)*
		public Group getGroup() { return cGroup; }
		
		//And
		public RuleCall getAndParserRuleCall_0() { return cAndParserRuleCall_0; }
		
		//({Or.left=current} 'OR' right=And)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Or.left=current}
		public Action getOrLeftAction_1_0() { return cOrLeftAction_1_0; }
		
		//'OR'
		public Keyword getORKeyword_1_1() { return cORKeyword_1_1; }
		
		//right=And
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//And
		public RuleCall getRightAndParserRuleCall_1_2_0() { return cRightAndParserRuleCall_1_2_0; }
	}
	public class AndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.parser.novel.cql.CQL.And");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cEqualitiyParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAndLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cANDKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightEqualitiyParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//And Expression:
		//	Equalitiy ({And.left=current} 'AND' right=Equalitiy)*
		@Override public ParserRule getRule() { return rule; }
		
		//Equalitiy ({And.left=current} 'AND' right=Equalitiy)*
		public Group getGroup() { return cGroup; }
		
		//Equalitiy
		public RuleCall getEqualitiyParserRuleCall_0() { return cEqualitiyParserRuleCall_0; }
		
		//({And.left=current} 'AND' right=Equalitiy)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{And.left=current}
		public Action getAndLeftAction_1_0() { return cAndLeftAction_1_0; }
		
		//'AND'
		public Keyword getANDKeyword_1_1() { return cANDKeyword_1_1; }
		
		//right=Equalitiy
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Equalitiy
		public RuleCall getRightEqualitiyParserRuleCall_1_2_0() { return cRightEqualitiyParserRuleCall_1_2_0; }
	}
	public class EqualitiyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.parser.novel.cql.CQL.Equalitiy");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cComparisonParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cEqualityLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final Keyword cOpEqualsSignKeyword_1_1_0_0 = (Keyword)cOpAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOpExclamationMarkEqualsSignKeyword_1_1_0_1 = (Keyword)cOpAlternatives_1_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightComparisonParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Equalitiy Expression:
		//	Comparison ({Equality.left=current} op=('=' | '!=') right=Comparison)*
		@Override public ParserRule getRule() { return rule; }
		
		//Comparison ({Equality.left=current} op=('=' | '!=') right=Comparison)*
		public Group getGroup() { return cGroup; }
		
		//Comparison
		public RuleCall getComparisonParserRuleCall_0() { return cComparisonParserRuleCall_0; }
		
		//({Equality.left=current} op=('=' | '!=') right=Comparison)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Equality.left=current}
		public Action getEqualityLeftAction_1_0() { return cEqualityLeftAction_1_0; }
		
		//op=('=' | '!=')
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//('=' | '!=')
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }
		
		//'='
		public Keyword getOpEqualsSignKeyword_1_1_0_0() { return cOpEqualsSignKeyword_1_1_0_0; }
		
		//'!='
		public Keyword getOpExclamationMarkEqualsSignKeyword_1_1_0_1() { return cOpExclamationMarkEqualsSignKeyword_1_1_0_1; }
		
		//right=Comparison
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Comparison
		public RuleCall getRightComparisonParserRuleCall_1_2_0() { return cRightComparisonParserRuleCall_1_2_0; }
	}
	public class ComparisonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.parser.novel.cql.CQL.Comparison");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPlusOrMinusParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cComparisionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final Keyword cOpGreaterThanSignEqualsSignKeyword_1_1_0_0 = (Keyword)cOpAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOpLessThanSignEqualsSignKeyword_1_1_0_1 = (Keyword)cOpAlternatives_1_1_0.eContents().get(1);
		private final Keyword cOpLessThanSignKeyword_1_1_0_2 = (Keyword)cOpAlternatives_1_1_0.eContents().get(2);
		private final Keyword cOpGreaterThanSignKeyword_1_1_0_3 = (Keyword)cOpAlternatives_1_1_0.eContents().get(3);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightPlusOrMinusParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Comparison Expression:
		//	PlusOrMinus ({Comparision.left=current} op=('>=' | '<=' | '<' | '>') right=PlusOrMinus)*
		@Override public ParserRule getRule() { return rule; }
		
		//PlusOrMinus ({Comparision.left=current} op=('>=' | '<=' | '<' | '>') right=PlusOrMinus)*
		public Group getGroup() { return cGroup; }
		
		//PlusOrMinus
		public RuleCall getPlusOrMinusParserRuleCall_0() { return cPlusOrMinusParserRuleCall_0; }
		
		//({Comparision.left=current} op=('>=' | '<=' | '<' | '>') right=PlusOrMinus)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Comparision.left=current}
		public Action getComparisionLeftAction_1_0() { return cComparisionLeftAction_1_0; }
		
		//op=('>=' | '<=' | '<' | '>')
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//('>=' | '<=' | '<' | '>')
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }
		
		//'>='
		public Keyword getOpGreaterThanSignEqualsSignKeyword_1_1_0_0() { return cOpGreaterThanSignEqualsSignKeyword_1_1_0_0; }
		
		//'<='
		public Keyword getOpLessThanSignEqualsSignKeyword_1_1_0_1() { return cOpLessThanSignEqualsSignKeyword_1_1_0_1; }
		
		//'<'
		public Keyword getOpLessThanSignKeyword_1_1_0_2() { return cOpLessThanSignKeyword_1_1_0_2; }
		
		//'>'
		public Keyword getOpGreaterThanSignKeyword_1_1_0_3() { return cOpGreaterThanSignKeyword_1_1_0_3; }
		
		//right=PlusOrMinus
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//PlusOrMinus
		public RuleCall getRightPlusOrMinusParserRuleCall_1_2_0() { return cRightPlusOrMinusParserRuleCall_1_2_0; }
	}
	public class PlusOrMinusElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.parser.novel.cql.CQL.PlusOrMinus");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMulOrDivParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cPlusLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cPlusSignKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cMinusLeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_0_1_1 = (Keyword)cGroup_1_0_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightMulOrDivParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//PlusOrMinus Expression:
		//	MulOrDiv (({Plus.left=current} '+' | {Minus.left=current} '-') right=MulOrDiv)*
		@Override public ParserRule getRule() { return rule; }
		
		//MulOrDiv (({Plus.left=current} '+' | {Minus.left=current} '-') right=MulOrDiv)*
		public Group getGroup() { return cGroup; }
		
		//MulOrDiv
		public RuleCall getMulOrDivParserRuleCall_0() { return cMulOrDivParserRuleCall_0; }
		
		//(({Plus.left=current} '+' | {Minus.left=current} '-') right=MulOrDiv)*
		public Group getGroup_1() { return cGroup_1; }
		
		//({Plus.left=current} '+' | {Minus.left=current} '-')
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//{Plus.left=current} '+'
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{Plus.left=current}
		public Action getPlusLeftAction_1_0_0_0() { return cPlusLeftAction_1_0_0_0; }
		
		//'+'
		public Keyword getPlusSignKeyword_1_0_0_1() { return cPlusSignKeyword_1_0_0_1; }
		
		//{Minus.left=current} '-'
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }
		
		//{Minus.left=current}
		public Action getMinusLeftAction_1_0_1_0() { return cMinusLeftAction_1_0_1_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1_0_1_1() { return cHyphenMinusKeyword_1_0_1_1; }
		
		//right=MulOrDiv
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//MulOrDiv
		public RuleCall getRightMulOrDivParserRuleCall_1_1_0() { return cRightMulOrDivParserRuleCall_1_1_0; }
	}
	public class MulOrDivElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.parser.novel.cql.CQL.MulOrDiv");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimaryParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cMulOrDivLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final Keyword cOpAsteriskKeyword_1_1_0_0 = (Keyword)cOpAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOpSolidusKeyword_1_1_0_1 = (Keyword)cOpAlternatives_1_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightPrimaryParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//MulOrDiv Expression:
		//	Primary ({MulOrDiv.left=current} op=('*' | '/') right=Primary)*
		@Override public ParserRule getRule() { return rule; }
		
		//Primary ({MulOrDiv.left=current} op=('*' | '/') right=Primary)*
		public Group getGroup() { return cGroup; }
		
		//Primary
		public RuleCall getPrimaryParserRuleCall_0() { return cPrimaryParserRuleCall_0; }
		
		//({MulOrDiv.left=current} op=('*' | '/') right=Primary)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{MulOrDiv.left=current}
		public Action getMulOrDivLeftAction_1_0() { return cMulOrDivLeftAction_1_0; }
		
		//op=('*' | '/')
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//('*' | '/')
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }
		
		//'*'
		public Keyword getOpAsteriskKeyword_1_1_0_0() { return cOpAsteriskKeyword_1_1_0_0; }
		
		//'/'
		public Keyword getOpSolidusKeyword_1_1_0_1() { return cOpSolidusKeyword_1_1_0_1; }
		
		//right=Primary
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Primary
		public RuleCall getRightPrimaryParserRuleCall_1_2_0() { return cRightPrimaryParserRuleCall_1_2_0; }
	}
	public class PrimaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.parser.novel.cql.CQL.Primary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cBracketAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cInnerAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cInnerExpressionParserRuleCall_0_2_0 = (RuleCall)cInnerAssignment_0_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cNOTAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cNOTKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cExpressionAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cExpressionPrimaryParserRuleCall_1_2_0 = (RuleCall)cExpressionAssignment_1_2.eContents().get(0);
		private final RuleCall cAtomicParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Primary Expression:
		//	{Bracket} '(' inner=Expression ')' | {NOT} 'NOT' expression=Primary | Atomic
		@Override public ParserRule getRule() { return rule; }
		
		//{Bracket} '(' inner=Expression ')' | {NOT} 'NOT' expression=Primary | Atomic
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{Bracket} '(' inner=Expression ')'
		public Group getGroup_0() { return cGroup_0; }
		
		//{Bracket}
		public Action getBracketAction_0_0() { return cBracketAction_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_1() { return cLeftParenthesisKeyword_0_1; }
		
		//inner=Expression
		public Assignment getInnerAssignment_0_2() { return cInnerAssignment_0_2; }
		
		//Expression
		public RuleCall getInnerExpressionParserRuleCall_0_2_0() { return cInnerExpressionParserRuleCall_0_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_3() { return cRightParenthesisKeyword_0_3; }
		
		//{NOT} 'NOT' expression=Primary
		public Group getGroup_1() { return cGroup_1; }
		
		//{NOT}
		public Action getNOTAction_1_0() { return cNOTAction_1_0; }
		
		//'NOT'
		public Keyword getNOTKeyword_1_1() { return cNOTKeyword_1_1; }
		
		//expression=Primary
		public Assignment getExpressionAssignment_1_2() { return cExpressionAssignment_1_2; }
		
		//Primary
		public RuleCall getExpressionPrimaryParserRuleCall_1_2_0() { return cExpressionPrimaryParserRuleCall_1_2_0; }
		
		//Atomic
		public RuleCall getAtomicParserRuleCall_2() { return cAtomicParserRuleCall_2; }
	}
	public class AtomicElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.parser.novel.cql.CQL.Atomic");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cIntConstantAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cValueAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_0_1_0 = (RuleCall)cValueAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cFloatConstantAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValueFLOATTerminalRuleCall_1_1_0 = (RuleCall)cValueAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cStringConstantAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cValueAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_2_1_0 = (RuleCall)cValueAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cBoolConstantAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Assignment cValueAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final Alternatives cValueAlternatives_3_1_0 = (Alternatives)cValueAssignment_3_1.eContents().get(0);
		private final Keyword cValueTRUEKeyword_3_1_0_0 = (Keyword)cValueAlternatives_3_1_0.eContents().get(0);
		private final Keyword cValueFALSEKeyword_3_1_0_1 = (Keyword)cValueAlternatives_3_1_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cAttributeRefAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Alternatives cAlternatives_4_1 = (Alternatives)cGroup_4.eContents().get(1);
		private final Assignment cValueAssignment_4_1_0 = (Assignment)cAlternatives_4_1.eContents().get(0);
		private final RuleCall cValueAttributeWithoutAliasDefinitionParserRuleCall_4_1_0_0 = (RuleCall)cValueAssignment_4_1_0.eContents().get(0);
		private final Assignment cValueAssignment_4_1_1 = (Assignment)cAlternatives_4_1.eContents().get(1);
		private final RuleCall cValueAttributeWithNestedStatementParserRuleCall_4_1_1_0 = (RuleCall)cValueAssignment_4_1_1.eContents().get(0);
		
		//Atomic Expression:
		//	{IntConstant} value=INT
		//	| {FloatConstant} value=FLOAT
		//	| {StringConstant} value=STRING
		//	| {BoolConstant} value=('TRUE' | 'FALSE') | {AttributeRef} (value=AttributeWithoutAliasDefinition |
		//	value=AttributeWithNestedStatement)
		@Override public ParserRule getRule() { return rule; }
		
		//{IntConstant} value=INT | {FloatConstant} value=FLOAT | {StringConstant} value=STRING | {BoolConstant} value=('TRUE' |
		//'FALSE') | {AttributeRef} (value=AttributeWithoutAliasDefinition | value=AttributeWithNestedStatement)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{IntConstant} value=INT
		public Group getGroup_0() { return cGroup_0; }
		
		//{IntConstant}
		public Action getIntConstantAction_0_0() { return cIntConstantAction_0_0; }
		
		//value=INT
		public Assignment getValueAssignment_0_1() { return cValueAssignment_0_1; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_0_1_0() { return cValueINTTerminalRuleCall_0_1_0; }
		
		//{FloatConstant} value=FLOAT
		public Group getGroup_1() { return cGroup_1; }
		
		//{FloatConstant}
		public Action getFloatConstantAction_1_0() { return cFloatConstantAction_1_0; }
		
		//value=FLOAT
		public Assignment getValueAssignment_1_1() { return cValueAssignment_1_1; }
		
		//FLOAT
		public RuleCall getValueFLOATTerminalRuleCall_1_1_0() { return cValueFLOATTerminalRuleCall_1_1_0; }
		
		//{StringConstant} value=STRING
		public Group getGroup_2() { return cGroup_2; }
		
		//{StringConstant}
		public Action getStringConstantAction_2_0() { return cStringConstantAction_2_0; }
		
		//value=STRING
		public Assignment getValueAssignment_2_1() { return cValueAssignment_2_1; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_2_1_0() { return cValueSTRINGTerminalRuleCall_2_1_0; }
		
		//{BoolConstant} value=('TRUE' | 'FALSE')
		public Group getGroup_3() { return cGroup_3; }
		
		//{BoolConstant}
		public Action getBoolConstantAction_3_0() { return cBoolConstantAction_3_0; }
		
		//value=('TRUE' | 'FALSE')
		public Assignment getValueAssignment_3_1() { return cValueAssignment_3_1; }
		
		//('TRUE' | 'FALSE')
		public Alternatives getValueAlternatives_3_1_0() { return cValueAlternatives_3_1_0; }
		
		//'TRUE'
		public Keyword getValueTRUEKeyword_3_1_0_0() { return cValueTRUEKeyword_3_1_0_0; }
		
		//'FALSE'
		public Keyword getValueFALSEKeyword_3_1_0_1() { return cValueFALSEKeyword_3_1_0_1; }
		
		//{AttributeRef} (value=AttributeWithoutAliasDefinition | value=AttributeWithNestedStatement)
		public Group getGroup_4() { return cGroup_4; }
		
		//{AttributeRef}
		public Action getAttributeRefAction_4_0() { return cAttributeRefAction_4_0; }
		
		//(value=AttributeWithoutAliasDefinition | value=AttributeWithNestedStatement)
		public Alternatives getAlternatives_4_1() { return cAlternatives_4_1; }
		
		//value=AttributeWithoutAliasDefinition
		public Assignment getValueAssignment_4_1_0() { return cValueAssignment_4_1_0; }
		
		//AttributeWithoutAliasDefinition
		public RuleCall getValueAttributeWithoutAliasDefinitionParserRuleCall_4_1_0_0() { return cValueAttributeWithoutAliasDefinitionParserRuleCall_4_1_0_0; }
		
		//value=AttributeWithNestedStatement
		public Assignment getValueAssignment_4_1_1() { return cValueAssignment_4_1_1; }
		
		//AttributeWithNestedStatement
		public RuleCall getValueAttributeWithNestedStatementParserRuleCall_4_1_1_0() { return cValueAttributeWithNestedStatementParserRuleCall_4_1_1_0; }
	}
	public class AtomicWithoutAttributeRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.parser.novel.cql.CQL.AtomicWithoutAttributeRef");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cIntConstantAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cValueAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_0_1_0 = (RuleCall)cValueAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cFloatConstantAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValueFLOATTerminalRuleCall_1_1_0 = (RuleCall)cValueAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cStringConstantAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cValueAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_2_1_0 = (RuleCall)cValueAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cBoolConstantAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Assignment cValueAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final Alternatives cValueAlternatives_3_1_0 = (Alternatives)cValueAssignment_3_1.eContents().get(0);
		private final Keyword cValueTRUEKeyword_3_1_0_0 = (Keyword)cValueAlternatives_3_1_0.eContents().get(0);
		private final Keyword cValueFALSEKeyword_3_1_0_1 = (Keyword)cValueAlternatives_3_1_0.eContents().get(1);
		
		//AtomicWithoutAttributeRef Expression:
		//	{IntConstant} value=INT
		//	| {FloatConstant} value=FLOAT
		//	| {StringConstant} value=STRING
		//	| {BoolConstant} value=('TRUE' | 'FALSE')
		@Override public ParserRule getRule() { return rule; }
		
		//{IntConstant} value=INT | {FloatConstant} value=FLOAT | {StringConstant} value=STRING | {BoolConstant} value=('TRUE' |
		//'FALSE')
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{IntConstant} value=INT
		public Group getGroup_0() { return cGroup_0; }
		
		//{IntConstant}
		public Action getIntConstantAction_0_0() { return cIntConstantAction_0_0; }
		
		//value=INT
		public Assignment getValueAssignment_0_1() { return cValueAssignment_0_1; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_0_1_0() { return cValueINTTerminalRuleCall_0_1_0; }
		
		//{FloatConstant} value=FLOAT
		public Group getGroup_1() { return cGroup_1; }
		
		//{FloatConstant}
		public Action getFloatConstantAction_1_0() { return cFloatConstantAction_1_0; }
		
		//value=FLOAT
		public Assignment getValueAssignment_1_1() { return cValueAssignment_1_1; }
		
		//FLOAT
		public RuleCall getValueFLOATTerminalRuleCall_1_1_0() { return cValueFLOATTerminalRuleCall_1_1_0; }
		
		//{StringConstant} value=STRING
		public Group getGroup_2() { return cGroup_2; }
		
		//{StringConstant}
		public Action getStringConstantAction_2_0() { return cStringConstantAction_2_0; }
		
		//value=STRING
		public Assignment getValueAssignment_2_1() { return cValueAssignment_2_1; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_2_1_0() { return cValueSTRINGTerminalRuleCall_2_1_0; }
		
		//{BoolConstant} value=('TRUE' | 'FALSE')
		public Group getGroup_3() { return cGroup_3; }
		
		//{BoolConstant}
		public Action getBoolConstantAction_3_0() { return cBoolConstantAction_3_0; }
		
		//value=('TRUE' | 'FALSE')
		public Assignment getValueAssignment_3_1() { return cValueAssignment_3_1; }
		
		//('TRUE' | 'FALSE')
		public Alternatives getValueAlternatives_3_1_0() { return cValueAlternatives_3_1_0; }
		
		//'TRUE'
		public Keyword getValueTRUEKeyword_3_1_0_0() { return cValueTRUEKeyword_3_1_0_0; }
		
		//'FALSE'
		public Keyword getValueFALSEKeyword_3_1_0_1() { return cValueFALSEKeyword_3_1_0_1; }
	}
	public class AtomicWithOnlyStringConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.parser.novel.cql.CQL.AtomicWithOnlyStringConstant");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStringConstantAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//AtomicWithOnlyStringConstant Expression:
		//	{StringConstant} value=STRING
		@Override public ParserRule getRule() { return rule; }
		
		//{StringConstant} value=STRING
		public Group getGroup() { return cGroup; }
		
		//{StringConstant}
		public Action getStringConstantAction_0() { return cStringConstantAction_0; }
		
		//value=STRING
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_1_0() { return cValueSTRINGTerminalRuleCall_1_0; }
	}
	public class DataTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.parser.novel.cql.CQL.DataType");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cValueAlternatives_0 = (Alternatives)cValueAssignment.eContents().get(0);
		private final Keyword cValueINTEGERKeyword_0_0 = (Keyword)cValueAlternatives_0.eContents().get(0);
		private final Keyword cValueDOUBLEKeyword_0_1 = (Keyword)cValueAlternatives_0.eContents().get(1);
		private final Keyword cValueLONGKeyword_0_2 = (Keyword)cValueAlternatives_0.eContents().get(2);
		private final Keyword cValueFLOATKeyword_0_3 = (Keyword)cValueAlternatives_0.eContents().get(3);
		private final Keyword cValueSTRINGKeyword_0_4 = (Keyword)cValueAlternatives_0.eContents().get(4);
		private final Keyword cValueBOOLEANKeyword_0_5 = (Keyword)cValueAlternatives_0.eContents().get(5);
		private final Keyword cValueSTARTTIMESTAMPKeyword_0_6 = (Keyword)cValueAlternatives_0.eContents().get(6);
		private final Keyword cValueENDTIMESTAMPKeyword_0_7 = (Keyword)cValueAlternatives_0.eContents().get(7);
		
		////TODO have to be dynamic -> use scope provider
		//DataType:
		//	value=('INTEGER' | 'DOUBLE' | 'LONG' | 'FLOAT' | 'STRING' | 'BOOLEAN'
		//	| 'STARTTIMESTAMP' | 'ENDTIMESTAMP');
		@Override public ParserRule getRule() { return rule; }
		
		//value=('INTEGER' | 'DOUBLE' | 'LONG' | 'FLOAT' | 'STRING' | 'BOOLEAN' | 'STARTTIMESTAMP' | 'ENDTIMESTAMP')
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//('INTEGER' | 'DOUBLE' | 'LONG' | 'FLOAT' | 'STRING' | 'BOOLEAN' | 'STARTTIMESTAMP' | 'ENDTIMESTAMP')
		public Alternatives getValueAlternatives_0() { return cValueAlternatives_0; }
		
		//'INTEGER'
		public Keyword getValueINTEGERKeyword_0_0() { return cValueINTEGERKeyword_0_0; }
		
		//'DOUBLE'
		public Keyword getValueDOUBLEKeyword_0_1() { return cValueDOUBLEKeyword_0_1; }
		
		//'LONG'
		public Keyword getValueLONGKeyword_0_2() { return cValueLONGKeyword_0_2; }
		
		//'FLOAT'
		public Keyword getValueFLOATKeyword_0_3() { return cValueFLOATKeyword_0_3; }
		
		//'STRING'
		public Keyword getValueSTRINGKeyword_0_4() { return cValueSTRINGKeyword_0_4; }
		
		//'BOOLEAN'
		public Keyword getValueBOOLEANKeyword_0_5() { return cValueBOOLEANKeyword_0_5; }
		
		//'STARTTIMESTAMP'
		public Keyword getValueSTARTTIMESTAMPKeyword_0_6() { return cValueSTARTTIMESTAMPKeyword_0_6; }
		
		//'ENDTIMESTAMP'
		public Keyword getValueENDTIMESTAMPKeyword_0_7() { return cValueENDTIMESTAMPKeyword_0_7; }
	}
	
	public class CreateKeywordElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.parser.novel.cql.CQL.CreateKeyword");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cCREATEEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cCREATECREATEKeyword_0_0 = (Keyword)cCREATEEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cATTACHEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cATTACHATTACHKeyword_1_0 = (Keyword)cATTACHEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum CreateKeyword:
		//	CREATE | ATTACH;
		public EnumRule getRule() { return rule; }
		
		//CREATE | ATTACH
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//CREATE
		public EnumLiteralDeclaration getCREATEEnumLiteralDeclaration_0() { return cCREATEEnumLiteralDeclaration_0; }
		
		//"CREATE"
		public Keyword getCREATECREATEKeyword_0_0() { return cCREATECREATEKeyword_0_0; }
		
		//ATTACH
		public EnumLiteralDeclaration getATTACHEnumLiteralDeclaration_1() { return cATTACHEnumLiteralDeclaration_1; }
		
		//"ATTACH"
		public Keyword getATTACHATTACHKeyword_1_0() { return cATTACHATTACHKeyword_1_0; }
	}
	
	private final ModelElements pModel;
	private final TerminalRule tID;
	private final TerminalRule tFLOAT;
	private final IDOrINTElements pIDOrINT;
	private final StatementElements pStatement;
	private final SelectElements pSelect;
	private final NestedStatementElements pNestedStatement;
	private final SourceElements pSource;
	private final SourceNameElements pSourceName;
	private final AttributeElements pAttribute;
	private final AttributeWithoutAliasDefinitionElements pAttributeWithoutAliasDefinition;
	private final AttributeNameElements pAttributeName;
	private final AttributeWithNestedStatementElements pAttributeWithNestedStatement;
	private final AggregationElements pAggregation;
	private final AggregationWithoutAliasDefinitionElements pAggregationWithoutAliasDefinition;
	private final ExpressionComponentElements pExpressionComponent;
	private final ExpressionComponentConstantOrAttributeElements pExpressionComponentConstantOrAttribute;
	private final ExpressionComponentMapperOrConstantElements pExpressionComponentMapperOrConstant;
	private final ExpressionComponentOnlyAttributeElements pExpressionComponentOnlyAttribute;
	private final ExpressionComponentOnlyConstantElements pExpressionComponentOnlyConstant;
	private final ExpressionComponentOnlymapperElements pExpressionComponentOnlymapper;
	private final MapperElements pMapper;
	private final SelectExpressionElements pSelectExpression;
	private final SelectExpressionWithoutAliasDefinitionElements pSelectExpressionWithoutAliasDefinition;
	private final SelectExpressionWithOnlyAttributeOrConstantElements pSelectExpressionWithOnlyAttributeOrConstant;
	private final AliasElements pAlias;
	private final CreateKeywordElements eCreateKeyword;
	private final CreateParametersElements pCreateParameters;
	private final AttributeDefinitionElements pAttributeDefinition;
	private final CreateStream1Elements pCreateStream1;
	private final CreateSink1Elements pCreateSink1;
	private final CreateStreamChannelElements pCreateStreamChannel;
	private final CreateStreamFileElements pCreateStreamFile;
	private final CreateViewElements pCreateView;
	private final StreamToElements pStreamTo;
	private final CommandElements pCommand;
	private final DropElements pDrop;
	private final Window_UnboundedElements pWindow_Unbounded;
	private final Window_TimebasedElements pWindow_Timebased;
	private final Window_TuplebasedElements pWindow_Tuplebased;
	private final ExpressionsModelElements pExpressionsModel;
	private final ExpressionElements pExpression;
	private final OrElements pOr;
	private final AndElements pAnd;
	private final EqualitiyElements pEqualitiy;
	private final ComparisonElements pComparison;
	private final PlusOrMinusElements pPlusOrMinus;
	private final MulOrDivElements pMulOrDiv;
	private final PrimaryElements pPrimary;
	private final AtomicElements pAtomic;
	private final AtomicWithoutAttributeRefElements pAtomicWithoutAttributeRef;
	private final AtomicWithOnlyStringConstantElements pAtomicWithOnlyStringConstant;
	private final DataTypeElements pDataType;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public CQLGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.parser.novel.cql.CQL.ID");
		this.tFLOAT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.parser.novel.cql.CQL.FLOAT");
		this.pIDOrINT = new IDOrINTElements();
		this.pStatement = new StatementElements();
		this.pSelect = new SelectElements();
		this.pNestedStatement = new NestedStatementElements();
		this.pSource = new SourceElements();
		this.pSourceName = new SourceNameElements();
		this.pAttribute = new AttributeElements();
		this.pAttributeWithoutAliasDefinition = new AttributeWithoutAliasDefinitionElements();
		this.pAttributeName = new AttributeNameElements();
		this.pAttributeWithNestedStatement = new AttributeWithNestedStatementElements();
		this.pAggregation = new AggregationElements();
		this.pAggregationWithoutAliasDefinition = new AggregationWithoutAliasDefinitionElements();
		this.pExpressionComponent = new ExpressionComponentElements();
		this.pExpressionComponentConstantOrAttribute = new ExpressionComponentConstantOrAttributeElements();
		this.pExpressionComponentMapperOrConstant = new ExpressionComponentMapperOrConstantElements();
		this.pExpressionComponentOnlyAttribute = new ExpressionComponentOnlyAttributeElements();
		this.pExpressionComponentOnlyConstant = new ExpressionComponentOnlyConstantElements();
		this.pExpressionComponentOnlymapper = new ExpressionComponentOnlymapperElements();
		this.pMapper = new MapperElements();
		this.pSelectExpression = new SelectExpressionElements();
		this.pSelectExpressionWithoutAliasDefinition = new SelectExpressionWithoutAliasDefinitionElements();
		this.pSelectExpressionWithOnlyAttributeOrConstant = new SelectExpressionWithOnlyAttributeOrConstantElements();
		this.pAlias = new AliasElements();
		this.eCreateKeyword = new CreateKeywordElements();
		this.pCreateParameters = new CreateParametersElements();
		this.pAttributeDefinition = new AttributeDefinitionElements();
		this.pCreateStream1 = new CreateStream1Elements();
		this.pCreateSink1 = new CreateSink1Elements();
		this.pCreateStreamChannel = new CreateStreamChannelElements();
		this.pCreateStreamFile = new CreateStreamFileElements();
		this.pCreateView = new CreateViewElements();
		this.pStreamTo = new StreamToElements();
		this.pCommand = new CommandElements();
		this.pDrop = new DropElements();
		this.pWindow_Unbounded = new Window_UnboundedElements();
		this.pWindow_Timebased = new Window_TimebasedElements();
		this.pWindow_Tuplebased = new Window_TuplebasedElements();
		this.pExpressionsModel = new ExpressionsModelElements();
		this.pExpression = new ExpressionElements();
		this.pOr = new OrElements();
		this.pAnd = new AndElements();
		this.pEqualitiy = new EqualitiyElements();
		this.pComparison = new ComparisonElements();
		this.pPlusOrMinus = new PlusOrMinusElements();
		this.pMulOrDiv = new MulOrDivElements();
		this.pPrimary = new PrimaryElements();
		this.pAtomic = new AtomicElements();
		this.pAtomicWithoutAttributeRef = new AtomicWithoutAttributeRefElements();
		this.pAtomicWithOnlyStringConstant = new AtomicWithOnlyStringConstantElements();
		this.pDataType = new DataTypeElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("de.uniol.inf.is.odysseus.parser.novel.cql.CQL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	statements+=Statement*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//terminal ID:
	//	('a'..'z' | 'A'..'Z' | '_' | ':' | '$' | '{' | '}') ('a'..'z' | 'A'..'Z' | '_' | ':' | '$' | '{' | '}' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return tID;
	}
	
	//terminal FLOAT:
	//	INT '.' INT;
	public TerminalRule getFLOATRule() {
		return tFLOAT;
	}
	
	//IDOrINT:
	//	ID | INT;
	public IDOrINTElements getIDOrINTAccess() {
		return pIDOrINT;
	}
	
	public ParserRule getIDOrINTRule() {
		return getIDOrINTAccess().getRule();
	}
	
	//Statement:
	//	(type=Select | type=StreamTo | type=Drop | type=CreateStream1 | type=CreateSink1 | type=CreateStreamChannel |
	//	type=CreateStreamFile | type=CreateView) ';'?;
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}
	
	//Select:
	//	name='SELECT'
	//	distinct='DISTINCT'? ('*' | (attributes+=Attribute
	//	| aggregations+=Aggregation
	//	| expressions+=SelectExpression
	//	//				| mappers+=Mapper
	//)+ (',' attributes+=Attribute | ',' aggregations+=Aggregation | ',' expressions+=SelectExpression)*) ('FROM'
	//	sources+=Source+ (',' sources+=Source)*) ('WHERE' predicates=ExpressionsModel)? ('GROUP' 'BY' order+=Attribute+ (','
	//	order+=Attribute)*)? ('HAVING' having=ExpressionsModel)?;
	public SelectElements getSelectAccess() {
		return pSelect;
	}
	
	public ParserRule getSelectRule() {
		return getSelectAccess().getRule();
	}
	
	//NestedStatement Select:
	//	'(' Select ')'
	public NestedStatementElements getNestedStatementAccess() {
		return pNestedStatement;
	}
	
	public ParserRule getNestedStatementRule() {
		return getNestedStatementAccess().getRule();
	}
	
	//Source:
	//	name=SourceName ('[' (unbounded=Window_Unbounded | time=Window_Timebased | tuple=Window_Tuplebased) ']')? ('AS'
	//	alias=Alias)?
	//	| nested=NestedStatement 'AS' alias=Alias;
	public SourceElements getSourceAccess() {
		return pSource;
	}
	
	public ParserRule getSourceRule() {
		return getSourceAccess().getRule();
	}
	
	////SourceAsNestedSelect returns Source:
	////		nested=NestedStatement 'AS' alias=Alias
	////;
	//SourceName:
	//	ID;
	public SourceNameElements getSourceNameAccess() {
		return pSourceName;
	}
	
	public ParserRule getSourceNameRule() {
		return getSourceNameAccess().getRule();
	}
	
	//Attribute:
	//	name=AttributeName ('AS' alias=Alias)?;
	public AttributeElements getAttributeAccess() {
		return pAttribute;
	}
	
	public ParserRule getAttributeRule() {
		return getAttributeAccess().getRule();
	}
	
	//AttributeWithoutAliasDefinition Attribute:
	//	name=AttributeName
	public AttributeWithoutAliasDefinitionElements getAttributeWithoutAliasDefinitionAccess() {
		return pAttributeWithoutAliasDefinition;
	}
	
	public ParserRule getAttributeWithoutAliasDefinitionRule() {
		return getAttributeWithoutAliasDefinitionAccess().getRule();
	}
	
	//AttributeName:
	//	ID | SourceName '.' ID;
	public AttributeNameElements getAttributeNameAccess() {
		return pAttributeName;
	}
	
	public ParserRule getAttributeNameRule() {
		return getAttributeNameAccess().getRule();
	}
	
	//AttributeWithNestedStatement:
	//	value=AttributeWithoutAliasDefinition
	//	'IN'
	//	nested=NestedStatement;
	public AttributeWithNestedStatementElements getAttributeWithNestedStatementAccess() {
		return pAttributeWithNestedStatement;
	}
	
	public ParserRule getAttributeWithNestedStatementRule() {
		return getAttributeWithNestedStatementAccess().getRule();
	}
	
	//Aggregation:
	//	name=('AVG' | 'MIN' | 'MAX' | 'COUNT' | 'SUM' | 'MEDIAN' | 'FIRST' | 'LAST')
	//	'(' (attribute=AttributeWithoutAliasDefinition | expression=SelectExpressionWithoutAliasDefinition) ')' ('AS'
	//	alias=Alias)?;
	public AggregationElements getAggregationAccess() {
		return pAggregation;
	}
	
	public ParserRule getAggregationRule() {
		return getAggregationAccess().getRule();
	}
	
	//AggregationWithoutAliasDefinition Aggregation:
	//	name=('AVG' | 'MIN' | 'MAX' | 'COUNT' | 'SUM' | 'MEDIAN' | 'FIRST' | 'LAST')
	//	'(' attribute=AttributeWithoutAliasDefinition ')'
	public AggregationWithoutAliasDefinitionElements getAggregationWithoutAliasDefinitionAccess() {
		return pAggregationWithoutAliasDefinition;
	}
	
	public ParserRule getAggregationWithoutAliasDefinitionRule() {
		return getAggregationWithoutAliasDefinitionAccess().getRule();
	}
	
	//ExpressionComponent:
	//	ExpressionComponentConstantOrAttribute {ExpressionComponent.value=current} | ExpressionComponentMapperOrConstant
	//	{ExpressionComponent.value=current};
	public ExpressionComponentElements getExpressionComponentAccess() {
		return pExpressionComponent;
	}
	
	public ParserRule getExpressionComponentRule() {
		return getExpressionComponentAccess().getRule();
	}
	
	//ExpressionComponentConstantOrAttribute ExpressionComponent:
	//	value=AtomicWithoutAttributeRef | value=AttributeWithoutAliasDefinition
	public ExpressionComponentConstantOrAttributeElements getExpressionComponentConstantOrAttributeAccess() {
		return pExpressionComponentConstantOrAttribute;
	}
	
	public ParserRule getExpressionComponentConstantOrAttributeRule() {
		return getExpressionComponentConstantOrAttributeAccess().getRule();
	}
	
	//ExpressionComponentMapperOrConstant ExpressionComponent:
	//	Mapper {ExpressionComponent.value=current} | value=AtomicWithoutAttributeRef
	public ExpressionComponentMapperOrConstantElements getExpressionComponentMapperOrConstantAccess() {
		return pExpressionComponentMapperOrConstant;
	}
	
	public ParserRule getExpressionComponentMapperOrConstantRule() {
		return getExpressionComponentMapperOrConstantAccess().getRule();
	}
	
	//ExpressionComponentOnlyAttribute ExpressionComponent:
	//	value=AttributeWithoutAliasDefinition
	public ExpressionComponentOnlyAttributeElements getExpressionComponentOnlyAttributeAccess() {
		return pExpressionComponentOnlyAttribute;
	}
	
	public ParserRule getExpressionComponentOnlyAttributeRule() {
		return getExpressionComponentOnlyAttributeAccess().getRule();
	}
	
	//ExpressionComponentOnlyConstant ExpressionComponent:
	//	value=AtomicWithoutAttributeRef
	public ExpressionComponentOnlyConstantElements getExpressionComponentOnlyConstantAccess() {
		return pExpressionComponentOnlyConstant;
	}
	
	public ParserRule getExpressionComponentOnlyConstantRule() {
		return getExpressionComponentOnlyConstantAccess().getRule();
	}
	
	//ExpressionComponentOnlymapper ExpressionComponent:
	//	Mapper {ExpressionComponent.value=current}
	public ExpressionComponentOnlymapperElements getExpressionComponentOnlymapperAccess() {
		return pExpressionComponentOnlymapper;
	}
	
	public ParserRule getExpressionComponentOnlymapperRule() {
		return getExpressionComponentOnlymapperAccess().getRule();
	}
	
	//Mapper ExpressionComponent:
	//	{Mapper} name='DolToEur' '(' value=SelectExpressionWithoutAliasDefinition ')'
	public MapperElements getMapperAccess() {
		return pMapper;
	}
	
	public ParserRule getMapperRule() {
		return getMapperAccess().getRule();
	}
	
	//SelectExpression:
	//	(expressions+=ExpressionComponentMapperOrConstant (operators+=('+' | '-' | '*' | '/')
	//	expressions+=(ExpressionComponentConstantOrAttribute | ExpressionComponentOnlymapper))*
	//	| expressions+=ExpressionComponentOnlyAttribute (operators+=('+' | '-' | '*' | '/')
	//	expressions+=(ExpressionComponentConstantOrAttribute | ExpressionComponentOnlymapper))+) ('AS' alias=Alias)?;
	public SelectExpressionElements getSelectExpressionAccess() {
		return pSelectExpression;
	}
	
	public ParserRule getSelectExpressionRule() {
		return getSelectExpressionAccess().getRule();
	}
	
	//SelectExpressionWithoutAliasDefinition SelectExpression:
	//	SelectExpressionWithOnlyAttributeOrConstant (expressions+=ExpressionComponentMapperOrConstant (operators+=('+' | '-' |
	//	'*' | '/') expressions+=(ExpressionComponentConstantOrAttribute | ExpressionComponentOnlymapper))*
	//	| expressions+=ExpressionComponentOnlyAttribute (operators+=('+' | '-' | '*' | '/')
	//	expressions+=(ExpressionComponentConstantOrAttribute | ExpressionComponentOnlymapper))+)
	public SelectExpressionWithoutAliasDefinitionElements getSelectExpressionWithoutAliasDefinitionAccess() {
		return pSelectExpressionWithoutAliasDefinition;
	}
	
	public ParserRule getSelectExpressionWithoutAliasDefinitionRule() {
		return getSelectExpressionWithoutAliasDefinitionAccess().getRule();
	}
	
	//SelectExpressionWithOnlyAttributeOrConstant SelectExpressionWithoutAliasDefinition:
	//	expressions+=ExpressionComponentConstantOrAttribute (operators+=('+' | '-' | '*' | '/')
	//	expressions+=ExpressionComponentConstantOrAttribute)*
	public SelectExpressionWithOnlyAttributeOrConstantElements getSelectExpressionWithOnlyAttributeOrConstantAccess() {
		return pSelectExpressionWithOnlyAttributeOrConstant;
	}
	
	public ParserRule getSelectExpressionWithOnlyAttributeOrConstantRule() {
		return getSelectExpressionWithOnlyAttributeOrConstantAccess().getRule();
	}
	
	////SelectExpressionWithoutAliasDefinition returns SelectExpression:
	////	ExpressionComponent 
	////	|(expressions+=ExpressionComponent (operators+=('+'|'-'|'*'|'/') expressions+=ExpressionComponent)*)
	////;
	////Mapper://TODO That is not supposed to be hard coded! 
	////	name=('DolToEur')
	////	'('
	////	(attribute=AttributeWithoutAliasDefinition 
	////		| innerexpression = SelectExpressionWithoutAliasDefinition2
	////	)
	////	')'
	////	('AS' alias=Alias)?
	////;
	////
	////MapperWithoutAlias returns Mapper://TODO That is not supposed to be hard coded! 
	////	name=('DolToEur')
	////	'('
	////	(attribute=AttributeWithoutAliasDefinition 
	////		| innerexpression = SelectExpressionWithoutAliasDefinition2
	////	)
	////	')'
	////;
	////
	////SelectExpressionWithOnlyMapper returns SelectExpression:
	////	leftmapper=Mapper
	////;
	////
	////SelectExpression:
	////	(leftmapper=MapperWithoutAlias
	////		| leftattribute=AttributeWithoutAliasDefinition 
	////		| leftconstant=AtomicWithoutAttributeRef
	////	)
	////	operator=('+'|'-'|'/'|'*')
	////	(innerexpression=SelectExpressionWithoutAliasDefinition)?
	////	(rightattribute=AttributeWithoutAliasDefinition | rightconstant=AtomicWithoutAttributeRef)
	////	('AS' alias=Alias)?
	////;
	////
	////SelectExpressionWithoutAliasDefinition returns SelectExpression:
	////	(leftmapper=MapperWithoutAlias
	////		| leftattribute=AttributeWithoutAliasDefinition 
	////		| leftconstant=AtomicWithoutAttributeRef
	////	)
	////	operator=('+'|'-'|'/'|'*')
	////	(innerexpression=SelectExpressionWithoutAliasDefinition)?
	////;
	////
	////SelectExpressionWithoutAliasDefinition2 returns SelectExpression:
	////	(leftmapper=MapperWithoutAlias
	////		| leftattribute=AttributeWithoutAliasDefinition 
	////		| leftconstant=AtomicWithoutAttributeRef
	////	)
	////	operator=('+'|'-'|'/'|'*')
	////	(innerexpression=SelectExpressionWithoutAliasDefinition)?
	////	(rightattribute=AttributeWithoutAliasDefinition | rightconstant=AtomicWithoutAttributeRef)
	////;
	////
	///////
	////SelectExpressionOnlyWithAttributeAndConstant returns SelectExpression:
	////	(leftattribute=AttributeWithoutAliasDefinition 
	////		| leftconstant=AtomicWithoutAttributeRef
	////	)
	////	operator=('+'|'-'|'/'|'*')
	////	(innerexpression=SelectExpressionOnlyWithAttributeAndConstant2)?
	////	(rightattribute=AttributeWithoutAliasDefinition 
	////		| rightconstant=AtomicWithoutAttributeRef
	////	)
	////;
	////
	////SelectExpressionOnlyWithAttributeAndConstant2 returns SelectExpression:
	////	(leftattribute=AttributeWithoutAliasDefinition 
	////		| leftconstant=AtomicWithoutAttributeRef
	////	)
	////	operator=('+'|'-'|'/'|'*')
	////	(innerexpression=SelectExpressionOnlyWithAttributeAndConstant2)?
	////;
	////
	////SelectExpressionOnlyWithStringConstant returns SelectExpression:
	////	leftconstant=AtomicWithOnlyStringConstant
	////	operator=('+'|'-')
	////	(innerexpression=SelectExpressionOnlyWithStringConstant2)?
	////	rightconstant=AtomicWithOnlyStringConstant
	////	('AS' alias=Alias)?
	////;
	////
	////SelectExpressionOnlyWithStringConstant2 returns SelectExpression:
	////	leftconstant=AtomicWithOnlyStringConstant
	////	operator=('+'|'-')
	////	(innerexpression=SelectExpressionOnlyWithStringConstant2)?
	////;
	////
	////SelectExpressionOnlyWithAttribute returns SelectExpression:
	////	leftattribute=AttributeWithoutAliasDefinition
	////	operator=('+'|'-'|'/'|'*')
	////	(innerexpression=SelectExpressionOnlyWithAttribute2)?
	////	rightatttriute=AttributeWithoutAliasDefinition
	////;
	////
	////SelectExpressionOnlyWithAttribute2 returns SelectExpression:
	////	leftattribute=AttributeWithoutAliasDefinition
	////	operator=('+'|'-'|'/'|'*')
	////	(innerexpression=SelectExpressionOnlyWithAttribute2)?
	////;
	//Alias:
	//	name=ID;
	public AliasElements getAliasAccess() {
		return pAlias;
	}
	
	public ParserRule getAliasRule() {
		return getAliasAccess().getRule();
	}
	
	//enum CreateKeyword:
	//	CREATE | ATTACH;
	public CreateKeywordElements getCreateKeywordAccess() {
		return eCreateKeyword;
	}
	
	public EnumRule getCreateKeywordRule() {
		return getCreateKeywordAccess().getRule();
	}
	
	//CreateParameters:
	//	'WRAPPER' wrapper=STRING
	//	'PROTOCOL' protocol=STRING
	//	'TRANSPORT' transport=STRING
	//	'DATAHANDLER' datahandler=STRING
	//	'OPTIONS' '(' (keys+=STRING values+=STRING)+ (',' keys+=STRING values+=STRING)? ')';
	public CreateParametersElements getCreateParametersAccess() {
		return pCreateParameters;
	}
	
	public ParserRule getCreateParametersRule() {
		return getCreateParametersAccess().getRule();
	}
	
	//AttributeDefinition:
	//	name=ID
	//	'(' attributes+=Attribute+ datatypes+=DataType+ (',' attributes+=Attribute datatypes+=DataType)* ')';
	public AttributeDefinitionElements getAttributeDefinitionAccess() {
		return pAttributeDefinition;
	}
	
	public ParserRule getAttributeDefinitionRule() {
		return getAttributeDefinitionAccess().getRule();
	}
	
	//CreateStream1:
	//	keyword=CreateKeyword
	//	'STREAM'
	//	attributes=AttributeDefinition
	//	pars=CreateParameters;
	public CreateStream1Elements getCreateStream1Access() {
		return pCreateStream1;
	}
	
	public ParserRule getCreateStream1Rule() {
		return getCreateStream1Access().getRule();
	}
	
	//CreateSink1:
	//	keyword=CreateKeyword
	//	'SINK'
	//	attributes=AttributeDefinition
	//	pars=CreateParameters;
	public CreateSink1Elements getCreateSink1Access() {
		return pCreateSink1;
	}
	
	public ParserRule getCreateSink1Rule() {
		return getCreateSink1Access().getRule();
	}
	
	//CreateStreamChannel:
	//	keyword=CreateKeyword
	//	'STREAM'
	//	attributes=AttributeDefinition
	//	'CHANNEL' host=ID ':' port=INT;
	public CreateStreamChannelElements getCreateStreamChannelAccess() {
		return pCreateStreamChannel;
	}
	
	public ParserRule getCreateStreamChannelRule() {
		return getCreateStreamChannelAccess().getRule();
	}
	
	//CreateStreamFile:
	//	keyword=CreateKeyword
	//	'STREAM'
	//	attributes=AttributeDefinition
	//	'FILE' filename=STRING 'AS' type=ID;
	public CreateStreamFileElements getCreateStreamFileAccess() {
		return pCreateStreamFile;
	}
	
	public ParserRule getCreateStreamFileRule() {
		return getCreateStreamFileAccess().getRule();
	}
	
	////Create:
	////	name=('CREATE'|'ATTACH') (channelformat=ChannelFormat|accessframework=AccessFramework)
	////;
	////
	////AccessFramework:
	////	type=('STREAM'|'SINK')
	////	name = ID
	////	'('
	////	attributes+= Attribute+ 
	////	datatypes+= DataType+
	////	(',' attributes+=Attribute datatypes+= DataType)*
	////	')'
	////	'WRAPPER' wrapper=STRING
	////	'PROTOCOL' protocol=STRING
	////	'TRANSPORT' transport=STRING
	////	'DATAHANDLER' datahandler=STRING
	////	'OPTIONS' 
	////		'(' 
	////			(keys+=STRING values+=STRING)+ (',' keys+=STRING values+=STRING)?
	////		')'
	////;
	////
	////ChannelFormat: (stream=ChannelFormatStream|view=ChannelFormatView);
	////
	////ChannelFormatStream:
	////	'STREAM'
	////	name = ID
	////	'('
	////	attributes+= Attribute+ 
	////	datatypes+= DataType+
	////	(',' attributes+=Attribute datatypes+= DataType)*
	////	')'
	////	(    'CHANNEL' (keys+=ID) ':'
	////		|'FILE' (keys+=STRING) 'AS'
	////	) 
	////	(values+=IDOrINT)
	////;
	//CreateView:
	//	'VIEW' name=ID 'FROM' select=NestedStatement;
	public CreateViewElements getCreateViewAccess() {
		return pCreateView;
	}
	
	public ParserRule getCreateViewRule() {
		return getCreateViewAccess().getRule();
	}
	
	//StreamTo:
	//	'STREAM' 'TO' name=ID (statement=Select | inputname=ID);
	public StreamToElements getStreamToAccess() {
		return pStreamTo;
	}
	
	public ParserRule getStreamToRule() {
		return getStreamToAccess().getRule();
	}
	
	//// build generic rule for those commands
	//Command:
	//	keyword1=ID
	//	keyword2=ID
	//	value1=ID
	//	keyword3=ID
	//	value2=ID
	//	";"?;
	public CommandElements getCommandAccess() {
		return pCommand;
	}
	
	public ParserRule getCommandRule() {
		return getCommandAccess().getRule();
	}
	
	//Drop Command:
	//	keyword1='DROP'
	//	keyword2=('SINK' | 'STREAM') value1=ID
	//	keyword3='IF EXISTS'?
	//	value2=ID
	public DropElements getDropAccess() {
		return pDrop;
	}
	
	public ParserRule getDropRule() {
		return getDropAccess().getRule();
	}
	
	//Window_Unbounded:
	//	'UNBOUNDED';
	public Window_UnboundedElements getWindow_UnboundedAccess() {
		return pWindow_Unbounded;
	}
	
	public ParserRule getWindow_UnboundedRule() {
		return getWindow_UnboundedAccess().getRule();
	}
	
	//Window_Timebased:
	//	'SIZE' size=INT unit=ID ('ADVANCE' advance_size=INT advance_unit=ID)?
	//	'TIME';
	public Window_TimebasedElements getWindow_TimebasedAccess() {
		return pWindow_Timebased;
	}
	
	public ParserRule getWindow_TimebasedRule() {
		return getWindow_TimebasedAccess().getRule();
	}
	
	//Window_Tuplebased: //TODO PARTITION BY only if a GROUP BY clause exists
	//	'SIZE' size=INT ('ADVANCE' advance_size=INT)? 'TUPLE' ('PARTITION' 'BY' partition_attribute=Attribute)?;
	public Window_TuplebasedElements getWindow_TuplebasedAccess() {
		return pWindow_Tuplebased;
	}
	
	public ParserRule getWindow_TuplebasedRule() {
		return getWindow_TuplebasedAccess().getRule();
	}
	
	//// Expression DSL ///////////////////////////////////////////////////////
	//ExpressionsModel:
	//	{ExpressionsModel} elements+=Expression;
	public ExpressionsModelElements getExpressionsModelAccess() {
		return pExpressionsModel;
	}
	
	public ParserRule getExpressionsModelRule() {
		return getExpressionsModelAccess().getRule();
	}
	
	//Expression:
	//	Or;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//Or Expression:
	//	And ({Or.left=current} 'OR' right=And)*
	public OrElements getOrAccess() {
		return pOr;
	}
	
	public ParserRule getOrRule() {
		return getOrAccess().getRule();
	}
	
	//And Expression:
	//	Equalitiy ({And.left=current} 'AND' right=Equalitiy)*
	public AndElements getAndAccess() {
		return pAnd;
	}
	
	public ParserRule getAndRule() {
		return getAndAccess().getRule();
	}
	
	//Equalitiy Expression:
	//	Comparison ({Equality.left=current} op=('=' | '!=') right=Comparison)*
	public EqualitiyElements getEqualitiyAccess() {
		return pEqualitiy;
	}
	
	public ParserRule getEqualitiyRule() {
		return getEqualitiyAccess().getRule();
	}
	
	//Comparison Expression:
	//	PlusOrMinus ({Comparision.left=current} op=('>=' | '<=' | '<' | '>') right=PlusOrMinus)*
	public ComparisonElements getComparisonAccess() {
		return pComparison;
	}
	
	public ParserRule getComparisonRule() {
		return getComparisonAccess().getRule();
	}
	
	//PlusOrMinus Expression:
	//	MulOrDiv (({Plus.left=current} '+' | {Minus.left=current} '-') right=MulOrDiv)*
	public PlusOrMinusElements getPlusOrMinusAccess() {
		return pPlusOrMinus;
	}
	
	public ParserRule getPlusOrMinusRule() {
		return getPlusOrMinusAccess().getRule();
	}
	
	//MulOrDiv Expression:
	//	Primary ({MulOrDiv.left=current} op=('*' | '/') right=Primary)*
	public MulOrDivElements getMulOrDivAccess() {
		return pMulOrDiv;
	}
	
	public ParserRule getMulOrDivRule() {
		return getMulOrDivAccess().getRule();
	}
	
	//Primary Expression:
	//	{Bracket} '(' inner=Expression ')' | {NOT} 'NOT' expression=Primary | Atomic
	public PrimaryElements getPrimaryAccess() {
		return pPrimary;
	}
	
	public ParserRule getPrimaryRule() {
		return getPrimaryAccess().getRule();
	}
	
	//Atomic Expression:
	//	{IntConstant} value=INT
	//	| {FloatConstant} value=FLOAT
	//	| {StringConstant} value=STRING
	//	| {BoolConstant} value=('TRUE' | 'FALSE') | {AttributeRef} (value=AttributeWithoutAliasDefinition |
	//	value=AttributeWithNestedStatement)
	public AtomicElements getAtomicAccess() {
		return pAtomic;
	}
	
	public ParserRule getAtomicRule() {
		return getAtomicAccess().getRule();
	}
	
	//AtomicWithoutAttributeRef Expression:
	//	{IntConstant} value=INT
	//	| {FloatConstant} value=FLOAT
	//	| {StringConstant} value=STRING
	//	| {BoolConstant} value=('TRUE' | 'FALSE')
	public AtomicWithoutAttributeRefElements getAtomicWithoutAttributeRefAccess() {
		return pAtomicWithoutAttributeRef;
	}
	
	public ParserRule getAtomicWithoutAttributeRefRule() {
		return getAtomicWithoutAttributeRefAccess().getRule();
	}
	
	//AtomicWithOnlyStringConstant Expression:
	//	{StringConstant} value=STRING
	public AtomicWithOnlyStringConstantElements getAtomicWithOnlyStringConstantAccess() {
		return pAtomicWithOnlyStringConstant;
	}
	
	public ParserRule getAtomicWithOnlyStringConstantRule() {
		return getAtomicWithOnlyStringConstantAccess().getRule();
	}
	
	////TODO have to be dynamic -> use scope provider
	//DataType:
	//	value=('INTEGER' | 'DOUBLE' | 'LONG' | 'FLOAT' | 'STRING' | 'BOOLEAN'
	//	| 'STARTTIMESTAMP' | 'ENDTIMESTAMP');
	public DataTypeElements getDataTypeAccess() {
		return pDataType;
	}
	
	public ParserRule getDataTypeRule() {
		return getDataTypeAccess().getRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
