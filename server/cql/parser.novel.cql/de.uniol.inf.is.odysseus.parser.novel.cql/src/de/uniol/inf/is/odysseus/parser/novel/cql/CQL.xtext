grammar de.uniol.inf.is.odysseus.parser.novel.cql.CQL with org.eclipse.xtext.common.Terminals

generate cQL "http://www.uniol.de/inf/is/odysseus/parser/novel/cql/CQL"


Model: statements+=(Statement)*;
	
terminal ID: ('a'..'z'|'A'..'Z'|'_'|':'|'$'|'{'|'}') ('a'..'z'|'A'..'Z'|'_'|':'|'$'|'{'|'}'|'0'..'9')*;	
terminal FLOAT:  INT '.' INT;
	
IDOrINT:
	ID | INT
;

Statement:	
	(type=Select | type=StreamTo | type=Drop | type=CreateStream1 | type=CreateSink1 | type=CreateStreamChannel | type=CreateStreamFile | type=CreateView) 
	(';')?
;
 
Select:
	name='SELECT'
	(distinct='DISTINCT')?
	( '*' |
		( 
			(attributes+=Attribute | aggregations+=Aggregation)+  
			& (',' attributes+=Attribute)* 
			& (',' aggregations+=Aggregation)*
		)
	)
	('FROM' sources+=Source+ (',' sources+=Source)*)
	('WHERE' predicates=ExpressionsModel)?
	('GROUP' 'BY' order+=Attribute+ (',' order+=Attribute)*)? //ordering+=Attribute+ ('ASC' | 'DESC')?)?)
	('HAVING' having=ExpressionsModel)?
;

NestedStatement returns Select: '(' Select ')' ;

Source: 
	name=SourceName 
	('[' (unbounded=Window_Unbounded|time=Window_Timebased|tuple=Window_Tuplebased) ']')? ('AS' alias=Alias)?
	|
	(nested=NestedStatement 'AS' alias=Alias)
;

//SourceAsNestedSelect returns Source:
//		nested=NestedStatement 'AS' alias=Alias
//;

SourceName:
	ID
;

Attribute: 
	name=AttributeName
	('AS' alias=Alias)?
;
 
AttributeWithoutAlias returns Attribute: 
	name=AttributeName
; 

AttributeName:
	(ID | SourceName '.' ID)
;

AttributeWithNestedStatement:
	value=AttributeWithoutAlias
	'IN'
	nested=NestedStatement
;  
 
Aggregation:
	name=ID
	'(' attribute=AttributeWithoutAlias ')'
	('AS' alias=Alias)?
;

Alias:
	name=ID
;  

//SelectWithoutWhere returns Select:
//	name='SELECT'
//	(distinct='DISTINCT')?
//	( '*' |
//		( 
//			(attributes+=Attribute | aggregations+=Aggregation)+  
//			& (',' attributes+=Attribute)* 
//			& (',' aggregations+=Aggregation)*
//		)
//	)
//	('FROM' sources+=Source+ (',' sources+=Source)*)
//	'GROUP' 'BY' order+=Attribute+ (',' order+=Attribute) //ordering+=Attribute+ ('ASC' | 'DESC')?)?
//	'HAVING' having=ExpressionsModel
//;
//
//SelectWithoutWhere returns Select:
//	name='SELECT'
//	(distinct='DISTINCT')?
//	( '*' |
//		( 
//			(attributes+=Attribute | aggregations+=Aggregation)+  
//			& (',' attributes+=Attribute)* 
//			& (',' aggregations+=Aggregation)*
//		)
//	)
//	('FROM' sources+=Source+ (',' sources+=Source)*)
//	'GROUP' 'BY' order+=Attribute+ (',' order+=Attribute) //ordering+=Attribute+ ('ASC' | 'DESC')?)?
//	'HAVING' having=ExpressionsModel
//;
//
//SelectWithoutGroupBy returns Select:
//	name='SELECT'
//	(distinct='DISTINCT')?
//	( '*' |
//		( 
//			(attributes+=Attribute | aggregations+=Aggregation)+  
//			& (',' attributes+=Attribute)* 
//			& (',' aggregations+=Aggregation)*
//		)
//	)
//	('FROM' sources+=Source+ (',' sources+=Source)*)
//	'WHERE' predicates=ExpressionsModel
//;
//
//SelectWithoutWhereAndGroupBy returns Select:
//	name='SELECT'
//	(distinct='DISTINCT')?
//	( '*' |
//		( 
//			(attributes+=Attribute | aggregations+=Aggregation)+  
//			& (',' attributes+=Attribute)* 
//			& (',' aggregations+=Aggregation)*
//		)
//	)
//	('FROM' sources+=Source+ (',' sources+=Source)*)
//;


//Order:
//	attribute=Attribute
//	direction=('ASC'|'DESC')
//;

CreateParameters:
	'WRAPPER' wrapper=STRING
	'PROTOCOL' protocol=STRING
	'TRANSPORT' transport=STRING
	'DATAHANDLER' datahandler=STRING
	'OPTIONS' '('(keys+=STRING values+=STRING)+ (',' keys+=STRING values+=STRING)?')'
;

AttributeDefinition:
	name=ID
	'('attributes+= Attribute+ datatypes+= DataType+ (',' attributes+=Attribute datatypes+= DataType)*')'
;

CreateStream1:
	'CREATE'
	'STREAM'
	attributes=AttributeDefinition
	pars=CreateParameters
;

CreateSink1:
	'CREATE'
	'SINK'
	attributes=AttributeDefinition
	pars=CreateParameters
;

CreateStreamChannel:
	'CREATE'
	'STREAM'
	attributes=AttributeDefinition 
 	'CHANNEL' host=ID ':' port=INT
;

CreateStreamFile:
	'CREATE'
	'STREAM'
	attributes=AttributeDefinition
 	'FILE' filename=STRING 'AS' type=ID
;

//Create:
//	name=('CREATE'|'ATTACH') (channelformat=ChannelFormat|accessframework=AccessFramework)
//;
//
//AccessFramework:
//	type=('STREAM'|'SINK')
//	name = ID
//	'('
//	attributes+= Attribute+ 
//	datatypes+= DataType+
//	(',' attributes+=Attribute datatypes+= DataType)*
//	')'
//	'WRAPPER' wrapper=STRING
//	'PROTOCOL' protocol=STRING
//	'TRANSPORT' transport=STRING
//	'DATAHANDLER' datahandler=STRING
//	'OPTIONS' 
//		'(' 
//			(keys+=STRING values+=STRING)+ (',' keys+=STRING values+=STRING)?
//		')'
//;
//
//ChannelFormat: (stream=ChannelFormatStream|view=ChannelFormatView);
//
//ChannelFormatStream:
//	'STREAM'
//	name = ID
//	'('
//	attributes+= Attribute+ 
//	datatypes+= DataType+
//	(',' attributes+=Attribute datatypes+= DataType)*
//	')'
//	(    'CHANNEL' (keys+=ID) ':'
//		|'FILE' (keys+=STRING) 'AS'
//	) 
//	(values+=IDOrINT)
//;

CreateView: 'VIEW' name=ID 'FROM' select=NestedStatement;

StreamTo: 'STREAM' 'TO' name=ID (statement=Select|inputname=ID);


// build generic rule for those commands

Command:
	keyword1 = ID
	keyword2 = ID
	value1   = ID
	keyword3 = ID
	value2   = ID
;

Drop returns Command:
	keyword1='DROP'
	keyword2=('SINK'|'STREAM')
	value1=ID
	(keyword3='IF EXISTS')?
	value2 = ID
;

Window_Unbounded:  
	'UNBOUNDED'
;

Window_Timebased: 
	'SIZE' size=INT unit=ID
	('ADVANCE' advance_size=INT advance_unit=ID)?
	'TIME'
;

Window_Tuplebased://TODO PARTITION BY only if a GROUP BY clause exists
	'SIZE' size=INT
	('ADVANCE' advance_size=INT)?
	'TUPLE'
	('PARTITION' 'BY' partition_attribute=Attribute)?
;

// Expression DSL ///////////////////////////////////////////////////////
ExpressionsModel: {ExpressionsModel} elements+=Expression;

Expression: Or;

Or returns Expression:
	And ({Or.left=current} 'OR' right=And)*
;

And returns Expression:
	Equalitiy ({And.left=current} 'AND' right=Equalitiy)*
;

Equalitiy returns Expression:
	Comparison (
		{Equality.left=current} op=('==' | '!=')
		right=Comparison	
	)*
;

Comparison returns Expression:
	PlusOrMinus (
		{Comparision.left=current} op=('>=' | '<=' | '<' | '>')
		right=PlusOrMinus
	)*
;

PlusOrMinus returns Expression:
	MulOrDiv (
		({Plus.left=current} '+' | {Minus.left=current} '-')
		right=MulOrDiv
	)*
;

MulOrDiv returns Expression:
	Primary (
		{MulOrDiv.left=current} op=('*' | '/')
		right=Primary
	)*
;

Primary returns Expression:
	({Bracket} '(' inner=Expression ')') |
	{NOT} 'NOT' expression=Primary |
	Atomic
;

Atomic returns Expression:
//	{NumberConstant} (value=INT | value=INT '.' INT) |
	{IntConstant} value=INT |
	{FloatConstant} value=FLOAT |
	{StringConstant} value= STRING |
	{BoolConstant} value=('TRUE' | 'FALSE') |
	//TODO A SELECT * query offers no reference for an attribute.
	//At the moment is no actual referencing possible!
	{AttributeRef} (value=AttributeWithoutAlias | value=AttributeWithNestedStatement)
;

//TODO have to dynamic -> use scope provider
DataType: 
	value=('INTEGER' | 'DOUBLE' | 'FLOAT' | 'STRING' | 'BOOLEAN' 
	| 'STARTTIMESTAMP' | 'ENDTIMESTAMP' 
);