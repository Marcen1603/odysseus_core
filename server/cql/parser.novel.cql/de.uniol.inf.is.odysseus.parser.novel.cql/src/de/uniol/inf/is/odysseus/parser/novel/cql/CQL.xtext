grammar de.uniol.inf.is.odysseus.parser.novel.cql.CQL with org.eclipse.xtext.common.Terminals

generate cQL "http://www.uniol.de/inf/is/odysseus/parser/novel/cql/CQL"


Model: statements+=(Statement)*;
	
terminal ID: ('a'..'z'|'A'..'Z'|'_'|':'|'$'|'{'|'}') ('a'..'z'|'A'..'Z'|'_'|':'|'$'|'{'|'}'|'0'..'9')*;	
terminal FLOAT:  INT '.' INT;

Statement:	//FIXME DROP has two types: Statement and Command -> causes error in detection commands while parsing!
	(type=Select | type=StreamTo | type=Drop | type=CreateStream1 | type=CreateSink1 | type=CreateStreamChannel | type=CreateStreamFile | type=CreateView) 
	(';')?
;
 
Select:
	name='SELECT'
	(distinct='DISTINCT')?
	( '*' |  (arguments+=Argument+  ( ',' arguments+=Argument) *))
	('FROM' sources+=Source+ (',' sources+=Source)*)
	('WHERE' predicates=ExpressionsModel)?
	('GROUP' 'BY' order+=Attribute+ (',' order+=Attribute)*)? //TODO ordering+=Attribute+ ('ASC' | 'DESC')?)?)
	('HAVING' having=ExpressionsModel)?
;


NestedStatement returns Select: '(' Select ')' ;

Argument:
	(attribute=Attribute | expression=SelectExpression)
;

Source: 
	name=SourceName 
	('[' (unbounded=Window_Unbounded|time=Window_Timebased|tuple=Window_Tuplebased) ']')? ('AS' alias=Alias)?
	|
	(nested=NestedStatement 'AS' alias=Alias)
;

SourceName:
	ID
;

Attribute: 
	name=AttributeName
	('AS' alias=Alias)?
;
 
AttributeWithoutAliasDefinition returns Attribute: 
	name=AttributeName
; 

AttributeName:
	(ID | SourceName '.' ID | SourceName '.' '*')
;

AttributeWithNestedStatement:
	value=AttributeWithoutAliasDefinition
	'IN'
	nested=NestedStatement
;  

//Defines an expression in the SELECT clause like SELECT attr1 + 10 AS offset FROM ..
SelectExpression:
//	expressions+=ExpressionComponent
//	operators+=('+'|'-'|'*'|'/') 
//	expressions+=ExpressionComponent
	(
		(expressions+=(ExpressionComponentFunctionOrConstant)
		  (operators+=('+'|'-'|'*'|'/') 
			expressions+=(ExpressionComponentConstantOrAttribute | ExpressionComponentOnlyWithFunction)
		  )*
		)
		| (expressions+=(ExpressionComponentOnlyWithAttribute)
			(operators+=('+'|'-'|'*'|'/') 
			  expressions+=(ExpressionComponentConstantOrAttribute | ExpressionComponentOnlyWithFunction)
			)+
		  )
  	)
	('AS' alias=Alias)?
;

SelectExpressionWithoutAliasDefinition returns SelectExpression:
	SelectExpressionWithOnlyAttributeOrConstant(
		(expressions+=(ExpressionComponentFunctionOrConstant)
			(operators+=('+'|'-'|'*'|'/') 
				expressions+=(ExpressionComponentConstantOrAttribute | ExpressionComponentOnlyWithFunction)
				)*
		)
		| (expressions+=(ExpressionComponentOnlyWithAttribute)
			(operators+=('+'|'-'|'*'|'/') 
				 expressions+=(ExpressionComponentConstantOrAttribute | ExpressionComponentOnlyWithFunction)
				 )+
		)
	)
;

SelectExpressionWithOnlyAttributeOrConstant returns SelectExpressionWithoutAliasDefinition:
		expressions+=ExpressionComponentConstantOrAttribute 
		(operators+=('+'|'-'|'*'|'/') 
			expressions+=(ExpressionComponentConstantOrAttribute)
		)*	
;

//Is either a map function or an aggregation function. This depends 
//on the given name and is decided by the generator on runtime. Also
//checked is that an aggregation is no part of a select expression like
//SELECT attr1 + 10 - SUM(attr1) FROM.., but a select expression can be 
//a part of an aggregation like AVG(attr1 + DolToEur(attr2)).//TODO Not working currently
Function returns ExpressionComponent:
	{Function}
	name=ID
	'('(value=SelectExpressionWithoutAliasDefinition)')'
;

//Determines the structure of a component of a select expression
ExpressionComponent:
	 (ExpressionComponentConstantOrAttribute(
	 	{ExpressionComponent.value=current}
	 ))
	 | (ExpressionComponentFunctionOrConstant(
	 	{ExpressionComponent.value=current}
	 ))
;

ExpressionComponentConstantOrAttribute returns ExpressionComponent:
	(value = AtomicWithoutAttributeRef) | (value=AttributeWithoutAliasDefinition)
;

ExpressionComponentFunctionOrConstant returns ExpressionComponent:
	Function({ExpressionComponent.value=current})
	| value = AtomicWithoutAttributeRef
;

ExpressionComponentOnlyWithAttribute returns ExpressionComponent:
	value=AttributeWithoutAliasDefinition
;

ExpressionComponentOnlyWithFunction returns ExpressionComponent:
	Function({ExpressionComponent.value=current})
;

SetOperator:
	left=Select
	name=('UNION'|'DIFFERENCE'|'INTERSECTION')
	right=Select
;

Alias:
	name=ID
;  

enum CreateKeyword:
	CREATE | ATTACH
;

//Holds all parameters for a source / sink that conforms the Access Framework
CreateParameters:
	'WRAPPER' wrapper=STRING
	'PROTOCOL' protocol=STRING
	'TRANSPORT' transport=STRING
	'DATAHANDLER' datahandler=STRING
	'OPTIONS' '('(keys+=STRING values+=STRING)+ (',' keys+=STRING values+=STRING)?')'
;

//Captures the name of the source / sink and its attributes with data type definitions
AttributeDefinition:
	name=ID
	'('attributes+= Attribute+ datatypes+= DataType+ (',' attributes+=Attribute datatypes+= DataType)*')'
;

//Create stream via the Access Framework
CreateStream1:
	keyword=CreateKeyword
	'STREAM'
	attributes=AttributeDefinition
	pars=CreateParameters
;

//Create stream via the Access Framework
CreateSink1:
	keyword=CreateKeyword
	'SINK'
	attributes=AttributeDefinition
	pars=CreateParameters
;

//Create stream via Channel Format
CreateStreamChannel:
	keyword=CreateKeyword
	'STREAM'
	attributes=AttributeDefinition 
 	'CHANNEL' host=ID ':' port=INT
;

//Create stream via Channel Format for file access
CreateStreamFile:
	keyword=CreateKeyword
	'STREAM'
	attributes=AttributeDefinition
 	'FILE' filename=STRING 'AS' type=ID
;

CreateView: 'VIEW' name=ID 'FROM' select=NestedStatement;

StreamTo: 'STREAM' 'TO' name=ID (statement=Select|inputname=ID);

//Generic rule for user commands or something like DROP STREAM
Command:
	keyword1 = ID
	keyword2 = ID
	value1   = ID
	keyword3 = ID
	value2   = ID
	(';')?
;

Drop returns Command:
	keyword1='DROP'
	keyword2=('SINK'|'STREAM')
	value1=ID
	(keyword3='IF' 'EXISTS')?
;

Window_Unbounded:  
	'UNBOUNDED'
;

Window_Timebased: 
	'SIZE' size=INT unit=ID
	('ADVANCE' advance_size=INT advance_unit=ID)?
	'TIME'
;

Window_Tuplebased://TODO PARTITION BY only if a GROUP BY clause exists
	'SIZE' size=INT
	('ADVANCE' advance_size=INT)?
	'TUPLE'
	('PARTITION' 'BY' partition_attribute=Attribute)?
;

// Expression DSL ///////////////////////////////////////////////////////
ExpressionsModel: {ExpressionsModel} elements+=Expression;

Expression: Or;

Or returns Expression:
	And ({Or.left=current} 'OR' right=And)*
;

And returns Expression:
	Equalitiy ({And.left=current} 'AND' right=Equalitiy)*
;

Equalitiy returns Expression:
	Comparison (
		{Equality.left=current} op=('=' | '!=')
		right=Comparison	
	)*
;

Comparison returns Expression:
	PlusOrMinus (
		{Comparision.left=current} op=('>=' | '<=' | '<' | '>')
		right=PlusOrMinus
	)*
;

PlusOrMinus returns Expression:
	MulOrDiv (
		({Plus.left=current} '+' | {Minus.left=current} '-')
		right=MulOrDiv
	)*
;

MulOrDiv returns Expression:
	Primary (
		{MulOrDiv.left=current} op=('*' | '/')
		right=Primary
	)*
;

Primary returns Expression:
	({Bracket} '(' inner=Expression ')') |
	{NOT} 'NOT' expression=Primary |
	Atomic
;

Atomic returns Expression:
	{IntConstant} value=INT 
	| {FloatConstant} value=FLOAT 
	| {StringConstant} value=STRING 
	| {BoolConstant} value=('TRUE' | 'FALSE')
	//TODO A SELECT * query offers no reference for an attribute.
	//At the moment is no actual referencing possible!
	| {AttributeRef} (value=AttributeWithoutAliasDefinition | value=AttributeWithNestedStatement)
;

AtomicWithoutAttributeRef returns Expression:
	{IntConstant} value=INT 
	| {FloatConstant} value=FLOAT 
	| {StringConstant} value=STRING 
	| {BoolConstant} value=('TRUE' | 'FALSE')
;

AtomicWithOnlyStringConstant returns Expression:
	{StringConstant} value= STRING 
;

//TODO have to be dynamic -> use scope provider
DataType: 
	value=('INTEGER' | 'DOUBLE' | 'LONG'| 'FLOAT' | 'STRING' | 'BOOLEAN' 
	| 'STARTTIMESTAMP' | 'ENDTIMESTAMP' 
);