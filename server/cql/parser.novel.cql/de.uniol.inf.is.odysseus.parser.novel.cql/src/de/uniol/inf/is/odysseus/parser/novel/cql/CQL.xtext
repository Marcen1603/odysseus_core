grammar de.uniol.inf.is.odysseus.parser.novel.cql.CQL with org.eclipse.xtext.common.Terminals

generate cQL "http://www.uniol.de/inf/is/odysseus/parser/novel/cql/CQL"

Model: statements+=Statement*;
	
Statement:  (type=Select_Statement | type=Create_Statement) (';')? ; 

//Nested_Statement: '(' Select_Statement ')' ;

// Data types //////////////////////////////////////////////////////////

Atomic returns Expression:
//	{NumberConstant} (value=INT | value=INT '.' INT) |
	{IntConstant} value=INT |
	{FloatConstant} value=FLOAT_NUMBER |
	{StringConstant} value= STRING |
	{BoolConstant} value=('TRUE' | 'FALSE') |
	{AttributeRef} value=Attribute//TODO A SELECT * query offers no reference for an attribute.
								  //At the moment is no actual referencing possible!  
;

terminal FLOAT_NUMBER:  INT '.' INT ;

Alias: 
	name=ID
;

Source: 
	name=ID
;

//TODO Add more data types
DataType: ('INTEGER' | 'DOUBLE' | 'FLOAT' | 'STRING' | 'BOOLEAN' 
	| 'STARTTIMESTAMP' | 'ENDTIMESTAMP' 
);

Attribute: name=ID;
 
//TODO Validator: do not allow "Source1 AS Alias1.attr1"

enum FunctionType: SUM | ADD | MAX | MIN | COUNT | AVG | LAST | FIRST ;

//Function: functionType=FunctionType '(' value=Attribute ')' ;

// Expressions //////////////////////////////////////////////////////////

ExpressionsModel: {ExpressionsModel} elements+=Expression+;

Expression: Or;

Or returns Expression:
	And ({Or.left=current} 'OR' right=And)*
;

And returns Expression:
	Equalitiy ({And.left=current} 'AND' right=Equalitiy)*
;


//Or returns Expression:
//	And ({Or.left=current} 'OR' right=And)*
//;
//
//And returns Expression:
//	Equalitiy ({And.left=current} 'AND' right=Equalitiy)*
//;

Equalitiy returns Expression:
	Comparison (
		{Equality.left=current} op=('==' | '!=')
		right=Comparison	
	)*
;

Comparison returns Expression:
	PlusOrMinus (
		{Comparision.left=current} op=('>=' | '<=' | '<' | '>')
		right=PlusOrMinus
	)*
;

PlusOrMinus returns Expression:
	MulOrDiv (
		({Plus.left=current} '+' | {Minus.left=current} '-')
		right=MulOrDiv
	)*
;

MulOrDiv returns Expression:
	Primary (
		{MulOrDiv.left=current} op=('*' | '/')
		right=Primary
	)*
;

Primary returns Expression:
	({Bracket} '(' inner=Expression ')') |
	{NOT} 'NOT' expression=Primary |
	Atomic
;

//	Atomic (
//		{Plus.left=current} '+' | {Minus.left=current} '-' 
//		right=Atomic
//	)*

////////////////////////////////////////////////////////////////////////

Select_Statement:
	name='SELECT'
	('DISTINCT')?
	( '*' | attributes+=Attribute+ (',' attributes+=Attribute)*)
	'FROM'
	(sources+=Source+ (windows+=Window)? (',' sources+=Source (windows+=Window)?)*)
	('WHERE' (predicates=ExpressionsModel))?//| attribute=[Attribute] 'IN' '(' values+=Value ')'))?
//	(('ORDER' 'BY' | 'order' 'by') ordering+=[Attribute]+ ('ASC' | 'asc' | 'DESC' | 'desc')? )?
//	(('HAVING' | 'having') havingFunction=[Parameter] havingOperator=Operator havingValue=Value)?
//	';'
;

Window : '['
	(   type=Window_Unbounded | 
		type=Window_Timebased | 
		type=Window_Tuplebased
	) 
;

Window_Unbounded returns WindowType: 
	{WindowType} 
	('[' 'UNBOUNDED' ']')?
;

Window_Timebased returns WindowType:
	{WindowType}
	'['
	'SIZE' size=INT unit=STRING
	('ADVANCE' advance_size=INT advance_unit=STRING)?
	'TIME'
	('PARTITION' 'BY' partition_attribute=Attribute)?
	']'
;

Window_Tuplebased returns WindowType:
	{WindowType}
	'['
	'SIZE' size=INT
	('ADVANCE' advance_size=INT)?
	'TUPLE'
	('PARTITION' 'BY' partition_attribute=Attribute)?
	']'	
;



Operator:
	name=ID
;

Condition:
	left=[Attribute] right=Expression |
	right=Expression left=[Attribute]
;

//Parameter:
//	Attribute //| Function
//	(('AS' | 'as') alias=ID)?
//;

Value:
	name=ID
;

Scalar_Function:
	name=ID
//	('UCASE(' | 'ucase(' | 'LCASE(' | 'lcase(' | 'MID(' | 'mid(' |
//	 'LEN(' | 'len(' | 'ROUND(' | 'round(' | 'NOW(' | 'now(' |
//	 'FORMAT(' | 'format('
//	)
;

Create_Statement:
	'CREATE' type=('STREAM' | 'VIEW' | 'SINK')
	name = ID
	'('
	attributes+= Attribute+ 
	datatypes+= DataType+
	(',' attributes+=Attribute datatypes+= DataType)*
	')'
	'CHANNEL'
	host=ID
	':'
	port=INT
;


