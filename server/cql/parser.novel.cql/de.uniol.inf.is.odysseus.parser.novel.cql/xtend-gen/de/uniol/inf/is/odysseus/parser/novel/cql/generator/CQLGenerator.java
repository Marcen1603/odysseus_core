/**
 * generated by Xtext 2.10.0
 */
package de.uniol.inf.is.odysseus.parser.novel.cql.generator;

import com.google.common.collect.Iterables;
import de.uniol.inf.is.odysseus.parser.novel.cql.cQL.And;
import de.uniol.inf.is.odysseus.parser.novel.cql.cQL.Attribute;
import de.uniol.inf.is.odysseus.parser.novel.cql.cQL.BoolConstant;
import de.uniol.inf.is.odysseus.parser.novel.cql.cQL.Bracket;
import de.uniol.inf.is.odysseus.parser.novel.cql.cQL.Comparision;
import de.uniol.inf.is.odysseus.parser.novel.cql.cQL.Equality;
import de.uniol.inf.is.odysseus.parser.novel.cql.cQL.Expression;
import de.uniol.inf.is.odysseus.parser.novel.cql.cQL.ExpressionsModel;
import de.uniol.inf.is.odysseus.parser.novel.cql.cQL.FloatConstant;
import de.uniol.inf.is.odysseus.parser.novel.cql.cQL.IntConstant;
import de.uniol.inf.is.odysseus.parser.novel.cql.cQL.Minus;
import de.uniol.inf.is.odysseus.parser.novel.cql.cQL.MulOrDiv;
import de.uniol.inf.is.odysseus.parser.novel.cql.cQL.NOT;
import de.uniol.inf.is.odysseus.parser.novel.cql.cQL.Or;
import de.uniol.inf.is.odysseus.parser.novel.cql.cQL.Plus;
import de.uniol.inf.is.odysseus.parser.novel.cql.cQL.Select_Statement;
import de.uniol.inf.is.odysseus.parser.novel.cql.cQL.Statement;
import de.uniol.inf.is.odysseus.parser.novel.cql.cQL.StringConstant;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.TreeIterator;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.InputOutput;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class CQLGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    TreeIterator<EObject> _allContents = resource.getAllContents();
    Iterable<EObject> _iterable = IteratorExtensions.<EObject>toIterable(_allContents);
    Iterable<Statement> _filter = Iterables.<Statement>filter(_iterable, Statement.class);
    for (final Statement e : _filter) {
      URI _uRI = resource.getURI();
      String _lastSegment = _uRI.lastSegment();
      String _replace = _lastSegment.replace(".cql", "pql");
      CharSequence _parseStatement = this.parseStatement(e);
      fsa.generateFile(_replace, _parseStatement);
    }
  }
  
  public CharSequence parseStatement(final Statement stmt) {
    StringConcatenation _builder = new StringConcatenation();
    CharSequence _switchResult = null;
    EObject _type = stmt.getType();
    boolean _matched = false;
    if (_type instanceof Select_Statement) {
      _matched=true;
      EObject _type_1 = stmt.getType();
      _switchResult = this.parseSelect(((Select_Statement) _type_1));
    }
    _builder.append(_switchResult, "");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public void foo(final Expression e) {
    boolean _matched = false;
    if (e instanceof And) {
      _matched=true;
      ((And)e).getLeft();
    }
  }
  
  private String where_clause = "";
  
  public CharSequence parseSelect(final Select_Statement stmt) {
    CharSequence _xblockexpression = null;
    {
      this.where_clause = "";
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("SELECT({");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("predicate=");
      ExpressionsModel _predicates = stmt.getPredicates();
      EList<Expression> _elements = _predicates.getElements();
      Expression _get = _elements.get(0);
      CharSequence _unpackExpression = this.unpackExpression(_get);
      _builder.append(_unpackExpression, "\t\t");
      _builder.newLineIfNotEmpty();
      _builder.append("}, ");
      CharSequence _buildAccessOP = this.buildAccessOP(stmt);
      _builder.append(_buildAccessOP, "");
      _builder.append(")");
      _builder.newLineIfNotEmpty();
      _xblockexpression = _builder;
    }
    return _xblockexpression;
  }
  
  public CharSequence unpackExpression(final Expression e) {
    CharSequence _xifexpression = null;
    EList<EObject> _eContents = e.eContents();
    boolean _isEmpty = _eContents.isEmpty();
    boolean _not = (!_isEmpty);
    if (_not) {
      CharSequence _xblockexpression = null;
      {
        boolean _matched = false;
        if (e instanceof Or) {
          _matched=true;
          Expression _left = ((Or)e).getLeft();
          this.unpackExpression(_left);
          String _where_clause = this.where_clause;
          this.where_clause = (_where_clause + "|| ");
          Expression _right = ((Or)e).getRight();
          this.unpackExpression(_right);
        }
        if (!_matched) {
          if (e instanceof And) {
            _matched=true;
            Expression _left = ((And)e).getLeft();
            this.unpackExpression(_left);
            String _where_clause = this.where_clause;
            this.where_clause = (_where_clause + "&& ");
            Expression _right = ((And)e).getRight();
            this.unpackExpression(_right);
          }
        }
        if (!_matched) {
          if (e instanceof Equality) {
            _matched=true;
            Expression _left = ((Equality)e).getLeft();
            this.unpackExpression(_left);
            String _where_clause = this.where_clause;
            String _op = ((Equality)e).getOp();
            String _plus = (_op + " ");
            this.where_clause = (_where_clause + _plus);
            Expression _right = ((Equality)e).getRight();
            this.unpackExpression(_right);
          }
        }
        if (!_matched) {
          if (e instanceof Comparision) {
            _matched=true;
            Expression _left = ((Comparision)e).getLeft();
            this.unpackExpression(_left);
            String _where_clause = this.where_clause;
            String _op = ((Comparision)e).getOp();
            String _plus = (_op + " ");
            this.where_clause = (_where_clause + _plus);
            Expression _right = ((Comparision)e).getRight();
            this.unpackExpression(_right);
          }
        }
        if (!_matched) {
          if (e instanceof Plus) {
            _matched=true;
            Expression _left = ((Plus)e).getLeft();
            this.unpackExpression(_left);
            String _where_clause = this.where_clause;
            this.where_clause = (_where_clause + "+ ");
            Expression _right = ((Plus)e).getRight();
            this.unpackExpression(_right);
          }
        }
        if (!_matched) {
          if (e instanceof Minus) {
            _matched=true;
            Expression _left = ((Minus)e).getLeft();
            this.unpackExpression(_left);
            String _where_clause = this.where_clause;
            this.where_clause = (_where_clause + "- ");
            Expression _right = ((Minus)e).getRight();
            this.unpackExpression(_right);
          }
        }
        if (!_matched) {
          if (e instanceof MulOrDiv) {
            _matched=true;
            Expression _left = ((MulOrDiv)e).getLeft();
            this.unpackExpression(_left);
            String _where_clause = this.where_clause;
            String _op = ((MulOrDiv)e).getOp();
            String _plus = (_op + " ");
            this.where_clause = (_where_clause + _plus);
            Expression _right = ((MulOrDiv)e).getRight();
            this.unpackExpression(_right);
          }
        }
        if (!_matched) {
          if (e instanceof NOT) {
            _matched=true;
            String _where_clause = this.where_clause;
            this.where_clause = (_where_clause + "!");
            Expression _expression = ((NOT)e).getExpression();
            this.unpackExpression(_expression);
          }
        }
        if (!_matched) {
          if (e instanceof Bracket) {
            _matched=true;
            String _where_clause = this.where_clause;
            this.where_clause = (_where_clause + "(");
            Expression _inner = ((Bracket)e).getInner();
            this.unpackExpression(_inner);
            String _where_clause_1 = this.where_clause;
            this.where_clause = (_where_clause_1 + ")");
          }
        }
        _xblockexpression = InputOutput.<CharSequence>println(this.where_clause);
      }
      _xifexpression = _xblockexpression;
    } else {
      String _xblockexpression_1 = null;
      {
        String str = "";
        boolean _matched = false;
        if (e instanceof IntConstant) {
          _matched=true;
          int _value = ((IntConstant)e).getValue();
          String _plus = (Integer.valueOf(_value) + " ");
          str = _plus;
        }
        if (!_matched) {
          if (e instanceof FloatConstant) {
            _matched=true;
            String _value = ((FloatConstant)e).getValue();
            String _plus = (_value + " ");
            str = _plus;
          }
        }
        if (!_matched) {
          if (e instanceof StringConstant) {
            _matched=true;
            String _value = ((StringConstant)e).getValue();
            String _plus = (_value + " ");
            str = _plus;
          }
        }
        if (!_matched) {
          if (e instanceof BoolConstant) {
            _matched=true;
            String _value = ((BoolConstant)e).getValue();
            String _plus = (_value + " ");
            str = _plus;
          }
        }
        if (!_matched) {
          if (e instanceof Attribute) {
            _matched=true;
            Attribute _value = ((Attribute)e).getValue();
            String _name = _value.getName();
            String _plus = (_name + " ");
            str = _plus;
          }
        }
        String _where_clause = this.where_clause;
        _xblockexpression_1 = this.where_clause = (_where_clause + str);
      }
      _xifexpression = _xblockexpression_1;
    }
    return _xifexpression;
  }
  
  public CharSequence buildAccessOP(final Select_Statement stmt) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("ACCESS({source=\'Source\'");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("wrapper=\'GenericPush\'");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("transport=\'TCPClient\'");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("dataHandler=\'Tuple\'");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("schema=[");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("[]");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("[]]");
    _builder.newLine();
    _builder.append("})");
    _builder.newLine();
    return _builder;
  }
}
