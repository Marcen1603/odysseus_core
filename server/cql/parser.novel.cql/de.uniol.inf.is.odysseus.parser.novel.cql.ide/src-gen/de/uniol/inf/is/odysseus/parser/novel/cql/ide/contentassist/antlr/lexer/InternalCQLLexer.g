/*
 * generated by Xtext 2.10.0
 */
lexer grammar InternalCQLLexer;

@header {
package de.uniol.inf.is.odysseus.parser.novel.cql.ide.contentassist.antlr.lexer;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

INTERSECTION : ('I'|'i')('N'|'n')('T'|'t')('E'|'e')('R'|'r')('S'|'s')('E'|'e')('C'|'c')('T'|'t')('I'|'i')('O'|'o')('N'|'n');

DATAHANDLER : ('D'|'d')('A'|'a')('T'|'t')('A'|'a')('H'|'h')('A'|'a')('N'|'n')('D'|'d')('L'|'l')('E'|'e')('R'|'r');

DIFFERENCE : ('D'|'d')('I'|'i')('F'|'f')('F'|'f')('E'|'e')('R'|'r')('E'|'e')('N'|'n')('C'|'c')('E'|'e');

PARTITION : ('P'|'p')('A'|'a')('R'|'r')('T'|'t')('I'|'i')('T'|'t')('I'|'i')('O'|'o')('N'|'n');

TRANSPORT : ('T'|'t')('R'|'r')('A'|'a')('N'|'n')('S'|'s')('P'|'p')('O'|'o')('R'|'r')('T'|'t');

UNBOUNDED : ('U'|'u')('N'|'n')('B'|'b')('O'|'o')('U'|'u')('N'|'n')('D'|'d')('E'|'e')('D'|'d');

DISTINCT : ('D'|'d')('I'|'i')('S'|'s')('T'|'t')('I'|'i')('N'|'n')('C'|'c')('T'|'t');

PROTOCOL : ('P'|'p')('R'|'r')('O'|'o')('T'|'t')('O'|'o')('C'|'c')('O'|'o')('L'|'l');

ADVANCE : ('A'|'a')('D'|'d')('V'|'v')('A'|'a')('N'|'n')('C'|'c')('E'|'e');

CHANNEL : ('C'|'c')('H'|'h')('A'|'a')('N'|'n')('N'|'n')('E'|'e')('L'|'l');

OPTIONS : ('O'|'o')('P'|'p')('T'|'t')('I'|'i')('O'|'o')('N'|'n')('S'|'s');

WRAPPER : ('W'|'w')('R'|'r')('A'|'a')('P'|'p')('P'|'p')('E'|'e')('R'|'r');

ATTACH : ('A'|'a')('T'|'t')('T'|'t')('A'|'a')('C'|'c')('H'|'h');

CREATE : ('C'|'c')('R'|'r')('E'|'e')('A'|'a')('T'|'t')('E'|'e');

EXISTS : ('E'|'e')('X'|'x')('I'|'i')('S'|'s')('T'|'t')('S'|'s');

HAVING : ('H'|'h')('A'|'a')('V'|'v')('I'|'i')('N'|'n')('G'|'g');

SELECT : ('S'|'s')('E'|'e')('L'|'l')('E'|'e')('C'|'c')('T'|'t');

STREAM : ('S'|'s')('T'|'t')('R'|'r')('E'|'e')('A'|'a')('M'|'m');

FALSE : ('F'|'f')('A'|'a')('L'|'l')('S'|'s')('E'|'e');

GROUP : ('G'|'g')('R'|'r')('O'|'o')('U'|'u')('P'|'p');

TUPLE : ('T'|'t')('U'|'u')('P'|'p')('L'|'l')('E'|'e');

UNION : ('U'|'u')('N'|'n')('I'|'i')('O'|'o')('N'|'n');

WHERE : ('W'|'w')('H'|'h')('E'|'e')('R'|'r')('E'|'e');

DROP : ('D'|'d')('R'|'r')('O'|'o')('P'|'p');

FILE : ('F'|'f')('I'|'i')('L'|'l')('E'|'e');

FROM : ('F'|'f')('R'|'r')('O'|'o')('M'|'m');

SINK : ('S'|'s')('I'|'i')('N'|'n')('K'|'k');

SIZE : ('S'|'s')('I'|'i')('Z'|'z')('E'|'e');

TIME : ('T'|'t')('I'|'i')('M'|'m')('E'|'e');

TRUE : ('T'|'t')('R'|'r')('U'|'u')('E'|'e');

VIEW : ('V'|'v')('I'|'i')('E'|'e')('W'|'w');

AND : ('A'|'a')('N'|'n')('D'|'d');

NOT : ('N'|'n')('O'|'o')('T'|'t');

ExclamationMarkEqualsSign : '!''=';

LessThanSignEqualsSign : '<''=';

GreaterThanSignEqualsSign : '>''=';

AS : ('A'|'a')('S'|'s');

BY : ('B'|'b')('Y'|'y');

IF : ('I'|'i')('F'|'f');

IN : ('I'|'i')('N'|'n');

OR : ('O'|'o')('R'|'r');

TO : ('T'|'t')('O'|'o');

LeftParenthesis : '(';

RightParenthesis : ')';

Asterisk : '*';

PlusSign : '+';

Comma : ',';

HyphenMinus : '-';

FullStop : '.';

Solidus : '/';

Colon : ':';

Semicolon : ';';

LessThanSign : '<';

EqualsSign : '=';

GreaterThanSign : '>';

LeftSquareBracket : '[';

RightSquareBracket : ']';

// Rules duplicated to allow inter-rule references

RULE_ID : ('a'..'z'|'A'..'Z'|'_'|':'|'$'|'{'|'}') ('a'..'z'|'A'..'Z'|'_'|':'|'$'|'{'|'}'|'0'..'9')*;

RULE_FLOAT : RULE_INT '.' RULE_INT;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
