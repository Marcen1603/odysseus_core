CQLGeneratorQueryTest_10=operator_1=RENAME({aliases=['attr3','s2.attr3','attr4','s2.attr4'],pairs='true'},stream2)\n\t\t\t operator_2=SELECT({predicate='stream1.attr1>2&&stream1.attr2=='Test''},JOIN(stream1,JOIN(operator_1,stream3)))
CQLGeneratorQueryTest_100=out1:=SENDER({sink='out1',wrapper='GenericPush',protocol='CSV',transport='FILE',dataHandler='TUPLE',options=[['filename','outfile1']]}, out1)
CQLGeneratorQueryTest_101=SELECT * FROM stream1 [UNBOUNDED];
CQLGeneratorQueryTest_102=operator_1 = MAP({expressions=['stream1.attr1', 'stream1.attr2']}, stream1)
CQLGeneratorQueryTest_103=SELECT * FROM stream1 [SIZE 5 MINUTES TIME];
CQLGeneratorQueryTest_104=operator_1 = MAP({expressions=['stream1.attr1', 'stream1.attr2']},\n\t\t\t\t\t\t\t TIMEWINDOW({size=[5, 'MINUTES'], advance=[1, 'MINUTES']}, stream1))
CQLGeneratorQueryTest_105=SELECT * FROM stream1 [SIZE 5 MINUTES ADVANCE 1 SECONDS TIME];
CQLGeneratorQueryTest_106=operator_1 = MAP({expressions=['stream1.attr1', 'stream1.attr2']}, \n\t\t\t\t\t\t\tTIMEWINDOW({size=[5, 'MINUTES'], advance=[1, 'SECONDS']}, stream1))
CQLGeneratorQueryTest_107=SELECT * FROM stream1 [SIZE 5 TUPLE];
CQLGeneratorQueryTest_108=operator_1 = MAP({expressions=['stream1.attr1', 'stream1.attr2']}, \n\t\t\t\t\t\t\tELEMENTWINDOW({size=5,advance=1}, stream1))
CQLGeneratorQueryTest_109=SELECT * FROM stream1 [UNBOUNDED], stream2 [UNBOUNDED];
CQLGeneratorQueryTest_11=SELECT * FROM stream1 WHERE attr1 > 2 AND attr2 = 'Test';
CQLGeneratorQueryTest_110=operator_1 = JOIN(stream1, stream2)
CQLGeneratorQueryTest_111=SELECT * FROM stream1 [SIZE 5 TUPLE], stream2 [SIZE 5 MINUTES TIME];
CQLGeneratorQueryTest_112=operator_1 = JOIN(ELEMENTWINDOW({size=5,advance=1}, stream1), \n\t\t\t\t\t\t\tTIMEWINDOW({size=[5, 'MINUTES'], advance=[1, 'MINUTES']}, stream2))
CQLGeneratorQueryTest_113=SELECT attr1, attr2, attr4 FROM stream1 [SIZE 5 TUPLE], stream2 [SIZE 5 MINUTES TIME], stream3;
CQLGeneratorQueryTest_114=operator_1 = MAP({expressions=['stream1.attr1','stream1.attr2','stream2.attr4']}, \n\t\t\t\t\t\t\tJOIN(ELEMENTWINDOW({size=5,advance=1}, stream1), \n\t\t\t\t\t\t\t\tJOIN(TIMEWINDOW({size=[5, 'MINUTES'], advance=[1, 'MINUTES']}, stream2), stream3)))
CQLGeneratorQueryTest_115=SELECT attr1, attr2, attr4 FROM stream1 [SIZE 5 TUPLE], stream2 [SIZE 5 MINUTES TIME], stream3 WHERE attr4 \!= attr1;
CQLGeneratorQueryTest_116=\n\t\t\toperator_1 = SELECT({predicate='stream2.attr4 \!= stream1.attr1'}, JOIN(ELEMENTWINDOW({size=5,advance=1},stream1),\n\t\t\t\t\t\t\t\tJOIN(TIMEWINDOW({size=[5,'MINUTES'],advance=[1,'MINUTES']},stream2),stream3)))\n\t\t\toperator_2 = MAP({expressions=['stream1.attr1','stream1.attr2','stream2.attr4']}, operator_1)
CQLGeneratorQueryTest_117=SELECT * FROM stream1 [SIZE 5 TUPLE], stream2 [SIZE 5 MINUTES TIME] WHERE attr4 \!= attr1;
CQLGeneratorQueryTest_118=operator_1 = SELECT({predicate='stream2.attr4 \!= stream1.attr1'}, \n\t\t\t\t\t\t\tJOIN(ELEMENTWINDOW({size=5,advance=1}, stream1),\n\t\t\t\t\t\t\t\tTIMEWINDOW({size=[5, 'MINUTES'], advance=[1, 'MINUTES']}, stream2)))
CQLGeneratorQueryTest_119=SELECT attr1 FROM stream1 [SIZE 5 TUPLE];
CQLGeneratorQueryTest_12=operator_1 = SELECT({predicate='stream1.attr1 > 2 && stream1.attr2 == 'Test''}, stream1)
CQLGeneratorQueryTest_120=operator_1 = MAP({expressions=['stream1.attr1']}, ELEMENTWINDOW({size=5,advance=1}, stream1))
CQLGeneratorQueryTest_121=SELECT COUNT(attr1) AS Counter FROM stream1 GROUP BY attr1;
CQLGeneratorQueryTest_122=operator_1=AGGREGATE({AGGREGATIONS=[['COUNT','stream1.attr1','Counter','Integer']],GROUP_BY=['stream1.attr1']},stream1)\n\t\t\t operator_2=MAP({expressions=['Counter']},operator_1)
CQLGeneratorQueryTest_123=SELECT COUNT(attr1) AS Counter, AVG(attr2) FROM stream1 GROUP BY attr1, attr2;
CQLGeneratorQueryTest_124=operator_1=AGGREGATE({AGGREGATIONS=[['COUNT','stream1.attr1','Counter','Integer'],['AVG','stream1.attr2','AVG_0','String']],GROUP_BY=['stream1.attr1','stream1.attr2']},stream1)\n\t\t\t operator_2=MAP({expressions=['Counter','AVG_0']},operator_1)
CQLGeneratorQueryTest_125=SELECT COUNT(attr1) AS Counter, AVG(attr2) FROM stream1 [SIZE 10 MINUTES TIME] AS s1 , stream2 GROUP BY attr1, attr2;
CQLGeneratorQueryTest_126=operator_1=AGGREGATE({AGGREGATIONS=[['COUNT','stream1.attr1','Counter','Integer'],['AVG','stream1.attr2','AVG_0','String']],GROUP_BY=['stream1.attr1','stream1.attr2']},JOIN(TIMEWINDOW({size=[10,'MINUTES'],advance=[1,'MINUTES']},stream1),stream2))\n\t\t     operator_2=MAP({expressions=['Counter','AVG_0']},operator_1)
CQLGeneratorQueryTest_127=SELECT attr1 as a1, COUNT(attr1) AS Counter FROM stream1 [SIZE 5 MINUTES TIME];
CQLGeneratorQueryTest_128=operator_1=RENAME({aliases=['attr1','a1'],pairs='true'},TIMEWINDOW({size=[5,'MINUTES'],advance=[1,'MINUTES']},stream1))\n\t\t\t operator_2=AGGREGATE({AGGREGATIONS=[['COUNT','a1','Counter','Integer']]},operator_1)\n\t\t\t operator_3=RENAME({aliases=['attr1','a1'],pairs='true'},TIMEWINDOW({size=[5,'MINUTES'],advance=[1,'MINUTES']},stream1))\n\t\t\t operator_4=MAP({expressions=['a1','Counter']},JOIN(operator_2,operator_3))
CQLGeneratorQueryTest_129=SELECT COUNT(attr1) AS Counter, attr3 FROM stream1, stream2;
CQLGeneratorQueryTest_13=SELECT s1.* FROM stream1 AS s1 WHERE attr1 > 2 AND attr2 = 'Test';
CQLGeneratorQueryTest_130=\n\t\t\toperator_1 = AGGREGATE\n\t\t\t(\n\t\t\t\t{\n\t\t\t\t\tAGGREGATIONS=[\n\t\t\t\t\t\t\t\t\t['COUNT', 'stream1.attr1', 'Counter', 'Integer']\n\t\t\t\t\t\t\t\t ]\n\t\t\t\t}, JOIN(stream1, stream2)\n\t\t\t)\n\t\t\toperator_2 = MAP({expressions=['Counter', 'stream2.attr3']}, JOIN(operator_1, JOIN(stream1, stream2)))
CQLGeneratorQueryTest_131=SELECT COUNT(attr1) AS Counter, attr3 FROM stream1 , stream2 [SIZE 10 MINUTES TIME];
CQLGeneratorQueryTest_132=operator_1=AGGREGATE({AGGREGATIONS=[['COUNT','stream1.attr1','Counter','Integer']]},JOIN(stream1,TIMEWINDOW({size=[10,'MINUTES'],advance=[1,'MINUTES']},stream2)))\n\t\t\t operator_2=MAP({expressions=['Counter','stream2.attr3']},JOIN(operator_1,JOIN(stream1,TIMEWINDOW({size=[10,'MINUTES'],advance=[1,'MINUTES']},stream2))))
CQLGeneratorQueryTest_133=SELECT COUNT(attr1) AS Counter, attr3 FROM stream1 [SIZE 10 MINUTES ADVANCE 2 SECONDS TIME] , stream2 [SIZE 10 MINUTES TIME] WHERE attr3 > 100;
CQLGeneratorQueryTest_134=operator_1=AGGREGATE({AGGREGATIONS=[['COUNT','stream1.attr1','Counter','Integer']]},JOIN(TIMEWINDOW({size=[10,'MINUTES'],advance=[2,'SECONDS']},stream1),TIMEWINDOW({size=[10,'MINUTES'],advance=[1,'MINUTES']},stream2)))\n\t\t\t operator_2=SELECT({predicate='stream2.attr3>100'},JOIN(operator_1,JOIN(TIMEWINDOW({size=[10,'MINUTES'],advance=[2,'SECONDS']},stream1),TIMEWINDOW({size=[10,'MINUTES'],advance=[1,'MINUTES']},stream2))))\t\n\t\t\t operator_3=MAP({expressions=['Counter','stream2.attr3']},operator_2)
CQLGeneratorQueryTest_135=SELECT COUNT(attr1) AS Counter, attr3 FROM stream1 [SIZE 10 MINUTES ADVANCE 2 SECONDS TIME] , stream2 [SIZE 10 MINUTES TIME] WHERE attr3 > 100 HAVING Counter > 1000;
CQLGeneratorQueryTest_136=operator_1=AGGREGATE({AGGREGATIONS=[['COUNT','stream1.attr1','Counter','Integer']]},JOIN(TIMEWINDOW({size=[10,'MINUTES'],advance=[2,'SECONDS']},stream1),TIMEWINDOW({size=[10,'MINUTES'],advance=[1,'MINUTES']},stream2)))\n\t\t\t operator_2=SELECT({predicate='Counter>1000Counter>1000&&'},JOIN(operator_1,JOIN(TIMEWINDOW({size=[10,'MINUTES'],advance=[2,'SECONDS']},stream1),TIMEWINDOW({size=[10,'MINUTES'],advance=[1,'MINUTES']},stream2))))\n\t\t\t operator_3=MAP({expressions=['Counter','stream2.attr3']},operator_2)
CQLGeneratorQueryTest_137=SELECT COUNT(attr1 + 20) AS Counter FROM stream1;
CQLGeneratorQueryTest_138=operator_1=MAP({expressions=[['stream1.attr1+20','expression_0']]},stream1)\n\t\t\t operator_2=AGGREGATE({AGGREGATIONS=[['COUNT','expression_0','Counter','DOUBLE']]},operator_1)\n\t\t\t operator_3=MAP({expressions=['Counter']},operator_2)
CQLGeneratorQueryTest_139=SELECT COUNT(*) AS count FROM stream1;
CQLGeneratorQueryTest_14=operator_1=RENAME({aliases=['attr1','s1.attr1','attr2','s1.attr2'],pairs='true'},stream1)\n\t\t\t operator_2=SELECT({predicate='s1.attr1>2&&s1.attr2=='Test''},operator_1)
CQLGeneratorQueryTest_140=operator_1=AGGREGATE({AGGREGATIONS=[['COUNT','*','count']]},stream1)\n\t\t\t operator_2=MAP({expressions=['count']}, JOIN(operator_1, stream1))
CQLGeneratorQueryTest_141=SELECT attr1, AVG(attr2) AS aprice FROM stream1 GROUP BY attr1;
CQLGeneratorQueryTest_142=operator_1=AGGREGATE({AGGREGATIONS=[['AVG','stream1.attr2','aprice','String']],GROUP_BY=['stream1.attr1']},stream1)\n\t\t\t operator_2=MAP({expressions=['stream1.attr1','aprice']},JOIN(RENAME({aliases=['attr1','attr1_groupAttribute\#0'],pairs='true'},operator_1),stream1))
CQLGeneratorQueryTest_143=SELECT str1.attr1 FROM (SELECT s1.attr1 FROM stream1 AS s1) AS str1
CQLGeneratorQueryTest_144=operator_1=RENAME({aliases=['attr1','s1.attr1'],pairs='true'},stream1)\n\t\t\t operator_2=MAP({expressions=['s1.attr1']},operator_1)\n\t\t\t operator_3=RENAME({aliases=['s1_attr1','str1.attr1'],pairs='true'},operator_2)\n\t\t\t operator_4=MAP({expressions=['str1.attr1']},operator_3)
CQLGeneratorQueryTest_145=SELECT s1.attr1 AS a1, s1.attr2 AS a3 FROM (SELECT s2.attr1 AS a11, s2.attr2 AS a12 FROM stream1 AS s2) AS s1
CQLGeneratorQueryTest_146=\n\t\t\toperator_1=RENAME({aliases=['attr1','a11','attr2','a12'],pairs='true'},stream1)\n\t\t\toperator_2=MAP({expressions=['a11','a12']},operator_1)\n\t\t\toperator_3=RENAME({aliases=['a11','a1','a12','a3'],pairs='true'},operator_2)\n\t\t\toperator_4=MAP({expressions=['a1','a3']},operator_3)
CQLGeneratorQueryTest_147=SELECT DolToEur(attr1) FROM stream1;
CQLGeneratorQueryTest_148=operator_1=MAP({expressions=[['DolToEur(stream1.attr1)','expression_0']]},stream1)
CQLGeneratorQueryTest_149=SELECT attr1 + attr1 AS attr1PlusAttr1 FROM stream1;
CQLGeneratorQueryTest_15=SELECT stream1.* FROM stream1
CQLGeneratorQueryTest_150=operator_1=MAP({expressions=[['stream1.attr1 + stream1.attr1','attr1PlusAttr1']]},stream1)
CQLGeneratorQueryTest_151=SELECT DolToEur(attr1 * attr2) + 10.0 - attr2 AS exp1, DolToEur(attr1) AS exp2 FROM stream1;
CQLGeneratorQueryTest_152=operator_1=MAP({expressions=[['DolToEur(stream1.attr1*stream1.attr2)+10.0-stream1.attr2','exp1'], ['DolToEur(stream1.attr1)','exp2']]},stream1)
CQLGeneratorQueryTest_153=SELECT DolToEur(DolToEur(attr1 + 20.25)) FROM stream1;
CQLGeneratorQueryTest_154=operator_1=MAP({expressions=[['DolToEur(DolToEur(stream1.attr1 + 20.25))','expression_0']]},stream1)
CQLGeneratorQueryTest_155=SELECT 'hello' + 'world' FROM stream1;
CQLGeneratorQueryTest_156=operator_1=MAP({expressions=[['"hello"+"world"','expression_0']]},stream1)
CQLGeneratorQueryTest_157=SELECT DolToEur(attr1), attr1 FROM stream1;
CQLGeneratorQueryTest_158=operator_1 = MAP({expressions=[['DolToEur(stream1.attr1)','expression_0'],'stream1.attr1']}, stream1)
CQLGeneratorQueryTest_159=SELECT b.attr1, DolToEur(b.attr2) AS euroPrice FROM stream1 [UNBOUNDED] AS b;
CQLGeneratorQueryTest_16=operator_1 = MAP({expressions=['stream1.attr1', 'stream1.attr2']}, stream1)
CQLGeneratorQueryTest_160=operator_1=RENAME({aliases=['attr1','b.attr1','attr2','b.attr2'],pairs='true'},stream1)\n\t\t\t operator_2=MAP({expressions=['b.attr1',['DolToEur(b.attr2)','euroPrice']]}, operator_1)
CQLGeneratorQueryTest_161=SELECT DolToEur(stream1.attr1), AVG(attr1) FROM stream1;
CQLGeneratorQueryTest_162=operator_1=AGGREGATE({AGGREGATIONS=[['AVG','stream1.attr1','AVG_0','Integer']]},stream1)\n\t\t\t operator_2=MAP({expressions=[['DolToEur(stream1.attr1)','expression_0'],'AVG_0']},JOIN(operator_1, stream1))
CQLGeneratorQueryTest_163=SELECT attr1 AS a1, DolToEur(attr1), AVG(attr1) FROM stream1;
CQLGeneratorQueryTest_164=operator_1=RENAME({aliases=['attr1','a1'],pairs='true'},stream1)\n\t\t\t operator_2=AGGREGATE({AGGREGATIONS=[['AVG','a1','AVG_0','Integer']]},operator_1)\n\t\t\t operator_3=RENAME({aliases=['attr1','a1'],pairs='true'},stream1)\n\t\t\t operator_4=MAP({expressions=['a1',['DolToEur(a1)','expression_0'],'AVG_0']},JOIN(operator_2,operator_3))
CQLGeneratorQueryTest_165=SELECT DolToEur(stream1.attr1), AVG(attr1), attr1 FROM stream1 WHERE attr1 > 10;
CQLGeneratorQueryTest_166=operator_1 = AGGREGATE({AGGREGATIONS=[['AVG','stream1.attr1','AVG_0','Integer']]},stream1)\n             operator_2 = SELECT({predicate='stream1.attr1>10'}, JOIN(operator_1, stream1))\n             operator_3 = MAP({expressions=[['DolToEur(stream1.attr1)','expression_0'],'AVG_0', 'stream1.attr1']}, operator_2)
CQLGeneratorQueryTest_167=SELECT DolToEur(stream1.attr1), AVG(attr1) FROM stream1 WHERE attr1 > 10;
CQLGeneratorQueryTest_168=operator_1 = AGGREGATE({AGGREGATIONS=[['AVG','stream1.attr1','AVG_0','Integer']]},stream1)\n\t\t\t operator_2 = SELECT({predicate='stream1.attr1>10'}, JOIN(operator_1, stream1))\n\t\t\t operator_3 = MAP({expressions=[['DolToEur(stream1.attr1)','expression_0'],'AVG_0']}, operator_2)
CQLGeneratorQueryTest_169=SELECT DolToEur(stream1.attr1) FROM stream1 WHERE attr1 > 10;
CQLGeneratorQueryTest_17=SELECT b.* FROM stream1 as b
CQLGeneratorQueryTest_170=operator_1 = SELECT({predicate='stream1.attr1>10'}, stream1)\n\t\t\t operator_2 = MAP({expressions=[['DolToEur(stream1.attr1)','expression_0']]}, operator_1)
CQLGeneratorQueryTest_171=SELECT 123.4 AS d FROM stream1;
CQLGeneratorQueryTest_172=operator_1=MAP({expressions=[['123.4','d']]},stream1)
CQLGeneratorQueryTest_173=SELECT DISTINCT * FROM stream1;
CQLGeneratorQueryTest_174=operator_1 = DISTINCT(MAP({expressions=['stream1.attr1', 'stream1.attr2']}, stream1))
CQLGeneratorQueryTest_175=SELECT [1.0,2.0,3.0;3.0,4.0,6.0] + [2.0,4.0,5.0;12.0,5.0,1.0] FROM stream1;
CQLGeneratorQueryTest_176=operator_1=MAP({expressions=[['[1.0,2.0,3.0;3.0,4.0,6.0]+[2.0,4.0,5.0;12.0,5.0,1.0]','expression_0']]},stream1)
CQLGeneratorQueryTest_177=SELECT Max([1.0,2.0,3.0;3.0,4.0,6.0]) AS maxElement FROM stream1;
CQLGeneratorQueryTest_178=operator_1=MAP({expressions=[['Max([1.0,2.0,3.0;3.0,4.0,6.0])','maxElement']]},stream1)
CQLGeneratorQueryTest_179=SELECT attr1 AS a1, Max([1.0,2.0,3.0;3.0,4.0,6.0]) + 7.5 * a1 AS maxElement FROM stream1;
CQLGeneratorQueryTest_18=operator_1=RENAME({aliases=['attr1','b.attr1','attr2','b.attr2'],pairs='true'},stream1)\n\t\t\t operator_2=MAP({expressions=['b.attr1','b.attr2']},operator_1)
CQLGeneratorQueryTest_180=operator_1=RENAME({aliases=['attr1','a1'],pairs='true'},stream1)\n\t\t\t operator_2=MAP({expressions=['a1',['Max([1.0,2.0,3.0;3.0,4.0,6.0])+7.5*a1','maxElement']]},operator_1)
CQLGeneratorQueryTest_181=SELECT attr1 FROM stream1\n\t\t\tUNION\n\t\t\tSELECT attr3 FROM stream2
CQLGeneratorQueryTest_182=operator_1=MAP({expressions=['stream1.attr1']},stream1)\n\t\t\t operator_2=MAP({expressions=['stream2.attr3']},stream2)\n\t\t\t operator_3=UNION(operator_1,operator_2)
CQLGeneratorQueryTest_183=CREATE STREAM datastream(id INTEGER, value STRING) DATABASE con1 TABLE main
CQLGeneratorQueryTest_184=datastream:=DATABASESOURCE({connection='con1',table='main',attributes=[['id','INTEGER'],['value','STRING']]})
CQLGeneratorQueryTest_185=CREATE STREAM datastream(id INTEGER, value STRING) DATABASE con1 TABLE main EACH 1 SECOND
CQLGeneratorQueryTest_186=datastream:=DATABASESOURCE({connection='con1',table='main',attributes=[['id','INTEGER'],['value','STRING']],waiteach=1000.0})
CQLGeneratorQueryTest_187=CREATE SINK dbsink AS DATABASE con1 TABLE example;\n\t\t\t STREAM TO dbsink SELECT * FROM stream1; \n\t\t\t
CQLGeneratorQueryTest_188=operator_1 = MAP({expressions=['stream1.attr1','stream1.attr2']},stream1)\n\t\t\t dbsink := DATABASESINK({connection='con1',table='example'},operator_1)
CQLGeneratorQueryTest_189=CREATE SINK dbsink AS DATABASE con1 TABLE example AND DROP;\n\t\t\t STREAM TO dbsink SELECT * FROM stream1; \n\t\t\t
CQLGeneratorQueryTest_19=SELECT b.* FROM stream1 as b WHERE b.attr1 > 100
CQLGeneratorQueryTest_190=operator_1 = MAP({expressions=['stream1.attr1','stream1.attr2']},stream1)\n\t\t\t dbsink := DATABASESINK({connection='con1',table='example', drop='true'},operator_1)
CQLGeneratorQueryTest_191=SELECT * FROM stream1 WHERE EXISTS(SELECT attr2 FROM stream1 WHERE attr2 \!= 10);
CQLGeneratorQueryTest_192=operator_1=MAP({expressions=['stream1.attr2']},stream1)\n\t\t\t operator_2=EXISTENCE({type='EXISTS',predicate='stream1.attr2\!=10'},operator_1,stream1)\n\t\t\t operator_3=MAP({expressions=['stream1.attr1', 'stream1.attr2']}, JOIN(operator_2, stream1))
CQLGeneratorQueryTest_193=SELECT attr1 as b FROM stream1 WHERE EXISTS(SELECT attr3 FROM stream2 WHERE b \!= attr3) AND b \!= 50 OR b > 100;
CQLGeneratorQueryTest_194=operator_1=MAP({expressions=['stream2.attr3']},stream2)\n\t\t\t operator_2=RENAME({aliases=['attr1','b'],pairs='true'},stream1)\n\t\t\t operator_4=EXISTENCE({type='EXISTS',predicate='b\!=stream2.attr3'},operator_1,operator_2)\n\t\t\t operator_3=SELECT({predicate='b\!=50||b>100'},JOIN(operator_4,operator_2))\n\t\t\t operator_5=MAP({expressions=['b']},operator_3)\n\t\t\t
CQLGeneratorQueryTest_195=SELECT * FROM stream1 WHERE attr1 \!= 50 AND EXISTS(SELECT attr2 FROM stream1 WHERE attr2 \!= 10);
CQLGeneratorQueryTest_196=operator_1=MAP({expressions=['stream1.attr2']},stream1)\n\t\t\t operator_3=EXISTENCE({type='EXISTS',predicate='stream1.attr2\!=10'},operator_1,stream1)\n\t\t\t operator_2=SELECT({predicate='stream1.attr1\!=50'},JOIN(operator_3,stream1))
CQLGeneratorQueryTest_197=SELECT * FROM stream1 WHERE attr1 \!= 50 AND EXISTS(SELECT attr2 FROM stream1 WHERE attr2 \!= 10) OR attr1 > 100;
CQLGeneratorQueryTest_198=operator_1=MAP({expressions=['stream1.attr2']},stream1)\n  \t\t\t operator_3=EXISTENCE({type='EXISTS',predicate='stream1.attr2\!=10'},operator_1,stream1)\n\t\t\t operator_2=SELECT({predicate='stream1.attr1\!=50||stream1.attr1>100'},JOIN(operator_3,stream1))
CQLGeneratorQueryTest_199=SELECT attr1 FROM stream1 WHERE attr1 > ALL (SELECT COUNT(attr2) AS num FROM stream1);
CQLGeneratorQueryTest_20=operator_1=RENAME({aliases=['attr1','b.attr1','attr2','b.attr2'],pairs='true'},stream1)\n\t\t\t operator_2=SELECT({predicate='b.attr1>100'},operator_1)
CQLGeneratorQueryTest_200=operator_1=AGGREGATE({AGGREGATIONS=[['COUNT','stream1.attr2','num','String']]},stream1)\n\t\t\t operator_2=MAP({expressions=['num']},operator_1)\n\t\t\t operator_3=EXISTENCE({type='NOT_EXISTS',predicate='attr1<=num'},operator_2,stream1)\n\t\t\t operator_4=MAP({expressions=['stream1.attr1']}, JOIN(operator_3, stream1))
CQLGeneratorQueryTest_201=SELECT attr1 FROM stream1 WHERE attr1 > ANY (SELECT COUNT(attr2) AS num FROM stream1);
CQLGeneratorQueryTest_202=operator_1=AGGREGATE({AGGREGATIONS=[['COUNT','stream1.attr2','num','String']]},stream1)\n\t\t\t operator_2=MAP({expressions=['num']},operator_1)\n\t\t\t operator_3=EXISTENCE({type='EXISTS',predicate='attr1>num'},operator_2,stream1)\n\t\t\t operator_4=MAP({expressions=['stream1.attr1']}, JOIN(operator_3, stream1))
CQLGeneratorQueryTest_203=SELECT attr1 FROM stream1 WHERE attr1 > SOME (SELECT COUNT(attr2) AS num FROM stream1 WHERE attr1 < attr2);
CQLGeneratorQueryTest_204=operator_1=AGGREGATE({AGGREGATIONS=[['COUNT','stream1.attr2','num','String']]},stream1)\n\t\t\t operator_2=SELECT({predicate='stream1.attr1<stream1.attr2'},operator_1)\n\t\t\t operator_3=MAP({expressions=['num']},operator_2)\n\t\t\t operator_4=EXISTENCE({type='EXISTS',predicate='attr1>num'},operator_3,stream1)\n\t\t\t operator_5=MAP({expressions=['stream1.attr1']},JOIN(operator_4,stream1))
CQLGeneratorQueryTest_205=SELECT attr1 FROM stream1 WHERE attr1 > SOME (SELECT stream1.attr2, COUNT(stream1.attr2) AS num FROM stream1 WHERE attr2 < attr1);
CQLGeneratorQueryTest_206=operator_1=AGGREGATE({AGGREGATIONS=[['COUNT','stream1.attr2','num','String']]},stream1)\n\t\t\t operator_2=SELECT({predicate='stream1.attr2<stream1.attr1'},JOIN(operator_1,stream1))\n\t\t\t operator_3=MAP({expressions=['stream1.attr2','num']},operator_2)\n\t\t     operator_4=EXISTENCE({type='EXISTS',predicate='attr1>stream1.attr2&&attr1>num'},operator_3,stream1)\n\t\t\t operator_5=MAP({expressions=['stream1.attr1']},JOIN(operator_4,stream1))
CQLGeneratorQueryTest_207=SELECT attr1 FROM stream1 WHERE attr1 > SOME (SELECT stream1.attr2 FROM stream1 WHERE attr2 < attr1);
CQLGeneratorQueryTest_208=operator_1=SELECT({predicate='stream1.attr2<stream1.attr1'},stream1)\n\t\t\t operator_2=MAP({expressions=['stream1.attr2']},operator_1)\n\t\t\t operator_3=EXISTENCE({type='EXISTS',predicate='attr1>stream1.attr2'},operator_2,stream1)\n\t\t\t operator_4=MAP({expressions=['stream1.attr1']},JOIN(operator_3,stream1))
CQLGeneratorQueryTest_209=SELECT attr1 FROM stream1 WHERE attr1 IN (SELECT COUNT(attr2) AS num FROM stream1);
CQLGeneratorQueryTest_21=SELECT b.*, d.* FROM stream1 AS b, stream2 AS d
CQLGeneratorQueryTest_210=operator_1=AGGREGATE({AGGREGATIONS=[['COUNT','stream1.attr2','num','String']]},stream1)\n\t\t\t operator_2=MAP({expressions=['num']},operator_1)\n\t\t\t operator_3=EXISTENCE({type='EXISTS',predicate='attr1==num'},operator_2,stream1)\n\t\t\t operator_4=MAP({expressions=['stream1.attr1']}, JOIN(operator_3,stream1))
CQLGeneratorQueryTest_211=SELECT b2.attr1 as b\n\t\t\tFROM   (SELECT b1.attr1, COUNT(b1.attr1) AS num\n\t\t\t        FROM stream1 [SIZE 60 MINUTES ADVANCE 1 MINUTES TIME] AS b1) AS b2\n\t\t\tWHERE num >= 200
CQLGeneratorQueryTest_212=operator_1=RENAME({aliases=['attr1','b1.attr1'],pairs='true'},TIMEWINDOW({size=[60,'MINUTES'],advance=[1,'MINUTES']},stream1))\n\t\t\t operator_2=AGGREGATE({AGGREGATIONS=[['COUNT','b1.attr1','num','Integer']]},operator_1)\n\t\t\t operator_3=RENAME({aliases=['attr1','b1.attr1'],pairs='true'},TIMEWINDOW({size=[60,'MINUTES'],advance=[1,'MINUTES']},stream1))\n\t\t\t operator_4=MAP({expressions=['b1.attr1','num']},JOIN(operator_2,operator_3))\n\t\t\t operator_5=RENAME({aliases=['b1_attr1','b'],pairs='true'},operator_4)\n\t\t\t operator_6=SELECT({predicate='num>=200'},operator_5)\n\t\t\t operator_7=MAP({expressions=['b']},operator_6)
CQLGeneratorQueryTest_213=SELECT b2.attr1, b3.attr3\n\t\t\tFROM   (SELECT b1.attr1, COUNT(b1.attr1) AS num\n\t\t\t        FROM stream1 [SIZE 60 MINUTES ADVANCE 1 MINUTES TIME] AS b1\n\t\t\t        GROUP BY b1.attr1\n\t\t\t        ) AS b2, \n\t\t\t\t\t(SELECT c1.attr3 FROM stream2 AS c1\n\t\t\t\t\t) AS b3 \n\t\t\tWHERE num >= 200
CQLGeneratorQueryTest_214=operator_1=RENAME({aliases=['attr1','b1.attr1'],pairs='true'},TIMEWINDOW({size=[60,'MINUTES'],advance=[1,'MINUTES']},stream1))\n\t\t\t operator_2=AGGREGATE({AGGREGATIONS=[['COUNT','b1.attr1','num','Integer']],GROUP_BY=['b1.attr1']},operator_1)\n\t\t\t operator_3=RENAME({aliases=['attr1','b1.attr1'],pairs='true'},TIMEWINDOW({size=[60,'MINUTES'],advance=[1,'MINUTES']},stream1))\n\t\t\t operator_4=MAP({expressions=['b1.attr1','num']},JOIN(RENAME({aliases=['b1.attr1','b1.attr1_groupAttribute\#0'],pairs='true'},operator_2),operator_3))\n\t\t\t operator_5=RENAME({aliases=['attr3','c1.attr3'],pairs='true'},stream2)\n\t\t\t operator_6=MAP({expressions=['c1.attr3']},operator_5)\n\t\t\t operator_7=RENAME({aliases=['b1_attr1','b2.attr1'],pairs='true'},operator_4)\n\t\t\t operator_8=RENAME({aliases=['c1_attr3','b3.attr3'],pairs='true'},operator_6)\n\t\t\t operator_9=SELECT({predicate='num>=200'},JOIN(operator_7,operator_8))\n             operator_10=MAP({expressions=['b2.attr1','b3.attr3']},operator_9)
CQLGeneratorQueryTest_215=SELECT b2.attr1, b3.attr3\n\t\t\tFROM   (SELECT b1.attr1, COUNT(b1.attr1) AS num\n\t\t\t        FROM stream1 [SIZE 60 MINUTES ADVANCE 1 MINUTES TIME] AS b1\n\t\t\t        GROUP BY b1.attr1\n\t\t\t        ) AS b2, \n\t\t\t\t\t(SELECT c1.attr3 FROM stream2 AS c1\n\t\t\t\t\t) AS b3 \n\t\t\tWHERE num >= ALL (SELECT d1.attr2 FROM stream1 as d1)
CQLGeneratorQueryTest_216=operator_1=RENAME({aliases=['attr1','b1.attr1'],pairs='true'},TIMEWINDOW({size=[60,'MINUTES'],advance=[1,'MINUTES']},stream1))\n\t\t\t operator_2=AGGREGATE({AGGREGATIONS=[['COUNT','b1.attr1','num','Integer']],GROUP_BY=['b1.attr1']},operator_1)\n\t\t\t operator_3=RENAME({aliases=['attr1','b1.attr1'],pairs='true'},TIMEWINDOW({size=[60,'MINUTES'],advance=[1,'MINUTES']},stream1))\n\t\t\t operator_4=MAP({expressions=['b1.attr1','num']},JOIN(operator_2,operator_3))\n\t\t\t operator_5=RENAME({aliases=['attr3','c1.attr3'],pairs='true'},stream2)\n\t\t\t operator_6=MAP({expressions=['c1.attr3']},operator_5)\n\t\t\t operator_7=RENAME({aliases=['b1_attr1','b2.attr1'],pairs='true'},operator_4)\n\t\t\t operator_8=RENAME({aliases=['c1_attr3','b3.attr3'],pairs='true'},operator_6)\n\t\t\t operator_9=SELECT({predicate='num>=200'},JOIN(operator_7,operator_8))operator_10=MAP({expressions=['b2.attr1','b3.attr3']},operator_9)
CQLGeneratorQueryTest_22=operator_1=RENAME({aliases=['attr1','b.attr1','attr2','b.attr2'],pairs='true'},stream1)\n\t\t\t operator_2=RENAME({aliases=['attr3','d.attr3','attr4','d.attr4'],pairs='true'},stream2)\n\t\t\t operator_3=MAP({expressions=['b.attr1','b.attr2','d.attr3','d.attr4']},JOIN(operator_1,operator_2))
CQLGeneratorQueryTest_23=SELECT * FROM stream1 AS b
CQLGeneratorQueryTest_24=operator_1=RENAME({aliases=['attr1','b.attr1','attr2','b.attr2'],pairs='true'},stream1)\n\t\t\t operator_2=MAP({expressions=['b.attr1','b.attr2']},operator_1)
CQLGeneratorQueryTest_25=SELECT * FROM stream1 AS b WHERE b.attr1 > 10
CQLGeneratorQueryTest_26=operator_1=RENAME({aliases=['attr1','b.attr1','attr2','b.attr2'],pairs='true'},stream1)\n\t\t\t operator_2=SELECT({predicate='b.attr1>10'},operator_1)
CQLGeneratorQueryTest_27=SELECT attr1 AS a1, attr2 AS a2 FROM stream1
CQLGeneratorQueryTest_28=\n\t\t\t operator_1 = RENAME({aliases=['attr1','a1','attr2','a2'], pairs='true'}, stream1)\n\t\t\t operator_2 = MAP({expressions=['a1', 'a2']}, operator_1)
CQLGeneratorQueryTest_29=SELECT a.attr1 AS a1, b.attr1 AS b1 FROM stream1 AS a, stream1 AS b
CQLGeneratorQueryTest_30=operator_1=RENAME({aliases=['attr1','a1'],pairs='true'},stream1)\n\t\t\t operator_2=RENAME({aliases=['attr1','b1','attr2','stream1.attr2\#1'],pairs='true'},stream1)\n\t\t\t operator_3=MAP({expressions=['a1','b1']},JOIN(operator_1, operator_2))
CQLGeneratorQueryTest_31=SELECT a.attr1 AS a1, attr2 AS b1 FROM stream1 AS a
CQLGeneratorQueryTest_32=\n\t\t\t operator_1 = RENAME({aliases=['attr1','a1', 'attr2', 'b1'], pairs='true'}, stream1)\n\t\t\t operator_2 = MAP({expressions=['a1', 'b1']}, operator_1)
CQLGeneratorQueryTest_33=SELECT a.attr1 AS a1, stream1.attr2 AS b1 FROM stream1 AS a, stream1 AS b
CQLGeneratorQueryTest_34=
CQLGeneratorQueryTest_35=No exception of %s thrown
CQLGeneratorQueryTest_36=SELECT a.attr1 AS a1, attr1 AS b1 FROM stream1 AS a
CQLGeneratorQueryTest_37=
CQLGeneratorQueryTest_38=No exception of %s thrown
CQLGeneratorQueryTest_39=SELECT b.attr1, b.attr2 FROM stream1 AS b
CQLGeneratorQueryTest_40=operator_1=RENAME({aliases=['attr1','b.attr1','attr2','b.attr2'],pairs='true'},stream1)\n\t\t\t operator_2=MAP({expressions=['b.attr1','b.attr2']},operator_1)
CQLGeneratorQueryTest_41=SELECT attr1 AS a1, attr1 AS a2 FROM stream1, stream4
CQLGeneratorQueryTest_42=
CQLGeneratorQueryTest_43=No exception of %s thrown
CQLGeneratorQueryTest_44=SELECT stream1.attr1 AS a1, attr1 AS a2 FROM stream1, stream4
CQLGeneratorQueryTest_45=
CQLGeneratorQueryTest_46=No exception of %s thrown
CQLGeneratorQueryTest_47=SELECT attr1 AS a1, stream4.attr1 AS a2 FROM stream1, stream4
CQLGeneratorQueryTest_48=
CQLGeneratorQueryTest_49=No exception of %s thrown
CQLGeneratorQueryTest_5=SELECT * FROM stream1;
CQLGeneratorQueryTest_50=SELECT attr1 FROM stream1 AS s1, stream1 AS s2;
CQLGeneratorQueryTest_51=
CQLGeneratorQueryTest_52=No exception of %s thrown
CQLGeneratorQueryTest_53=SELECT attr1 FROM stream1 AS s1, stream1 AS s2
CQLGeneratorQueryTest_54=
CQLGeneratorQueryTest_55=No exception of %s thrown
CQLGeneratorQueryTest_56=SELECT attr1 FROM stream1 AS s1, stream1 AS s2, stream1 AS s3;
CQLGeneratorQueryTest_57=
CQLGeneratorQueryTest_58=No exception of %s thrown
CQLGeneratorQueryTest_59=SELECT attr1 AS value1 FROM stream1;
CQLGeneratorQueryTest_6=operator_1 = MAP({expressions=['stream1.attr1', 'stream1.attr2']}, stream1)
CQLGeneratorQueryTest_60=operator_1  = RENAME({aliases=['attr1','value1'],pairs='true'}, stream1)\n\t\t\t operator_2 = MAP({expressions=['value1']}, operator_1)
CQLGeneratorQueryTest_61=SELECT attr1 AS value1 FROM stream1 AS s1 WHERE s1.value1 > 2;
CQLGeneratorQueryTest_62=operator_1=RENAME({aliases=['attr1','value1'],pairs='true'},stream1)\n\t\t\t operator_2=SELECT({predicate='value1>2'},operator_1)\n\t\t\t operator_3=MAP({expressions=['value1']},operator_2)
CQLGeneratorQueryTest_63=SELECT s1.attr1 AS value1 FROM stream1 AS s1 WHERE s1.value1 > 2;
CQLGeneratorQueryTest_64=operator_1=RENAME({aliases=['attr1','value1'],pairs='true'},stream1)\n\t\t\t operator_2=SELECT({predicate='value1>2'},operator_1) \n\t\t\t operator_3=MAP({expressions=['value1']},operator_2)
CQLGeneratorQueryTest_65=SELECT s1.attr1 AS value1 FROM stream1 AS s1 WHERE s1.attr1 > 2;
CQLGeneratorQueryTest_66=operator_1=RENAME({aliases=['attr1','value1'],pairs='true'},stream1)\n\t\t\t operator_2=SELECT({predicate='value1>2'},operator_1) \n\t\t\t operator_3=MAP({expressions=['value1']},operator_2)
CQLGeneratorQueryTest_67=SELECT attr1 FROM stream1 WHERE attr1 > 2;
CQLGeneratorQueryTest_68=\n\t\t\toperator_1 = SELECT({predicate='stream1.attr1>2'},stream1)\n\t\t\toperator_2 = MAP({expressions=['stream1.attr1']},operator_1)
CQLGeneratorQueryTest_69=SELECT stream1.attr1 FROM stream1, stream2, stream3 WHERE attr1 > 2
CQLGeneratorQueryTest_7=SELECT * FROM stream1, stream2, stream3;
CQLGeneratorQueryTest_70=\n\t\t\toperator_1 = SELECT({predicate='stream1.attr1>2'},JOIN(stream1,JOIN(stream2,stream3)))\n\t\t\toperator_2 = MAP({expressions=['stream1.attr1']},operator_1)
CQLGeneratorQueryTest_71=SELECT attr1 FROM stream1;
CQLGeneratorQueryTest_72=operator_1 = MAP({expressions=['stream1.attr1']}, stream1)
CQLGeneratorQueryTest_73=SELECT stream1.attr1, stream1.attr2, attr3 FROM stream1, stream2, stream3;
CQLGeneratorQueryTest_74=operator_1 = MAP({expressions=['stream1.attr1', 'stream1.attr2', 'stream2.attr3']},\n\t\t\t\t\t\t\tJOIN(stream1, \n\t\t\t\t\t\t\t\tJOIN(stream2, stream3)))
CQLGeneratorQueryTest_75=SELECT stream1.attr1, AVG(attr1) AS avgAttr1, stream1.attr2, attr3 FROM stream1, stream2, stream3;
CQLGeneratorQueryTest_76=operator_1 = AGGREGATE({AGGREGATIONS=[['AVG','stream1.attr1','avgAttr1','Integer']]}, JOIN(stream1,JOIN(stream2,stream3)))\n\t\t\t operator_2 = MAP({expressions=['stream1.attr1','avgAttr1','stream1.attr2','stream2.attr3']}, JOIN(operator_1, JOIN(stream1, JOIN(stream2, stream3))))
CQLGeneratorQueryTest_77=SELECT attr1, attr2 FROM stream1 WHERE attr1=7 OR attr1=20 OR attr1=21 OR attr1=59 OR attr1=87;
CQLGeneratorQueryTest_78=operator_1 = SELECT({predicate='stream1.attr1==7||stream1.attr1==20||stream1.attr1==21||stream1.attr1==59||stream1.attr1==87'},stream1)\n\t\t\t operator_2 = MAP({expressions=['stream1.attr1','stream1.attr2']},operator_1)
CQLGeneratorQueryTest_79=SELECT a.attr1 AS aid, b.attr1 AS d, b.attr1 FROM stream1 AS a, stream1 AS b WHERE aid=b.attr1;
CQLGeneratorQueryTest_8=operator_1 = JOIN(stream1, JOIN(stream2, stream3))
CQLGeneratorQueryTest_80=operator_1=RENAME({aliases=['attr1','aid'],pairs='true'},stream1)\n \t\t\t operator_2=RENAME({aliases=['attr1','d','attr2','stream1.attr2\#1'],pairs='true'},stream1)\n \t\t\t operator_3=RENAME({aliases=['attr1','b.attr1','attr2','stream1.attr2\#2'],pairs='true'},stream1)\n\t\t\t operator_4=SELECT({predicate='aid==b.attr1'},JOIN(operator_1,JOIN(operator_2,operator_3)))\n\t\t\t operator_5=MAP({expressions=['aid','d','b.attr1']},operator_4)
CQLGeneratorQueryTest_81=SELECT b.attr1 FROM stream1 AS b WHERE b.attr1 < 150.0;
CQLGeneratorQueryTest_82=operator_1=RENAME({aliases=['attr1','b.attr1'],pairs='true'},stream1)\n\t\t\t operator_2=SELECT({predicate='b.attr1<150.0'},operator_1)\n\t\t\t operator_3=MAP({expressions=['b.attr1']},operator_2)
CQLGeneratorQueryTest_83=SELECT attr1 FROM stream1 AS b, stream2 AS p WHERE b.attr2 = p.attr3;
CQLGeneratorQueryTest_84=operator_1=SELECT({predicate='stream1.attr2==stream2.attr3'},JOIN(stream1,stream2))\n\t\t\t operator_2=MAP({expressions=['stream1.attr1']},operator_1)
CQLGeneratorQueryTest_85=CREATE VIEW view1 FROM (\n\t\t\t\tSELECT * FROM stream1\n\t\t\t)
CQLGeneratorQueryTest_86=\n\t\t\tview1 := MAP({expressions=['stream1.attr1', 'stream1.attr2']}, stream1)\n\t\t\t
CQLGeneratorQueryTest_87=CREATE STREAM stream1 (attr1 Integer) \n    \t\tWRAPPER 'GenericPush'\n    \t\tPROTOCOL 'CSV'\n    \t\tTRANSPORT 'File'\n    \t\tDATAHANDLER 'Tuple'\n    \t\tOPTIONS ('port' '54321', 'host' 'localhost')
CQLGeneratorQueryTest_88=stream1 := ACCESS\n\t\t\t(\n\t\t\t\t{ source = 'stream1', \n\t\t\t\t  wrapper = 'GenericPush',\n\t\t\t\t  protocol = 'CSV',\n\t\t\t\t  transport = 'File',\n\t\t\t\t  dataHandler ='Tuple',\n\t\t\t\t  schema = [['attr1', 'Integer']],\n\t\t\t\t  options =[['port', '54321'],['host', 'localhost']]\n\t\t\t\t}\n\t\t\t)
CQLGeneratorQueryTest_89=ATTACH STREAM stream1 (attr1 INTEGER) CHANNEL localhost : 54321;
CQLGeneratorQueryTest_9=SELECT * FROM stream1, stream2 AS s2, stream3 WHERE attr1 > 2 AND attr2 = 'Test';
CQLGeneratorQueryTest_90=stream1 := ACCESS\n\t\t\t(\n\t\t\t\t{ source = 'stream1', \n\t\t\t\t  wrapper = 'GenericPush',\n\t\t\t\t  protocol = 'SizeByteBuffer',\n\t\t\t\t  transport = 'NonBlockingTcp',\n\t\t\t\t  dataHandler ='Tuple',\n\t\t\t\t  schema = [['attr1', 'INTEGER']],\n\t\t\t\t  options =[['port', '54321'],['host', 'localhost']]\n\t\t\t\t}\n\t\t\t)
CQLGeneratorQueryTest_91=CREATE STREAM stream1 (attr1 Integer) FILE 'this/is/a/filename.file' AS SimpleCSV;
CQLGeneratorQueryTest_92=stream1 := ACCESS\n\t\t\t(\n\t\t\t\t{ source = 'stream1', \n\t\t\t\t  wrapper = 'GenericPull',\n\t\t\t\t  protocol = 'SimpleCSV',\n\t\t\t\t  transport = 'File',\n\t\t\t\t  dataHandler ='Tuple',\n\t\t\t\t  schema = [['attr1', 'Integer']],\n\t\t\t\t  options =[['filename', 'this/is/a/filename.file'],['delimiter',';'],['textDelimiter',"'"]]\n\t\t\t\t}\n\t\t\t)
CQLGeneratorQueryTest_93=STREAM TO out1 SELECT * FROM stream1;
CQLGeneratorQueryTest_94=
CQLGeneratorQueryTest_95=STREAM TO out1 input1;
CQLGeneratorQueryTest_96=
CQLGeneratorQueryTest_97=\n\t\t\tCREATE SINK out1 (attr1 INTEGER, attr2 STRING)\n\t\t\tWRAPPER 'GenericPush'\n\t\t\tPROTOCOL 'CSV'\n\t\t\tTRANSPORT 'FILE'\n\t\t\tDATAHANDLER 'TUPLE'\n\t\t\tOPTIONS('filename' 'outfile1') \t\t\t\n\n\t\t\tSTREAM TO out1 SELECT attr1, attr2 FROM stream1 WHERE attr2 \!= attr1;
CQLGeneratorQueryTest_98=operator_1 = SELECT({predicate='stream1.attr2\!=stream1.attr1'},stream1) \n\t\t\t operator_2 = MAP({expressions=['stream1.attr1','stream1.attr2']},operator_1)\n\t\t\t out1 := SENDER\n\t\t\t\t  (\n\t\t\t\t\t{\t  \n\t\t\t\t\t\tsink      = 'out1', \n\t\t\t\t\t\twrapper     = 'GenericPush',\n\t\t\t\t\t\tprotocol    = 'CSV',\n\t\t\t\t\t\ttransport   = 'FILE',\n\t\t\t\t\t\tdataHandler = 'TUPLE',\n\t\t\t\t\t\toptions =[['filename','outfile1']]\n\t\t\t\t\t }\n\t\t\t\t\t ,operator_2\n\t\t\t\t   )
CQLGeneratorQueryTest_99=\n\t\t\tCREATE SINK out1 (attr1 INTEGER, attr2 STRING)\n\t\t\tWRAPPER 'GenericPush'\n\t\t\tPROTOCOL 'CSV'\n\t\t\tTRANSPORT 'FILE'\n\t\t\tDATAHANDLER 'TUPLE'\n\t\t\tOPTIONS('filename' 'outfile1') \t\t\t\n\n\t\t\tSTREAM TO out1 stream1;
