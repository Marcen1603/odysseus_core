/*
 * generated by Xtext 2.10.0
 */
package de.uniol.inf.is.odysseus.parser.cql2.serializer;

import com.google.inject.Inject;
import de.uniol.inf.is.odysseus.parser.cql2.services.CQLGrammarAccess;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;

@SuppressWarnings("all")
public class CQLSyntacticSequencer extends AbstractSyntacticSequencer {

	protected CQLGrammarAccess grammarAccess;
	protected AbstractElementAlias match_Create_ATTACHKeyword_1_1_or_CREATEKeyword_1_0;
	protected AbstractElementAlias match_Model_SemicolonKeyword_1_q;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (CQLGrammarAccess) access;
		match_Create_ATTACHKeyword_1_1_or_CREATEKeyword_1_0 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getCreateAccess().getATTACHKeyword_1_1()), new TokenAlias(false, false, grammarAccess.getCreateAccess().getCREATEKeyword_1_0()));
		match_Model_SemicolonKeyword_1_q = new TokenAlias(false, true, grammarAccess.getModelAccess().getSemicolonKeyword_1());
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (ruleCall.getRule() == grammarAccess.getAndOperatorRule())
			return getAndOperatorToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getOrOperatorRule())
			return getOrOperatorToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * AndOperator:
	 * 	'AND';
	 */
	protected String getAndOperatorToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "AND";
	}
	
	/**
	 * OrOperator:
	 * 	'OR';
	 */
	protected String getOrOperatorToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "OR";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_Create_ATTACHKeyword_1_1_or_CREATEKeyword_1_0.equals(syntax))
				emit_Create_ATTACHKeyword_1_1_or_CREATEKeyword_1_0(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Model_SemicolonKeyword_1_q.equals(syntax))
				emit_Model_SemicolonKeyword_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     'CREATE' | 'ATTACH'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) type='SINK'
	 *     (rule start) (ambiguity) type='STREAM'
	 *     (rule start) (ambiguity) type='VIEW'
	 */
	protected void emit_Create_ATTACHKeyword_1_1_or_CREATEKeyword_1_0(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ';'?
	 *
	 * This ambiguous syntax occurs at:
	 *     components+=Command (ambiguity) (rule end)
	 *     components+=Command (ambiguity) components+=Command
	 *     components+=Command (ambiguity) components+=Query
	 *     components+=Query (ambiguity) (rule end)
	 *     components+=Query (ambiguity) components+=Command
	 *     components+=Query (ambiguity) components+=Query
	 */
	protected void emit_Model_SemicolonKeyword_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
