grammar de.uniol.inf.is.odysseus.server.Streamingsparql with org.eclipse.xtext.common.Terminals
import 'http://www.eclipse.org/emf/2002/Ecore' as ecore
generate streamingsparql "http://www.uniol.de/inf/is/odysseus/server/Streamingsparql"

SPARQLQuery:
//	ConstructQuery |
	SelectQuery 
//	AskQuery |
//	DescribeQuery
;

Prefix:
	'PREFIX' name=ID ':' iref=IRI_TERMINAL | UnNamedPrefix;

UnNamedPrefix returns Prefix:
	'PREFIX' ':' iref=IRI_TERMINAL;

Base:
	'BASE' iref=IRI;


SelectQuery:
	(method = "#ADDQUERY" | "#RUNQUERY")?
	(base=Base)?
	(prefixes+=Prefix)*
	(datasetClauses+=DatasetClause)*
	'SELECT' variables+=Variable (variables+=Variable)*
	whereClause=WhereClause
	(filterclause=Filterclause)?
//	(groupClause=GroupClause)?
//	(havingClause=HavingClause)?
//	(limitClause=LimitClause)?
	(aggregateClause=Aggregate)?
	
	(filesinkclause=Filesinkclause)?
;

//Aggregate:
//	'AGGREGATE(' function = STRING ', ' attribute = STRING ', ' aggregatename = STRING (', [' group_by += STRING(',' STRING)*)? '])'
//;

Aggregate:
	{Aggregate}
	'AGGREGATE(' ('aggregations' '=' '['(aggregations+=Aggregation)*']')? ((',')?groupby=GroupBy)? ')'
;

GroupBy:
	'group_by=[' variables+=Variable (','variables+=Variable)*']'
;

Aggregation:
	'['function=AGG_FUNCTION',' varToAgg=Variable ',' aggName=STRING (',' datatype =STRING)? ']'(',')?
;

Filesinkclause:
	'CSVFILESINK(' path=STRING ')'
;

Filterclause:
	'FILTER('left=Variable operator=Operator right=Variable')'
;

GroupClause:
	'GROUP' 'BY' conditions+=Variable (conditions+=Variable)*
;

DatasetClause:
	'FROM' dataSet=IRI 'AS' name=ID ('[' 'TYPE' type=WINDOWTYPE 'SIZE' size=INT ('ADVANCE' advance=INT)? ('UNIT' unit=UNITTYPE)? ']')?;

WhereClause:
	'WHERE' '{'  
		whereclauses+=InnerWhereClause+
	  '}';
	  
InnerWhereClause:
	name=[DatasetClause] groupGraphPattern=GroupGraphPatternSub
;
GroupGraphPatternSub:
	'{' graphPatterns+=TriplesSameSubject ('.' graphPatterns+=TriplesSameSubject)* ('.')? '}';

//GraphPattern:
//	triplessamesubject=TriplesSameSubject ;
//	GroupOrUnionGraphPattern |
//	OptionalGraphPattern |
//	GraphGraphPattern |
//	ServiceGraphPattern |
//	FilterPattern |
//	ExistsPattern |
//	NotExistsPattern |
//	MinusPattern;

TriplesSameSubject:
	subject=GraphNode propertyList+=PropertyList (';'
	propertyList+=PropertyList)*;
	
PropertyList:
	property=GraphNode object=GraphNode;
	
//GroupGraphPattern:
////	SubSelectQuery |
//	groupgraphpattern=GroupGraphPatternSub
//	;

GraphNode:
	variable = Variable |
	literal = STRING |
	iri=IRI ;
//	blanknode=BlankNode |
//	parameter=Parameter;
//	
Variable:
	unnamed=UnNamedVariable |
	property=Property;

UnNamedVariable returns UnNamedVariable:
	'?' name=ID;

Property returns NamedVariable:
	prefix=[Prefix] ':' name=ID;
	
	
//Literal:
//	value = StringValue |
//	value = IntegerValue
//;
//
//StringValue:
//	value=STRING
//;
//
//IntegerValue:
//	value=INT
//;
IRI:
	{IRI} value=IRI_TERMINAL;
	
TypeTag hidden(WS):
	'^^' type=GraphNode;

LangTag hidden(WS):
	'@' lang=ID;
	
enum Operator:
	lessThen="<" |
	greaterThen=">" |
	lessEqual="<=" |
	greaterEqual=">=" |
	equal="=" |
	notEqual="!=" |
	sum="+" |
	div="/" |
	sub="-" |
	multiplicity="*"
;

terminal AGG_FUNCTION returns ecore::EString:
	'COUNT' | 'MAX' | 'MIN' | 'AVG' | 'SUM' | 'MEDIAN'
;

terminal IRI_TERMINAL returns ecore::EString:
	'<' ('a'..'z' | 'A'..'Z' | '_' | '-' | '0'..'9' | '/' | ':' | '.' | '#' | '?' | '@' | '$' | '&' | '=')* '>';

@Override 
terminal STRING returns ecore::EString:
	'"' ('\\' ('b' | 't' | 'n' | 'f' | 'r' | '"' | "'" | '\\') | !('\\' | '"'))* '"';
	
terminal WINDOWTYPE returns ecore::EString:
	('ELEMENT' | 'TIME');

terminal UNITTYPE returns ecore::EString:
	('NANOSECONDS' | 'MICROSECONDS' | 'MILLISECONDS' | 'SECONDS' | 'MINUTES' | 'HOURS' | 'DAYS');