/*
 * generated by Xtext
 */
grammar InternalStreamingsparql;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package de.uniol.inf.is.odysseus.server.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package de.uniol.inf.is.odysseus.server.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import de.uniol.inf.is.odysseus.server.services.StreamingsparqlGrammarAccess;

}

@parser::members {

 	private StreamingsparqlGrammarAccess grammarAccess;
 	
    public InternalStreamingsparqlParser(TokenStream input, StreamingsparqlGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "SPARQLQuery";	
   	}
   	
   	@Override
   	protected StreamingsparqlGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleSPARQLQuery
entryRuleSPARQLQuery returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSPARQLQueryRule()); }
	 iv_ruleSPARQLQuery=ruleSPARQLQuery 
	 { $current=$iv_ruleSPARQLQuery.current; } 
	 EOF 
;

// Rule SPARQLQuery
ruleSPARQLQuery returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getSPARQLQueryAccess().getSelectQueryParserRuleCall()); 
    }
    this_SelectQuery_0=ruleSelectQuery
    { 
        $current = $this_SelectQuery_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRulePrefix
entryRulePrefix returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPrefixRule()); }
	 iv_rulePrefix=rulePrefix 
	 { $current=$iv_rulePrefix.current; } 
	 EOF 
;

// Rule Prefix
rulePrefix returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='PREFIX' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getPrefixAccess().getPREFIXKeyword_0_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getPrefixAccess().getNameIDTerminalRuleCall_0_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPrefixRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2=':' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getPrefixAccess().getColonKeyword_0_2());
    }
(
(
		lv_iref_3_0=RULE_IRI_TERMINAL
		{
			newLeafNode(lv_iref_3_0, grammarAccess.getPrefixAccess().getIrefIRI_TERMINALTerminalRuleCall_0_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPrefixRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"iref",
        		lv_iref_3_0, 
        		"IRI_TERMINAL");
	    }

)
))
    |
    { 
        newCompositeNode(grammarAccess.getPrefixAccess().getUnNamedPrefixParserRuleCall_1()); 
    }
    this_UnNamedPrefix_4=ruleUnNamedPrefix
    { 
        $current = $this_UnNamedPrefix_4.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleUnNamedPrefix
entryRuleUnNamedPrefix returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getUnNamedPrefixRule()); }
	 iv_ruleUnNamedPrefix=ruleUnNamedPrefix 
	 { $current=$iv_ruleUnNamedPrefix.current; } 
	 EOF 
;

// Rule UnNamedPrefix
ruleUnNamedPrefix returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='PREFIX' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getUnNamedPrefixAccess().getPREFIXKeyword_0());
    }
	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getUnNamedPrefixAccess().getColonKeyword_1());
    }
(
(
		lv_iref_2_0=RULE_IRI_TERMINAL
		{
			newLeafNode(lv_iref_2_0, grammarAccess.getUnNamedPrefixAccess().getIrefIRI_TERMINALTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getUnNamedPrefixRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"iref",
        		lv_iref_2_0, 
        		"IRI_TERMINAL");
	    }

)
))
;





// Entry rule entryRuleBase
entryRuleBase returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBaseRule()); }
	 iv_ruleBase=ruleBase 
	 { $current=$iv_ruleBase.current; } 
	 EOF 
;

// Rule Base
ruleBase returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='BASE' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getBaseAccess().getBASEKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBaseAccess().getIrefIRIParserRuleCall_1_0()); 
	    }
		lv_iref_1_0=ruleIRI		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBaseRule());
	        }
       		set(
       			$current, 
       			"iref",
        		lv_iref_1_0, 
        		"IRI");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleSelectQuery
entryRuleSelectQuery returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSelectQueryRule()); }
	 iv_ruleSelectQuery=ruleSelectQuery 
	 { $current=$iv_ruleSelectQuery.current; } 
	 EOF 
;

// Rule SelectQuery
ruleSelectQuery returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		lv_method_0_0=	'#ADDQUERY' 
    {
        newLeafNode(lv_method_0_0, grammarAccess.getSelectQueryAccess().getMethodADDQUERYKeyword_0_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSelectQueryRule());
	        }
       		setWithLastConsumed($current, "method", lv_method_0_0, "#ADDQUERY");
	    }

)
)
    |	otherlv_1='#RUNQUERY' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getSelectQueryAccess().getRUNQUERYKeyword_0_1());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getSelectQueryAccess().getBaseBaseParserRuleCall_1_0()); 
	    }
		lv_base_2_0=ruleBase		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSelectQueryRule());
	        }
       		set(
       			$current, 
       			"base",
        		lv_base_2_0, 
        		"Base");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getSelectQueryAccess().getPrefixesPrefixParserRuleCall_2_0()); 
	    }
		lv_prefixes_3_0=rulePrefix		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSelectQueryRule());
	        }
       		add(
       			$current, 
       			"prefixes",
        		lv_prefixes_3_0, 
        		"Prefix");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getSelectQueryAccess().getDatasetClausesDatasetClauseParserRuleCall_3_0()); 
	    }
		lv_datasetClauses_4_0=ruleDatasetClause		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSelectQueryRule());
	        }
       		add(
       			$current, 
       			"datasetClauses",
        		lv_datasetClauses_4_0, 
        		"DatasetClause");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_5='SELECT' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getSelectQueryAccess().getSELECTKeyword_4());
    }
((
(
		lv_isDistinct_6_0=	'DISTINCT' 
    {
        newLeafNode(lv_isDistinct_6_0, grammarAccess.getSelectQueryAccess().getIsDistinctDISTINCTKeyword_5_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSelectQueryRule());
	        }
       		setWithLastConsumed($current, "isDistinct", true, "DISTINCT");
	    }

)
)
    |(
(
		lv_isReduced_7_0=	'REDUCED' 
    {
        newLeafNode(lv_isReduced_7_0, grammarAccess.getSelectQueryAccess().getIsReducedREDUCEDKeyword_5_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSelectQueryRule());
	        }
       		setWithLastConsumed($current, "isReduced", true, "REDUCED");
	    }

)
))?(
(
		{ 
	        newCompositeNode(grammarAccess.getSelectQueryAccess().getVariablesVariableParserRuleCall_6_0()); 
	    }
		lv_variables_8_0=ruleVariable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSelectQueryRule());
	        }
       		add(
       			$current, 
       			"variables",
        		lv_variables_8_0, 
        		"Variable");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSelectQueryAccess().getVariablesVariableParserRuleCall_7_0()); 
	    }
		lv_variables_9_0=ruleVariable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSelectQueryRule());
	        }
       		add(
       			$current, 
       			"variables",
        		lv_variables_9_0, 
        		"Variable");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getSelectQueryAccess().getWhereClauseWhereClauseParserRuleCall_8_0()); 
	    }
		lv_whereClause_10_0=ruleWhereClause		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSelectQueryRule());
	        }
       		set(
       			$current, 
       			"whereClause",
        		lv_whereClause_10_0, 
        		"WhereClause");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSelectQueryAccess().getFilterclauseFilterclauseParserRuleCall_9_0()); 
	    }
		lv_filterclause_11_0=ruleFilterclause		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSelectQueryRule());
	        }
       		set(
       			$current, 
       			"filterclause",
        		lv_filterclause_11_0, 
        		"Filterclause");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getSelectQueryAccess().getAggregateClauseAggregateParserRuleCall_10_0()); 
	    }
		lv_aggregateClause_12_0=ruleAggregate		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSelectQueryRule());
	        }
       		set(
       			$current, 
       			"aggregateClause",
        		lv_aggregateClause_12_0, 
        		"Aggregate");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getSelectQueryAccess().getFilesinkclauseFilesinkclauseParserRuleCall_11_0()); 
	    }
		lv_filesinkclause_13_0=ruleFilesinkclause		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSelectQueryRule());
	        }
       		set(
       			$current, 
       			"filesinkclause",
        		lv_filesinkclause_13_0, 
        		"Filesinkclause");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleAggregate
entryRuleAggregate returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAggregateRule()); }
	 iv_ruleAggregate=ruleAggregate 
	 { $current=$iv_ruleAggregate.current; } 
	 EOF 
;

// Rule Aggregate
ruleAggregate returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='AGGREGATE(' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getAggregateAccess().getAGGREGATEKeyword_0());
    }
(	otherlv_1='aggregations = [' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAggregateAccess().getAggregationsKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAggregateAccess().getAggregationsAggregationParserRuleCall_1_1_0()); 
	    }
		lv_aggregations_2_0=ruleAggregation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAggregateRule());
	        }
       		add(
       			$current, 
       			"aggregations",
        		lv_aggregations_2_0, 
        		"Aggregation");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_3=']' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getAggregateAccess().getRightSquareBracketKeyword_1_2());
    }
)?((	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getAggregateAccess().getCommaKeyword_2_0());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getAggregateAccess().getGroupbyGroupByParserRuleCall_2_1_0()); 
	    }
		lv_groupby_5_0=ruleGroupBy		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAggregateRule());
	        }
       		set(
       			$current, 
       			"groupby",
        		lv_groupby_5_0, 
        		"GroupBy");
	        afterParserOrEnumRuleCall();
	    }

)
))?	otherlv_6=')' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getAggregateAccess().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRuleGroupBy
entryRuleGroupBy returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGroupByRule()); }
	 iv_ruleGroupBy=ruleGroupBy 
	 { $current=$iv_ruleGroupBy.current; } 
	 EOF 
;

// Rule GroupBy
ruleGroupBy returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='group_by=[' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getGroupByAccess().getGroup_byKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getGroupByAccess().getVariablesVariableParserRuleCall_1_0()); 
	    }
		lv_variables_1_0=ruleVariable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGroupByRule());
	        }
       		add(
       			$current, 
       			"variables",
        		lv_variables_1_0, 
        		"Variable");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getGroupByAccess().getCommaKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getGroupByAccess().getVariablesVariableParserRuleCall_2_1_0()); 
	    }
		lv_variables_3_0=ruleVariable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGroupByRule());
	        }
       		add(
       			$current, 
       			"variables",
        		lv_variables_3_0, 
        		"Variable");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_4=']' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getGroupByAccess().getRightSquareBracketKeyword_3());
    }
)
;





// Entry rule entryRuleAggregation
entryRuleAggregation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAggregationRule()); }
	 iv_ruleAggregation=ruleAggregation 
	 { $current=$iv_ruleAggregation.current; } 
	 EOF 
;

// Rule Aggregation
ruleAggregation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='[' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getAggregationAccess().getLeftSquareBracketKeyword_0());
    }
(
(
		lv_function_1_0=RULE_AGG_FUNCTION
		{
			newLeafNode(lv_function_1_0, grammarAccess.getAggregationAccess().getFunctionAGG_FUNCTIONTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAggregationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"function",
        		lv_function_1_0, 
        		"AGG_FUNCTION");
	    }

)
)	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getAggregationAccess().getCommaKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAggregationAccess().getVarToAggVariableParserRuleCall_3_0()); 
	    }
		lv_varToAgg_3_0=ruleVariable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAggregationRule());
	        }
       		set(
       			$current, 
       			"varToAgg",
        		lv_varToAgg_3_0, 
        		"Variable");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getAggregationAccess().getCommaKeyword_4());
    }
(
(
		lv_aggName_5_0=RULE_STRING
		{
			newLeafNode(lv_aggName_5_0, grammarAccess.getAggregationAccess().getAggNameSTRINGTerminalRuleCall_5_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAggregationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"aggName",
        		lv_aggName_5_0, 
        		"STRING");
	    }

)
)(	otherlv_6=',' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getAggregationAccess().getCommaKeyword_6_0());
    }
(
(
		lv_datatype_7_0=RULE_STRING
		{
			newLeafNode(lv_datatype_7_0, grammarAccess.getAggregationAccess().getDatatypeSTRINGTerminalRuleCall_6_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAggregationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"datatype",
        		lv_datatype_7_0, 
        		"STRING");
	    }

)
))?	otherlv_8=']' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getAggregationAccess().getRightSquareBracketKeyword_7());
    }
(	otherlv_9=',' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getAggregationAccess().getCommaKeyword_8());
    }
)?)
;





// Entry rule entryRuleFilesinkclause
entryRuleFilesinkclause returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFilesinkclauseRule()); }
	 iv_ruleFilesinkclause=ruleFilesinkclause 
	 { $current=$iv_ruleFilesinkclause.current; } 
	 EOF 
;

// Rule Filesinkclause
ruleFilesinkclause returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='CSVFILESINK(' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getFilesinkclauseAccess().getCSVFILESINKKeyword_0());
    }
(
(
		lv_path_1_0=RULE_STRING
		{
			newLeafNode(lv_path_1_0, grammarAccess.getFilesinkclauseAccess().getPathSTRINGTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFilesinkclauseRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"path",
        		lv_path_1_0, 
        		"STRING");
	    }

)
)	otherlv_2=')' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getFilesinkclauseAccess().getRightParenthesisKeyword_2());
    }
)
;





// Entry rule entryRuleFilterclause
entryRuleFilterclause returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFilterclauseRule()); }
	 iv_ruleFilterclause=ruleFilterclause 
	 { $current=$iv_ruleFilterclause.current; } 
	 EOF 
;

// Rule Filterclause
ruleFilterclause returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='FILTER(' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getFilterclauseAccess().getFILTERKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFilterclauseAccess().getLeftVariableParserRuleCall_1_0()); 
	    }
		lv_left_1_0=ruleVariable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFilterclauseRule());
	        }
       		set(
       			$current, 
       			"left",
        		lv_left_1_0, 
        		"Variable");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getFilterclauseAccess().getOperatorOperatorEnumRuleCall_2_0()); 
	    }
		lv_operator_2_0=ruleOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFilterclauseRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_2_0, 
        		"Operator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getFilterclauseAccess().getRightVariableParserRuleCall_3_0()); 
	    }
		lv_right_3_0=ruleVariable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFilterclauseRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"Variable");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=')' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getFilterclauseAccess().getRightParenthesisKeyword_4());
    }
)
;







// Entry rule entryRuleDatasetClause
entryRuleDatasetClause returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDatasetClauseRule()); }
	 iv_ruleDatasetClause=ruleDatasetClause 
	 { $current=$iv_ruleDatasetClause.current; } 
	 EOF 
;

// Rule DatasetClause
ruleDatasetClause returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='FROM' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getDatasetClauseAccess().getFROMKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDatasetClauseAccess().getDataSetIRIParserRuleCall_1_0()); 
	    }
		lv_dataSet_1_0=ruleIRI		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDatasetClauseRule());
	        }
       		set(
       			$current, 
       			"dataSet",
        		lv_dataSet_1_0, 
        		"IRI");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='AS' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getDatasetClauseAccess().getASKeyword_2());
    }
(
(
		lv_name_3_0=RULE_ID
		{
			newLeafNode(lv_name_3_0, grammarAccess.getDatasetClauseAccess().getNameIDTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDatasetClauseRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_3_0, 
        		"ID");
	    }

)
)(	otherlv_4='[TYPE ' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getDatasetClauseAccess().getTYPEKeyword_4_0());
    }
(
(
		lv_type_5_0=RULE_WINDOWTYPE
		{
			newLeafNode(lv_type_5_0, grammarAccess.getDatasetClauseAccess().getTypeWINDOWTYPETerminalRuleCall_4_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDatasetClauseRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"type",
        		lv_type_5_0, 
        		"WINDOWTYPE");
	    }

)
)	otherlv_6='SIZE ' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getDatasetClauseAccess().getSIZEKeyword_4_2());
    }
(
(
		lv_size_7_0=RULE_INT
		{
			newLeafNode(lv_size_7_0, grammarAccess.getDatasetClauseAccess().getSizeINTTerminalRuleCall_4_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDatasetClauseRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"size",
        		lv_size_7_0, 
        		"INT");
	    }

)
)(	otherlv_8='ADVANCE' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getDatasetClauseAccess().getADVANCEKeyword_4_4_0());
    }
(
(
		lv_advance_9_0=RULE_INT
		{
			newLeafNode(lv_advance_9_0, grammarAccess.getDatasetClauseAccess().getAdvanceINTTerminalRuleCall_4_4_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDatasetClauseRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"advance",
        		lv_advance_9_0, 
        		"INT");
	    }

)
))?(	otherlv_10='UNIT ' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getDatasetClauseAccess().getUNITKeyword_4_5_0());
    }
(
(
		lv_unit_11_0=RULE_UNITTYPE
		{
			newLeafNode(lv_unit_11_0, grammarAccess.getDatasetClauseAccess().getUnitUNITTYPETerminalRuleCall_4_5_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDatasetClauseRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"unit",
        		lv_unit_11_0, 
        		"UNITTYPE");
	    }

)
))?	otherlv_12=']' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getDatasetClauseAccess().getRightSquareBracketKeyword_4_6());
    }
)?)
;





// Entry rule entryRuleWhereClause
entryRuleWhereClause returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getWhereClauseRule()); }
	 iv_ruleWhereClause=ruleWhereClause 
	 { $current=$iv_ruleWhereClause.current; } 
	 EOF 
;

// Rule WhereClause
ruleWhereClause returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='WHERE' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getWhereClauseAccess().getWHEREKeyword_0());
    }
	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getWhereClauseAccess().getLeftCurlyBracketKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getWhereClauseAccess().getWhereclausesInnerWhereClauseParserRuleCall_2_0()); 
	    }
		lv_whereclauses_2_0=ruleInnerWhereClause		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getWhereClauseRule());
	        }
       		add(
       			$current, 
       			"whereclauses",
        		lv_whereclauses_2_0, 
        		"InnerWhereClause");
	        afterParserOrEnumRuleCall();
	    }

)
)+	otherlv_3='}' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getWhereClauseAccess().getRightCurlyBracketKeyword_3());
    }
)
;





// Entry rule entryRuleInnerWhereClause
entryRuleInnerWhereClause returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInnerWhereClauseRule()); }
	 iv_ruleInnerWhereClause=ruleInnerWhereClause 
	 { $current=$iv_ruleInnerWhereClause.current; } 
	 EOF 
;

// Rule InnerWhereClause
ruleInnerWhereClause returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getInnerWhereClauseRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getInnerWhereClauseAccess().getNameDatasetClauseCrossReference_0_0()); 
	}

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getInnerWhereClauseAccess().getGroupGraphPatternGroupGraphPatternSubParserRuleCall_1_0()); 
	    }
		lv_groupGraphPattern_1_0=ruleGroupGraphPatternSub		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInnerWhereClauseRule());
	        }
       		set(
       			$current, 
       			"groupGraphPattern",
        		lv_groupGraphPattern_1_0, 
        		"GroupGraphPatternSub");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleGroupGraphPatternSub
entryRuleGroupGraphPatternSub returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGroupGraphPatternSubRule()); }
	 iv_ruleGroupGraphPatternSub=ruleGroupGraphPatternSub 
	 { $current=$iv_ruleGroupGraphPatternSub.current; } 
	 EOF 
;

// Rule GroupGraphPatternSub
ruleGroupGraphPatternSub returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='{' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getGroupGraphPatternSubAccess().getLeftCurlyBracketKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getGroupGraphPatternSubAccess().getGraphPatternsTriplesSameSubjectParserRuleCall_1_0()); 
	    }
		lv_graphPatterns_1_0=ruleTriplesSameSubject		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGroupGraphPatternSubRule());
	        }
       		add(
       			$current, 
       			"graphPatterns",
        		lv_graphPatterns_1_0, 
        		"TriplesSameSubject");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2='.' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getGroupGraphPatternSubAccess().getFullStopKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getGroupGraphPatternSubAccess().getGraphPatternsTriplesSameSubjectParserRuleCall_2_1_0()); 
	    }
		lv_graphPatterns_3_0=ruleTriplesSameSubject		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGroupGraphPatternSubRule());
	        }
       		add(
       			$current, 
       			"graphPatterns",
        		lv_graphPatterns_3_0, 
        		"TriplesSameSubject");
	        afterParserOrEnumRuleCall();
	    }

)
))*(	otherlv_4='.' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getGroupGraphPatternSubAccess().getFullStopKeyword_3());
    }
)?	otherlv_5='}' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getGroupGraphPatternSubAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRuleTriplesSameSubject
entryRuleTriplesSameSubject returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTriplesSameSubjectRule()); }
	 iv_ruleTriplesSameSubject=ruleTriplesSameSubject 
	 { $current=$iv_ruleTriplesSameSubject.current; } 
	 EOF 
;

// Rule TriplesSameSubject
ruleTriplesSameSubject returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getTriplesSameSubjectAccess().getSubjectGraphNodeParserRuleCall_0_0()); 
	    }
		lv_subject_0_0=ruleGraphNode		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTriplesSameSubjectRule());
	        }
       		set(
       			$current, 
       			"subject",
        		lv_subject_0_0, 
        		"GraphNode");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getTriplesSameSubjectAccess().getPropertyListPropertyListParserRuleCall_1_0()); 
	    }
		lv_propertyList_1_0=rulePropertyList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTriplesSameSubjectRule());
	        }
       		add(
       			$current, 
       			"propertyList",
        		lv_propertyList_1_0, 
        		"PropertyList");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2=';' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getTriplesSameSubjectAccess().getSemicolonKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTriplesSameSubjectAccess().getPropertyListPropertyListParserRuleCall_2_1_0()); 
	    }
		lv_propertyList_3_0=rulePropertyList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTriplesSameSubjectRule());
	        }
       		add(
       			$current, 
       			"propertyList",
        		lv_propertyList_3_0, 
        		"PropertyList");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRulePropertyList
entryRulePropertyList returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPropertyListRule()); }
	 iv_rulePropertyList=rulePropertyList 
	 { $current=$iv_rulePropertyList.current; } 
	 EOF 
;

// Rule PropertyList
rulePropertyList returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getPropertyListAccess().getPropertyGraphNodeParserRuleCall_0_0()); 
	    }
		lv_property_0_0=ruleGraphNode		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPropertyListRule());
	        }
       		set(
       			$current, 
       			"property",
        		lv_property_0_0, 
        		"GraphNode");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPropertyListAccess().getObjectGraphNodeParserRuleCall_1_0()); 
	    }
		lv_object_1_0=ruleGraphNode		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPropertyListRule());
	        }
       		set(
       			$current, 
       			"object",
        		lv_object_1_0, 
        		"GraphNode");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleGraphNode
entryRuleGraphNode returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGraphNodeRule()); }
	 iv_ruleGraphNode=ruleGraphNode 
	 { $current=$iv_ruleGraphNode.current; } 
	 EOF 
;

// Rule GraphNode
ruleGraphNode returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getGraphNodeAccess().getVariableVariableParserRuleCall_0_0()); 
	    }
		lv_variable_0_0=ruleVariable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGraphNodeRule());
	        }
       		set(
       			$current, 
       			"variable",
        		lv_variable_0_0, 
        		"Variable");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		lv_literal_1_0=RULE_STRING
		{
			newLeafNode(lv_literal_1_0, grammarAccess.getGraphNodeAccess().getLiteralSTRINGTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getGraphNodeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"literal",
        		lv_literal_1_0, 
        		"STRING");
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getGraphNodeAccess().getIriIRIParserRuleCall_2_0()); 
	    }
		lv_iri_2_0=ruleIRI		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGraphNodeRule());
	        }
       		set(
       			$current, 
       			"iri",
        		lv_iri_2_0, 
        		"IRI");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleVariable
entryRuleVariable returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVariableRule()); }
	 iv_ruleVariable=ruleVariable 
	 { $current=$iv_ruleVariable.current; } 
	 EOF 
;

// Rule Variable
ruleVariable returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getVariableAccess().getUnnamedUnNamedVariableParserRuleCall_0_0()); 
	    }
		lv_unnamed_0_0=ruleUnNamedVariable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVariableRule());
	        }
       		set(
       			$current, 
       			"unnamed",
        		lv_unnamed_0_0, 
        		"UnNamedVariable");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getVariableAccess().getPropertyPropertyParserRuleCall_1_0()); 
	    }
		lv_property_1_0=ruleProperty		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVariableRule());
	        }
       		set(
       			$current, 
       			"property",
        		lv_property_1_0, 
        		"Property");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleUnNamedVariable
entryRuleUnNamedVariable returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getUnNamedVariableRule()); }
	 iv_ruleUnNamedVariable=ruleUnNamedVariable 
	 { $current=$iv_ruleUnNamedVariable.current; } 
	 EOF 
;

// Rule UnNamedVariable
ruleUnNamedVariable returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='?' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getUnNamedVariableAccess().getQuestionMarkKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getUnNamedVariableAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getUnNamedVariableRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
))
;





// Entry rule entryRuleProperty
entryRuleProperty returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPropertyRule()); }
	 iv_ruleProperty=ruleProperty 
	 { $current=$iv_ruleProperty.current; } 
	 EOF 
;

// Rule Property
ruleProperty returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getPropertyRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getPropertyAccess().getPrefixPrefixCrossReference_0_0()); 
	}

)
)	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getPropertyAccess().getColonKeyword_1());
    }
(
(
		lv_name_2_0=RULE_ID
		{
			newLeafNode(lv_name_2_0, grammarAccess.getPropertyAccess().getNameIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPropertyRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"ID");
	    }

)
))
;





// Entry rule entryRuleIRI
entryRuleIRI returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIRIRule()); }
	 iv_ruleIRI=ruleIRI 
	 { $current=$iv_ruleIRI.current; } 
	 EOF 
;

// Rule IRI
ruleIRI returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getIRIAccess().getIRIAction_0(),
            $current);
    }
)(
(
		lv_value_1_0=RULE_IRI_TERMINAL
		{
			newLeafNode(lv_value_1_0, grammarAccess.getIRIAccess().getValueIRI_TERMINALTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getIRIRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_1_0, 
        		"IRI_TERMINAL");
	    }

)
))
;









// Rule Operator
ruleOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='<' 
	{
        $current = grammarAccess.getOperatorAccess().getLessThenEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getOperatorAccess().getLessThenEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='>' 
	{
        $current = grammarAccess.getOperatorAccess().getGreaterThenEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getOperatorAccess().getGreaterThenEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='<=' 
	{
        $current = grammarAccess.getOperatorAccess().getLessEqualEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getOperatorAccess().getLessEqualEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='>=' 
	{
        $current = grammarAccess.getOperatorAccess().getGreaterEqualEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getOperatorAccess().getGreaterEqualEnumLiteralDeclaration_3()); 
    }
)
    |(	enumLiteral_4='=' 
	{
        $current = grammarAccess.getOperatorAccess().getEqualEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_4, grammarAccess.getOperatorAccess().getEqualEnumLiteralDeclaration_4()); 
    }
)
    |(	enumLiteral_5='!=' 
	{
        $current = grammarAccess.getOperatorAccess().getNotEqualEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_5, grammarAccess.getOperatorAccess().getNotEqualEnumLiteralDeclaration_5()); 
    }
)
    |(	enumLiteral_6='+' 
	{
        $current = grammarAccess.getOperatorAccess().getSumEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_6, grammarAccess.getOperatorAccess().getSumEnumLiteralDeclaration_6()); 
    }
)
    |(	enumLiteral_7='/' 
	{
        $current = grammarAccess.getOperatorAccess().getDivEnumLiteralDeclaration_7().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_7, grammarAccess.getOperatorAccess().getDivEnumLiteralDeclaration_7()); 
    }
)
    |(	enumLiteral_8='-' 
	{
        $current = grammarAccess.getOperatorAccess().getSubEnumLiteralDeclaration_8().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_8, grammarAccess.getOperatorAccess().getSubEnumLiteralDeclaration_8()); 
    }
)
    |(	enumLiteral_9='*' 
	{
        $current = grammarAccess.getOperatorAccess().getMultiplicityEnumLiteralDeclaration_9().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_9, grammarAccess.getOperatorAccess().getMultiplicityEnumLiteralDeclaration_9()); 
    }
));



RULE_AGG_FUNCTION : ('COUNT'|'MAX'|'MIN'|'AVG'|'SUM'|'MEDIAN');

RULE_IRI_TERMINAL : '<' ('a'..'z'|'A'..'Z'|'_'|'-'|'0'..'9'|'/'|':'|'.'|'#'|'?'|'@'|'$'|'&'|'=')* '>';

RULE_STRING : '"' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'"')))* '"';

RULE_WINDOWTYPE : ('ELEMENT'|'TIME');

RULE_UNITTYPE : ('NANOSECONDS'|'MICROSECONDS'|'MILLISECONDS'|'SECONDS'|'MINUTES'|'HOURS'|'DAYS');

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


