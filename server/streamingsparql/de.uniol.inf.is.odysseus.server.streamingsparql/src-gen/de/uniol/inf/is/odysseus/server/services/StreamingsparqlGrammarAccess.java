/*
 * generated by Xtext 2.12.0
 */
package de.uniol.inf.is.odysseus.server.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class StreamingsparqlGrammarAccess extends AbstractGrammarElementFinder {
	
	public class SPARQLQueryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.server.Streamingsparql.SPARQLQuery");
		private final RuleCall cSelectQueryParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//SPARQLQuery:
		//	SelectQuery
		//	//	AskQuery |
		//	//	DescribeQuery
		//;
		@Override public ParserRule getRule() { return rule; }
		
		////	ConstructQuery |
		//SelectQuery
		public RuleCall getSelectQueryParserRuleCall() { return cSelectQueryParserRuleCall; }
	}
	public class PrefixElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.server.Streamingsparql.Prefix");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cPREFIXKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final Keyword cColonKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cIrefAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cIrefIRI_TERMINALTerminalRuleCall_0_3_0 = (RuleCall)cIrefAssignment_0_3.eContents().get(0);
		private final RuleCall cUnNamedPrefixParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Prefix:
		//	'PREFIX' name=ID ':' iref=IRI_TERMINAL | UnNamedPrefix;
		@Override public ParserRule getRule() { return rule; }
		
		//'PREFIX' name=ID ':' iref=IRI_TERMINAL | UnNamedPrefix
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'PREFIX' name=ID ':' iref=IRI_TERMINAL
		public Group getGroup_0() { return cGroup_0; }
		
		//'PREFIX'
		public Keyword getPREFIXKeyword_0_0() { return cPREFIXKeyword_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_1_0() { return cNameIDTerminalRuleCall_0_1_0; }
		
		//':'
		public Keyword getColonKeyword_0_2() { return cColonKeyword_0_2; }
		
		//iref=IRI_TERMINAL
		public Assignment getIrefAssignment_0_3() { return cIrefAssignment_0_3; }
		
		//IRI_TERMINAL
		public RuleCall getIrefIRI_TERMINALTerminalRuleCall_0_3_0() { return cIrefIRI_TERMINALTerminalRuleCall_0_3_0; }
		
		//UnNamedPrefix
		public RuleCall getUnNamedPrefixParserRuleCall_1() { return cUnNamedPrefixParserRuleCall_1; }
	}
	public class UnNamedPrefixElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.server.Streamingsparql.UnNamedPrefix");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPREFIXKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cIrefAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIrefIRI_TERMINALTerminalRuleCall_2_0 = (RuleCall)cIrefAssignment_2.eContents().get(0);
		
		//UnNamedPrefix Prefix:
		//	'PREFIX' ':' iref=IRI_TERMINAL;
		@Override public ParserRule getRule() { return rule; }
		
		//'PREFIX' ':' iref=IRI_TERMINAL
		public Group getGroup() { return cGroup; }
		
		//'PREFIX'
		public Keyword getPREFIXKeyword_0() { return cPREFIXKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//iref=IRI_TERMINAL
		public Assignment getIrefAssignment_2() { return cIrefAssignment_2; }
		
		//IRI_TERMINAL
		public RuleCall getIrefIRI_TERMINALTerminalRuleCall_2_0() { return cIrefIRI_TERMINALTerminalRuleCall_2_0; }
	}
	public class BaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.server.Streamingsparql.Base");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBASEKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIrefAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIrefIRIParserRuleCall_1_0 = (RuleCall)cIrefAssignment_1.eContents().get(0);
		
		//Base:
		//	'BASE' iref=IRI;
		@Override public ParserRule getRule() { return rule; }
		
		//'BASE' iref=IRI
		public Group getGroup() { return cGroup; }
		
		//'BASE'
		public Keyword getBASEKeyword_0() { return cBASEKeyword_0; }
		
		//iref=IRI
		public Assignment getIrefAssignment_1() { return cIrefAssignment_1; }
		
		//IRI
		public RuleCall getIrefIRIParserRuleCall_1_0() { return cIrefIRIParserRuleCall_1_0; }
	}
	public class SelectQueryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.server.Streamingsparql.SelectQuery");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cMethodAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final Keyword cMethodADDQUERYKeyword_0_0_0 = (Keyword)cMethodAssignment_0_0.eContents().get(0);
		private final Keyword cRUNQUERYKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cBaseAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBaseBaseParserRuleCall_1_0 = (RuleCall)cBaseAssignment_1.eContents().get(0);
		private final Assignment cPrefixesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPrefixesPrefixParserRuleCall_2_0 = (RuleCall)cPrefixesAssignment_2.eContents().get(0);
		private final Assignment cDatasetClausesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDatasetClausesDatasetClauseParserRuleCall_3_0 = (RuleCall)cDatasetClausesAssignment_3.eContents().get(0);
		private final Keyword cSELECTKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cVariablesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cVariablesVariableParserRuleCall_5_0 = (RuleCall)cVariablesAssignment_5.eContents().get(0);
		private final Assignment cVariablesAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cVariablesVariableParserRuleCall_6_0 = (RuleCall)cVariablesAssignment_6.eContents().get(0);
		private final Assignment cWhereClauseAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cWhereClauseWhereClauseParserRuleCall_7_0 = (RuleCall)cWhereClauseAssignment_7.eContents().get(0);
		private final Assignment cFilterclauseAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cFilterclauseFilterclauseParserRuleCall_8_0 = (RuleCall)cFilterclauseAssignment_8.eContents().get(0);
		private final Assignment cAggregateClauseAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cAggregateClauseAggregateParserRuleCall_9_0 = (RuleCall)cAggregateClauseAssignment_9.eContents().get(0);
		private final Assignment cFilesinkclauseAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cFilesinkclauseFilesinkclauseParserRuleCall_10_0 = (RuleCall)cFilesinkclauseAssignment_10.eContents().get(0);
		
		//SelectQuery:
		//	(method="#ADDQUERY" | "#RUNQUERY")?
		//	base=Base?
		//	prefixes+=Prefix*
		//	datasetClauses+=DatasetClause*
		//	'SELECT' variables+=Variable variables+=Variable*
		//	whereClause=WhereClause
		//	filterclause=Filterclause?
		//	//	(groupClause=GroupClause)?
		//	//	(havingClause=HavingClause)?
		//	//	(limitClause=LimitClause)?
		//	aggregateClause=Aggregate?
		//	filesinkclause=Filesinkclause?;
		@Override public ParserRule getRule() { return rule; }
		
		//(method="#ADDQUERY" | "#RUNQUERY")? base=Base? prefixes+=Prefix* datasetClauses+=DatasetClause* 'SELECT'
		//variables+=Variable variables+=Variable* whereClause=WhereClause filterclause=Filterclause? //	(groupClause=GroupClause)?
		////	(havingClause=HavingClause)?
		////	(limitClause=LimitClause)?
		//aggregateClause=Aggregate? filesinkclause=Filesinkclause?
		public Group getGroup() { return cGroup; }
		
		//(method="#ADDQUERY" | "#RUNQUERY")?
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//method="#ADDQUERY"
		public Assignment getMethodAssignment_0_0() { return cMethodAssignment_0_0; }
		
		//"#ADDQUERY"
		public Keyword getMethodADDQUERYKeyword_0_0_0() { return cMethodADDQUERYKeyword_0_0_0; }
		
		//"#RUNQUERY"
		public Keyword getRUNQUERYKeyword_0_1() { return cRUNQUERYKeyword_0_1; }
		
		//base=Base?
		public Assignment getBaseAssignment_1() { return cBaseAssignment_1; }
		
		//Base
		public RuleCall getBaseBaseParserRuleCall_1_0() { return cBaseBaseParserRuleCall_1_0; }
		
		//prefixes+=Prefix*
		public Assignment getPrefixesAssignment_2() { return cPrefixesAssignment_2; }
		
		//Prefix
		public RuleCall getPrefixesPrefixParserRuleCall_2_0() { return cPrefixesPrefixParserRuleCall_2_0; }
		
		//datasetClauses+=DatasetClause*
		public Assignment getDatasetClausesAssignment_3() { return cDatasetClausesAssignment_3; }
		
		//DatasetClause
		public RuleCall getDatasetClausesDatasetClauseParserRuleCall_3_0() { return cDatasetClausesDatasetClauseParserRuleCall_3_0; }
		
		//'SELECT'
		public Keyword getSELECTKeyword_4() { return cSELECTKeyword_4; }
		
		//variables+=Variable
		public Assignment getVariablesAssignment_5() { return cVariablesAssignment_5; }
		
		//Variable
		public RuleCall getVariablesVariableParserRuleCall_5_0() { return cVariablesVariableParserRuleCall_5_0; }
		
		//variables+=Variable*
		public Assignment getVariablesAssignment_6() { return cVariablesAssignment_6; }
		
		//Variable
		public RuleCall getVariablesVariableParserRuleCall_6_0() { return cVariablesVariableParserRuleCall_6_0; }
		
		//whereClause=WhereClause
		public Assignment getWhereClauseAssignment_7() { return cWhereClauseAssignment_7; }
		
		//WhereClause
		public RuleCall getWhereClauseWhereClauseParserRuleCall_7_0() { return cWhereClauseWhereClauseParserRuleCall_7_0; }
		
		//filterclause=Filterclause?
		public Assignment getFilterclauseAssignment_8() { return cFilterclauseAssignment_8; }
		
		//Filterclause
		public RuleCall getFilterclauseFilterclauseParserRuleCall_8_0() { return cFilterclauseFilterclauseParserRuleCall_8_0; }
		
		////	(groupClause=GroupClause)?
		////	(havingClause=HavingClause)?
		////	(limitClause=LimitClause)?
		//aggregateClause=Aggregate?
		public Assignment getAggregateClauseAssignment_9() { return cAggregateClauseAssignment_9; }
		
		//Aggregate
		public RuleCall getAggregateClauseAggregateParserRuleCall_9_0() { return cAggregateClauseAggregateParserRuleCall_9_0; }
		
		//filesinkclause=Filesinkclause?
		public Assignment getFilesinkclauseAssignment_10() { return cFilesinkclauseAssignment_10; }
		
		//Filesinkclause
		public RuleCall getFilesinkclauseFilesinkclauseParserRuleCall_10_0() { return cFilesinkclauseFilesinkclauseParserRuleCall_10_0; }
	}
	public class AggregateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.server.Streamingsparql.Aggregate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAggregateAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cAGGREGATEKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cAggregationsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Assignment cAggregationsAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final RuleCall cAggregationsAggregationParserRuleCall_2_3_0 = (RuleCall)cAggregationsAssignment_2_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_4 = (Keyword)cGroup_2.eContents().get(4);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cGroupbyAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cGroupbyGroupByParserRuleCall_3_1_0 = (RuleCall)cGroupbyAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		////Aggregate:
		////	'AGGREGATE(' function = STRING ', ' attribute = STRING ', ' aggregatename = STRING (', [' group_by += STRING(',' STRING)*)? '])'
		////;
		//Aggregate:
		//	{Aggregate}
		//	'AGGREGATE(' ('aggregations' '=' '[' aggregations+=Aggregation* ']')? (','? groupby=GroupBy)? ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{Aggregate} 'AGGREGATE(' ('aggregations' '=' '[' aggregations+=Aggregation* ']')? (','? groupby=GroupBy)? ')'
		public Group getGroup() { return cGroup; }
		
		//{Aggregate}
		public Action getAggregateAction_0() { return cAggregateAction_0; }
		
		//'AGGREGATE('
		public Keyword getAGGREGATEKeyword_1() { return cAGGREGATEKeyword_1; }
		
		//('aggregations' '=' '[' aggregations+=Aggregation* ']')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'aggregations'
		public Keyword getAggregationsKeyword_2_0() { return cAggregationsKeyword_2_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_2_1() { return cEqualsSignKeyword_2_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_2_2() { return cLeftSquareBracketKeyword_2_2; }
		
		//aggregations+=Aggregation*
		public Assignment getAggregationsAssignment_2_3() { return cAggregationsAssignment_2_3; }
		
		//Aggregation
		public RuleCall getAggregationsAggregationParserRuleCall_2_3_0() { return cAggregationsAggregationParserRuleCall_2_3_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2_4() { return cRightSquareBracketKeyword_2_4; }
		
		//(','? groupby=GroupBy)?
		public Group getGroup_3() { return cGroup_3; }
		
		//','?
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//groupby=GroupBy
		public Assignment getGroupbyAssignment_3_1() { return cGroupbyAssignment_3_1; }
		
		//GroupBy
		public RuleCall getGroupbyGroupByParserRuleCall_3_1_0() { return cGroupbyGroupByParserRuleCall_3_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class GroupByElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.server.Streamingsparql.GroupBy");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGroup_byKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVariablesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVariablesVariableParserRuleCall_1_0 = (RuleCall)cVariablesAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cVariablesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cVariablesVariableParserRuleCall_2_1_0 = (RuleCall)cVariablesAssignment_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//GroupBy:
		//	'group_by=[' variables+=Variable (',' variables+=Variable)* ']';
		@Override public ParserRule getRule() { return rule; }
		
		//'group_by=[' variables+=Variable (',' variables+=Variable)* ']'
		public Group getGroup() { return cGroup; }
		
		//'group_by=['
		public Keyword getGroup_byKeyword_0() { return cGroup_byKeyword_0; }
		
		//variables+=Variable
		public Assignment getVariablesAssignment_1() { return cVariablesAssignment_1; }
		
		//Variable
		public RuleCall getVariablesVariableParserRuleCall_1_0() { return cVariablesVariableParserRuleCall_1_0; }
		
		//(',' variables+=Variable)*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//variables+=Variable
		public Assignment getVariablesAssignment_2_1() { return cVariablesAssignment_2_1; }
		
		//Variable
		public RuleCall getVariablesVariableParserRuleCall_2_1_0() { return cVariablesVariableParserRuleCall_2_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}
	public class AggregationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.server.Streamingsparql.Aggregation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFunctionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFunctionAGG_FUNCTIONTerminalRuleCall_1_0 = (RuleCall)cFunctionAssignment_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cVarToAggAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cVarToAggVariableParserRuleCall_3_0 = (RuleCall)cVarToAggAssignment_3.eContents().get(0);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cAggNameAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cAggNameSTRINGTerminalRuleCall_5_0 = (RuleCall)cAggNameAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cCommaKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cDatatypeAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cDatatypeSTRINGTerminalRuleCall_6_1_0 = (RuleCall)cDatatypeAssignment_6_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cCommaKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//Aggregation:
		//	'[' function=AGG_FUNCTION ',' varToAgg=Variable ',' aggName=STRING (',' datatype=STRING)? ']' ','?;
		@Override public ParserRule getRule() { return rule; }
		
		//'[' function=AGG_FUNCTION ',' varToAgg=Variable ',' aggName=STRING (',' datatype=STRING)? ']' ','?
		public Group getGroup() { return cGroup; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//function=AGG_FUNCTION
		public Assignment getFunctionAssignment_1() { return cFunctionAssignment_1; }
		
		//AGG_FUNCTION
		public RuleCall getFunctionAGG_FUNCTIONTerminalRuleCall_1_0() { return cFunctionAGG_FUNCTIONTerminalRuleCall_1_0; }
		
		//','
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }
		
		//varToAgg=Variable
		public Assignment getVarToAggAssignment_3() { return cVarToAggAssignment_3; }
		
		//Variable
		public RuleCall getVarToAggVariableParserRuleCall_3_0() { return cVarToAggVariableParserRuleCall_3_0; }
		
		//','
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }
		
		//aggName=STRING
		public Assignment getAggNameAssignment_5() { return cAggNameAssignment_5; }
		
		//STRING
		public RuleCall getAggNameSTRINGTerminalRuleCall_5_0() { return cAggNameSTRINGTerminalRuleCall_5_0; }
		
		//(',' datatype=STRING)?
		public Group getGroup_6() { return cGroup_6; }
		
		//','
		public Keyword getCommaKeyword_6_0() { return cCommaKeyword_6_0; }
		
		//datatype=STRING
		public Assignment getDatatypeAssignment_6_1() { return cDatatypeAssignment_6_1; }
		
		//STRING
		public RuleCall getDatatypeSTRINGTerminalRuleCall_6_1_0() { return cDatatypeSTRINGTerminalRuleCall_6_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_7() { return cRightSquareBracketKeyword_7; }
		
		//','?
		public Keyword getCommaKeyword_8() { return cCommaKeyword_8; }
	}
	public class FilesinkclauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.server.Streamingsparql.Filesinkclause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCSVFILESINKKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPathAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPathSTRINGTerminalRuleCall_1_0 = (RuleCall)cPathAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Filesinkclause:
		//	'CSVFILESINK(' path=STRING ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'CSVFILESINK(' path=STRING ')'
		public Group getGroup() { return cGroup; }
		
		//'CSVFILESINK('
		public Keyword getCSVFILESINKKeyword_0() { return cCSVFILESINKKeyword_0; }
		
		//path=STRING
		public Assignment getPathAssignment_1() { return cPathAssignment_1; }
		
		//STRING
		public RuleCall getPathSTRINGTerminalRuleCall_1_0() { return cPathSTRINGTerminalRuleCall_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	public class FilterclauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.server.Streamingsparql.Filterclause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFILTERKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLeftAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLeftVariableParserRuleCall_1_0 = (RuleCall)cLeftAssignment_1.eContents().get(0);
		private final Assignment cOperatorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOperatorOperatorEnumRuleCall_2_0 = (RuleCall)cOperatorAssignment_2.eContents().get(0);
		private final Assignment cRightAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRightVariableParserRuleCall_3_0 = (RuleCall)cRightAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Filterclause:
		//	'FILTER(' left=Variable operator=Operator right=Variable ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'FILTER(' left=Variable operator=Operator right=Variable ')'
		public Group getGroup() { return cGroup; }
		
		//'FILTER('
		public Keyword getFILTERKeyword_0() { return cFILTERKeyword_0; }
		
		//left=Variable
		public Assignment getLeftAssignment_1() { return cLeftAssignment_1; }
		
		//Variable
		public RuleCall getLeftVariableParserRuleCall_1_0() { return cLeftVariableParserRuleCall_1_0; }
		
		//operator=Operator
		public Assignment getOperatorAssignment_2() { return cOperatorAssignment_2; }
		
		//Operator
		public RuleCall getOperatorOperatorEnumRuleCall_2_0() { return cOperatorOperatorEnumRuleCall_2_0; }
		
		//right=Variable
		public Assignment getRightAssignment_3() { return cRightAssignment_3; }
		
		//Variable
		public RuleCall getRightVariableParserRuleCall_3_0() { return cRightVariableParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class GroupClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.server.Streamingsparql.GroupClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGROUPKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cBYKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cConditionsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConditionsVariableParserRuleCall_2_0 = (RuleCall)cConditionsAssignment_2.eContents().get(0);
		private final Assignment cConditionsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cConditionsVariableParserRuleCall_3_0 = (RuleCall)cConditionsAssignment_3.eContents().get(0);
		
		//GroupClause:
		//	'GROUP' 'BY' conditions+=Variable conditions+=Variable*;
		@Override public ParserRule getRule() { return rule; }
		
		//'GROUP' 'BY' conditions+=Variable conditions+=Variable*
		public Group getGroup() { return cGroup; }
		
		//'GROUP'
		public Keyword getGROUPKeyword_0() { return cGROUPKeyword_0; }
		
		//'BY'
		public Keyword getBYKeyword_1() { return cBYKeyword_1; }
		
		//conditions+=Variable
		public Assignment getConditionsAssignment_2() { return cConditionsAssignment_2; }
		
		//Variable
		public RuleCall getConditionsVariableParserRuleCall_2_0() { return cConditionsVariableParserRuleCall_2_0; }
		
		//conditions+=Variable*
		public Assignment getConditionsAssignment_3() { return cConditionsAssignment_3; }
		
		//Variable
		public RuleCall getConditionsVariableParserRuleCall_3_0() { return cConditionsVariableParserRuleCall_3_0; }
	}
	public class DatasetClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.server.Streamingsparql.DatasetClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFROMKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDataSetAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDataSetIRIParserRuleCall_1_0 = (RuleCall)cDataSetAssignment_1.eContents().get(0);
		private final Keyword cASKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLeftSquareBracketKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cTYPEKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cTypeAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cTypeWINDOWTYPETerminalRuleCall_4_2_0 = (RuleCall)cTypeAssignment_4_2.eContents().get(0);
		private final Keyword cSIZEKeyword_4_3 = (Keyword)cGroup_4.eContents().get(3);
		private final Assignment cSizeAssignment_4_4 = (Assignment)cGroup_4.eContents().get(4);
		private final RuleCall cSizeINTTerminalRuleCall_4_4_0 = (RuleCall)cSizeAssignment_4_4.eContents().get(0);
		private final Group cGroup_4_5 = (Group)cGroup_4.eContents().get(5);
		private final Keyword cADVANCEKeyword_4_5_0 = (Keyword)cGroup_4_5.eContents().get(0);
		private final Assignment cAdvanceAssignment_4_5_1 = (Assignment)cGroup_4_5.eContents().get(1);
		private final RuleCall cAdvanceINTTerminalRuleCall_4_5_1_0 = (RuleCall)cAdvanceAssignment_4_5_1.eContents().get(0);
		private final Group cGroup_4_6 = (Group)cGroup_4.eContents().get(6);
		private final Keyword cUNITKeyword_4_6_0 = (Keyword)cGroup_4_6.eContents().get(0);
		private final Assignment cUnitAssignment_4_6_1 = (Assignment)cGroup_4_6.eContents().get(1);
		private final RuleCall cUnitUNITTYPETerminalRuleCall_4_6_1_0 = (RuleCall)cUnitAssignment_4_6_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4_7 = (Keyword)cGroup_4.eContents().get(7);
		
		//DatasetClause:
		//	'FROM' dataSet=IRI 'AS' name=ID ('[' 'TYPE' type=WINDOWTYPE 'SIZE' size=INT ('ADVANCE' advance=INT)? ('UNIT'
		//	unit=UNITTYPE)? ']')?;
		@Override public ParserRule getRule() { return rule; }
		
		//'FROM' dataSet=IRI 'AS' name=ID ('[' 'TYPE' type=WINDOWTYPE 'SIZE' size=INT ('ADVANCE' advance=INT)? ('UNIT'
		//unit=UNITTYPE)? ']')?
		public Group getGroup() { return cGroup; }
		
		//'FROM'
		public Keyword getFROMKeyword_0() { return cFROMKeyword_0; }
		
		//dataSet=IRI
		public Assignment getDataSetAssignment_1() { return cDataSetAssignment_1; }
		
		//IRI
		public RuleCall getDataSetIRIParserRuleCall_1_0() { return cDataSetIRIParserRuleCall_1_0; }
		
		//'AS'
		public Keyword getASKeyword_2() { return cASKeyword_2; }
		
		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
		
		//('[' 'TYPE' type=WINDOWTYPE 'SIZE' size=INT ('ADVANCE' advance=INT)? ('UNIT' unit=UNITTYPE)? ']')?
		public Group getGroup_4() { return cGroup_4; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_4_0() { return cLeftSquareBracketKeyword_4_0; }
		
		//'TYPE'
		public Keyword getTYPEKeyword_4_1() { return cTYPEKeyword_4_1; }
		
		//type=WINDOWTYPE
		public Assignment getTypeAssignment_4_2() { return cTypeAssignment_4_2; }
		
		//WINDOWTYPE
		public RuleCall getTypeWINDOWTYPETerminalRuleCall_4_2_0() { return cTypeWINDOWTYPETerminalRuleCall_4_2_0; }
		
		//'SIZE'
		public Keyword getSIZEKeyword_4_3() { return cSIZEKeyword_4_3; }
		
		//size=INT
		public Assignment getSizeAssignment_4_4() { return cSizeAssignment_4_4; }
		
		//INT
		public RuleCall getSizeINTTerminalRuleCall_4_4_0() { return cSizeINTTerminalRuleCall_4_4_0; }
		
		//('ADVANCE' advance=INT)?
		public Group getGroup_4_5() { return cGroup_4_5; }
		
		//'ADVANCE'
		public Keyword getADVANCEKeyword_4_5_0() { return cADVANCEKeyword_4_5_0; }
		
		//advance=INT
		public Assignment getAdvanceAssignment_4_5_1() { return cAdvanceAssignment_4_5_1; }
		
		//INT
		public RuleCall getAdvanceINTTerminalRuleCall_4_5_1_0() { return cAdvanceINTTerminalRuleCall_4_5_1_0; }
		
		//('UNIT' unit=UNITTYPE)?
		public Group getGroup_4_6() { return cGroup_4_6; }
		
		//'UNIT'
		public Keyword getUNITKeyword_4_6_0() { return cUNITKeyword_4_6_0; }
		
		//unit=UNITTYPE
		public Assignment getUnitAssignment_4_6_1() { return cUnitAssignment_4_6_1; }
		
		//UNITTYPE
		public RuleCall getUnitUNITTYPETerminalRuleCall_4_6_1_0() { return cUnitUNITTYPETerminalRuleCall_4_6_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_4_7() { return cRightSquareBracketKeyword_4_7; }
	}
	public class WhereClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.server.Streamingsparql.WhereClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWHEREKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cWhereclausesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cWhereclausesInnerWhereClauseParserRuleCall_2_0 = (RuleCall)cWhereclausesAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//WhereClause:
		//	'WHERE' '{'
		//	whereclauses+=InnerWhereClause+
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'WHERE' '{' whereclauses+=InnerWhereClause+ '}'
		public Group getGroup() { return cGroup; }
		
		//'WHERE'
		public Keyword getWHEREKeyword_0() { return cWHEREKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//whereclauses+=InnerWhereClause+
		public Assignment getWhereclausesAssignment_2() { return cWhereclausesAssignment_2; }
		
		//InnerWhereClause
		public RuleCall getWhereclausesInnerWhereClauseParserRuleCall_2_0() { return cWhereclausesInnerWhereClauseParserRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class InnerWhereClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.server.Streamingsparql.InnerWhereClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cNameDatasetClauseCrossReference_0_0 = (CrossReference)cNameAssignment_0.eContents().get(0);
		private final RuleCall cNameDatasetClauseIDTerminalRuleCall_0_0_1 = (RuleCall)cNameDatasetClauseCrossReference_0_0.eContents().get(1);
		private final Assignment cGroupGraphPatternAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cGroupGraphPatternGroupGraphPatternSubParserRuleCall_1_0 = (RuleCall)cGroupGraphPatternAssignment_1.eContents().get(0);
		
		//InnerWhereClause:
		//	name=[DatasetClause] groupGraphPattern=GroupGraphPatternSub;
		@Override public ParserRule getRule() { return rule; }
		
		//name=[DatasetClause] groupGraphPattern=GroupGraphPatternSub
		public Group getGroup() { return cGroup; }
		
		//name=[DatasetClause]
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//[DatasetClause]
		public CrossReference getNameDatasetClauseCrossReference_0_0() { return cNameDatasetClauseCrossReference_0_0; }
		
		//ID
		public RuleCall getNameDatasetClauseIDTerminalRuleCall_0_0_1() { return cNameDatasetClauseIDTerminalRuleCall_0_0_1; }
		
		//groupGraphPattern=GroupGraphPatternSub
		public Assignment getGroupGraphPatternAssignment_1() { return cGroupGraphPatternAssignment_1; }
		
		//GroupGraphPatternSub
		public RuleCall getGroupGraphPatternGroupGraphPatternSubParserRuleCall_1_0() { return cGroupGraphPatternGroupGraphPatternSubParserRuleCall_1_0; }
	}
	public class GroupGraphPatternSubElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.server.Streamingsparql.GroupGraphPatternSub");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cGraphPatternsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cGraphPatternsTriplesSameSubjectParserRuleCall_1_0 = (RuleCall)cGraphPatternsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cFullStopKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cGraphPatternsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cGraphPatternsTriplesSameSubjectParserRuleCall_2_1_0 = (RuleCall)cGraphPatternsAssignment_2_1.eContents().get(0);
		private final Keyword cFullStopKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//GroupGraphPatternSub:
		//	'{' graphPatterns+=TriplesSameSubject ('.' graphPatterns+=TriplesSameSubject)* '.'? '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'{' graphPatterns+=TriplesSameSubject ('.' graphPatterns+=TriplesSameSubject)* '.'? '}'
		public Group getGroup() { return cGroup; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }
		
		//graphPatterns+=TriplesSameSubject
		public Assignment getGraphPatternsAssignment_1() { return cGraphPatternsAssignment_1; }
		
		//TriplesSameSubject
		public RuleCall getGraphPatternsTriplesSameSubjectParserRuleCall_1_0() { return cGraphPatternsTriplesSameSubjectParserRuleCall_1_0; }
		
		//('.' graphPatterns+=TriplesSameSubject)*
		public Group getGroup_2() { return cGroup_2; }
		
		//'.'
		public Keyword getFullStopKeyword_2_0() { return cFullStopKeyword_2_0; }
		
		//graphPatterns+=TriplesSameSubject
		public Assignment getGraphPatternsAssignment_2_1() { return cGraphPatternsAssignment_2_1; }
		
		//TriplesSameSubject
		public RuleCall getGraphPatternsTriplesSameSubjectParserRuleCall_2_1_0() { return cGraphPatternsTriplesSameSubjectParserRuleCall_2_1_0; }
		
		//'.'?
		public Keyword getFullStopKeyword_3() { return cFullStopKeyword_3; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class TriplesSameSubjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.server.Streamingsparql.TriplesSameSubject");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSubjectAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSubjectGraphNodeParserRuleCall_0_0 = (RuleCall)cSubjectAssignment_0.eContents().get(0);
		private final Assignment cPropertyListAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPropertyListPropertyListParserRuleCall_1_0 = (RuleCall)cPropertyListAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cSemicolonKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cPropertyListAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cPropertyListPropertyListParserRuleCall_2_1_0 = (RuleCall)cPropertyListAssignment_2_1.eContents().get(0);
		
		////GraphPattern:
		////	triplessamesubject=TriplesSameSubject ;
		////	GroupOrUnionGraphPattern |
		////	OptionalGraphPattern |
		////	GraphGraphPattern |
		////	ServiceGraphPattern |
		////	FilterPattern |
		////	ExistsPattern |
		////	NotExistsPattern |
		////	MinusPattern;
		//TriplesSameSubject:
		//	subject=GraphNode propertyList+=PropertyList (';'
		//	propertyList+=PropertyList)*;
		@Override public ParserRule getRule() { return rule; }
		
		//subject=GraphNode propertyList+=PropertyList (';' propertyList+=PropertyList)*
		public Group getGroup() { return cGroup; }
		
		//subject=GraphNode
		public Assignment getSubjectAssignment_0() { return cSubjectAssignment_0; }
		
		//GraphNode
		public RuleCall getSubjectGraphNodeParserRuleCall_0_0() { return cSubjectGraphNodeParserRuleCall_0_0; }
		
		//propertyList+=PropertyList
		public Assignment getPropertyListAssignment_1() { return cPropertyListAssignment_1; }
		
		//PropertyList
		public RuleCall getPropertyListPropertyListParserRuleCall_1_0() { return cPropertyListPropertyListParserRuleCall_1_0; }
		
		//(';' propertyList+=PropertyList)*
		public Group getGroup_2() { return cGroup_2; }
		
		//';'
		public Keyword getSemicolonKeyword_2_0() { return cSemicolonKeyword_2_0; }
		
		//propertyList+=PropertyList
		public Assignment getPropertyListAssignment_2_1() { return cPropertyListAssignment_2_1; }
		
		//PropertyList
		public RuleCall getPropertyListPropertyListParserRuleCall_2_1_0() { return cPropertyListPropertyListParserRuleCall_2_1_0; }
	}
	public class PropertyListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.server.Streamingsparql.PropertyList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPropertyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPropertyGraphNodeParserRuleCall_0_0 = (RuleCall)cPropertyAssignment_0.eContents().get(0);
		private final Assignment cObjectAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cObjectGraphNodeParserRuleCall_1_0 = (RuleCall)cObjectAssignment_1.eContents().get(0);
		
		//PropertyList:
		//	property=GraphNode object=GraphNode;
		@Override public ParserRule getRule() { return rule; }
		
		//property=GraphNode object=GraphNode
		public Group getGroup() { return cGroup; }
		
		//property=GraphNode
		public Assignment getPropertyAssignment_0() { return cPropertyAssignment_0; }
		
		//GraphNode
		public RuleCall getPropertyGraphNodeParserRuleCall_0_0() { return cPropertyGraphNodeParserRuleCall_0_0; }
		
		//object=GraphNode
		public Assignment getObjectAssignment_1() { return cObjectAssignment_1; }
		
		//GraphNode
		public RuleCall getObjectGraphNodeParserRuleCall_1_0() { return cObjectGraphNodeParserRuleCall_1_0; }
	}
	public class GraphNodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.server.Streamingsparql.GraphNode");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cVariableAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cVariableVariableParserRuleCall_0_0 = (RuleCall)cVariableAssignment_0.eContents().get(0);
		private final Assignment cLiteralAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cLiteralSTRINGTerminalRuleCall_1_0 = (RuleCall)cLiteralAssignment_1.eContents().get(0);
		private final Assignment cIriAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cIriIRIParserRuleCall_2_0 = (RuleCall)cIriAssignment_2.eContents().get(0);
		
		////GroupGraphPattern:
		//////	SubSelectQuery |
		////	groupgraphpattern=GroupGraphPatternSub
		////	;
		//GraphNode:
		//	variable=Variable | literal=STRING | iri=IRI;
		@Override public ParserRule getRule() { return rule; }
		
		//variable=Variable | literal=STRING | iri=IRI
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//variable=Variable
		public Assignment getVariableAssignment_0() { return cVariableAssignment_0; }
		
		//Variable
		public RuleCall getVariableVariableParserRuleCall_0_0() { return cVariableVariableParserRuleCall_0_0; }
		
		//literal=STRING
		public Assignment getLiteralAssignment_1() { return cLiteralAssignment_1; }
		
		//STRING
		public RuleCall getLiteralSTRINGTerminalRuleCall_1_0() { return cLiteralSTRINGTerminalRuleCall_1_0; }
		
		//iri=IRI
		public Assignment getIriAssignment_2() { return cIriAssignment_2; }
		
		//IRI
		public RuleCall getIriIRIParserRuleCall_2_0() { return cIriIRIParserRuleCall_2_0; }
	}
	public class VariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.server.Streamingsparql.Variable");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cUnnamedAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cUnnamedUnNamedVariableParserRuleCall_0_0 = (RuleCall)cUnnamedAssignment_0.eContents().get(0);
		private final Assignment cPropertyAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cPropertyPropertyParserRuleCall_1_0 = (RuleCall)cPropertyAssignment_1.eContents().get(0);
		
		////	blanknode=BlankNode |
		////	parameter=Parameter;
		////	
		//Variable:
		//	unnamed=UnNamedVariable | property=Property;
		@Override public ParserRule getRule() { return rule; }
		
		//unnamed=UnNamedVariable | property=Property
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//unnamed=UnNamedVariable
		public Assignment getUnnamedAssignment_0() { return cUnnamedAssignment_0; }
		
		//UnNamedVariable
		public RuleCall getUnnamedUnNamedVariableParserRuleCall_0_0() { return cUnnamedUnNamedVariableParserRuleCall_0_0; }
		
		//property=Property
		public Assignment getPropertyAssignment_1() { return cPropertyAssignment_1; }
		
		//Property
		public RuleCall getPropertyPropertyParserRuleCall_1_0() { return cPropertyPropertyParserRuleCall_1_0; }
	}
	public class UnNamedVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.server.Streamingsparql.UnNamedVariable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cQuestionMarkKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//UnNamedVariable:
		//	'?' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'?' name=ID
		public Group getGroup() { return cGroup; }
		
		//'?'
		public Keyword getQuestionMarkKeyword_0() { return cQuestionMarkKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class PropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.server.Streamingsparql.Property");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPrefixAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cPrefixPrefixCrossReference_0_0 = (CrossReference)cPrefixAssignment_0.eContents().get(0);
		private final RuleCall cPrefixPrefixIDTerminalRuleCall_0_0_1 = (RuleCall)cPrefixPrefixCrossReference_0_0.eContents().get(1);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//Property NamedVariable:
		//	prefix=[Prefix] ':' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//prefix=[Prefix] ':' name=ID
		public Group getGroup() { return cGroup; }
		
		//prefix=[Prefix]
		public Assignment getPrefixAssignment_0() { return cPrefixAssignment_0; }
		
		//[Prefix]
		public CrossReference getPrefixPrefixCrossReference_0_0() { return cPrefixPrefixCrossReference_0_0; }
		
		//ID
		public RuleCall getPrefixPrefixIDTerminalRuleCall_0_0_1() { return cPrefixPrefixIDTerminalRuleCall_0_0_1; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
	}
	public class IRIElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.server.Streamingsparql.IRI");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIRIAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueIRI_TERMINALTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		////Literal:
		////	value = StringValue |
		////	value = IntegerValue
		////;
		////
		////StringValue:
		////	value=STRING
		////;
		////
		////IntegerValue:
		////	value=INT
		////;
		//IRI:
		//	{IRI} value=IRI_TERMINAL;
		@Override public ParserRule getRule() { return rule; }
		
		//{IRI} value=IRI_TERMINAL
		public Group getGroup() { return cGroup; }
		
		//{IRI}
		public Action getIRIAction_0() { return cIRIAction_0; }
		
		//value=IRI_TERMINAL
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//IRI_TERMINAL
		public RuleCall getValueIRI_TERMINALTerminalRuleCall_1_0() { return cValueIRI_TERMINALTerminalRuleCall_1_0; }
	}
	public class TypeTagElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.server.Streamingsparql.TypeTag");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCircumflexAccentCircumflexAccentKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeGraphNodeParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		
		//TypeTag hidden(WS):
		//	'^^' type=GraphNode;
		@Override public ParserRule getRule() { return rule; }
		
		//'^^' type=GraphNode
		public Group getGroup() { return cGroup; }
		
		//'^^'
		public Keyword getCircumflexAccentCircumflexAccentKeyword_0() { return cCircumflexAccentCircumflexAccentKeyword_0; }
		
		//type=GraphNode
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//GraphNode
		public RuleCall getTypeGraphNodeParserRuleCall_1_0() { return cTypeGraphNodeParserRuleCall_1_0; }
	}
	public class LangTagElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.server.Streamingsparql.LangTag");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCommercialAtKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLangAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLangIDTerminalRuleCall_1_0 = (RuleCall)cLangAssignment_1.eContents().get(0);
		
		//LangTag hidden(WS):
		//	'@' lang=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'@' lang=ID
		public Group getGroup() { return cGroup; }
		
		//'@'
		public Keyword getCommercialAtKeyword_0() { return cCommercialAtKeyword_0; }
		
		//lang=ID
		public Assignment getLangAssignment_1() { return cLangAssignment_1; }
		
		//ID
		public RuleCall getLangIDTerminalRuleCall_1_0() { return cLangIDTerminalRuleCall_1_0; }
	}
	
	public class OperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.server.Streamingsparql.Operator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cLessThenEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cLessThenLessThanSignKeyword_0_0 = (Keyword)cLessThenEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cGreaterThenEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cGreaterThenGreaterThanSignKeyword_1_0 = (Keyword)cGreaterThenEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cLessEqualEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cLessEqualLessThanSignEqualsSignKeyword_2_0 = (Keyword)cLessEqualEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cGreaterEqualEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cGreaterEqualGreaterThanSignEqualsSignKeyword_3_0 = (Keyword)cGreaterEqualEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cEqualEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cEqualEqualsSignKeyword_4_0 = (Keyword)cEqualEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cNotEqualEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cNotEqualExclamationMarkEqualsSignKeyword_5_0 = (Keyword)cNotEqualEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cSumEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cSumPlusSignKeyword_6_0 = (Keyword)cSumEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cDivEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cDivSolidusKeyword_7_0 = (Keyword)cDivEnumLiteralDeclaration_7.eContents().get(0);
		private final EnumLiteralDeclaration cSubEnumLiteralDeclaration_8 = (EnumLiteralDeclaration)cAlternatives.eContents().get(8);
		private final Keyword cSubHyphenMinusKeyword_8_0 = (Keyword)cSubEnumLiteralDeclaration_8.eContents().get(0);
		private final EnumLiteralDeclaration cMultiplicityEnumLiteralDeclaration_9 = (EnumLiteralDeclaration)cAlternatives.eContents().get(9);
		private final Keyword cMultiplicityAsteriskKeyword_9_0 = (Keyword)cMultiplicityEnumLiteralDeclaration_9.eContents().get(0);
		
		//enum Operator:
		//	lessThen="<" |
		//	greaterThen=">" |
		//	lessEqual="<=" |
		//	greaterEqual=">=" |
		//	equal="=" |
		//	notEqual="!=" |
		//	sum="+" |
		//	div="/" |
		//	sub="-" |
		//	multiplicity="*";
		public EnumRule getRule() { return rule; }
		
		//lessThen="<" | greaterThen=">" | lessEqual="<=" | greaterEqual=">=" | equal="=" | notEqual="!=" | sum="+" | div="/" |
		//sub="-" | multiplicity="*"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//lessThen="<"
		public EnumLiteralDeclaration getLessThenEnumLiteralDeclaration_0() { return cLessThenEnumLiteralDeclaration_0; }
		
		//"<"
		public Keyword getLessThenLessThanSignKeyword_0_0() { return cLessThenLessThanSignKeyword_0_0; }
		
		//greaterThen=">"
		public EnumLiteralDeclaration getGreaterThenEnumLiteralDeclaration_1() { return cGreaterThenEnumLiteralDeclaration_1; }
		
		//">"
		public Keyword getGreaterThenGreaterThanSignKeyword_1_0() { return cGreaterThenGreaterThanSignKeyword_1_0; }
		
		//lessEqual="<="
		public EnumLiteralDeclaration getLessEqualEnumLiteralDeclaration_2() { return cLessEqualEnumLiteralDeclaration_2; }
		
		//"<="
		public Keyword getLessEqualLessThanSignEqualsSignKeyword_2_0() { return cLessEqualLessThanSignEqualsSignKeyword_2_0; }
		
		//greaterEqual=">="
		public EnumLiteralDeclaration getGreaterEqualEnumLiteralDeclaration_3() { return cGreaterEqualEnumLiteralDeclaration_3; }
		
		//">="
		public Keyword getGreaterEqualGreaterThanSignEqualsSignKeyword_3_0() { return cGreaterEqualGreaterThanSignEqualsSignKeyword_3_0; }
		
		//equal="="
		public EnumLiteralDeclaration getEqualEnumLiteralDeclaration_4() { return cEqualEnumLiteralDeclaration_4; }
		
		//"="
		public Keyword getEqualEqualsSignKeyword_4_0() { return cEqualEqualsSignKeyword_4_0; }
		
		//notEqual="!="
		public EnumLiteralDeclaration getNotEqualEnumLiteralDeclaration_5() { return cNotEqualEnumLiteralDeclaration_5; }
		
		//"!="
		public Keyword getNotEqualExclamationMarkEqualsSignKeyword_5_0() { return cNotEqualExclamationMarkEqualsSignKeyword_5_0; }
		
		//sum="+"
		public EnumLiteralDeclaration getSumEnumLiteralDeclaration_6() { return cSumEnumLiteralDeclaration_6; }
		
		//"+"
		public Keyword getSumPlusSignKeyword_6_0() { return cSumPlusSignKeyword_6_0; }
		
		//div="/"
		public EnumLiteralDeclaration getDivEnumLiteralDeclaration_7() { return cDivEnumLiteralDeclaration_7; }
		
		//"/"
		public Keyword getDivSolidusKeyword_7_0() { return cDivSolidusKeyword_7_0; }
		
		//sub="-"
		public EnumLiteralDeclaration getSubEnumLiteralDeclaration_8() { return cSubEnumLiteralDeclaration_8; }
		
		//"-"
		public Keyword getSubHyphenMinusKeyword_8_0() { return cSubHyphenMinusKeyword_8_0; }
		
		//multiplicity="*"
		public EnumLiteralDeclaration getMultiplicityEnumLiteralDeclaration_9() { return cMultiplicityEnumLiteralDeclaration_9; }
		
		//"*"
		public Keyword getMultiplicityAsteriskKeyword_9_0() { return cMultiplicityAsteriskKeyword_9_0; }
	}
	
	private final SPARQLQueryElements pSPARQLQuery;
	private final PrefixElements pPrefix;
	private final UnNamedPrefixElements pUnNamedPrefix;
	private final BaseElements pBase;
	private final SelectQueryElements pSelectQuery;
	private final AggregateElements pAggregate;
	private final GroupByElements pGroupBy;
	private final AggregationElements pAggregation;
	private final FilesinkclauseElements pFilesinkclause;
	private final FilterclauseElements pFilterclause;
	private final GroupClauseElements pGroupClause;
	private final DatasetClauseElements pDatasetClause;
	private final WhereClauseElements pWhereClause;
	private final InnerWhereClauseElements pInnerWhereClause;
	private final GroupGraphPatternSubElements pGroupGraphPatternSub;
	private final TriplesSameSubjectElements pTriplesSameSubject;
	private final PropertyListElements pPropertyList;
	private final GraphNodeElements pGraphNode;
	private final VariableElements pVariable;
	private final UnNamedVariableElements pUnNamedVariable;
	private final PropertyElements pProperty;
	private final IRIElements pIRI;
	private final TypeTagElements pTypeTag;
	private final LangTagElements pLangTag;
	private final OperatorElements eOperator;
	private final TerminalRule tAGG_FUNCTION;
	private final TerminalRule tIRI_TERMINAL;
	private final TerminalRule tSTRING;
	private final TerminalRule tWINDOWTYPE;
	private final TerminalRule tUNITTYPE;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public StreamingsparqlGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pSPARQLQuery = new SPARQLQueryElements();
		this.pPrefix = new PrefixElements();
		this.pUnNamedPrefix = new UnNamedPrefixElements();
		this.pBase = new BaseElements();
		this.pSelectQuery = new SelectQueryElements();
		this.pAggregate = new AggregateElements();
		this.pGroupBy = new GroupByElements();
		this.pAggregation = new AggregationElements();
		this.pFilesinkclause = new FilesinkclauseElements();
		this.pFilterclause = new FilterclauseElements();
		this.pGroupClause = new GroupClauseElements();
		this.pDatasetClause = new DatasetClauseElements();
		this.pWhereClause = new WhereClauseElements();
		this.pInnerWhereClause = new InnerWhereClauseElements();
		this.pGroupGraphPatternSub = new GroupGraphPatternSubElements();
		this.pTriplesSameSubject = new TriplesSameSubjectElements();
		this.pPropertyList = new PropertyListElements();
		this.pGraphNode = new GraphNodeElements();
		this.pVariable = new VariableElements();
		this.pUnNamedVariable = new UnNamedVariableElements();
		this.pProperty = new PropertyElements();
		this.pIRI = new IRIElements();
		this.pTypeTag = new TypeTagElements();
		this.pLangTag = new LangTagElements();
		this.eOperator = new OperatorElements();
		this.tAGG_FUNCTION = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.server.Streamingsparql.AGG_FUNCTION");
		this.tIRI_TERMINAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.server.Streamingsparql.IRI_TERMINAL");
		this.tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.server.Streamingsparql.STRING");
		this.tWINDOWTYPE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.server.Streamingsparql.WINDOWTYPE");
		this.tUNITTYPE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniol.inf.is.odysseus.server.Streamingsparql.UNITTYPE");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("de.uniol.inf.is.odysseus.server.Streamingsparql".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//SPARQLQuery:
	//	SelectQuery
	//	//	AskQuery |
	//	//	DescribeQuery
	//;
	public SPARQLQueryElements getSPARQLQueryAccess() {
		return pSPARQLQuery;
	}
	
	public ParserRule getSPARQLQueryRule() {
		return getSPARQLQueryAccess().getRule();
	}
	
	//Prefix:
	//	'PREFIX' name=ID ':' iref=IRI_TERMINAL | UnNamedPrefix;
	public PrefixElements getPrefixAccess() {
		return pPrefix;
	}
	
	public ParserRule getPrefixRule() {
		return getPrefixAccess().getRule();
	}
	
	//UnNamedPrefix Prefix:
	//	'PREFIX' ':' iref=IRI_TERMINAL;
	public UnNamedPrefixElements getUnNamedPrefixAccess() {
		return pUnNamedPrefix;
	}
	
	public ParserRule getUnNamedPrefixRule() {
		return getUnNamedPrefixAccess().getRule();
	}
	
	//Base:
	//	'BASE' iref=IRI;
	public BaseElements getBaseAccess() {
		return pBase;
	}
	
	public ParserRule getBaseRule() {
		return getBaseAccess().getRule();
	}
	
	//SelectQuery:
	//	(method="#ADDQUERY" | "#RUNQUERY")?
	//	base=Base?
	//	prefixes+=Prefix*
	//	datasetClauses+=DatasetClause*
	//	'SELECT' variables+=Variable variables+=Variable*
	//	whereClause=WhereClause
	//	filterclause=Filterclause?
	//	//	(groupClause=GroupClause)?
	//	//	(havingClause=HavingClause)?
	//	//	(limitClause=LimitClause)?
	//	aggregateClause=Aggregate?
	//	filesinkclause=Filesinkclause?;
	public SelectQueryElements getSelectQueryAccess() {
		return pSelectQuery;
	}
	
	public ParserRule getSelectQueryRule() {
		return getSelectQueryAccess().getRule();
	}
	
	////Aggregate:
	////	'AGGREGATE(' function = STRING ', ' attribute = STRING ', ' aggregatename = STRING (', [' group_by += STRING(',' STRING)*)? '])'
	////;
	//Aggregate:
	//	{Aggregate}
	//	'AGGREGATE(' ('aggregations' '=' '[' aggregations+=Aggregation* ']')? (','? groupby=GroupBy)? ')';
	public AggregateElements getAggregateAccess() {
		return pAggregate;
	}
	
	public ParserRule getAggregateRule() {
		return getAggregateAccess().getRule();
	}
	
	//GroupBy:
	//	'group_by=[' variables+=Variable (',' variables+=Variable)* ']';
	public GroupByElements getGroupByAccess() {
		return pGroupBy;
	}
	
	public ParserRule getGroupByRule() {
		return getGroupByAccess().getRule();
	}
	
	//Aggregation:
	//	'[' function=AGG_FUNCTION ',' varToAgg=Variable ',' aggName=STRING (',' datatype=STRING)? ']' ','?;
	public AggregationElements getAggregationAccess() {
		return pAggregation;
	}
	
	public ParserRule getAggregationRule() {
		return getAggregationAccess().getRule();
	}
	
	//Filesinkclause:
	//	'CSVFILESINK(' path=STRING ')';
	public FilesinkclauseElements getFilesinkclauseAccess() {
		return pFilesinkclause;
	}
	
	public ParserRule getFilesinkclauseRule() {
		return getFilesinkclauseAccess().getRule();
	}
	
	//Filterclause:
	//	'FILTER(' left=Variable operator=Operator right=Variable ')';
	public FilterclauseElements getFilterclauseAccess() {
		return pFilterclause;
	}
	
	public ParserRule getFilterclauseRule() {
		return getFilterclauseAccess().getRule();
	}
	
	//GroupClause:
	//	'GROUP' 'BY' conditions+=Variable conditions+=Variable*;
	public GroupClauseElements getGroupClauseAccess() {
		return pGroupClause;
	}
	
	public ParserRule getGroupClauseRule() {
		return getGroupClauseAccess().getRule();
	}
	
	//DatasetClause:
	//	'FROM' dataSet=IRI 'AS' name=ID ('[' 'TYPE' type=WINDOWTYPE 'SIZE' size=INT ('ADVANCE' advance=INT)? ('UNIT'
	//	unit=UNITTYPE)? ']')?;
	public DatasetClauseElements getDatasetClauseAccess() {
		return pDatasetClause;
	}
	
	public ParserRule getDatasetClauseRule() {
		return getDatasetClauseAccess().getRule();
	}
	
	//WhereClause:
	//	'WHERE' '{'
	//	whereclauses+=InnerWhereClause+
	//	'}';
	public WhereClauseElements getWhereClauseAccess() {
		return pWhereClause;
	}
	
	public ParserRule getWhereClauseRule() {
		return getWhereClauseAccess().getRule();
	}
	
	//InnerWhereClause:
	//	name=[DatasetClause] groupGraphPattern=GroupGraphPatternSub;
	public InnerWhereClauseElements getInnerWhereClauseAccess() {
		return pInnerWhereClause;
	}
	
	public ParserRule getInnerWhereClauseRule() {
		return getInnerWhereClauseAccess().getRule();
	}
	
	//GroupGraphPatternSub:
	//	'{' graphPatterns+=TriplesSameSubject ('.' graphPatterns+=TriplesSameSubject)* '.'? '}';
	public GroupGraphPatternSubElements getGroupGraphPatternSubAccess() {
		return pGroupGraphPatternSub;
	}
	
	public ParserRule getGroupGraphPatternSubRule() {
		return getGroupGraphPatternSubAccess().getRule();
	}
	
	////GraphPattern:
	////	triplessamesubject=TriplesSameSubject ;
	////	GroupOrUnionGraphPattern |
	////	OptionalGraphPattern |
	////	GraphGraphPattern |
	////	ServiceGraphPattern |
	////	FilterPattern |
	////	ExistsPattern |
	////	NotExistsPattern |
	////	MinusPattern;
	//TriplesSameSubject:
	//	subject=GraphNode propertyList+=PropertyList (';'
	//	propertyList+=PropertyList)*;
	public TriplesSameSubjectElements getTriplesSameSubjectAccess() {
		return pTriplesSameSubject;
	}
	
	public ParserRule getTriplesSameSubjectRule() {
		return getTriplesSameSubjectAccess().getRule();
	}
	
	//PropertyList:
	//	property=GraphNode object=GraphNode;
	public PropertyListElements getPropertyListAccess() {
		return pPropertyList;
	}
	
	public ParserRule getPropertyListRule() {
		return getPropertyListAccess().getRule();
	}
	
	////GroupGraphPattern:
	//////	SubSelectQuery |
	////	groupgraphpattern=GroupGraphPatternSub
	////	;
	//GraphNode:
	//	variable=Variable | literal=STRING | iri=IRI;
	public GraphNodeElements getGraphNodeAccess() {
		return pGraphNode;
	}
	
	public ParserRule getGraphNodeRule() {
		return getGraphNodeAccess().getRule();
	}
	
	////	blanknode=BlankNode |
	////	parameter=Parameter;
	////	
	//Variable:
	//	unnamed=UnNamedVariable | property=Property;
	public VariableElements getVariableAccess() {
		return pVariable;
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}
	
	//UnNamedVariable:
	//	'?' name=ID;
	public UnNamedVariableElements getUnNamedVariableAccess() {
		return pUnNamedVariable;
	}
	
	public ParserRule getUnNamedVariableRule() {
		return getUnNamedVariableAccess().getRule();
	}
	
	//Property NamedVariable:
	//	prefix=[Prefix] ':' name=ID;
	public PropertyElements getPropertyAccess() {
		return pProperty;
	}
	
	public ParserRule getPropertyRule() {
		return getPropertyAccess().getRule();
	}
	
	////Literal:
	////	value = StringValue |
	////	value = IntegerValue
	////;
	////
	////StringValue:
	////	value=STRING
	////;
	////
	////IntegerValue:
	////	value=INT
	////;
	//IRI:
	//	{IRI} value=IRI_TERMINAL;
	public IRIElements getIRIAccess() {
		return pIRI;
	}
	
	public ParserRule getIRIRule() {
		return getIRIAccess().getRule();
	}
	
	//TypeTag hidden(WS):
	//	'^^' type=GraphNode;
	public TypeTagElements getTypeTagAccess() {
		return pTypeTag;
	}
	
	public ParserRule getTypeTagRule() {
		return getTypeTagAccess().getRule();
	}
	
	//LangTag hidden(WS):
	//	'@' lang=ID;
	public LangTagElements getLangTagAccess() {
		return pLangTag;
	}
	
	public ParserRule getLangTagRule() {
		return getLangTagAccess().getRule();
	}
	
	//enum Operator:
	//	lessThen="<" |
	//	greaterThen=">" |
	//	lessEqual="<=" |
	//	greaterEqual=">=" |
	//	equal="=" |
	//	notEqual="!=" |
	//	sum="+" |
	//	div="/" |
	//	sub="-" |
	//	multiplicity="*";
	public OperatorElements getOperatorAccess() {
		return eOperator;
	}
	
	public EnumRule getOperatorRule() {
		return getOperatorAccess().getRule();
	}
	
	//terminal AGG_FUNCTION:
	//	'COUNT' | 'MAX' | 'MIN' | 'AVG' | 'SUM' | 'MEDIAN';
	public TerminalRule getAGG_FUNCTIONRule() {
		return tAGG_FUNCTION;
	}
	
	//terminal IRI_TERMINAL:
	//	'<' ('a'..'z' | 'A'..'Z' | '_' | '-' | '0'..'9' | '/' | ':' | '.' | '#' | '?' | '@' | '$' | '&' | '=')* '>';
	public TerminalRule getIRI_TERMINALRule() {
		return tIRI_TERMINAL;
	}
	
	//@ Override terminal STRING:
	//	'"' ('\\' ('b' | 't' | 'n' | 'f' | 'r' | '"' | "'" | '\\') | !('\\' | '"'))* '"';
	public TerminalRule getSTRINGRule() {
		return tSTRING;
	}
	
	//terminal WINDOWTYPE:
	//	'ELEMENT' | 'TIME';
	public TerminalRule getWINDOWTYPERule() {
		return tWINDOWTYPE;
	}
	
	//terminal UNITTYPE:
	//	'NANOSECONDS' | 'MICROSECONDS' | 'MILLISECONDS' | 'SECONDS' | 'MINUTES' | 'HOURS' | 'DAYS';
	public TerminalRule getUNITTYPERule() {
		return tUNITTYPE;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
