/*
 * Odysseus API
 * This is the API of the [Odysseus](https://odysseus.uni-oldenburg.de/) server.
 *
 * OpenAPI spec version: 1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package de.uniol.inf.is.odysseus.rest2.client.api;

import java.io.IOException;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.reflect.TypeToken;

import de.uniol.inf.is.odysseus.rest2.common.model.BundleInfo;
import de.uniol.inf.is.odysseus.rest2.common.model.Datatype;
import de.uniol.inf.is.odysseus.rest2.common.model.Function;
import de.uniol.inf.is.odysseus.rest2.common.model.OperatorInfo;
import de.uniol.inf.is.odysseus.rest2.common.model.Query;
import de.uniol.inf.is.odysseus.rest2.common.model.Resource;
import de.uniol.inf.is.odysseus.rest2.common.model.Schema;
import de.uniol.inf.is.odysseus.rest2.common.model.Token;
import de.uniol.inf.is.odysseus.rest2.common.model.User;

public class DefaultApi {
	private ApiClient apiClient;

	public DefaultApi() {
		this(Configuration.getDefaultApiClient());
	}

	public DefaultApi(ApiClient apiClient) {
		this.apiClient = apiClient;
	}

	public ApiClient getApiClient() {
		return this.apiClient;
	}

	public void setApiClient(ApiClient apiClient) {
		this.apiClient = apiClient;
	}

	/**
	 * Build call for aggregateFunctionsGet
	 *
	 * @param datamodel               (optional, default to
	 *                                &quot;de.uniol.inf.is.odysseus.core.collection.Tuple&quot;)
	 * @param progressListener        Progress listener
	 * @param progressRequestListener Progress request listener
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 */
	public okhttp3.Call aggregateFunctionsGetCall(String datamodel,
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
		final Object localVarPostBody = new Object();

		// create path and map variables
		final String localVarPath = "/aggregate_functions";

		final List<Pair> localVarQueryParams = new ArrayList<Pair>();
		final List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
		if (datamodel != null) {
			localVarQueryParams.addAll(this.apiClient.parameterToPair("datamodel", datamodel));
		}

		final Map<String, String> localVarHeaderParams = new HashMap<String, String>();
		final Map<String, Object> localVarFormParams = new HashMap<String, Object>();
		final String[] localVarAccepts = { "application/json" };
		final String localVarAccept = this.apiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null) {
			localVarHeaderParams.put("Accept", localVarAccept);
		}

		final String[] localVarContentTypes = {

		};
		final String localVarContentType = this.apiClient.selectHeaderContentType(localVarContentTypes);
		localVarHeaderParams.put("Content-Type", localVarContentType);

		if (progressListener != null) {
			this.apiClient.setHttpClient(
					this.apiClient.getHttpClient().newBuilder().addNetworkInterceptor(new okhttp3.Interceptor() {
						@Override
						public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
							final okhttp3.Response originalResponse = chain.proceed(chain.request());
							return originalResponse.newBuilder()
									.body(new ProgressResponseBody(originalResponse.body(), progressListener)).build();
						}
					}).build());
		}

		final String[] localVarAuthNames = new String[] { "HttpBasicAuth" };
		return this.apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams,
				localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
	}

	@SuppressWarnings("rawtypes")
	private okhttp3.Call aggregateFunctionsGetValidateBeforeCall(String datamodel,
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

		final okhttp3.Call call = aggregateFunctionsGetCall(datamodel, progressListener, progressRequestListener);
		return call;

	}

	/**
	 * Returns a list of all available aggregate functions. Returns a list of
	 * functions that can be used in the [aggregate
	 * operator](https://wiki.odysseus.informatik.uni-oldenburg.de/display/ODYSSEUS/Aggregate+%28and+Group%29+operator).
	 *
	 * @param datamodel (optional, default to
	 *                  &quot;de.uniol.inf.is.odysseus.core.collection.Tuple&quot;)
	 * @return List&lt;List&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 *                      deserialize the response body
	 */
	public List<String> aggregateFunctionsGet(String datamodel) throws ApiException {
		final ApiResponse<List<String>> resp = aggregateFunctionsGetWithHttpInfo(datamodel);
		return resp.getData();
	}

	/**
	 * Returns a list of all available aggregate functions. Returns a list of
	 * functions that can be used in the [aggregate
	 * operator](https://wiki.odysseus.informatik.uni-oldenburg.de/display/ODYSSEUS/Aggregate+%28and+Group%29+operator).
	 *
	 * @param datamodel (optional, default to
	 *                  &quot;de.uniol.inf.is.odysseus.core.collection.Tuple&quot;)
	 * @return ApiResponse&lt;List&lt;List&gt;&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 *                      deserialize the response body
	 */
	public ApiResponse<List<String>> aggregateFunctionsGetWithHttpInfo(String datamodel) throws ApiException {
		final okhttp3.Call call = aggregateFunctionsGetValidateBeforeCall(datamodel, null, null);
		final Type localVarReturnType = new TypeToken<List<String>>() {
		}.getType();
		return this.apiClient.execute(call, localVarReturnType);
	}

	/**
	 * Returns a list of all available aggregate functions. (asynchronously) Returns
	 * a list of functions that can be used in the [aggregate
	 * operator](https://wiki.odysseus.informatik.uni-oldenburg.de/display/ODYSSEUS/Aggregate+%28and+Group%29+operator).
	 *
	 * @param datamodel (optional, default to
	 *                  &quot;de.uniol.inf.is.odysseus.core.collection.Tuple&quot;)
	 * @param callback  The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the
	 *                      request body object
	 */
	public okhttp3.Call aggregateFunctionsGetAsync(String datamodel, final ApiCallback<List<List>> callback)
			throws ApiException {

		ProgressResponseBody.ProgressListener progressListener = null;
		ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

		if (callback != null) {
			progressListener = new ProgressResponseBody.ProgressListener() {
				@Override
				public void update(long bytesRead, long contentLength, boolean done) {
					callback.onDownloadProgress(bytesRead, contentLength, done);
				}
			};

			progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
				@Override
				public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
					callback.onUploadProgress(bytesWritten, contentLength, done);
				}
			};
		}

		final okhttp3.Call call = aggregateFunctionsGetValidateBeforeCall(datamodel, progressListener,
				progressRequestListener);
		final Type localVarReturnType = new TypeToken<List<List>>() {
		}.getType();
		this.apiClient.executeAsync(call, localVarReturnType, callback);
		return call;
	}

	/**
	 * Build call for datastreamsGet
	 *
	 * @param progressListener        Progress listener
	 * @param progressRequestListener Progress request listener
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 */
	public okhttp3.Call datastreamsGetCall(final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
		final Object localVarPostBody = new Object();

		// create path and map variables
		final String localVarPath = "/datastreams";

		final List<Pair> localVarQueryParams = new ArrayList<Pair>();
		final List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
		final Map<String, String> localVarHeaderParams = new HashMap<String, String>();
		final Map<String, Object> localVarFormParams = new HashMap<String, Object>();
		final String[] localVarAccepts = { "application/json" };
		final String localVarAccept = this.apiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null) {
			localVarHeaderParams.put("Accept", localVarAccept);
		}

		final String[] localVarContentTypes = {

		};
		final String localVarContentType = this.apiClient.selectHeaderContentType(localVarContentTypes);
		localVarHeaderParams.put("Content-Type", localVarContentType);

		if (progressListener != null) {
			this.apiClient.setHttpClient(
					this.apiClient.getHttpClient().newBuilder().addNetworkInterceptor(new okhttp3.Interceptor() {
						@Override
						public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
							final okhttp3.Response originalResponse = chain.proceed(chain.request());
							return originalResponse.newBuilder()
									.body(new ProgressResponseBody(originalResponse.body(), progressListener)).build();
						}
					}).build());
		}

		final String[] localVarAuthNames = new String[] { "HttpBasicAuth" };
		return this.apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams,
				localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
	}

	@SuppressWarnings("rawtypes")
	private okhttp3.Call datastreamsGetValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

		final okhttp3.Call call = datastreamsGetCall(progressListener, progressRequestListener);
		return call;

	}

	/**
	 * Returns a list of all available data streams. A data stream is provided by a
	 * source or a query (as view).
	 *
	 * @return List&lt;Resource&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 *                      deserialize the response body
	 */
	public List<Resource> datastreamsGet() throws ApiException {
		final ApiResponse<List<Resource>> resp = datastreamsGetWithHttpInfo();
		return resp.getData();
	}

	/**
	 * Returns a list of all available data streams. A data stream is provided by a
	 * source or a query (as view).
	 *
	 * @return ApiResponse&lt;List&lt;Resource&gt;&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 *                      deserialize the response body
	 */
	public ApiResponse<List<Resource>> datastreamsGetWithHttpInfo() throws ApiException {
		final okhttp3.Call call = datastreamsGetValidateBeforeCall(null, null);
		final Type localVarReturnType = new TypeToken<List<Resource>>() {
		}.getType();
		return this.apiClient.execute(call, localVarReturnType);
	}

	/**
	 * Returns a list of all available data streams. A data stream is provided by a
	 * source or a query (as view). (asynchronously)
	 *
	 * @param callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the
	 *                      request body object
	 */
	public okhttp3.Call datastreamsGetAsync(final ApiCallback<List<Resource>> callback) throws ApiException {

		ProgressResponseBody.ProgressListener progressListener = null;
		ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

		if (callback != null) {
			progressListener = new ProgressResponseBody.ProgressListener() {
				@Override
				public void update(long bytesRead, long contentLength, boolean done) {
					callback.onDownloadProgress(bytesRead, contentLength, done);
				}
			};

			progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
				@Override
				public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
					callback.onUploadProgress(bytesWritten, contentLength, done);
				}
			};
		}

		final okhttp3.Call call = datastreamsGetValidateBeforeCall(progressListener, progressRequestListener);
		final Type localVarReturnType = new TypeToken<List<Resource>>() {
		}.getType();
		this.apiClient.executeAsync(call, localVarReturnType, callback);
		return call;
	}

	/**
	 * Build call for datastreamsNameDelete
	 *
	 * @param name                    The name of the data stream. (required)
	 * @param progressListener        Progress listener
	 * @param progressRequestListener Progress request listener
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 */
	public okhttp3.Call datastreamsNameDeleteCall(String name,
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
		final Object localVarPostBody = new Object();

		// create path and map variables
		final String localVarPath = "/datastreams/{name}".replaceAll("\\{" + "name" + "\\}",
				this.apiClient.escapeString(name.toString()));

		final List<Pair> localVarQueryParams = new ArrayList<Pair>();
		final List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
		final Map<String, String> localVarHeaderParams = new HashMap<String, String>();
		final Map<String, Object> localVarFormParams = new HashMap<String, Object>();
		final String[] localVarAccepts = {

		};
		final String localVarAccept = this.apiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null) {
			localVarHeaderParams.put("Accept", localVarAccept);
		}

		final String[] localVarContentTypes = {

		};
		final String localVarContentType = this.apiClient.selectHeaderContentType(localVarContentTypes);
		localVarHeaderParams.put("Content-Type", localVarContentType);

		if (progressListener != null) {
			this.apiClient.setHttpClient(
					this.apiClient.getHttpClient().newBuilder().addNetworkInterceptor(new okhttp3.Interceptor() {
						@Override
						public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
							final okhttp3.Response originalResponse = chain.proceed(chain.request());
							return originalResponse.newBuilder()
									.body(new ProgressResponseBody(originalResponse.body(), progressListener)).build();
						}
					}).build());
		}

		final String[] localVarAuthNames = new String[] { "HttpBasicAuth" };
		return this.apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams,
				localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
	}

	@SuppressWarnings("rawtypes")
	private okhttp3.Call datastreamsNameDeleteValidateBeforeCall(String name,
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

		// verify the required parameter 'name' is set
		if (name == null) {
			throw new ApiException("Missing the required parameter 'name' when calling datastreamsNameDelete(Async)");
		}

		final okhttp3.Call call = datastreamsNameDeleteCall(name, progressListener, progressRequestListener);
		return call;

	}

	/**
	 * Removes the data stream with the given name.
	 *
	 * @param name The name of the data stream. (required)
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 *                      deserialize the response body
	 */
	public void datastreamsNameDelete(String name) throws ApiException {
		datastreamsNameDeleteWithHttpInfo(name);
	}

	/**
	 * Removes the data stream with the given name.
	 *
	 * @param name The name of the data stream. (required)
	 * @return ApiResponse&lt;Void&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 *                      deserialize the response body
	 */
	public ApiResponse<Void> datastreamsNameDeleteWithHttpInfo(String name) throws ApiException {
		final okhttp3.Call call = datastreamsNameDeleteValidateBeforeCall(name, null, null);
		return this.apiClient.execute(call);
	}

	/**
	 * Removes the data stream with the given name. (asynchronously)
	 *
	 * @param name     The name of the data stream. (required)
	 * @param callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the
	 *                      request body object
	 */
	public okhttp3.Call datastreamsNameDeleteAsync(String name, final ApiCallback<Void> callback) throws ApiException {

		ProgressResponseBody.ProgressListener progressListener = null;
		ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

		if (callback != null) {
			progressListener = new ProgressResponseBody.ProgressListener() {
				@Override
				public void update(long bytesRead, long contentLength, boolean done) {
					callback.onDownloadProgress(bytesRead, contentLength, done);
				}
			};

			progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
				@Override
				public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
					callback.onUploadProgress(bytesWritten, contentLength, done);
				}
			};
		}

		final okhttp3.Call call = datastreamsNameDeleteValidateBeforeCall(name, progressListener,
				progressRequestListener);
		this.apiClient.executeAsync(call, callback);
		return call;
	}

	/**
	 * Build call for datastreamsNameGet
	 *
	 * @param name                    The name of the data stream. (required)
	 * @param progressListener        Progress listener
	 * @param progressRequestListener Progress request listener
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 */
	public okhttp3.Call datastreamsNameGetCall(String name,
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
		final Object localVarPostBody = new Object();

		// create path and map variables
		final String localVarPath = "/datastreams/{name}".replaceAll("\\{" + "name" + "\\}",
				this.apiClient.escapeString(name.toString()));

		final List<Pair> localVarQueryParams = new ArrayList<Pair>();
		final List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
		final Map<String, String> localVarHeaderParams = new HashMap<String, String>();
		final Map<String, Object> localVarFormParams = new HashMap<String, Object>();
		final String[] localVarAccepts = { "application/json" };
		final String localVarAccept = this.apiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null) {
			localVarHeaderParams.put("Accept", localVarAccept);
		}

		final String[] localVarContentTypes = {

		};
		final String localVarContentType = this.apiClient.selectHeaderContentType(localVarContentTypes);
		localVarHeaderParams.put("Content-Type", localVarContentType);

		if (progressListener != null) {
			this.apiClient.setHttpClient(
					this.apiClient.getHttpClient().newBuilder().addNetworkInterceptor(new okhttp3.Interceptor() {
						@Override
						public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
							final okhttp3.Response originalResponse = chain.proceed(chain.request());
							return originalResponse.newBuilder()
									.body(new ProgressResponseBody(originalResponse.body(), progressListener)).build();
						}
					}).build());
		}

		final String[] localVarAuthNames = new String[] { "HttpBasicAuth" };
		return this.apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams,
				localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
	}

	@SuppressWarnings("rawtypes")
	private okhttp3.Call datastreamsNameGetValidateBeforeCall(String name,
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

		// verify the required parameter 'name' is set
		if (name == null) {
			throw new ApiException("Missing the required parameter 'name' when calling datastreamsNameGet(Async)");
		}

		final okhttp3.Call call = datastreamsNameGetCall(name, progressListener, progressRequestListener);
		return call;

	}

	/**
	 * Returns a data stream by name.
	 *
	 * @param name The name of the data stream. (required)
	 * @return Resource
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 *                      deserialize the response body
	 */
	public Resource datastreamsNameGet(String name) throws ApiException {
		final ApiResponse<Resource> resp = datastreamsNameGetWithHttpInfo(name);
		return resp.getData();
	}

	/**
	 * Returns a data stream by name.
	 *
	 * @param name The name of the data stream. (required)
	 * @return ApiResponse&lt;Resource&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 *                      deserialize the response body
	 */
	public ApiResponse<Resource> datastreamsNameGetWithHttpInfo(String name) throws ApiException {
		final okhttp3.Call call = datastreamsNameGetValidateBeforeCall(name, null, null);
		final Type localVarReturnType = new TypeToken<Resource>() {
		}.getType();
		return this.apiClient.execute(call, localVarReturnType);
	}

	/**
	 * Returns a data stream by name. (asynchronously)
	 *
	 * @param name     The name of the data stream. (required)
	 * @param callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the
	 *                      request body object
	 */
	public okhttp3.Call datastreamsNameGetAsync(String name, final ApiCallback<Resource> callback) throws ApiException {

		ProgressResponseBody.ProgressListener progressListener = null;
		ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

		if (callback != null) {
			progressListener = new ProgressResponseBody.ProgressListener() {
				@Override
				public void update(long bytesRead, long contentLength, boolean done) {
					callback.onDownloadProgress(bytesRead, contentLength, done);
				}
			};

			progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
				@Override
				public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
					callback.onUploadProgress(bytesWritten, contentLength, done);
				}
			};
		}

		final okhttp3.Call call = datastreamsNameGetValidateBeforeCall(name, progressListener, progressRequestListener);
		final Type localVarReturnType = new TypeToken<Resource>() {
		}.getType();
		this.apiClient.executeAsync(call, localVarReturnType, callback);
		return call;
	}

	/**
	 * Build call for datatypesGet
	 *
	 * @param progressListener        Progress listener
	 * @param progressRequestListener Progress request listener
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 */
	public okhttp3.Call datatypesGetCall(final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
		final Object localVarPostBody = new Object();

		// create path and map variables
		final String localVarPath = "/datatypes";

		final List<Pair> localVarQueryParams = new ArrayList<Pair>();
		final List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
		final Map<String, String> localVarHeaderParams = new HashMap<String, String>();
		final Map<String, Object> localVarFormParams = new HashMap<String, Object>();
		final String[] localVarAccepts = { "application/json" };
		final String localVarAccept = this.apiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null) {
			localVarHeaderParams.put("Accept", localVarAccept);
		}

		final String[] localVarContentTypes = {

		};
		final String localVarContentType = this.apiClient.selectHeaderContentType(localVarContentTypes);
		localVarHeaderParams.put("Content-Type", localVarContentType);

		if (progressListener != null) {
			this.apiClient.setHttpClient(
					this.apiClient.getHttpClient().newBuilder().addNetworkInterceptor(new okhttp3.Interceptor() {
						@Override
						public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
							final okhttp3.Response originalResponse = chain.proceed(chain.request());
							return originalResponse.newBuilder()
									.body(new ProgressResponseBody(originalResponse.body(), progressListener)).build();
						}
					}).build());
		}

		final String[] localVarAuthNames = new String[] { "HttpBasicAuth" };
		return this.apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams,
				localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
	}

	@SuppressWarnings("rawtypes")
	private okhttp3.Call datatypesGetValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

		final okhttp3.Call call = datatypesGetCall(progressListener, progressRequestListener);
		return call;

	}

	/**
	 * Returns a list of all available data types.
	 *
	 * @return List&lt;Datatype&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 *                      deserialize the response body
	 */
	public List<Datatype> datatypesGet() throws ApiException {
		final ApiResponse<List<Datatype>> resp = datatypesGetWithHttpInfo();
		return resp.getData();
	}

	/**
	 * Returns a list of all available data types.
	 *
	 * @return ApiResponse&lt;List&lt;Datatype&gt;&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 *                      deserialize the response body
	 */
	public ApiResponse<List<Datatype>> datatypesGetWithHttpInfo() throws ApiException {
		final okhttp3.Call call = datatypesGetValidateBeforeCall(null, null);
		final Type localVarReturnType = new TypeToken<List<Datatype>>() {
		}.getType();
		return this.apiClient.execute(call, localVarReturnType);
	}

	/**
	 * Returns a list of all available data types. (asynchronously)
	 *
	 * @param callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the
	 *                      request body object
	 */
	public okhttp3.Call datatypesGetAsync(final ApiCallback<List<Datatype>> callback) throws ApiException {

		ProgressResponseBody.ProgressListener progressListener = null;
		ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

		if (callback != null) {
			progressListener = new ProgressResponseBody.ProgressListener() {
				@Override
				public void update(long bytesRead, long contentLength, boolean done) {
					callback.onDownloadProgress(bytesRead, contentLength, done);
				}
			};

			progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
				@Override
				public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
					callback.onUploadProgress(bytesWritten, contentLength, done);
				}
			};
		}

		final okhttp3.Call call = datatypesGetValidateBeforeCall(progressListener, progressRequestListener);
		final Type localVarReturnType = new TypeToken<List<Datatype>>() {
		}.getType();
		this.apiClient.executeAsync(call, localVarReturnType, callback);
		return call;
	}

	/**
	 * Build call for functionsGet
	 *
	 * @param progressListener        Progress listener
	 * @param progressRequestListener Progress request listener
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 */
	public okhttp3.Call functionsGetCall(final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
		final Object localVarPostBody = new Object();

		// create path and map variables
		final String localVarPath = "/functions";

		final List<Pair> localVarQueryParams = new ArrayList<Pair>();
		final List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
		final Map<String, String> localVarHeaderParams = new HashMap<String, String>();
		final Map<String, Object> localVarFormParams = new HashMap<String, Object>();
		final String[] localVarAccepts = { "application/json" };
		final String localVarAccept = this.apiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null) {
			localVarHeaderParams.put("Accept", localVarAccept);
		}

		final String[] localVarContentTypes = {

		};
		final String localVarContentType = this.apiClient.selectHeaderContentType(localVarContentTypes);
		localVarHeaderParams.put("Content-Type", localVarContentType);

		if (progressListener != null) {
			this.apiClient.setHttpClient(
					this.apiClient.getHttpClient().newBuilder().addNetworkInterceptor(new okhttp3.Interceptor() {
						@Override
						public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
							final okhttp3.Response originalResponse = chain.proceed(chain.request());
							return originalResponse.newBuilder()
									.body(new ProgressResponseBody(originalResponse.body(), progressListener)).build();
						}
					}).build());
		}

		final String[] localVarAuthNames = new String[] { "HttpBasicAuth" };
		return this.apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams,
				localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
	}

	@SuppressWarnings("rawtypes")
	private okhttp3.Call functionsGetValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

		final okhttp3.Call call = functionsGetCall(progressListener, progressRequestListener);
		return call;

	}

	/**
	 * Returns a list of all available functions. Returns a list of [functions and
	 * operations
	 * (MEP)](https://wiki.odysseus.informatik.uni-oldenburg.de/display/ODYSSEUS/MEP%3A+Functions+and+Operators)
	 * Odysseus provides.
	 *
	 * @return List&lt;Function&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 *                      deserialize the response body
	 */
	public List<Function> functionsGet() throws ApiException {
		final ApiResponse<List<Function>> resp = functionsGetWithHttpInfo();
		return resp.getData();
	}

	/**
	 * Returns a list of all available functions. Returns a list of [functions and
	 * operations
	 * (MEP)](https://wiki.odysseus.informatik.uni-oldenburg.de/display/ODYSSEUS/MEP%3A+Functions+and+Operators)
	 * Odysseus provides.
	 *
	 * @return ApiResponse&lt;List&lt;Function&gt;&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 *                      deserialize the response body
	 */
	public ApiResponse<List<Function>> functionsGetWithHttpInfo() throws ApiException {
		final okhttp3.Call call = functionsGetValidateBeforeCall(null, null);
		final Type localVarReturnType = new TypeToken<List<Function>>() {
		}.getType();
		return this.apiClient.execute(call, localVarReturnType);
	}

	/**
	 * Returns a list of all available functions. (asynchronously) Returns a list of
	 * [functions and operations
	 * (MEP)](https://wiki.odysseus.informatik.uni-oldenburg.de/display/ODYSSEUS/MEP%3A+Functions+and+Operators)
	 * Odysseus provides.
	 *
	 * @param callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the
	 *                      request body object
	 */
	public okhttp3.Call functionsGetAsync(final ApiCallback<List<Function>> callback) throws ApiException {

		ProgressResponseBody.ProgressListener progressListener = null;
		ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

		if (callback != null) {
			progressListener = new ProgressResponseBody.ProgressListener() {
				@Override
				public void update(long bytesRead, long contentLength, boolean done) {
					callback.onDownloadProgress(bytesRead, contentLength, done);
				}
			};

			progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
				@Override
				public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
					callback.onUploadProgress(bytesWritten, contentLength, done);
				}
			};
		}

		final okhttp3.Call call = functionsGetValidateBeforeCall(progressListener, progressRequestListener);
		final Type localVarReturnType = new TypeToken<List<Function>>() {
		}.getType();
		this.apiClient.executeAsync(call, localVarReturnType, callback);
		return call;
	}

	/**
	 * Build call for operatorsGet
	 *
	 * @param progressListener        Progress listener
	 * @param progressRequestListener Progress request listener
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 */
	public okhttp3.Call operatorsGetCall(final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
		final Object localVarPostBody = new Object();

		// create path and map variables
		final String localVarPath = "/operators";

		final List<Pair> localVarQueryParams = new ArrayList<Pair>();
		final List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
		final Map<String, String> localVarHeaderParams = new HashMap<String, String>();
		final Map<String, Object> localVarFormParams = new HashMap<String, Object>();
		final String[] localVarAccepts = { "application/json" };
		final String localVarAccept = this.apiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null) {
			localVarHeaderParams.put("Accept", localVarAccept);
		}

		final String[] localVarContentTypes = {

		};
		final String localVarContentType = this.apiClient.selectHeaderContentType(localVarContentTypes);
		localVarHeaderParams.put("Content-Type", localVarContentType);

		if (progressListener != null) {
			this.apiClient.setHttpClient(
					this.apiClient.getHttpClient().newBuilder().addNetworkInterceptor(new okhttp3.Interceptor() {
						@Override
						public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
							final okhttp3.Response originalResponse = chain.proceed(chain.request());
							return originalResponse.newBuilder()
									.body(new ProgressResponseBody(originalResponse.body(), progressListener)).build();
						}
					}).build());
		}

		final String[] localVarAuthNames = new String[] { "HttpBasicAuth" };
		return this.apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams,
				localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
	}

	@SuppressWarnings("rawtypes")
	private okhttp3.Call operatorsGetValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

		final okhttp3.Call call = operatorsGetCall(progressListener, progressRequestListener);
		return call;

	}

	/**
	 * Returns a list of all available operators.
	 *
	 * @return List&lt;OperatorInfo&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 *                      deserialize the response body
	 */
	public List<OperatorInfo> operatorsGet() throws ApiException {
		final ApiResponse<List<OperatorInfo>> resp = operatorsGetWithHttpInfo();
		return resp.getData();
	}

	/**
	 * Returns a list of all available operators.
	 *
	 * @return ApiResponse&lt;List&lt;OperatorInfo&gt;&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 *                      deserialize the response body
	 */
	public ApiResponse<List<OperatorInfo>> operatorsGetWithHttpInfo() throws ApiException {
		final okhttp3.Call call = operatorsGetValidateBeforeCall(null, null);
		final Type localVarReturnType = new TypeToken<List<OperatorInfo>>() {
		}.getType();
		return this.apiClient.execute(call, localVarReturnType);
	}

	/**
	 * Returns a list of all available operators. (asynchronously)
	 *
	 * @param callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the
	 *                      request body object
	 */
	public okhttp3.Call operatorsGetAsync(final ApiCallback<List<OperatorInfo>> callback) throws ApiException {

		ProgressResponseBody.ProgressListener progressListener = null;
		ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

		if (callback != null) {
			progressListener = new ProgressResponseBody.ProgressListener() {
				@Override
				public void update(long bytesRead, long contentLength, boolean done) {
					callback.onDownloadProgress(bytesRead, contentLength, done);
				}
			};

			progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
				@Override
				public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
					callback.onUploadProgress(bytesWritten, contentLength, done);
				}
			};
		}

		final okhttp3.Call call = operatorsGetValidateBeforeCall(progressListener, progressRequestListener);
		final Type localVarReturnType = new TypeToken<List<OperatorInfo>>() {
		}.getType();
		this.apiClient.executeAsync(call, localVarReturnType, callback);
		return call;
	}

	/**
	 * Build call for parsersGet
	 *
	 * @param progressListener        Progress listener
	 * @param progressRequestListener Progress request listener
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 */
	public okhttp3.Call parsersGetCall(final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
		final Object localVarPostBody = new Object();

		// create path and map variables
		final String localVarPath = "/parsers";

		final List<Pair> localVarQueryParams = new ArrayList<Pair>();
		final List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
		final Map<String, String> localVarHeaderParams = new HashMap<String, String>();
		final Map<String, Object> localVarFormParams = new HashMap<String, Object>();
		final String[] localVarAccepts = { "application/json" };
		final String localVarAccept = this.apiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null) {
			localVarHeaderParams.put("Accept", localVarAccept);
		}

		final String[] localVarContentTypes = {

		};
		final String localVarContentType = this.apiClient.selectHeaderContentType(localVarContentTypes);
		localVarHeaderParams.put("Content-Type", localVarContentType);

		if (progressListener != null) {
			this.apiClient.setHttpClient(
					this.apiClient.getHttpClient().newBuilder().addNetworkInterceptor(new okhttp3.Interceptor() {
						@Override
						public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
							final okhttp3.Response originalResponse = chain.proceed(chain.request());
							return originalResponse.newBuilder()
									.body(new ProgressResponseBody(originalResponse.body(), progressListener)).build();
						}
					}).build());
		}

		final String[] localVarAuthNames = new String[] { "HttpBasicAuth" };
		return this.apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams,
				localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
	}

	@SuppressWarnings("rawtypes")
	private okhttp3.Call parsersGetValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

		final okhttp3.Call call = parsersGetCall(progressListener, progressRequestListener);
		return call;

	}

	/**
	 * Returns a list of all available parsers.
	 *
	 * @return List&lt;String&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 *                      deserialize the response body
	 */
	public List<String> parsersGet() throws ApiException {
		final ApiResponse<List<String>> resp = parsersGetWithHttpInfo();
		return resp.getData();
	}

	/**
	 * Returns a list of all available parsers.
	 *
	 * @return ApiResponse&lt;List&lt;String&gt;&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 *                      deserialize the response body
	 */
	public ApiResponse<List<String>> parsersGetWithHttpInfo() throws ApiException {
		final okhttp3.Call call = parsersGetValidateBeforeCall(null, null);
		final Type localVarReturnType = new TypeToken<List<String>>() {
		}.getType();
		return this.apiClient.execute(call, localVarReturnType);
	}

	/**
	 * Returns a list of all available parsers. (asynchronously)
	 *
	 * @param callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the
	 *                      request body object
	 */
	public okhttp3.Call parsersGetAsync(final ApiCallback<List<String>> callback) throws ApiException {

		ProgressResponseBody.ProgressListener progressListener = null;
		ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

		if (callback != null) {
			progressListener = new ProgressResponseBody.ProgressListener() {
				@Override
				public void update(long bytesRead, long contentLength, boolean done) {
					callback.onDownloadProgress(bytesRead, contentLength, done);
				}
			};

			progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
				@Override
				public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
					callback.onUploadProgress(bytesWritten, contentLength, done);
				}
			};
		}

		final okhttp3.Call call = parsersGetValidateBeforeCall(progressListener, progressRequestListener);
		final Type localVarReturnType = new TypeToken<List<String>>() {
		}.getType();
		this.apiClient.executeAsync(call, localVarReturnType, callback);
		return call;
	}

	/**
	 * Build call for parsersNamePost
	 *
	 * @param name                    The name of the parser. (required)
	 * @param body                    (required)
	 * @param progressListener        Progress listener
	 * @param progressRequestListener Progress request listener
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 */
	public okhttp3.Call parsersNamePostCall(String name, String body,
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
		final Object localVarPostBody = body;

		// create path and map variables
		final String localVarPath = "/parsers/{name}".replaceAll("\\{" + "name" + "\\}",
				this.apiClient.escapeString(name.toString()));

		final List<Pair> localVarQueryParams = new ArrayList<Pair>();
		final List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
		final Map<String, String> localVarHeaderParams = new HashMap<String, String>();
		final Map<String, Object> localVarFormParams = new HashMap<String, Object>();
		final String[] localVarAccepts = { "application/json" };
		final String localVarAccept = this.apiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null) {
			localVarHeaderParams.put("Accept", localVarAccept);
		}

		final String[] localVarContentTypes = { "text/plain" };
		final String localVarContentType = this.apiClient.selectHeaderContentType(localVarContentTypes);
		localVarHeaderParams.put("Content-Type", localVarContentType);

		if (progressListener != null) {
			this.apiClient.setHttpClient(
					this.apiClient.getHttpClient().newBuilder().addNetworkInterceptor(new okhttp3.Interceptor() {
						@Override
						public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
							final okhttp3.Response originalResponse = chain.proceed(chain.request());
							return originalResponse.newBuilder()
									.body(new ProgressResponseBody(originalResponse.body(), progressListener)).build();
						}
					}).build());
		}

		final String[] localVarAuthNames = new String[] { "HttpBasicAuth" };
		return this.apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams,
				localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
	}

	@SuppressWarnings("rawtypes")
	private okhttp3.Call parsersNamePostValidateBeforeCall(String name, String body,
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

		// verify the required parameter 'name' is set
		if (name == null) {
			throw new ApiException("Missing the required parameter 'name' when calling parsersNamePost(Async)");
		}

		// verify the required parameter 'body' is set
		if (body == null) {
			throw new ApiException("Missing the required parameter 'body' when calling parsersNamePost(Async)");
		}

		final okhttp3.Call call = parsersNamePostCall(name, body, progressListener, progressRequestListener);
		return call;

	}

	/**
	 * Executes a script with the adressed parser.
	 *
	 * @param name The name of the parser. (required)
	 * @param body (required)
	 * @return Query
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 *                      deserialize the response body
	 */
	public Query parsersNamePost(String name, String body) throws ApiException {
		final ApiResponse<Query> resp = parsersNamePostWithHttpInfo(name, body);
		return resp.getData();
	}

	/**
	 * Executes a script with the adressed parser.
	 *
	 * @param name The name of the parser. (required)
	 * @param body (required)
	 * @return ApiResponse&lt;Query&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 *                      deserialize the response body
	 */
	public ApiResponse<Query> parsersNamePostWithHttpInfo(String name, String body) throws ApiException {
		final okhttp3.Call call = parsersNamePostValidateBeforeCall(name, body, null, null);
		final Type localVarReturnType = new TypeToken<Query>() {
		}.getType();
		return this.apiClient.execute(call, localVarReturnType);
	}

	/**
	 * Executes a script with the adressed parser. (asynchronously)
	 *
	 * @param name     The name of the parser. (required)
	 * @param body     (required)
	 * @param callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the
	 *                      request body object
	 */
	public okhttp3.Call parsersNamePostAsync(String name, String body, final ApiCallback<Query> callback)
			throws ApiException {

		ProgressResponseBody.ProgressListener progressListener = null;
		ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

		if (callback != null) {
			progressListener = new ProgressResponseBody.ProgressListener() {
				@Override
				public void update(long bytesRead, long contentLength, boolean done) {
					callback.onDownloadProgress(bytesRead, contentLength, done);
				}
			};

			progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
				@Override
				public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
					callback.onUploadProgress(bytesWritten, contentLength, done);
				}
			};
		}

		final okhttp3.Call call = parsersNamePostValidateBeforeCall(name, body, progressListener,
				progressRequestListener);
		final Type localVarReturnType = new TypeToken<Query>() {
		}.getType();
		this.apiClient.executeAsync(call, localVarReturnType, callback);
		return call;
	}

	/**
	 * Build call for queriesGet
	 *
	 * @param progressListener        Progress listener
	 * @param progressRequestListener Progress request listener
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 */
	public okhttp3.Call queriesGetCall(final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
		final Object localVarPostBody = new Object();

		// create path and map variables
		final String localVarPath = "/queries";

		final List<Pair> localVarQueryParams = new ArrayList<Pair>();
		final List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
		final Map<String, String> localVarHeaderParams = new HashMap<String, String>();
		final Map<String, Object> localVarFormParams = new HashMap<String, Object>();
		final String[] localVarAccepts = { "application/json" };
		final String localVarAccept = this.apiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null) {
			localVarHeaderParams.put("Accept", localVarAccept);
		}

		final String[] localVarContentTypes = {

		};
		final String localVarContentType = this.apiClient.selectHeaderContentType(localVarContentTypes);
		localVarHeaderParams.put("Content-Type", localVarContentType);

		if (progressListener != null) {
			this.apiClient.setHttpClient(
					this.apiClient.getHttpClient().newBuilder().addNetworkInterceptor(new okhttp3.Interceptor() {
						@Override
						public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
							final okhttp3.Response originalResponse = chain.proceed(chain.request());
							return originalResponse.newBuilder()
									.body(new ProgressResponseBody(originalResponse.body(), progressListener)).build();
						}
					}).build());
		}

		final String[] localVarAuthNames = new String[] { "HttpBasicAuth" };
		return this.apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams,
				localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
	}

	@SuppressWarnings("rawtypes")
	private okhttp3.Call queriesGetValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

		final okhttp3.Call call = queriesGetCall(progressListener, progressRequestListener);
		return call;

	}

	/**
	 * Returns a list of all installed queries.
	 *
	 * @return List&lt;Query&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 *                      deserialize the response body
	 */
	public List<Query> queriesGet() throws ApiException {
		final ApiResponse<List<Query>> resp = queriesGetWithHttpInfo();
		return resp.getData();
	}

	/**
	 * Returns a list of all installed queries.
	 *
	 * @return ApiResponse&lt;List&lt;Query&gt;&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 *                      deserialize the response body
	 */
	public ApiResponse<List<Query>> queriesGetWithHttpInfo() throws ApiException {
		final okhttp3.Call call = queriesGetValidateBeforeCall(null, null);
		final Type localVarReturnType = new TypeToken<List<Query>>() {
		}.getType();
		return this.apiClient.execute(call, localVarReturnType);
	}

	/**
	 * Returns a list of all installed queries. (asynchronously)
	 *
	 * @param callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the
	 *                      request body object
	 */
	public okhttp3.Call queriesGetAsync(final ApiCallback<List<Query>> callback) throws ApiException {

		ProgressResponseBody.ProgressListener progressListener = null;
		ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

		if (callback != null) {
			progressListener = new ProgressResponseBody.ProgressListener() {
				@Override
				public void update(long bytesRead, long contentLength, boolean done) {
					callback.onDownloadProgress(bytesRead, contentLength, done);
				}
			};

			progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
				@Override
				public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
					callback.onUploadProgress(bytesWritten, contentLength, done);
				}
			};
		}

		final okhttp3.Call call = queriesGetValidateBeforeCall(progressListener, progressRequestListener);
		final Type localVarReturnType = new TypeToken<List<Query>>() {
		}.getType();
		this.apiClient.executeAsync(call, localVarReturnType, callback);
		return call;
	}

	/**
	 * Build call for queriesIdDelete
	 *
	 * @param id                      The ID of the query. (required)
	 * @param progressListener        Progress listener
	 * @param progressRequestListener Progress request listener
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 */
	public okhttp3.Call queriesIdDeleteCall(Integer id, final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
		final Object localVarPostBody = new Object();

		// create path and map variables
		final String localVarPath = "/queries/{id}".replaceAll("\\{" + "id" + "\\}",
				this.apiClient.escapeString(id.toString()));

		final List<Pair> localVarQueryParams = new ArrayList<Pair>();
		final List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
		final Map<String, String> localVarHeaderParams = new HashMap<String, String>();
		final Map<String, Object> localVarFormParams = new HashMap<String, Object>();
		final String[] localVarAccepts = {

		};
		final String localVarAccept = this.apiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null) {
			localVarHeaderParams.put("Accept", localVarAccept);
		}

		final String[] localVarContentTypes = {

		};
		final String localVarContentType = this.apiClient.selectHeaderContentType(localVarContentTypes);
		localVarHeaderParams.put("Content-Type", localVarContentType);

		if (progressListener != null) {
			this.apiClient.setHttpClient(
					this.apiClient.getHttpClient().newBuilder().addNetworkInterceptor(new okhttp3.Interceptor() {
						@Override
						public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
							final okhttp3.Response originalResponse = chain.proceed(chain.request());
							return originalResponse.newBuilder()
									.body(new ProgressResponseBody(originalResponse.body(), progressListener)).build();
						}
					}).build());
		}

		final String[] localVarAuthNames = new String[] { "HttpBasicAuth" };
		return this.apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams,
				localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
	}

	@SuppressWarnings("rawtypes")
	private okhttp3.Call queriesIdDeleteValidateBeforeCall(Integer id,
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

		// verify the required parameter 'id' is set
		if (id == null) {
			throw new ApiException("Missing the required parameter 'id' when calling queriesIdDelete(Async)");
		}

		final okhttp3.Call call = queriesIdDeleteCall(id, progressListener, progressRequestListener);
		return call;

	}

	/**
	 * Removes the query with the given ID.
	 *
	 * @param id The ID of the query. (required)
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 *                      deserialize the response body
	 */
	public void queriesIdDelete(Integer id) throws ApiException {
		queriesIdDeleteWithHttpInfo(id);
	}

	/**
	 * Removes the query with the given ID.
	 *
	 * @param id The ID of the query. (required)
	 * @return ApiResponse&lt;Void&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 *                      deserialize the response body
	 */
	public ApiResponse<Void> queriesIdDeleteWithHttpInfo(Integer id) throws ApiException {
		final okhttp3.Call call = queriesIdDeleteValidateBeforeCall(id, null, null);
		return this.apiClient.execute(call);
	}

	/**
	 * Removes the query with the given ID. (asynchronously)
	 *
	 * @param id       The ID of the query. (required)
	 * @param callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the
	 *                      request body object
	 */
	public okhttp3.Call queriesIdDeleteAsync(Integer id, final ApiCallback<Void> callback) throws ApiException {

		ProgressResponseBody.ProgressListener progressListener = null;
		ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

		if (callback != null) {
			progressListener = new ProgressResponseBody.ProgressListener() {
				@Override
				public void update(long bytesRead, long contentLength, boolean done) {
					callback.onDownloadProgress(bytesRead, contentLength, done);
				}
			};

			progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
				@Override
				public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
					callback.onUploadProgress(bytesWritten, contentLength, done);
				}
			};
		}

		final okhttp3.Call call = queriesIdDeleteValidateBeforeCall(id, progressListener, progressRequestListener);
		this.apiClient.executeAsync(call, callback);
		return call;
	}

	/**
	 * Build call for queriesIdGet
	 *
	 * @param id                      The ID of the query. (required)
	 * @param progressListener        Progress listener
	 * @param progressRequestListener Progress request listener
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 */
	public okhttp3.Call queriesIdGetCall(Integer id, final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
		final Object localVarPostBody = new Object();

		// create path and map variables
		final String localVarPath = "/queries/{id}".replaceAll("\\{" + "id" + "\\}",
				this.apiClient.escapeString(id.toString()));

		final List<Pair> localVarQueryParams = new ArrayList<Pair>();
		final List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
		final Map<String, String> localVarHeaderParams = new HashMap<String, String>();
		final Map<String, Object> localVarFormParams = new HashMap<String, Object>();
		final String[] localVarAccepts = { "application/json" };
		final String localVarAccept = this.apiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null) {
			localVarHeaderParams.put("Accept", localVarAccept);
		}

		final String[] localVarContentTypes = {

		};
		final String localVarContentType = this.apiClient.selectHeaderContentType(localVarContentTypes);
		localVarHeaderParams.put("Content-Type", localVarContentType);

		if (progressListener != null) {
			this.apiClient.setHttpClient(
					this.apiClient.getHttpClient().newBuilder().addNetworkInterceptor(new okhttp3.Interceptor() {
						@Override
						public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
							final okhttp3.Response originalResponse = chain.proceed(chain.request());
							return originalResponse.newBuilder()
									.body(new ProgressResponseBody(originalResponse.body(), progressListener)).build();
						}
					}).build());
		}

		final String[] localVarAuthNames = new String[] { "HttpBasicAuth" };
		return this.apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams,
				localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
	}

	@SuppressWarnings("rawtypes")
	private okhttp3.Call queriesIdGetValidateBeforeCall(Integer id,
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

		// verify the required parameter 'id' is set
		if (id == null) {
			throw new ApiException("Missing the required parameter 'id' when calling queriesIdGet(Async)");
		}

		final okhttp3.Call call = queriesIdGetCall(id, progressListener, progressRequestListener);
		return call;

	}

	/**
	 * Returns a query by ID.
	 *
	 * @param id The ID of the query. (required)
	 * @return Query
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 *                      deserialize the response body
	 */
	public Query queriesIdGet(Integer id) throws ApiException {
		final ApiResponse<Query> resp = queriesIdGetWithHttpInfo(id);
		return resp.getData();
	}

	/**
	 * Returns a query by ID.
	 *
	 * @param id The ID of the query. (required)
	 * @return ApiResponse&lt;Query&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 *                      deserialize the response body
	 */
	public ApiResponse<Query> queriesIdGetWithHttpInfo(Integer id) throws ApiException {
		final okhttp3.Call call = queriesIdGetValidateBeforeCall(id, null, null);
		final Type localVarReturnType = new TypeToken<Query>() {
		}.getType();
		return this.apiClient.execute(call, localVarReturnType);
	}

	/**
	 * Returns a query by ID. (asynchronously)
	 *
	 * @param id       The ID of the query. (required)
	 * @param callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the
	 *                      request body object
	 */
	public okhttp3.Call queriesIdGetAsync(Integer id, final ApiCallback<Query> callback) throws ApiException {

		ProgressResponseBody.ProgressListener progressListener = null;
		ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

		if (callback != null) {
			progressListener = new ProgressResponseBody.ProgressListener() {
				@Override
				public void update(long bytesRead, long contentLength, boolean done) {
					callback.onDownloadProgress(bytesRead, contentLength, done);
				}
			};

			progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
				@Override
				public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
					callback.onUploadProgress(bytesWritten, contentLength, done);
				}
			};
		}

		final okhttp3.Call call = queriesIdGetValidateBeforeCall(id, progressListener, progressRequestListener);
		final Type localVarReturnType = new TypeToken<Query>() {
		}.getType();
		this.apiClient.executeAsync(call, localVarReturnType, callback);
		return call;
	}

	/**
	 * Build call for queriesIdPut
	 *
	 * @param id                      The ID of the query. (required)
	 * @param query                   (required)
	 * @param progressListener        Progress listener
	 * @param progressRequestListener Progress request listener
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 */
	public okhttp3.Call queriesIdPutCall(Integer id, Query query,
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
		final Object localVarPostBody = query;

		// create path and map variables
		final String localVarPath = "/queries/{id}".replaceAll("\\{" + "id" + "\\}",
				this.apiClient.escapeString(id.toString()));

		final List<Pair> localVarQueryParams = new ArrayList<Pair>();
		final List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
		final Map<String, String> localVarHeaderParams = new HashMap<String, String>();
		final Map<String, Object> localVarFormParams = new HashMap<String, Object>();
		final String[] localVarAccepts = { "application/json" };
		final String localVarAccept = this.apiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null) {
			localVarHeaderParams.put("Accept", localVarAccept);
		}

		final String[] localVarContentTypes = { "application/json" };
		final String localVarContentType = this.apiClient.selectHeaderContentType(localVarContentTypes);
		localVarHeaderParams.put("Content-Type", localVarContentType);

		if (progressListener != null) {
			this.apiClient.setHttpClient(
					this.apiClient.getHttpClient().newBuilder().addNetworkInterceptor(new okhttp3.Interceptor() {
						@Override
						public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
							final okhttp3.Response originalResponse = chain.proceed(chain.request());
							return originalResponse.newBuilder()
									.body(new ProgressResponseBody(originalResponse.body(), progressListener)).build();
						}
					}).build());
		}

		final String[] localVarAuthNames = new String[] { "HttpBasicAuth" };
		return this.apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams,
				localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
	}

	@SuppressWarnings("rawtypes")
	private okhttp3.Call queriesIdPutValidateBeforeCall(Integer id, Query query,
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

		// verify the required parameter 'id' is set
		if (id == null) {
			throw new ApiException("Missing the required parameter 'id' when calling queriesIdPut(Async)");
		}

		// verify the required parameter 'query' is set
		if (query == null) {
			throw new ApiException("Missing the required parameter 'query' when calling queriesIdPut(Async)");
		}

		final okhttp3.Call call = queriesIdPutCall(id, query, progressListener, progressRequestListener);
		return call;

	}

	/**
	 * Updates the query with the given ID. With this operation you can update the
	 * state of the query (e.g. to start or stop a query). Updating the query text
	 * is not allowed. Remove this query and add a new one instead.
	 *
	 * @param id    The ID of the query. (required)
	 * @param query (required)
	 * @return Query
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 *                      deserialize the response body
	 */
	public Query queriesIdPut(Integer id, Query query) throws ApiException {
		final ApiResponse<Query> resp = queriesIdPutWithHttpInfo(id, query);
		return resp.getData();
	}

	/**
	 * Updates the query with the given ID. With this operation you can update the
	 * state of the query (e.g. to start or stop a query). Updating the query text
	 * is not allowed. Remove this query and add a new one instead.
	 *
	 * @param id    The ID of the query. (required)
	 * @param query (required)
	 * @return ApiResponse&lt;Query&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 *                      deserialize the response body
	 */
	public ApiResponse<Query> queriesIdPutWithHttpInfo(Integer id, Query query) throws ApiException {
		final okhttp3.Call call = queriesIdPutValidateBeforeCall(id, query, null, null);
		final Type localVarReturnType = new TypeToken<Query>() {
		}.getType();
		return this.apiClient.execute(call, localVarReturnType);
	}

	/**
	 * Updates the query with the given ID. (asynchronously) With this operation you
	 * can update the state of the query (e.g. to start or stop a query). Updating
	 * the query text is not allowed. Remove this query and add a new one instead.
	 *
	 * @param id       The ID of the query. (required)
	 * @param query    (required)
	 * @param callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the
	 *                      request body object
	 */
	public okhttp3.Call queriesIdPutAsync(Integer id, Query query, final ApiCallback<Query> callback)
			throws ApiException {

		ProgressResponseBody.ProgressListener progressListener = null;
		ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

		if (callback != null) {
			progressListener = new ProgressResponseBody.ProgressListener() {
				@Override
				public void update(long bytesRead, long contentLength, boolean done) {
					callback.onDownloadProgress(bytesRead, contentLength, done);
				}
			};

			progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
				@Override
				public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
					callback.onUploadProgress(bytesWritten, contentLength, done);
				}
			};
		}

		final okhttp3.Call call = queriesIdPutValidateBeforeCall(id, query, progressListener, progressRequestListener);
		final Type localVarReturnType = new TypeToken<Query>() {
		}.getType();
		this.apiClient.executeAsync(call, localVarReturnType, callback);
		return call;
	}

	/**
	 * Build call for queriesNameDelete
	 *
	 * @param name                    The name of the query. (required)
	 * @param progressListener        Progress listener
	 * @param progressRequestListener Progress request listener
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 */
	public okhttp3.Call queriesNameDeleteCall(String name, final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
		final Object localVarPostBody = new Object();

		// create path and map variables
		final String localVarPath = "/queries/{name}".replaceAll("\\{" + "name" + "\\}",
				this.apiClient.escapeString(name.toString()));

		final List<Pair> localVarQueryParams = new ArrayList<Pair>();
		final List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
		final Map<String, String> localVarHeaderParams = new HashMap<String, String>();
		final Map<String, Object> localVarFormParams = new HashMap<String, Object>();
		final String[] localVarAccepts = {

		};
		final String localVarAccept = this.apiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null) {
			localVarHeaderParams.put("Accept", localVarAccept);
		}

		final String[] localVarContentTypes = {

		};
		final String localVarContentType = this.apiClient.selectHeaderContentType(localVarContentTypes);
		localVarHeaderParams.put("Content-Type", localVarContentType);

		if (progressListener != null) {
			this.apiClient.setHttpClient(
					this.apiClient.getHttpClient().newBuilder().addNetworkInterceptor(new okhttp3.Interceptor() {
						@Override
						public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
							final okhttp3.Response originalResponse = chain.proceed(chain.request());
							return originalResponse.newBuilder()
									.body(new ProgressResponseBody(originalResponse.body(), progressListener)).build();
						}
					}).build());
		}

		final String[] localVarAuthNames = new String[] { "HttpBasicAuth" };
		return this.apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams,
				localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
	}

	@SuppressWarnings("rawtypes")
	private okhttp3.Call queriesNameDeleteValidateBeforeCall(String name,
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

		// verify the required parameter 'name' is set
		if (name == null) {
			throw new ApiException("Missing the required parameter 'name' when calling queriesNameDelete(Async)");
		}

		final okhttp3.Call call = queriesNameDeleteCall(name, progressListener, progressRequestListener);
		return call;

	}

	/**
	 * Removes the query with the given name.
	 *
	 * @param name The name of the query. (required)
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 *                      deserialize the response body
	 */
	public void queriesNameDelete(String name) throws ApiException {
		queriesNameDeleteWithHttpInfo(name);
	}

	/**
	 * Removes the query with the given name.
	 *
	 * @param name The name of the query. (required)
	 * @return ApiResponse&lt;Void&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 *                      deserialize the response body
	 */
	public ApiResponse<Void> queriesNameDeleteWithHttpInfo(String name) throws ApiException {
		final okhttp3.Call call = queriesNameDeleteValidateBeforeCall(name, null, null);
		return this.apiClient.execute(call);
	}

	/**
	 * Removes the query with the given name. (asynchronously)
	 *
	 * @param name     The name of the query. (required)
	 * @param callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the
	 *                      request body object
	 */
	public okhttp3.Call queriesNameDeleteAsync(String name, final ApiCallback<Void> callback) throws ApiException {

		ProgressResponseBody.ProgressListener progressListener = null;
		ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

		if (callback != null) {
			progressListener = new ProgressResponseBody.ProgressListener() {
				@Override
				public void update(long bytesRead, long contentLength, boolean done) {
					callback.onDownloadProgress(bytesRead, contentLength, done);
				}
			};

			progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
				@Override
				public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
					callback.onUploadProgress(bytesWritten, contentLength, done);
				}
			};
		}

		final okhttp3.Call call = queriesNameDeleteValidateBeforeCall(name, progressListener, progressRequestListener);
		this.apiClient.executeAsync(call, callback);
		return call;
	}

	/**
	 * Build call for queriesNameGet
	 *
	 * @param name                    The name of the query. (required)
	 * @param progressListener        Progress listener
	 * @param progressRequestListener Progress request listener
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 */
	public okhttp3.Call queriesNameGetCall(String name, final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
		final Object localVarPostBody = new Object();

		// create path and map variables
		final String localVarPath = "/queries/{name}".replaceAll("\\{" + "name" + "\\}",
				this.apiClient.escapeString(name.toString()));

		final List<Pair> localVarQueryParams = new ArrayList<Pair>();
		final List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
		final Map<String, String> localVarHeaderParams = new HashMap<String, String>();
		final Map<String, Object> localVarFormParams = new HashMap<String, Object>();
		final String[] localVarAccepts = { "application/json" };
		final String localVarAccept = this.apiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null) {
			localVarHeaderParams.put("Accept", localVarAccept);
		}

		final String[] localVarContentTypes = {

		};
		final String localVarContentType = this.apiClient.selectHeaderContentType(localVarContentTypes);
		localVarHeaderParams.put("Content-Type", localVarContentType);

		if (progressListener != null) {
			this.apiClient.setHttpClient(
					this.apiClient.getHttpClient().newBuilder().addNetworkInterceptor(new okhttp3.Interceptor() {
						@Override
						public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
							final okhttp3.Response originalResponse = chain.proceed(chain.request());
							return originalResponse.newBuilder()
									.body(new ProgressResponseBody(originalResponse.body(), progressListener)).build();
						}
					}).build());
		}

		final String[] localVarAuthNames = new String[] { "HttpBasicAuth" };
		return this.apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams,
				localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
	}

	@SuppressWarnings("rawtypes")
	private okhttp3.Call queriesNameGetValidateBeforeCall(String name,
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

		// verify the required parameter 'name' is set
		if (name == null) {
			throw new ApiException("Missing the required parameter 'name' when calling queriesNameGet(Async)");
		}

		final okhttp3.Call call = queriesNameGetCall(name, progressListener, progressRequestListener);
		return call;

	}

	/**
	 * Returns a query by name.
	 *
	 * @param name The name of the query. (required)
	 * @return Query
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 *                      deserialize the response body
	 */
	public Query queriesNameGet(String name) throws ApiException {
		final ApiResponse<Query> resp = queriesNameGetWithHttpInfo(name);
		return resp.getData();
	}

	/**
	 * Returns a query by name.
	 *
	 * @param name The name of the query. (required)
	 * @return ApiResponse&lt;Query&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 *                      deserialize the response body
	 */
	public ApiResponse<Query> queriesNameGetWithHttpInfo(String name) throws ApiException {
		final okhttp3.Call call = queriesNameGetValidateBeforeCall(name, null, null);
		final Type localVarReturnType = new TypeToken<Query>() {
		}.getType();
		return this.apiClient.execute(call, localVarReturnType);
	}

	/**
	 * Returns a query by name. (asynchronously)
	 *
	 * @param name     The name of the query. (required)
	 * @param callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the
	 *                      request body object
	 */
	public okhttp3.Call queriesNameGetAsync(String name, final ApiCallback<Query> callback) throws ApiException {

		ProgressResponseBody.ProgressListener progressListener = null;
		ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

		if (callback != null) {
			progressListener = new ProgressResponseBody.ProgressListener() {
				@Override
				public void update(long bytesRead, long contentLength, boolean done) {
					callback.onDownloadProgress(bytesRead, contentLength, done);
				}
			};

			progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
				@Override
				public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
					callback.onUploadProgress(bytesWritten, contentLength, done);
				}
			};
		}

		final okhttp3.Call call = queriesNameGetValidateBeforeCall(name, progressListener, progressRequestListener);
		final Type localVarReturnType = new TypeToken<Query>() {
		}.getType();
		this.apiClient.executeAsync(call, localVarReturnType, callback);
		return call;
	}

	/**
	 * Build call for queriesNamePut
	 *
	 * @param name                    The name of the query. (required)
	 * @param query                   (required)
	 * @param progressListener        Progress listener
	 * @param progressRequestListener Progress request listener
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 */
	public okhttp3.Call queriesNamePutCall(String name, Query query,
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
		final Object localVarPostBody = query;

		// create path and map variables
		final String localVarPath = "/queries/{name}".replaceAll("\\{" + "name" + "\\}",
				this.apiClient.escapeString(name.toString()));

		final List<Pair> localVarQueryParams = new ArrayList<Pair>();
		final List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
		final Map<String, String> localVarHeaderParams = new HashMap<String, String>();
		final Map<String, Object> localVarFormParams = new HashMap<String, Object>();
		final String[] localVarAccepts = { "application/json" };
		final String localVarAccept = this.apiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null) {
			localVarHeaderParams.put("Accept", localVarAccept);
		}

		final String[] localVarContentTypes = { "application/json" };
		final String localVarContentType = this.apiClient.selectHeaderContentType(localVarContentTypes);
		localVarHeaderParams.put("Content-Type", localVarContentType);

		if (progressListener != null) {
			this.apiClient.setHttpClient(
					this.apiClient.getHttpClient().newBuilder().addNetworkInterceptor(new okhttp3.Interceptor() {
						@Override
						public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
							final okhttp3.Response originalResponse = chain.proceed(chain.request());
							return originalResponse.newBuilder()
									.body(new ProgressResponseBody(originalResponse.body(), progressListener)).build();
						}
					}).build());
		}

		final String[] localVarAuthNames = new String[] { "HttpBasicAuth" };
		return this.apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams,
				localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
	}

	@SuppressWarnings("rawtypes")
	private okhttp3.Call queriesNamePutValidateBeforeCall(String name, Query query,
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

		// verify the required parameter 'name' is set
		if (name == null) {
			throw new ApiException("Missing the required parameter 'name' when calling queriesNamePut(Async)");
		}

		// verify the required parameter 'query' is set
		if (query == null) {
			throw new ApiException("Missing the required parameter 'query' when calling queriesNamePut(Async)");
		}

		final okhttp3.Call call = queriesNamePutCall(name, query, progressListener, progressRequestListener);
		return call;

	}

	/**
	 * Updates the query with the given name. With this operation you can update the
	 * state of the query (e.g. to start or stop a query). Updating the query text
	 * is not allowed. Remove this query and add a new one instead.
	 *
	 * @param name  The name of the query. (required)
	 * @param query (required)
	 * @return Query
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 *                      deserialize the response body
	 */
	public Query queriesNamePut(String name, Query query) throws ApiException {
		final ApiResponse<Query> resp = queriesNamePutWithHttpInfo(name, query);
		return resp.getData();
	}

	/**
	 * Updates the query with the given name. With this operation you can update the
	 * state of the query (e.g. to start or stop a query). Updating the query text
	 * is not allowed. Remove this query and add a new one instead.
	 *
	 * @param name  The name of the query. (required)
	 * @param query (required)
	 * @return ApiResponse&lt;Query&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 *                      deserialize the response body
	 */
	public ApiResponse<Query> queriesNamePutWithHttpInfo(String name, Query query) throws ApiException {
		final okhttp3.Call call = queriesNamePutValidateBeforeCall(name, query, null, null);
		final Type localVarReturnType = new TypeToken<Query>() {
		}.getType();
		return this.apiClient.execute(call, localVarReturnType);
	}

	/**
	 * Updates the query with the given name. (asynchronously) With this operation
	 * you can update the state of the query (e.g. to start or stop a query).
	 * Updating the query text is not allowed. Remove this query and add a new one
	 * instead.
	 *
	 * @param name     The name of the query. (required)
	 * @param query    (required)
	 * @param callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the
	 *                      request body object
	 */
	public okhttp3.Call queriesNamePutAsync(String name, Query query, final ApiCallback<Query> callback)
			throws ApiException {

		ProgressResponseBody.ProgressListener progressListener = null;
		ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

		if (callback != null) {
			progressListener = new ProgressResponseBody.ProgressListener() {
				@Override
				public void update(long bytesRead, long contentLength, boolean done) {
					callback.onDownloadProgress(bytesRead, contentLength, done);
				}
			};

			progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
				@Override
				public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
					callback.onUploadProgress(bytesWritten, contentLength, done);
				}
			};
		}

		final okhttp3.Call call = queriesNamePutValidateBeforeCall(name, query, progressListener,
				progressRequestListener);
		final Type localVarReturnType = new TypeToken<Query>() {
		}.getType();
		this.apiClient.executeAsync(call, localVarReturnType, callback);
		return call;
	}

	/**
	 * Build call for queriesPost
	 *
	 * @param query                   (required)
	 * @param progressListener        Progress listener
	 * @param progressRequestListener Progress request listener
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 */
	public okhttp3.Call queriesPostCall(Query query, final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
		final Object localVarPostBody = query;

		// create path and map variables
		final String localVarPath = "/queries";

		final List<Pair> localVarQueryParams = new ArrayList<Pair>();
		final List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
		final Map<String, String> localVarHeaderParams = new HashMap<String, String>();
		final Map<String, Object> localVarFormParams = new HashMap<String, Object>();
		final String[] localVarAccepts = { "application/json" };
		final String localVarAccept = this.apiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null) {
			localVarHeaderParams.put("Accept", localVarAccept);
		}

		final String[] localVarContentTypes = { "application/json" };
		final String localVarContentType = this.apiClient.selectHeaderContentType(localVarContentTypes);
		localVarHeaderParams.put("Content-Type", localVarContentType);

		if (progressListener != null) {
			this.apiClient.setHttpClient(
					this.apiClient.getHttpClient().newBuilder().addNetworkInterceptor(new okhttp3.Interceptor() {
						@Override
						public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
							final okhttp3.Response originalResponse = chain.proceed(chain.request());
							return originalResponse.newBuilder()
									.body(new ProgressResponseBody(originalResponse.body(), progressListener)).build();
						}
					}).build());
		}

		final String[] localVarAuthNames = new String[] { "HttpBasicAuth" };
		return this.apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams,
				localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
	}

	@SuppressWarnings("rawtypes")
	private okhttp3.Call queriesPostValidateBeforeCall(Query query,
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

		// verify the required parameter 'query' is set
		if (query == null) {
			throw new ApiException("Missing the required parameter 'query' when calling queriesPost(Async)");
		}

		final okhttp3.Call call = queriesPostCall(query, progressListener, progressRequestListener);
		return call;

	}

	/**
	 * Installs a new query.
	 *
	 * @param query (required)
	 * @return Query
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 *                      deserialize the response body
	 */
	public Query queriesPost(Query query) throws ApiException {
		final ApiResponse<Query> resp = queriesPostWithHttpInfo(query);
		return resp.getData();
	}

	/**
	 * Installs a new query.
	 *
	 * @param query (required)
	 * @return ApiResponse&lt;Query&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 *                      deserialize the response body
	 */
	public ApiResponse<Query> queriesPostWithHttpInfo(Query query) throws ApiException {
		final okhttp3.Call call = queriesPostValidateBeforeCall(query, null, null);
		final Type localVarReturnType = new TypeToken<Query>() {
		}.getType();
		return this.apiClient.execute(call, localVarReturnType);
	}

	/**
	 * Installs a new query. (asynchronously)
	 *
	 * @param query    (required)
	 * @param callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the
	 *                      request body object
	 */
	public okhttp3.Call queriesPostAsync(Query query, final ApiCallback<Query> callback) throws ApiException {

		ProgressResponseBody.ProgressListener progressListener = null;
		ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

		if (callback != null) {
			progressListener = new ProgressResponseBody.ProgressListener() {
				@Override
				public void update(long bytesRead, long contentLength, boolean done) {
					callback.onDownloadProgress(bytesRead, contentLength, done);
				}
			};

			progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
				@Override
				public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
					callback.onUploadProgress(bytesWritten, contentLength, done);
				}
			};
		}

		final okhttp3.Call call = queriesPostValidateBeforeCall(query, progressListener, progressRequestListener);
		final Type localVarReturnType = new TypeToken<Query>() {
		}.getType();
		this.apiClient.executeAsync(call, localVarReturnType, callback);
		return call;
	}

	/**
	 * Build call for servicesBundlesGet
	 *
	 * @param filter                  If filter is given only bundles whose symbolic
	 *                                name contains the given filter string are
	 *                                returned. (optional)
	 * @param progressListener        Progress listener
	 * @param progressRequestListener Progress request listener
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 */
	public okhttp3.Call servicesBundlesGetCall(String filter,
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
		final Object localVarPostBody = new Object();

		// create path and map variables
		final String localVarPath = "/services/bundles";

		final List<Pair> localVarQueryParams = new ArrayList<Pair>();
		final List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
		if (filter != null) {
			localVarQueryParams.addAll(this.apiClient.parameterToPair("filter", filter));
		}

		final Map<String, String> localVarHeaderParams = new HashMap<String, String>();
		final Map<String, Object> localVarFormParams = new HashMap<String, Object>();
		final String[] localVarAccepts = { "application/json" };
		final String localVarAccept = this.apiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null) {
			localVarHeaderParams.put("Accept", localVarAccept);
		}

		final String[] localVarContentTypes = {

		};
		final String localVarContentType = this.apiClient.selectHeaderContentType(localVarContentTypes);
		localVarHeaderParams.put("Content-Type", localVarContentType);

		if (progressListener != null) {
			this.apiClient.setHttpClient(
					this.apiClient.getHttpClient().newBuilder().addNetworkInterceptor(new okhttp3.Interceptor() {
						@Override
						public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
							final okhttp3.Response originalResponse = chain.proceed(chain.request());
							return originalResponse.newBuilder()
									.body(new ProgressResponseBody(originalResponse.body(), progressListener)).build();
						}
					}).build());
		}

		final String[] localVarAuthNames = new String[] { "HttpBasicAuth" };
		return this.apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams,
				localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
	}

	@SuppressWarnings("rawtypes")
	private okhttp3.Call servicesBundlesGetValidateBeforeCall(String filter,
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

		final okhttp3.Call call = servicesBundlesGetCall(filter, progressListener, progressRequestListener);
		return call;

	}

	/**
	 * Returns a list of installed OSGi bundles.
	 *
	 * @param filter If filter is given only bundles whose symbolic name contains
	 *               the given filter string are returned. (optional)
	 * @return List&lt;BundleInfo&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 *                      deserialize the response body
	 */
	public List<BundleInfo> servicesBundlesGet(String filter) throws ApiException {
		final ApiResponse<List<BundleInfo>> resp = servicesBundlesGetWithHttpInfo(filter);
		return resp.getData();
	}

	/**
	 * Returns a list of installed OSGi bundles.
	 *
	 * @param filter If filter is given only bundles whose symbolic name contains
	 *               the given filter string are returned. (optional)
	 * @return ApiResponse&lt;List&lt;BundleInfo&gt;&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 *                      deserialize the response body
	 */
	public ApiResponse<List<BundleInfo>> servicesBundlesGetWithHttpInfo(String filter) throws ApiException {
		final okhttp3.Call call = servicesBundlesGetValidateBeforeCall(filter, null, null);
		final Type localVarReturnType = new TypeToken<List<BundleInfo>>() {
		}.getType();
		return this.apiClient.execute(call, localVarReturnType);
	}

	/**
	 * Returns a list of installed OSGi bundles. (asynchronously)
	 *
	 * @param filter   If filter is given only bundles whose symbolic name contains
	 *                 the given filter string are returned. (optional)
	 * @param callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the
	 *                      request body object
	 */
	public okhttp3.Call servicesBundlesGetAsync(String filter, final ApiCallback<List<BundleInfo>> callback)
			throws ApiException {

		ProgressResponseBody.ProgressListener progressListener = null;
		ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

		if (callback != null) {
			progressListener = new ProgressResponseBody.ProgressListener() {
				@Override
				public void update(long bytesRead, long contentLength, boolean done) {
					callback.onDownloadProgress(bytesRead, contentLength, done);
				}
			};

			progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
				@Override
				public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
					callback.onUploadProgress(bytesWritten, contentLength, done);
				}
			};
		}

		final okhttp3.Call call = servicesBundlesGetValidateBeforeCall(filter, progressListener,
				progressRequestListener);
		final Type localVarReturnType = new TypeToken<List<BundleInfo>>() {
		}.getType();
		this.apiClient.executeAsync(call, localVarReturnType, callback);
		return call;
	}

	/**
	 * Build call for servicesLoginPost
	 *
	 * @param user                    (required)
	 * @param progressListener        Progress listener
	 * @param progressRequestListener Progress request listener
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 */
	public okhttp3.Call servicesLoginPostCall(User user, final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
		final Object localVarPostBody = user;

		// create path and map variables
		final String localVarPath = "/services/login";

		final List<Pair> localVarQueryParams = new ArrayList<Pair>();
		final List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
		final Map<String, String> localVarHeaderParams = new HashMap<String, String>();
		final Map<String, Object> localVarFormParams = new HashMap<String, Object>();
		final String[] localVarAccepts = { "application/json" };
		final String localVarAccept = this.apiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null) {
			localVarHeaderParams.put("Accept", localVarAccept);
		}

		final String[] localVarContentTypes = { "application/json" };
		final String localVarContentType = this.apiClient.selectHeaderContentType(localVarContentTypes);
		localVarHeaderParams.put("Content-Type", localVarContentType);

		if (progressListener != null) {
			this.apiClient.setHttpClient(
					this.apiClient.getHttpClient().newBuilder().addNetworkInterceptor(new okhttp3.Interceptor() {
						@Override
						public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
							final okhttp3.Response originalResponse = chain.proceed(chain.request());
							return originalResponse.newBuilder()
									.body(new ProgressResponseBody(originalResponse.body(), progressListener)).build();
						}
					}).build());
		}

		final String[] localVarAuthNames = new String[] { "HttpBasicAuth" };
		return this.apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams,
				localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
	}

	@SuppressWarnings("rawtypes")
	private okhttp3.Call servicesLoginPostValidateBeforeCall(User user,
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

		// verify the required parameter 'user' is set
		if (user == null) {
			throw new ApiException("Missing the required parameter 'user' when calling servicesLoginPost(Async)");
		}

		final okhttp3.Call call = servicesLoginPostCall(user, progressListener, progressRequestListener);
		return call;

	}

	/**
	 * Executes a login and returns a token.
	 *
	 * @param user (required)
	 * @return Token
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 *                      deserialize the response body
	 */
	public Token servicesLoginPost(User user) throws ApiException {
		final ApiResponse<Token> resp = servicesLoginPostWithHttpInfo(user);
		return resp.getData();
	}

	/**
	 * Executes a login and returns a token.
	 *
	 * @param user (required)
	 * @return ApiResponse&lt;Token&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 *                      deserialize the response body
	 */
	public ApiResponse<Token> servicesLoginPostWithHttpInfo(User user) throws ApiException {
		final okhttp3.Call call = servicesLoginPostValidateBeforeCall(user, null, null);
		final Type localVarReturnType = new TypeToken<Token>() {
		}.getType();
		return this.apiClient.execute(call, localVarReturnType);
	}

	/**
	 * Executes a login and returns a token. (asynchronously)
	 *
	 * @param user     (required)
	 * @param callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the
	 *                      request body object
	 */
	public okhttp3.Call servicesLoginPostAsync(User user, final ApiCallback<Token> callback) throws ApiException {

		ProgressResponseBody.ProgressListener progressListener = null;
		ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

		if (callback != null) {
			progressListener = new ProgressResponseBody.ProgressListener() {
				@Override
				public void update(long bytesRead, long contentLength, boolean done) {
					callback.onDownloadProgress(bytesRead, contentLength, done);
				}
			};

			progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
				@Override
				public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
					callback.onUploadProgress(bytesWritten, contentLength, done);
				}
			};
		}

		final okhttp3.Call call = servicesLoginPostValidateBeforeCall(user, progressListener, progressRequestListener);
		final Type localVarReturnType = new TypeToken<Token>() {
		}.getType();
		this.apiClient.executeAsync(call, localVarReturnType, callback);
		return call;
	}

	/**
	 * Build call for servicesOutputschemaPost
	 *
	 * @param query                   (required)
	 * @param port                    The port number of the output port of the root
	 *                                operator that should be used to determine the
	 *                                output schema. (optional, default to 0)
	 * @param progressListener        Progress listener
	 * @param progressRequestListener Progress request listener
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 */
	public okhttp3.Call servicesOutputschemaPostCall(Query query, Integer port,
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
		final Object localVarPostBody = query;

		// create path and map variables
		final String localVarPath = "/services/outputschema";

		final List<Pair> localVarQueryParams = new ArrayList<Pair>();
		final List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
		if (port != null) {
			localVarQueryParams.addAll(this.apiClient.parameterToPair("port", port));
		}

		final Map<String, String> localVarHeaderParams = new HashMap<String, String>();
		final Map<String, Object> localVarFormParams = new HashMap<String, Object>();
		final String[] localVarAccepts = { "application/json" };
		final String localVarAccept = this.apiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null) {
			localVarHeaderParams.put("Accept", localVarAccept);
		}

		final String[] localVarContentTypes = { "application/json" };
		final String localVarContentType = this.apiClient.selectHeaderContentType(localVarContentTypes);
		localVarHeaderParams.put("Content-Type", localVarContentType);

		if (progressListener != null) {
			this.apiClient.setHttpClient(
					this.apiClient.getHttpClient().newBuilder().addNetworkInterceptor(new okhttp3.Interceptor() {
						@Override
						public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
							final okhttp3.Response originalResponse = chain.proceed(chain.request());
							return originalResponse.newBuilder()
									.body(new ProgressResponseBody(originalResponse.body(), progressListener)).build();
						}
					}).build());
		}

		final String[] localVarAuthNames = new String[] { "HttpBasicAuth" };
		return this.apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams,
				localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
	}

	@SuppressWarnings("rawtypes")
	private okhttp3.Call servicesOutputschemaPostValidateBeforeCall(Query query, Integer port,
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

		// verify the required parameter 'query' is set
		if (query == null) {
			throw new ApiException(
					"Missing the required parameter 'query' when calling servicesOutputschemaPost(Async)");
		}

		final okhttp3.Call call = servicesOutputschemaPostCall(query, port, progressListener, progressRequestListener);
		return call;

	}

	/**
	 * Determines the output schema of the given query.
	 *
	 * @param query (required)
	 * @param port  The port number of the output port of the root operator that
	 *              should be used to determine the output schema. (optional,
	 *              default to 0)
	 * @return Schema
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 *                      deserialize the response body
	 */
	public Schema servicesOutputschemaPost(Query query, Integer port) throws ApiException {
		final ApiResponse<Schema> resp = servicesOutputschemaPostWithHttpInfo(query, port);
		return resp.getData();
	}

	/**
	 * Determines the output schema of the given query.
	 *
	 * @param query (required)
	 * @param port  The port number of the output port of the root operator that
	 *              should be used to determine the output schema. (optional,
	 *              default to 0)
	 * @return ApiResponse&lt;Schema&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 *                      deserialize the response body
	 */
	public ApiResponse<Schema> servicesOutputschemaPostWithHttpInfo(Query query, Integer port) throws ApiException {
		final okhttp3.Call call = servicesOutputschemaPostValidateBeforeCall(query, port, null, null);
		final Type localVarReturnType = new TypeToken<Schema>() {
		}.getType();
		return this.apiClient.execute(call, localVarReturnType);
	}

	/**
	 * Determines the output schema of the given query. (asynchronously)
	 *
	 * @param query    (required)
	 * @param port     The port number of the output port of the root operator that
	 *                 should be used to determine the output schema. (optional,
	 *                 default to 0)
	 * @param callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the
	 *                      request body object
	 */
	public okhttp3.Call servicesOutputschemaPostAsync(Query query, Integer port, final ApiCallback<Schema> callback)
			throws ApiException {

		ProgressResponseBody.ProgressListener progressListener = null;
		ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

		if (callback != null) {
			progressListener = new ProgressResponseBody.ProgressListener() {
				@Override
				public void update(long bytesRead, long contentLength, boolean done) {
					callback.onDownloadProgress(bytesRead, contentLength, done);
				}
			};

			progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
				@Override
				public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
					callback.onUploadProgress(bytesWritten, contentLength, done);
				}
			};
		}

		final okhttp3.Call call = servicesOutputschemaPostValidateBeforeCall(query, port, progressListener,
				progressRequestListener);
		final Type localVarReturnType = new TypeToken<Schema>() {
		}.getType();
		this.apiClient.executeAsync(call, localVarReturnType, callback);
		return call;
	}

	/**
	 * Build call for sinksGet
	 *
	 * @param progressListener        Progress listener
	 * @param progressRequestListener Progress request listener
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 */
	public okhttp3.Call sinksGetCall(final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
		final Object localVarPostBody = new Object();

		// create path and map variables
		final String localVarPath = "/sinks";

		final List<Pair> localVarQueryParams = new ArrayList<Pair>();
		final List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
		final Map<String, String> localVarHeaderParams = new HashMap<String, String>();
		final Map<String, Object> localVarFormParams = new HashMap<String, Object>();
		final String[] localVarAccepts = { "application/json" };
		final String localVarAccept = this.apiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null) {
			localVarHeaderParams.put("Accept", localVarAccept);
		}

		final String[] localVarContentTypes = {

		};
		final String localVarContentType = this.apiClient.selectHeaderContentType(localVarContentTypes);
		localVarHeaderParams.put("Content-Type", localVarContentType);

		if (progressListener != null) {
			this.apiClient.setHttpClient(
					this.apiClient.getHttpClient().newBuilder().addNetworkInterceptor(new okhttp3.Interceptor() {
						@Override
						public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
							final okhttp3.Response originalResponse = chain.proceed(chain.request());
							return originalResponse.newBuilder()
									.body(new ProgressResponseBody(originalResponse.body(), progressListener)).build();
						}
					}).build());
		}

		final String[] localVarAuthNames = new String[] { "HttpBasicAuth" };
		return this.apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams,
				localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
	}

	@SuppressWarnings("rawtypes")
	private okhttp3.Call sinksGetValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

		final okhttp3.Call call = sinksGetCall(progressListener, progressRequestListener);
		return call;

	}

	/**
	 * Returns a list of all available sinks.
	 *
	 * @return List&lt;Resource&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 *                      deserialize the response body
	 */
	public List<Resource> sinksGet() throws ApiException {
		final ApiResponse<List<Resource>> resp = sinksGetWithHttpInfo();
		return resp.getData();
	}

	/**
	 * Returns a list of all available sinks.
	 *
	 * @return ApiResponse&lt;List&lt;Resource&gt;&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 *                      deserialize the response body
	 */
	public ApiResponse<List<Resource>> sinksGetWithHttpInfo() throws ApiException {
		final okhttp3.Call call = sinksGetValidateBeforeCall(null, null);
		final Type localVarReturnType = new TypeToken<List<Resource>>() {
		}.getType();
		return this.apiClient.execute(call, localVarReturnType);
	}

	/**
	 * Returns a list of all available sinks. (asynchronously)
	 *
	 * @param callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the
	 *                      request body object
	 */
	public okhttp3.Call sinksGetAsync(final ApiCallback<List<Resource>> callback) throws ApiException {

		ProgressResponseBody.ProgressListener progressListener = null;
		ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

		if (callback != null) {
			progressListener = new ProgressResponseBody.ProgressListener() {
				@Override
				public void update(long bytesRead, long contentLength, boolean done) {
					callback.onDownloadProgress(bytesRead, contentLength, done);
				}
			};

			progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
				@Override
				public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
					callback.onUploadProgress(bytesWritten, contentLength, done);
				}
			};
		}

		final okhttp3.Call call = sinksGetValidateBeforeCall(progressListener, progressRequestListener);
		final Type localVarReturnType = new TypeToken<List<Resource>>() {
		}.getType();
		this.apiClient.executeAsync(call, localVarReturnType, callback);
		return call;
	}

	/**
	 * Build call for sinksNameDelete
	 *
	 * @param name                    The name of the sink. (required)
	 * @param progressListener        Progress listener
	 * @param progressRequestListener Progress request listener
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 */
	public okhttp3.Call sinksNameDeleteCall(String name, final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
		final Object localVarPostBody = new Object();

		// create path and map variables
		final String localVarPath = "/sinks/{name}".replaceAll("\\{" + "name" + "\\}",
				this.apiClient.escapeString(name.toString()));

		final List<Pair> localVarQueryParams = new ArrayList<Pair>();
		final List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
		final Map<String, String> localVarHeaderParams = new HashMap<String, String>();
		final Map<String, Object> localVarFormParams = new HashMap<String, Object>();
		final String[] localVarAccepts = {

		};
		final String localVarAccept = this.apiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null) {
			localVarHeaderParams.put("Accept", localVarAccept);
		}

		final String[] localVarContentTypes = {

		};
		final String localVarContentType = this.apiClient.selectHeaderContentType(localVarContentTypes);
		localVarHeaderParams.put("Content-Type", localVarContentType);

		if (progressListener != null) {
			this.apiClient.setHttpClient(
					this.apiClient.getHttpClient().newBuilder().addNetworkInterceptor(new okhttp3.Interceptor() {
						@Override
						public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
							final okhttp3.Response originalResponse = chain.proceed(chain.request());
							return originalResponse.newBuilder()
									.body(new ProgressResponseBody(originalResponse.body(), progressListener)).build();
						}
					}).build());
		}

		final String[] localVarAuthNames = new String[] { "HttpBasicAuth" };
		return this.apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams,
				localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
	}

	@SuppressWarnings("rawtypes")
	private okhttp3.Call sinksNameDeleteValidateBeforeCall(String name,
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

		// verify the required parameter 'name' is set
		if (name == null) {
			throw new ApiException("Missing the required parameter 'name' when calling sinksNameDelete(Async)");
		}

		final okhttp3.Call call = sinksNameDeleteCall(name, progressListener, progressRequestListener);
		return call;

	}

	/**
	 * Removes the sink with the given name.
	 *
	 * @param name The name of the sink. (required)
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 *                      deserialize the response body
	 */
	public void sinksNameDelete(String name) throws ApiException {
		sinksNameDeleteWithHttpInfo(name);
	}

	/**
	 * Removes the sink with the given name.
	 *
	 * @param name The name of the sink. (required)
	 * @return ApiResponse&lt;Void&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 *                      deserialize the response body
	 */
	public ApiResponse<Void> sinksNameDeleteWithHttpInfo(String name) throws ApiException {
		final okhttp3.Call call = sinksNameDeleteValidateBeforeCall(name, null, null);
		return this.apiClient.execute(call);
	}

	/**
	 * Removes the sink with the given name. (asynchronously)
	 *
	 * @param name     The name of the sink. (required)
	 * @param callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the
	 *                      request body object
	 */
	public okhttp3.Call sinksNameDeleteAsync(String name, final ApiCallback<Void> callback) throws ApiException {

		ProgressResponseBody.ProgressListener progressListener = null;
		ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

		if (callback != null) {
			progressListener = new ProgressResponseBody.ProgressListener() {
				@Override
				public void update(long bytesRead, long contentLength, boolean done) {
					callback.onDownloadProgress(bytesRead, contentLength, done);
				}
			};

			progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
				@Override
				public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
					callback.onUploadProgress(bytesWritten, contentLength, done);
				}
			};
		}

		final okhttp3.Call call = sinksNameDeleteValidateBeforeCall(name, progressListener, progressRequestListener);
		this.apiClient.executeAsync(call, callback);
		return call;
	}

	/**
	 * Build call for sinksNameGet
	 *
	 * @param name                    The name of the sink. (required)
	 * @param progressListener        Progress listener
	 * @param progressRequestListener Progress request listener
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 */
	public okhttp3.Call sinksNameGetCall(String name, final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
		final Object localVarPostBody = new Object();

		// create path and map variables
		final String localVarPath = "/sinks/{name}".replaceAll("\\{" + "name" + "\\}",
				this.apiClient.escapeString(name.toString()));

		final List<Pair> localVarQueryParams = new ArrayList<Pair>();
		final List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
		final Map<String, String> localVarHeaderParams = new HashMap<String, String>();
		final Map<String, Object> localVarFormParams = new HashMap<String, Object>();
		final String[] localVarAccepts = { "application/json" };
		final String localVarAccept = this.apiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null) {
			localVarHeaderParams.put("Accept", localVarAccept);
		}

		final String[] localVarContentTypes = {

		};
		final String localVarContentType = this.apiClient.selectHeaderContentType(localVarContentTypes);
		localVarHeaderParams.put("Content-Type", localVarContentType);

		if (progressListener != null) {
			this.apiClient.setHttpClient(
					this.apiClient.getHttpClient().newBuilder().addNetworkInterceptor(new okhttp3.Interceptor() {
						@Override
						public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
							final okhttp3.Response originalResponse = chain.proceed(chain.request());
							return originalResponse.newBuilder()
									.body(new ProgressResponseBody(originalResponse.body(), progressListener)).build();
						}
					}).build());
		}

		final String[] localVarAuthNames = new String[] { "HttpBasicAuth" };
		return this.apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams,
				localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
	}

	@SuppressWarnings("rawtypes")
	private okhttp3.Call sinksNameGetValidateBeforeCall(String name,
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

		// verify the required parameter 'name' is set
		if (name == null) {
			throw new ApiException("Missing the required parameter 'name' when calling sinksNameGet(Async)");
		}

		final okhttp3.Call call = sinksNameGetCall(name, progressListener, progressRequestListener);
		return call;

	}

	/**
	 * Returns a sink by name.
	 *
	 * @param name The name of the sink. (required)
	 * @return Resource
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 *                      deserialize the response body
	 */
	public Resource sinksNameGet(String name) throws ApiException {
		final ApiResponse<Resource> resp = sinksNameGetWithHttpInfo(name);
		return resp.getData();
	}

	/**
	 * Returns a sink by name.
	 *
	 * @param name The name of the sink. (required)
	 * @return ApiResponse&lt;Resource&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 *                      deserialize the response body
	 */
	public ApiResponse<Resource> sinksNameGetWithHttpInfo(String name) throws ApiException {
		final okhttp3.Call call = sinksNameGetValidateBeforeCall(name, null, null);
		final Type localVarReturnType = new TypeToken<Resource>() {
		}.getType();
		return this.apiClient.execute(call, localVarReturnType);
	}

	/**
	 * Returns a sink by name. (asynchronously)
	 *
	 * @param name     The name of the sink. (required)
	 * @param callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the
	 *                      request body object
	 */
	public okhttp3.Call sinksNameGetAsync(String name, final ApiCallback<Resource> callback) throws ApiException {

		ProgressResponseBody.ProgressListener progressListener = null;
		ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

		if (callback != null) {
			progressListener = new ProgressResponseBody.ProgressListener() {
				@Override
				public void update(long bytesRead, long contentLength, boolean done) {
					callback.onDownloadProgress(bytesRead, contentLength, done);
				}
			};

			progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
				@Override
				public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
					callback.onUploadProgress(bytesWritten, contentLength, done);
				}
			};
		}

		final okhttp3.Call call = sinksNameGetValidateBeforeCall(name, progressListener, progressRequestListener);
		final Type localVarReturnType = new TypeToken<Resource>() {
		}.getType();
		this.apiClient.executeAsync(call, localVarReturnType, callback);
		return call;
	}

	/**
	 * Build call for usersGet
	 *
	 * @param progressListener        Progress listener
	 * @param progressRequestListener Progress request listener
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 */
	public okhttp3.Call usersGetCall(final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
		final Object localVarPostBody = new Object();

		// create path and map variables
		final String localVarPath = "/users";

		final List<Pair> localVarQueryParams = new ArrayList<Pair>();
		final List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
		final Map<String, String> localVarHeaderParams = new HashMap<String, String>();
		final Map<String, Object> localVarFormParams = new HashMap<String, Object>();
		final String[] localVarAccepts = { "application/json" };
		final String localVarAccept = this.apiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null) {
			localVarHeaderParams.put("Accept", localVarAccept);
		}

		final String[] localVarContentTypes = {

		};
		final String localVarContentType = this.apiClient.selectHeaderContentType(localVarContentTypes);
		localVarHeaderParams.put("Content-Type", localVarContentType);

		if (progressListener != null) {
			this.apiClient.setHttpClient(
					this.apiClient.getHttpClient().newBuilder().addNetworkInterceptor(new okhttp3.Interceptor() {
						@Override
						public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
							final okhttp3.Response originalResponse = chain.proceed(chain.request());
							return originalResponse.newBuilder()
									.body(new ProgressResponseBody(originalResponse.body(), progressListener)).build();
						}
					}).build());
		}

		final String[] localVarAuthNames = new String[] { "HttpBasicAuth" };
		return this.apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams,
				localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
	}

	@SuppressWarnings("rawtypes")
	private okhttp3.Call usersGetValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

		final okhttp3.Call call = usersGetCall(progressListener, progressRequestListener);
		return call;

	}

	/**
	 * Returns a list of all users.
	 *
	 * @return List&lt;User&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 *                      deserialize the response body
	 */
	public List<User> usersGet() throws ApiException {
		final ApiResponse<List<User>> resp = usersGetWithHttpInfo();
		return resp.getData();
	}

	/**
	 * Returns a list of all users.
	 *
	 * @return ApiResponse&lt;List&lt;User&gt;&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 *                      deserialize the response body
	 */
	public ApiResponse<List<User>> usersGetWithHttpInfo() throws ApiException {
		final okhttp3.Call call = usersGetValidateBeforeCall(null, null);
		final Type localVarReturnType = new TypeToken<List<User>>() {
		}.getType();
		return this.apiClient.execute(call, localVarReturnType);
	}

	/**
	 * Returns a list of all users. (asynchronously)
	 *
	 * @param callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the
	 *                      request body object
	 */
	public okhttp3.Call usersGetAsync(final ApiCallback<List<User>> callback) throws ApiException {

		ProgressResponseBody.ProgressListener progressListener = null;
		ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

		if (callback != null) {
			progressListener = new ProgressResponseBody.ProgressListener() {
				@Override
				public void update(long bytesRead, long contentLength, boolean done) {
					callback.onDownloadProgress(bytesRead, contentLength, done);
				}
			};

			progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
				@Override
				public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
					callback.onUploadProgress(bytesWritten, contentLength, done);
				}
			};
		}

		final okhttp3.Call call = usersGetValidateBeforeCall(progressListener, progressRequestListener);
		final Type localVarReturnType = new TypeToken<List<User>>() {
		}.getType();
		this.apiClient.executeAsync(call, localVarReturnType, callback);
		return call;
	}

	/**
	 * Build call for usersNameGet
	 *
	 * @param name                    The username. (required)
	 * @param progressListener        Progress listener
	 * @param progressRequestListener Progress request listener
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 */
	public okhttp3.Call usersNameGetCall(String name, final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
		final Object localVarPostBody = new Object();

		// create path and map variables
		final String localVarPath = "/users/{name}".replaceAll("\\{" + "name" + "\\}",
				this.apiClient.escapeString(name.toString()));

		final List<Pair> localVarQueryParams = new ArrayList<Pair>();
		final List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
		final Map<String, String> localVarHeaderParams = new HashMap<String, String>();
		final Map<String, Object> localVarFormParams = new HashMap<String, Object>();
		final String[] localVarAccepts = { "application/json" };
		final String localVarAccept = this.apiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null) {
			localVarHeaderParams.put("Accept", localVarAccept);
		}

		final String[] localVarContentTypes = {

		};
		final String localVarContentType = this.apiClient.selectHeaderContentType(localVarContentTypes);
		localVarHeaderParams.put("Content-Type", localVarContentType);

		if (progressListener != null) {
			this.apiClient.setHttpClient(
					this.apiClient.getHttpClient().newBuilder().addNetworkInterceptor(new okhttp3.Interceptor() {
						@Override
						public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
							final okhttp3.Response originalResponse = chain.proceed(chain.request());
							return originalResponse.newBuilder()
									.body(new ProgressResponseBody(originalResponse.body(), progressListener)).build();
						}
					}).build());
		}

		final String[] localVarAuthNames = new String[] { "HttpBasicAuth" };
		return this.apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams,
				localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
	}

	@SuppressWarnings("rawtypes")
	private okhttp3.Call usersNameGetValidateBeforeCall(String name,
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

		// verify the required parameter 'name' is set
		if (name == null) {
			throw new ApiException("Missing the required parameter 'name' when calling usersNameGet(Async)");
		}

		final okhttp3.Call call = usersNameGetCall(name, progressListener, progressRequestListener);
		return call;

	}

	/**
	 * Returns a user by username.
	 *
	 * @param name The username. (required)
	 * @return User
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 *                      deserialize the response body
	 */
	public User usersNameGet(String name) throws ApiException {
		final ApiResponse<User> resp = usersNameGetWithHttpInfo(name);
		return resp.getData();
	}

	/**
	 * Returns a user by username.
	 *
	 * @param name The username. (required)
	 * @return ApiResponse&lt;User&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 *                      deserialize the response body
	 */
	public ApiResponse<User> usersNameGetWithHttpInfo(String name) throws ApiException {
		final okhttp3.Call call = usersNameGetValidateBeforeCall(name, null, null);
		final Type localVarReturnType = new TypeToken<User>() {
		}.getType();
		return this.apiClient.execute(call, localVarReturnType);
	}

	/**
	 * Returns a user by username. (asynchronously)
	 *
	 * @param name     The username. (required)
	 * @param callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the
	 *                      request body object
	 */
	public okhttp3.Call usersNameGetAsync(String name, final ApiCallback<User> callback) throws ApiException {

		ProgressResponseBody.ProgressListener progressListener = null;
		ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

		if (callback != null) {
			progressListener = new ProgressResponseBody.ProgressListener() {
				@Override
				public void update(long bytesRead, long contentLength, boolean done) {
					callback.onDownloadProgress(bytesRead, contentLength, done);
				}
			};

			progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
				@Override
				public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
					callback.onUploadProgress(bytesWritten, contentLength, done);
				}
			};
		}

		final okhttp3.Call call = usersNameGetValidateBeforeCall(name, progressListener, progressRequestListener);
		final Type localVarReturnType = new TypeToken<User>() {
		}.getType();
		this.apiClient.executeAsync(call, localVarReturnType, callback);
		return call;
	}

	/**
	 * Build call for usersNamePatch
	 *
	 * @param name                    The username. (required)
	 * @param user                    (required)
	 * @param progressListener        Progress listener
	 * @param progressRequestListener Progress request listener
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 */
	public okhttp3.Call usersNamePatchCall(String name, User user,
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
		final Object localVarPostBody = user;

		// create path and map variables
		final String localVarPath = "/users/{name}".replaceAll("\\{" + "name" + "\\}",
				this.apiClient.escapeString(name.toString()));

		final List<Pair> localVarQueryParams = new ArrayList<Pair>();
		final List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
		final Map<String, String> localVarHeaderParams = new HashMap<String, String>();
		final Map<String, Object> localVarFormParams = new HashMap<String, Object>();
		final String[] localVarAccepts = { "application/json" };
		final String localVarAccept = this.apiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null) {
			localVarHeaderParams.put("Accept", localVarAccept);
		}

		final String[] localVarContentTypes = { "application/json" };
		final String localVarContentType = this.apiClient.selectHeaderContentType(localVarContentTypes);
		localVarHeaderParams.put("Content-Type", localVarContentType);

		if (progressListener != null) {
			this.apiClient.setHttpClient(
					this.apiClient.getHttpClient().newBuilder().addNetworkInterceptor(new okhttp3.Interceptor() {
						@Override
						public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
							final okhttp3.Response originalResponse = chain.proceed(chain.request());
							return originalResponse.newBuilder()
									.body(new ProgressResponseBody(originalResponse.body(), progressListener)).build();
						}
					}).build());
		}

		final String[] localVarAuthNames = new String[] { "HttpBasicAuth" };
		return this.apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams,
				localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
	}

	@SuppressWarnings("rawtypes")
	private okhttp3.Call usersNamePatchValidateBeforeCall(String name, User user,
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

		// verify the required parameter 'name' is set
		if (name == null) {
			throw new ApiException("Missing the required parameter 'name' when calling usersNamePatch(Async)");
		}

		// verify the required parameter 'user' is set
		if (user == null) {
			throw new ApiException("Missing the required parameter 'user' when calling usersNamePatch(Async)");
		}

		final okhttp3.Call call = usersNamePatchCall(name, user, progressListener, progressRequestListener);
		return call;

	}

	/**
	 * Updates the user with the given username. This action allows to send a
	 * partial user object.
	 *
	 * @param name The username. (required)
	 * @param user (required)
	 * @return User
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 *                      deserialize the response body
	 */
	public User usersNamePatch(String name, User user) throws ApiException {
		final ApiResponse<User> resp = usersNamePatchWithHttpInfo(name, user);
		return resp.getData();
	}

	/**
	 * Updates the user with the given username. This action allows to send a
	 * partial user object.
	 *
	 * @param name The username. (required)
	 * @param user (required)
	 * @return ApiResponse&lt;User&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 *                      deserialize the response body
	 */
	public ApiResponse<User> usersNamePatchWithHttpInfo(String name, User user) throws ApiException {
		final okhttp3.Call call = usersNamePatchValidateBeforeCall(name, user, null, null);
		final Type localVarReturnType = new TypeToken<User>() {
		}.getType();
		return this.apiClient.execute(call, localVarReturnType);
	}

	/**
	 * Updates the user with the given username. This action allows to send a
	 * partial user object. (asynchronously)
	 *
	 * @param name     The username. (required)
	 * @param user     (required)
	 * @param callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the
	 *                      request body object
	 */
	public okhttp3.Call usersNamePatchAsync(String name, User user, final ApiCallback<User> callback)
			throws ApiException {

		ProgressResponseBody.ProgressListener progressListener = null;
		ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

		if (callback != null) {
			progressListener = new ProgressResponseBody.ProgressListener() {
				@Override
				public void update(long bytesRead, long contentLength, boolean done) {
					callback.onDownloadProgress(bytesRead, contentLength, done);
				}
			};

			progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
				@Override
				public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
					callback.onUploadProgress(bytesWritten, contentLength, done);
				}
			};
		}

		final okhttp3.Call call = usersNamePatchValidateBeforeCall(name, user, progressListener,
				progressRequestListener);
		final Type localVarReturnType = new TypeToken<User>() {
		}.getType();
		this.apiClient.executeAsync(call, localVarReturnType, callback);
		return call;
	}

	/**
	 * Build call for usersNamePut
	 *
	 * @param name                    The username. (required)
	 * @param user                    (required)
	 * @param progressListener        Progress listener
	 * @param progressRequestListener Progress request listener
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 */
	public okhttp3.Call usersNamePutCall(String name, User user,
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
		final Object localVarPostBody = user;

		// create path and map variables
		final String localVarPath = "/users/{name}".replaceAll("\\{" + "name" + "\\}",
				this.apiClient.escapeString(name.toString()));

		final List<Pair> localVarQueryParams = new ArrayList<Pair>();
		final List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
		final Map<String, String> localVarHeaderParams = new HashMap<String, String>();
		final Map<String, Object> localVarFormParams = new HashMap<String, Object>();
		final String[] localVarAccepts = { "application/json" };
		final String localVarAccept = this.apiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null) {
			localVarHeaderParams.put("Accept", localVarAccept);
		}

		final String[] localVarContentTypes = { "application/json" };
		final String localVarContentType = this.apiClient.selectHeaderContentType(localVarContentTypes);
		localVarHeaderParams.put("Content-Type", localVarContentType);

		if (progressListener != null) {
			this.apiClient.setHttpClient(
					this.apiClient.getHttpClient().newBuilder().addNetworkInterceptor(new okhttp3.Interceptor() {
						@Override
						public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
							final okhttp3.Response originalResponse = chain.proceed(chain.request());
							return originalResponse.newBuilder()
									.body(new ProgressResponseBody(originalResponse.body(), progressListener)).build();
						}
					}).build());
		}

		final String[] localVarAuthNames = new String[] { "HttpBasicAuth" };
		return this.apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams,
				localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
	}

	@SuppressWarnings("rawtypes")
	private okhttp3.Call usersNamePutValidateBeforeCall(String name, User user,
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

		// verify the required parameter 'name' is set
		if (name == null) {
			throw new ApiException("Missing the required parameter 'name' when calling usersNamePut(Async)");
		}

		// verify the required parameter 'user' is set
		if (user == null) {
			throw new ApiException("Missing the required parameter 'user' when calling usersNamePut(Async)");
		}

		final okhttp3.Call call = usersNamePutCall(name, user, progressListener, progressRequestListener);
		return call;

	}

	/**
	 * Updates the user with the given username. This actions needs a complete user
	 * object.
	 *
	 * @param name The username. (required)
	 * @param user (required)
	 * @return User
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 *                      deserialize the response body
	 */
	public User usersNamePut(String name, User user) throws ApiException {
		final ApiResponse<User> resp = usersNamePutWithHttpInfo(name, user);
		return resp.getData();
	}

	/**
	 * Updates the user with the given username. This actions needs a complete user
	 * object.
	 *
	 * @param name The username. (required)
	 * @param user (required)
	 * @return ApiResponse&lt;User&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 *                      deserialize the response body
	 */
	public ApiResponse<User> usersNamePutWithHttpInfo(String name, User user) throws ApiException {
		final okhttp3.Call call = usersNamePutValidateBeforeCall(name, user, null, null);
		final Type localVarReturnType = new TypeToken<User>() {
		}.getType();
		return this.apiClient.execute(call, localVarReturnType);
	}

	/**
	 * Updates the user with the given username. This actions needs a complete user
	 * object. (asynchronously)
	 *
	 * @param name     The username. (required)
	 * @param user     (required)
	 * @param callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the
	 *                      request body object
	 */
	public okhttp3.Call usersNamePutAsync(String name, User user, final ApiCallback<User> callback)
			throws ApiException {

		ProgressResponseBody.ProgressListener progressListener = null;
		ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

		if (callback != null) {
			progressListener = new ProgressResponseBody.ProgressListener() {
				@Override
				public void update(long bytesRead, long contentLength, boolean done) {
					callback.onDownloadProgress(bytesRead, contentLength, done);
				}
			};

			progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
				@Override
				public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
					callback.onUploadProgress(bytesWritten, contentLength, done);
				}
			};
		}

		final okhttp3.Call call = usersNamePutValidateBeforeCall(name, user, progressListener, progressRequestListener);
		final Type localVarReturnType = new TypeToken<User>() {
		}.getType();
		this.apiClient.executeAsync(call, localVarReturnType, callback);
		return call;
	}

	/**
	 * Build call for usersPost
	 *
	 * @param user                    (required)
	 * @param progressListener        Progress listener
	 * @param progressRequestListener Progress request listener
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 */
	public okhttp3.Call usersPostCall(User user, final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
		final Object localVarPostBody = user;

		// create path and map variables
		final String localVarPath = "/users";

		final List<Pair> localVarQueryParams = new ArrayList<Pair>();
		final List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
		final Map<String, String> localVarHeaderParams = new HashMap<String, String>();
		final Map<String, Object> localVarFormParams = new HashMap<String, Object>();
		final String[] localVarAccepts = { "application/json" };
		final String localVarAccept = this.apiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null) {
			localVarHeaderParams.put("Accept", localVarAccept);
		}

		final String[] localVarContentTypes = { "application/json" };
		final String localVarContentType = this.apiClient.selectHeaderContentType(localVarContentTypes);
		localVarHeaderParams.put("Content-Type", localVarContentType);

		if (progressListener != null) {
			this.apiClient.setHttpClient(
					this.apiClient.getHttpClient().newBuilder().addNetworkInterceptor(new okhttp3.Interceptor() {
						@Override
						public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
							final okhttp3.Response originalResponse = chain.proceed(chain.request());
							return originalResponse.newBuilder()
									.body(new ProgressResponseBody(originalResponse.body(), progressListener)).build();
						}
					}).build());
		}

		final String[] localVarAuthNames = new String[] { "HttpBasicAuth" };
		return this.apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams,
				localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
	}

	@SuppressWarnings("rawtypes")
	private okhttp3.Call usersPostValidateBeforeCall(User user,
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

		// verify the required parameter 'user' is set
		if (user == null) {
			throw new ApiException("Missing the required parameter 'user' when calling usersPost(Async)");
		}

		final okhttp3.Call call = usersPostCall(user, progressListener, progressRequestListener);
		return call;

	}

	/**
	 * Creates a new user.
	 *
	 * @param user (required)
	 * @return User
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 *                      deserialize the response body
	 */
	public User usersPost(User user) throws ApiException {
		final ApiResponse<User> resp = usersPostWithHttpInfo(user);
		return resp.getData();
	}

	/**
	 * Creates a new user.
	 *
	 * @param user (required)
	 * @return ApiResponse&lt;User&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 *                      deserialize the response body
	 */
	public ApiResponse<User> usersPostWithHttpInfo(User user) throws ApiException {
		final okhttp3.Call call = usersPostValidateBeforeCall(user, null, null);
		final Type localVarReturnType = new TypeToken<User>() {
		}.getType();
		return this.apiClient.execute(call, localVarReturnType);
	}

	/**
	 * Creates a new user. (asynchronously)
	 *
	 * @param user     (required)
	 * @param callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the
	 *                      request body object
	 */
	public okhttp3.Call usersPostAsync(User user, final ApiCallback<User> callback) throws ApiException {

		ProgressResponseBody.ProgressListener progressListener = null;
		ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

		if (callback != null) {
			progressListener = new ProgressResponseBody.ProgressListener() {
				@Override
				public void update(long bytesRead, long contentLength, boolean done) {
					callback.onDownloadProgress(bytesRead, contentLength, done);
				}
			};

			progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
				@Override
				public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
					callback.onUploadProgress(bytesWritten, contentLength, done);
				}
			};
		}

		final okhttp3.Call call = usersPostValidateBeforeCall(user, progressListener, progressRequestListener);
		final Type localVarReturnType = new TypeToken<User>() {
		}.getType();
		this.apiClient.executeAsync(call, localVarReturnType, callback);
		return call;
	}
}
