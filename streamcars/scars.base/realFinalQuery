#DEFINE brokerSourceName streamCarsBroker // QuellenName
#DEFINE brokerListName   streamCarsBroker.scan:cars // Attributname der Liste der Autos in der Brokerquelle

#DEFINE brokerSourceName2 streamCarsBroker2 // QuellenName
#DEFINE brokerListName2   streamCarsBroker2.scan:cars // Attributname der Liste der Autos in der Brokerquelle

#DEFINE sensorSource    ACCESS(radarSensor) // Quellenoperator(!) des Sensors
#DEFINE sensorListName  radarSensor.scan:cars // Attributname der Liste der Autos in der Sensorquelle

#DEFINE assoScanned     association.scan:scannedObjects
#DEFINE assoPedicted    association.scan:predictedObjects
#DEFINE assoSource      selectionSrc
#DEFINE assoSource0     ASSOCIATION-SRC(selectionSrc, 0)
#DEFINE assoSource2     selectionSrc2
#DEFINE assoAlgo1       MAHA // Welcher Algorithmus zur Assoziation wird verwendet?
#DEFINE assoAlgo2       MULTIDISTANCE // Welcher Algorithmus zur Assoziation wird verwendet?

#DEFINE filterAlgo      KALMAN // Welcher Filterungsalgorithmus wird verwendet?

#PARSER PQLHack
#TRANSCFG StreamCars
#CYCLICQUERY
LOGICAL PLAN : 
BROKER(${brokerSourceName}, // Pfad für das Initialisieren des Brokers mit Startdaten (muss noch ein Select rein)
    SET-PREDICTION-OR(
        BROKER-INIT(
            ${sensorSource},
            3
        ),
        ${sensorListName},
        ${sensorListName}:car:posx := ${sensorListName}:car:posx * 2 ;
        WHERE ${sensorListName}:car:id >= 50;
        DEFAULT ${sensorListName}:car:posx := ${sensorListName}:car:posx;
    )
);

ASSOCIATION-SEL(
    ASSOCIATION-EVAL (
        ASSOCIATION-EVAL (
            ASSOCIATION-GEN (
                 SET-PREDICTION-OR(
                        BUFFER(
                            ${sensorSource},
                            Normal
                        ),
                        ${sensorListName},
                        ${sensorListName}:car:posx := ${sensorListName}:car:posx * 2 ;
                        WHERE ${sensorListName}:car:id >= 50;
                        DEFAULT ${sensorListName}:car:posx := ${sensorListName}:car:posx;
                 ),
                 PREDICTION(
                    ${sensorSource}, // Timestamp aus Sensor
                    BUFFER(
	                    BROKER(${brokerSourceName}, // Brokerdaten 
	                            QUEUE( // Zeitgeber für den Broker
	                                   ${sensorSource}
	                            )
	                    ),
	                    Normal 
	                ),
                    ${brokerListName}
                 ),
                 ${sensorListName},
                 ${brokerListName}
            ),
            ${assoAlgo1},
            threshold := 5; operator := LESSEQUAL;,
            ${assoScanned},
            ${assoPedicted}
        ),
        ${assoAlgo2},
        distanceFunction := EUCLIDEAN;,
        ${assoScanned},
        ${assoPedicted}
    ),
    ${assoSource},
    ${assoScanned},
    ${assoPedicted}
);

BROKER( 
    ${brokerSourceName}, 
    EVALUATE(
        ASSOCIATION-SRC(
            ${assoSource},
            2
        ),
        ${assoPedicted},
        FILTER-ESTIMATE(
            FILTER-COVARIANCE(
                FILTER-GAIN(
                    ASSOCIATION-SRC(
                        ${assoSource},
                        1
                    ),
                    ${filterAlgo}
                ),
                ${filterAlgo}
            ),
            ${assoScanned},
            ${assoPedicted},
            ${filterAlgo}
        ),
        ${assoPedicted},
        FILTER-GAIN(
            ${assoSource0},
            ${filterAlgo}
        ),
        ${assoScanned},
        5
    )
);

